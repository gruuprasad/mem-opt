; ModuleID = 'flexnic/fast_flows.c'
source_filename = "flexnic/fast_flows.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.flextcp_pl_mem = type { [16 x [16 x %struct.flextcp_pl_appctx]], [131072 x %struct.flextcp_pl_flowst], [262144 x %struct.flextcp_pl_flowhte], [16 x %struct.flextcp_pl_appctx], [8 x %struct.flextcp_pl_appst], [4096 x i8] }
%struct.flextcp_pl_flowst = type { i64, i64, i64, i32, i32, %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16, %struct.eth_addr, i16, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, [56 x i8] }
%struct.beui32 = type { i32 }
%struct.beui16 = type { i16 }
%struct.eth_addr = type { [6 x i8] }
%struct.flextcp_pl_flowhte = type { i32, i32 }
%struct.flextcp_pl_appctx = type { i64, i64, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.flextcp_pl_appst = type { i16, [31 x i16] }
%struct.dataplane_context = type { %struct.network_thread*, %struct.qman_thread*, %struct.rte_ring*, i16, i32, %struct.rte_epoll_event, [32 x %struct.flextcp_pl_arx], [32 x i16], i16, [64 x %struct.network_buf_handle*], i16, i32, [128 x %struct.network_buf_handle*], i16, i16, i64, i64 }
%struct.network_thread = type { %struct.rte_mempool*, i16 }
%struct.rte_mempool = type { [32 x i8], %union.anon, i8*, %struct.rte_memzone*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.rte_mempool_cache*, i32, %struct.rte_mempool_objhdr_list, i32, %struct.rte_mempool_memhdr_list, [40 x i8] }
%union.anon = type { i8* }
%struct.rte_memzone = type <{ [32 x i8], %union.anon.0, %union.anon.1, i64, i64, i32, i32, i32 }>
%union.anon.0 = type { i64 }
%union.anon.1 = type { i8* }
%struct.rte_mempool_cache = type { i32, i32, i32, [1536 x i8*], [48 x i8] }
%struct.rte_mempool_objhdr_list = type { %struct.rte_mempool_objhdr*, %struct.rte_mempool_objhdr** }
%struct.rte_mempool_objhdr = type { %struct.anon, %struct.rte_mempool*, %union.anon.2 }
%struct.anon = type { %struct.rte_mempool_objhdr* }
%union.anon.2 = type { i64 }
%struct.rte_mempool_memhdr_list = type { %struct.rte_mempool_memhdr*, %struct.rte_mempool_memhdr** }
%struct.rte_mempool_memhdr = type { %struct.anon.3, %struct.rte_mempool*, i8*, %union.anon.4, i64, void (%struct.rte_mempool_memhdr*, i8*)*, i8* }
%struct.anon.3 = type { %struct.rte_mempool_memhdr* }
%union.anon.4 = type { i64 }
%struct.qman_thread = type opaque
%struct.rte_ring = type { [32 x i8], i32, %struct.rte_memzone*, i32, i32, i32, [68 x i8], %struct.rte_ring_headtail, [116 x i8], %struct.rte_ring_headtail, [116 x i8] }
%struct.rte_ring_headtail = type { i32, i32, i32 }
%struct.rte_epoll_event = type { i32, i32, i32, %struct.rte_epoll_data }
%struct.rte_epoll_data = type { i32, i8*, void (i32, i8*)*, i8* }
%struct.flextcp_pl_arx = type { %union.anon.5, i8 }
%union.anon.5 = type { [31 x i8] }
%struct.network_buf_handle = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ether_addr = type { [6 x i8] }
%struct.obj_hdr = type { %struct.beui32, %struct.beui16, i8, i8, [0 x i8] }
%struct.pkt_tcp = type <{ %struct.eth_hdr, %struct.ip_hdr, %struct.tcp_hdr }>
%struct.eth_hdr = type { %struct.eth_addr, %struct.eth_addr, %struct.beui16 }
%struct.ip_hdr = type { i8, i8, %struct.beui16, %struct.beui16, %struct.beui16, i8, i8, i16, %struct.beui32, %struct.beui32 }
%struct.tcp_hdr = type { %struct.beui16, %struct.beui16, %struct.beui32, %struct.beui32, i16, %struct.beui16, i16, %struct.beui16 }
%struct.tcp_timestamp_opt = type <{ i8, i8, %struct.beui32, %struct.beui32 }>
%struct.tcp_opts = type { %struct.tcp_timestamp_opt* }
%struct.rte_mbuf = type { [0 x i8*], i8*, %union.anon.6, [0 x i64], i16, %union.anon.7, i16, i16, i64, [0 x i8*], %union.anon.8, i32, i16, i16, %union.anon.12, i16, i16, i64, [0 x i8*], %union.anon.17, %struct.rte_mempool*, %struct.rte_mbuf*, %union.anon.18, i16, i16, i32, [24 x i8] }
%union.anon.6 = type { i64 }
%union.anon.7 = type { %struct.rte_atomic16_t }
%struct.rte_atomic16_t = type { i16 }
%union.anon.8 = type { i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %union.anon.14, i32 }
%union.anon.14 = type { i32 }
%union.anon.17 = type { i8* }
%union.anon.18 = type { i64 }
%struct.flextcp_pl_arx_connupdate = type <{ i64, i32, i32, i32, i8 }>
%struct.flow_key = type { %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16 }
%union.anon.20 = type { i64 }
%union.anon.21 = type { i64 }
%struct.__loadu_si128 = type { <2 x i64> }
%struct.__storeu_si128 = type { <2 x i64> }

@pl_memory = external dso_local global %struct.flextcp_pl_mem*, align 8
@ctxs = external dso_local global %struct.dataplane_context**, align 8
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [42 x i8] c"fast_flows_qman: rte_ring_enqueue failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"flast_flows_qman: qman_set clear failed, UNEXPECTED\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"fast_flows_qman: bump not on object boundary\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"fast_flows_qman: header does not fit in first segment\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"flast_flows_qman: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"len > 0\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"flexnic/fast_flows.c\00", align 1
@__PRETTY_FUNCTION__.fast_flows_qman = private unnamed_addr constant [97 x i8] c"int fast_flows_qman(struct dataplane_context *, uint32_t, struct network_buf_handle *, uint32_t)\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"fast_flows_qman_fwd: qman_set failed, UNEXPECTED\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"dma_krx_pkt_fastpath: slowpath because of state\0A\00", align 1
@.str.9 = private unnamed_addr constant [55 x i8] c"dma_krx_pkt_fastpath: slow path because of flags (%x)\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"fast_flows_packet: data after FIN dropped\0A\00", align 1
@.str.11 = private unnamed_addr constant [68 x i8] c"dma_krx_pkt_fastpath: incomplete object header (payload=%u, dl=%u)\0A\00", align 1
@.str.12 = private unnamed_addr constant [73 x i8] c"dma_krx_pkt_fastpath: invalid object header magic (got=%x, expected=%x)\0A\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"fs->db_id < FLEXNIC_PL_APPCTX_NUM\00", align 1
@__PRETTY_FUNCTION__.fast_flows_packet = private unnamed_addr constant [116 x i8] c"int fast_flows_packet(struct dataplane_context *, struct network_buf_handle *, void *, struct tcp_opts *, uint32_t)\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"i < FLEXNIC_PL_APPST_NUM\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"appst->ctx_num > 0\00", align 1
@.str.16 = private unnamed_addr constant [43 x i8] c"appst->ctx_num <= FLEXNIC_PL_APPST_CTX_NUM\00", align 1
@.str.17 = private unnamed_addr constant [78 x i8] c"dma_krx_pkt_fastpath: dstlen longer than supported (got %u, support up to 8)\0A\00", align 1
@.str.18 = private unnamed_addr constant [87 x i8] c"dma_krx_pkt_fastpath: steer_id larger than number of contexts (got %lu, have %u cxts)\0A\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"i < FLEXNIC_PL_APPCTX_NUM\00", align 1
@.str.20 = private unnamed_addr constant [77 x i8] c"dma_krx_pkt_fastpath: more than 1 object in segment (payload=%u, objrem=%u)\0A\00", align 1
@.str.21 = private unnamed_addr constant [29 x i8] c"fs->rx_next_pos < fs->rx_len\00", align 1
@.str.22 = private unnamed_addr constant [53 x i8] c"fast_flows_packet: ignored fin because out of order\0A\00", align 1
@.str.23 = private unnamed_addr constant [50 x i8] c"fast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.24 = private unnamed_addr constant [51 x i8] c"flast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.25 = private unnamed_addr constant [53 x i8] c"fast_flows_bump: tx bump while TX is already closed\0A\00", align 1
@.str.26 = private unnamed_addr constant [44 x i8] c"fast_flows_bump: tx eos without dummy byte\0A\00", align 1
@.str.27 = private unnamed_addr constant [49 x i8] c"flast_flows_bump: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"prefetch\00", section "llvm.metadata"
@.str.29 = private unnamed_addr constant [21 x i8] c"flexnic/fast_flows.c\00", section "llvm.metadata"
@.str.30 = private unnamed_addr constant [10 x i8] c"tas_batch\00", section "llvm.metadata"
@crc32_alg = internal global i8 1, align 1
@.str.31 = private unnamed_addr constant [57 x i8] c"addr + len >= addr && addr + len <= FLEXNIC_DMA_MEM_SIZE\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"flexnic/dma.h\00", align 1
@__PRETTY_FUNCTION__.dma_pointer = private unnamed_addr constant [37 x i8] c"void *dma_pointer(uintptr_t, size_t)\00", align 1
@dma_mem = external dso_local global i8*, align 8
@.str.33 = private unnamed_addr constant [35 x i8] c"hlen=%u opts_len=%u len=%u so=%zu\0A\00", align 1
@.str.34 = private unnamed_addr constant [44 x i8] c"parse_options: opt_avail=%u kind=%u off=%u\0A\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"parse_options: opt_len=%u so=%zu\0A\00", align 1
@crc32c_tables = internal constant [8 x [256 x i32]] [[256 x i32] [i32 0, i32 -227835133, i32 -516198153, i32 324072436, i32 -946170081, i32 904991772, i32 648144872, i32 -724933397, i32 -1965467441, i32 2024987596, i32 1809983544, i32 -1719030981, i32 1296289744, i32 -1087877933, i32 -1401372889, i32 1578318884, i32 274646895, i32 -499825556, i32 -244992104, i32 51262619, i32 -675000208, i32 632279923, i32 922689671, i32 -996891772, i32 -1702387808, i32 1760304291, i32 2075979607, i32 -1982370732, i32 1562183871, i32 -1351185476, i32 -1138329528, i32 1313733451, i32 549293790, i32 -757723683, i32 -1048117719, i32 871202090, i32 -416867903, i32 357341890, i32 102525238, i32 -193467851, i32 -1436232175, i32 1477399826, i32 1264559846, i32 -1187764763, i32 1845379342, i32 -1617575411, i32 -1933233671, i32 2125378298, i32 820201905, i32 -1031222606, i32 -774358714, i32 598981189, i32 -143008082, i32 85089709, i32 373468761, i32 -467063462, i32 -1170599554, i32 1213305469, i32 1526817161, i32 -1452612982, i32 2107672161, i32 -1882520222, i32 -1667500394, i32 1861252501, i32 1098587580, i32 -1290756417, i32 -1606390453, i32 1378610760, i32 -2032039261, i32 1955203488, i32 1742404180, i32 -1783531177, i32 -878557837, i32 969524848, i32 714683780, i32 -655182201, i32 205050476, i32 -28094097, i32 -318528869, i32 526918040, i32 1361435347, i32 -1555146288, i32 -1340167644, i32 1114974503, i32 -1765847604, i32 1691668175, i32 2005155131, i32 -2047885768, i32 -604208612, i32 697762079, i32 986182379, i32 -928222744, i32 476452099, i32 -301099520, i32 -44210700, i32 255256311, i32 1640403810, i32 -1817374623, i32 -2130844779, i32 1922457750, i32 -1503918979, i32 1412925310, i32 1197962378, i32 -1257441399, i32 -350237779, i32 427051182, i32 170179418, i32 -129025959, i32 746937522, i32 -554770511, i32 -843174843, i32 1070968646, i32 1905808397, i32 -2081171698, i32 -1868356358, i32 1657317369, i32 -1241332974, i32 1147748369, i32 1463399397, i32 -1521340186, i32 -79622974, i32 153784257, i32 444234805, i32 -401473738, i32 1021025245, i32 -827320098, i32 -572462294, i32 797665321, i32 -2097792136, i32 1889384571, i32 1674398607, i32 -1851340660, i32 1164749927, i32 -1224265884, i32 -1537745776, i32 1446797203, i32 137323447, i32 -96149324, i32 -384560320, i32 461344835, i32 -810158936, i32 1037989803, i32 781091935, i32 -588970148, i32 -1834419177, i32 1623424788, i32 1939049696, i32 -2114449437, i32 1429367560, i32 -1487280117, i32 -1274471425, i32 1180866812, i32 410100952, i32 -367384613, i32 -112536529, i32 186734380, i32 -538233913, i32 763408580, i32 1053836080, i32 -860110797, i32 -1572096602, i32 1344288421, i32 1131464017, i32 -1323612590, i32 1708204729, i32 -1749376582, i32 -2065018290, i32 1988219213, i32 680717673, i32 -621187478, i32 -911630946, i32 1002577565, i32 -284657034, i32 493091189, i32 238226049, i32 -61306494, i32 -1307217207, i32 1082061258, i32 1395524158, i32 -1589280451, i32 1972364758, i32 -2015074603, i32 -1800104671, i32 1725896226, i32 952904198, i32 -894981883, i32 -638100751, i32 731699698, i32 -11092711, i32 222117402, i32 510512622, i32 -335130899, i32 -1014159676, i32 837199303, i32 582374963, i32 -790768336, i32 68661723, i32 -159632680, i32 -450051796, i32 390545967, i32 1230274059, i32 -1153434360, i32 -1469116676, i32 1510247935, i32 -1899042540, i32 2091215383, i32 1878366691, i32 -1650582816, i32 -741088853, i32 565732008, i32 854102364, i32 -1065151905, i32 340358836, i32 -433916489, i32 -177076669, i32 119113024, i32 1493875044, i32 -1419691417, i32 -1204696685, i32 1247431312, i32 -1634718085, i32 1828433272, i32 2141937292, i32 -1916740209, i32 -483350502, i32 291187481, i32 34330861, i32 -262120466, i32 615137029, i32 -691946490, i32 -980332558, i32 939183345, i32 1776939221, i32 -1685949482, i32 -1999470558, i32 2058945313, i32 -1368168502, i32 1545135305, i32 1330124605, i32 -1121741762, i32 -210866315, i32 17165430, i32 307568514, i32 -532767615, i32 888469610, i32 -962626711, i32 -707819363, i32 665062302, i32 2042050490, i32 -1948470087, i32 -1735637171, i32 1793573966, i32 -1104306011, i32 1279665062, i32 1595330642, i32 -1384295599], [256 x i32] [i32 0, i32 329422967, i32 658845934, i32 887597209, i32 1317691868, i32 1562966443, i32 1775194418, i32 2054015301, i32 -1659583560, i32 -1900651569, i32 -1169034410, i32 -1443665119, i32 -744578460, i32 -1069794797, i32 -186936694, i32 -411497731, i32 1069937025, i32 744974838, i32 411091311, i32 186800408, i32 1901039709, i32 1659701290, i32 1443537075, i32 1168652484, i32 -1563348423, i32 -1317819826, i32 -2053897513, i32 -1774806368, i32 -329559067, i32 -406638, i32 -887201013, i32 -658703492, i32 2139874050, i32 1814657909, i32 1489949676, i32 1265388443, i32 822182622, i32 581114537, i32 373600816, i32 98970183, i32 -492887878, i32 -247613235, i32 -975564716, i32 -696743901, i32 -1407893146, i32 -1078470383, i32 -1957662328, i32 -1728910849, i32 1078858371, i32 1408010996, i32 1728782957, i32 1957280282, i32 247755615, i32 493284136, i32 696337329, i32 975428550, i32 -581250757, i32 -822589108, i32 -98573867, i32 -373458526, i32 -1815039769, i32 -2140002160, i32 -1265270775, i32 -1489561474, i32 -15219196, i32 -323658125, i32 -665651478, i32 -873435491, i32 -1315067944, i32 -1572913233, i32 -1764190410, i32 -2055598271, i32 1644365244, i32 1906417099, i32 1162229074, i32 1457827109, i32 747201632, i32 1059847191, i32 197940366, i32 409914617, i32 -1059965051, i32 -747589646, i32 -409532565, i32 -197812452, i32 -1906813351, i32 -1644507602, i32 -1457690953, i32 -1161822528, i32 1573319741, i32 1315204170, i32 2055455955, i32 1763794084, i32 323786209, i32 15601046, i32 873047311, i32 665533816, i32 -2137250554, i32 -1824604815, i32 -1478945304, i32 -1266971233, i32 -837401382, i32 -575349587, i32 -380406732, i32 -84808637, i32 495511230, i32 237665993, i32 986568272, i32 695160359, i32 1392674658, i32 1084235541, i32 1950857100, i32 1743073275, i32 -1084631929, i32 -1392816912, i32 -1742936983, i32 -1950450658, i32 -237783717, i32 -495899348, i32 -694778443, i32 -986440254, i32 575477567, i32 837783368, i32 84420561, i32 380288934, i32 1825011427, i32 2137386644, i32 1266828813, i32 1478549114, i32 -71042311, i32 -396270962, i32 -595146217, i32 -819703200, i32 -1253467355, i32 -1494547630, i32 -1844663349, i32 -2119289924, i32 1725380929, i32 1970643254, i32 1100089775, i32 1378914776, i32 677206173, i32 1006616810, i32 253257843, i32 482013188, i32 -1006236808, i32 -677080305, i32 -482133098, i32 -253647903, i32 -1970509148, i32 -1724976429, i32 -1379313078, i32 -1100234179, i32 1494403264, i32 1253068983, i32 2119694382, i32 1844797529, i32 395880732, i32 70922603, i32 819829234, i32 595526021, i32 -2075649541, i32 -1746239092, i32 -1559418603, i32 -1330663070, i32 -893224921, i32 -647962544, i32 -309901111, i32 -31076162, i32 425515587, i32 184435252, i32 1041885869, i32 767259354, i32 1473690527, i32 1148462056, i32 1888717681, i32 1664160518, i32 -1148327814, i32 -1473286131, i32 -1664558956, i32 -1888861981, i32 -184055386, i32 -425389615, i32 -767379128, i32 -1042276033, i32 647572418, i32 893105077, i32 31202092, i32 310281051, i32 1746094622, i32 2075251305, i32 1331067632, i32 1559552647, i32 81018109, i32 393651338, i32 596708371, i32 808686692, i32 1247698209, i32 1509737814, i32 1830514127, i32 2126116280, i32 -1715404987, i32 -1973262542, i32 -1098526805, i32 -1389930532, i32 -682975591, i32 -991426834, i32 -267407753, i32 -475187712, i32 991022460, i32 682841355, i32 475331986, i32 267806181, i32 1973136544, i32 1715025111, i32 1390320718, i32 1098646585, i32 -1509617980, i32 -1247308109, i32 -2126496214, i32 -1830640035, i32 -393253096, i32 -80873617, i32 -808820746, i32 -597112959, i32 2069880831, i32 1761429384, i32 1545269009, i32 1337489254, i32 903200291, i32 645342804, i32 311463629, i32 20059834, i32 -431285177, i32 -169245648, i32 -1056035671, i32 -760433442, i32 -1463714405, i32 -1151080980, i32 -1887154827, i32 -1675176702, i32 1150955134, i32 1463334409, i32 1675566736, i32 1887274727, i32 168841122, i32 431151061, i32 760577868, i32 1056433979, i32 -644944442, i32 -903055951, i32 -20194008, i32 -311868065, i32 -1761309670, i32 -2069490579, i32 -1337869068, i32 -1545395069], [256 x i32] [i32 0, i32 -1522429314, i32 1332695565, i32 -366034829, i32 -1629576166, i32 1000289892, i32 -776866281, i32 1961911401, i32 944848581, i32 -1659851589, i32 2000579784, i32 -763363658, i32 -1500538145, i32 63834273, i32 -371144494, i32 1285642924, i32 1889697162, i32 -706482188, i32 1070411655, i32 -1702052359, i32 -293807728, i32 1262308334, i32 -1592554595, i32 72489443, i32 1223902031, i32 -307048143, i32 127668546, i32 -1562541252, i32 -701634731, i32 1936487723, i32 -1723681448, i32 1006839590, i32 -515572972, i32 1141205354, i32 -1372870375, i32 191511399, i32 2140823310, i32 -623129232, i32 821366019, i32 -1783324803, i32 -652884527, i32 2085902255, i32 -1770350628, i32 859506082, i32 1204511179, i32 -494210123, i32 144978886, i32 -1377459784, i32 -1847163234, i32 883365088, i32 -561392493, i32 2076722925, i32 255337092, i32 -1434865414, i32 1079472265, i32 -451484937, i32 -1447577509, i32 217459237, i32 -421991850, i32 1134131240, i32 929635393, i32 -1842835905, i32 2013679180, i32 -582493134, i32 -949649191, i32 1646531239, i32 -2012556588, i32 759906474, i32 1505436867, i32 -50678083, i32 383022798, i32 -1282022224, i32 -13320676, i32 1517628514, i32 -1336153071, i32 354057839, i32 1642732038, i32 -995391368, i32 780486667, i32 -1950033291, i32 -1211630253, i32 310800173, i32 -123162786, i32 1575566624, i32 689527113, i32 -1940337865, i32 1719012164, i32 -1019766470, i32 -1885944938, i32 718754280, i32 -1057386085, i32 1706558437, i32 289957772, i32 -1274415630, i32 1579627905, i32 -77158401, i32 639728589, i32 -2090800717, i32 1766730176, i32 -871384130, i32 -1191190569, i32 499010985, i32 -141521446, i32 1389436836, i32 510674184, i32 -1154361482, i32 1360992005, i32 -195132037, i32 -2136022766, i32 636449644, i32 -809389281, i32 1786782049, i32 1451427399, i32 -205351879, i32 434918474, i32 -1129462220, i32 -933387683, i32 1830563875, i32 -2026704816, i32 577987118, i32 1859270786, i32 -879514884, i32 566061711, i32 -2063795983, i32 -267608936, i32 1431113446, i32 -1083978091, i32 438459627, i32 -1960347837, i32 778495293, i32 -1001904818, i32 1628026672, i32 368694105, i32 -1330101977, i32 1519812948, i32 -2682070, i32 -1284093562, i32 372759544, i32 -65463413, i32 1498974709, i32 766045596, i32 -1997963294, i32 1657257873, i32 -947507729, i32 -75167031, i32 1589942455, i32 -1259710268, i32 296471226, i32 1700507347, i32 -1072022355, i32 708115678, i32 -1888129376, i32 -1009503220, i32 1721083506, i32 -1933875711, i32 704312447, i32 1560973334, i32 -129301912, i32 308658715, i32 -1222356891, i32 1784908887, i32 -819847639, i32 621600346, i32 -2142417884, i32 -188929971, i32 1375517235, i32 -1143834048, i32 513009726, i32 1379054226, i32 -143449876, i32 492691615, i32 -1206095135, i32 -856942968, i32 1772979446, i32 -2088549243, i32 650303227, i32 448917981, i32 -1082104925, i32 1437508560, i32 -252759634, i32 -2078321209, i32 559859641, i32 -881850422, i32 1848743348, i32 579915544, i32 -2016322202, i32 1845468437, i32 -927068309, i32 -1135711486, i32 420477308, i32 -215926513, i32 1449175921, i32 1279457178, i32 -385653276, i32 53323159, i32 -1502857239, i32 -761506944, i32 2011021822, i32 -1645018739, i32 951227379, i32 1947453791, i32 -783131871, i32 998021970, i32 -1640167124, i32 -355635899, i32 1334640443, i32 -1516093624, i32 14921014, i32 1021348368, i32 -1717495698, i32 1938806813, i32 -691123613, i32 -1572983286, i32 125811828, i32 -313426937, i32 1209069177, i32 78755029, i32 -1578096981, i32 1272899288, i32 -291539802, i32 -1703997233, i32 1060012721, i32 -721403198, i32 1883361468, i32 -1392112498, i32 138911472, i32 -496411005, i32 1193856253, i32 869836948, i32 -1768342806, i32 2092432025, i32 -638162713, i32 -1789447605, i32 806789173, i32 -633839546, i32 2138698296, i32 193566289, i32 -1362623441, i32 1155974236, i32 -509127134, i32 -576425724, i32 2028331898, i32 -1832180983, i32 931836279, i32 1132123422, i32 -432322720, i32 202737427, i32 -1454107283, i32 -436908095, i32 1085595071, i32 -1432740404, i32 266047410, i32 2066475995, i32 -563447387, i32 876919254, i32 -1861932120], [256 x i32] [i32 0, i32 -582636872, i32 -1083759743, i32 1646430521, i32 2065838579, i32 -1503159477, i32 -1002106254, i32 419477706, i32 -163290138, i32 721537374, i32 1227047015, i32 -1805194529, i32 -1922674155, i32 1344534701, i32 838955412, i32 -280700116, i32 -379276995, i32 874584965, i32 1443074748, i32 -1958332412, i32 -1840873266, i32 1325607542, i32 757179215, i32 -261879305, i32 522244827, i32 -1033537437, i32 -1605897894, i32 2097306594, i32 1677910824, i32 -1186510448, i32 -614088535, i32 102787601, i32 -685435765, i32 174112307, i32 1749169930, i32 -1257792078, i32 -1408817800, i32 1900187584, i32 325060345, i32 -836391871, i32 560035693, i32 -64692779, i32 -1643752212, i32 1128529492, i32 1514358430, i32 -2029589466, i32 -450599649, i32 945934247, i32 1044489654, i32 -486273266, i32 -2128181705, i32 1550003343, i32 1164153925, i32 -1742323971, i32 -100354108, i32 658578812, i32 -939145648, i32 356543720, i32 2002970065, i32 -1440264343, i32 -1289226333, i32 1851940123, i32 205575202, i32 -788169062, i32 -1415159833, i32 1994650975, i32 348224614, i32 -914041122, i32 -796627436, i32 230802604, i32 1877167509, i32 -1297684691, i32 1575107585, i32 -2136500551, i32 -494592128, i32 1069593912, i32 650120690, i32 -75126966, i32 -1717096845, i32 1155695819, i32 1120071386, i32 -1618525086, i32 -39465637, i32 551577571, i32 971038505, i32 -458918511, i32 -2037908312, i32 1539462672, i32 -1266250436, i32 1774397316, i32 199339709, i32 -693894139, i32 -811287345, i32 316741239, i32 1891868494, i32 -1383713290, i32 2088979308, i32 -1580801580, i32 -1008441107, i32 513917525, i32 128023199, i32 -622538713, i32 -1194960610, i32 1703146406, i32 -1966659446, i32 1468170802, i32 899681035, i32 -387604045, i32 -236643975, i32 748729281, i32 1317157624, i32 -1815637952, i32 -1779959215, i32 1218597097, i32 713087440, i32 -138054808, i32 -289027166, i32 864051482, i32 1369630755, i32 -1931001189, i32 1671666103, i32 -1092209905, i32 -591087050, i32 25235598, i32 411150404, i32 -977009924, i32 -1478063163, i32 2057511293, i32 1386268991, i32 -1880792185, i32 -305665346, i32 813842438, i32 696449228, i32 -188263820, i32 -1763321011, i32 1268806133, i32 -1528517927, i32 2040594529, i32 461605208, i32 -960093216, i32 -540632278, i32 42152338, i32 1621211307, i32 -1109126637, i32 -1144752126, i32 1719784122, i32 77814659, i32 -639176389, i32 -1058649615, i32 497279817, i32 2139187824, i32 -1564163896, i32 1300241380, i32 -1866092196, i32 -219727771, i32 799183581, i32 916597271, i32 -337149777, i32 -1983575658, i32 1417716526, i32 -2054824524, i32 1489008396, i32 987954741, i32 -408464243, i32 -22549433, i32 602031871, i32 1103155142, i32 -1668979330, i32 1942077010, i32 -1367075606, i32 -861495853, i32 300103531, i32 149131169, i32 -710531815, i32 -1216041952, i32 1791035032, i32 1826712713, i32 -1314601423, i32 -746172664, i32 247719344, i32 398679418, i32 -897124414, i32 -1465614597, i32 1977734211, i32 -1700458641, i32 1205904855, i32 633482478, i32 -125335978, i32 -511230308, i32 1019384868, i32 1591745821, i32 -2086291547, i32 -117008680, i32 608386144, i32 1180808537, i32 -1692131359, i32 -2111527125, i32 1600195987, i32 1027835050, i32 -536465902, i32 256046398, i32 -771268730, i32 -1339697473, i32 1835039751, i32 1952498893, i32 -1457164683, i32 -888674484, i32 373444084, i32 274868197, i32 -853045923, i32 -1358625692, i32 1916841692, i32 1799362070, i32 -1241138002, i32 -735627881, i32 157458223, i32 -433699837, i32 996404923, i32 1497458562, i32 -2080060102, i32 -1660652048, i32 1078058824, i32 576935537, i32 -14222135, i32 774079059, i32 -211408661, i32 -1857773102, i32 1275136874, i32 1426174880, i32 -2008803048, i32 -362377183, i32 925055641, i32 -664280651, i32 86133517, i32 1728102964, i32 -1169856372, i32 -1555705786, i32 2113960702, i32 472052679, i32 -1050191489, i32 -951635090, i32 436378070, i32 2015367407, i32 -1520059817, i32 -1134230883, i32 1629530149, i32 50471196, i32 -565736540, i32 822300808, i32 -330892752, i32 -1906019575, i32 1394727345, i32 1243701627, i32 -1755001917, i32 -179944710, i32 671344706], [256 x i32] [i32 0, i32 940666796, i32 1881333592, i32 1211347188, i32 -532300112, i32 -665530084, i32 -1872272920, i32 -1468658108, i32 -983102575, i32 -42572739, i32 -1253714743, i32 -1923826843, i32 623031585, i32 489937549, i32 1426090617, i32 1829832149, i32 -1893572141, i32 -1221390721, i32 -16728437, i32 -955133657, i32 1869078371, i32 1467396303, i32 524615739, i32 659845015, i32 1246063170, i32 1918109166, i32 979875098, i32 41343670, i32 -1442786062, i32 -1844331682, i32 -635302998, i32 -499948538, i32 464041303, i32 599382779, i32 1804233231, i32 1402668451, i32 -68351001, i32 -1006869429, i32 -1949313857, i32 -1277248749, i32 -556810554, i32 -421605014, i32 -1360174690, i32 -1761866190, i32 1049231478, i32 110850010, i32 1319690030, i32 1991880834, i32 -1802840956, i32 -1399080152, i32 -458748964, i32 -591829904, i32 1959750196, i32 1289618840, i32 82687340, i32 1023204032, i32 1374543637, i32 1778167993, i32 567214157, i32 434008033, i32 -1314365019, i32 -1984360951, i32 -1047871747, i32 -107228847, i32 928082606, i32 255853826, i32 1198765558, i32 2137184858, i32 -686500834, i32 -284836942, i32 -1489630394, i32 -1624808214, i32 -231317185, i32 -903410029, i32 -2112569753, i32 -1174023733, i32 309583759, i32 711110691, i32 1649475799, i32 1514172283, i32 -1200419971, i32 -2141035311, i32 -934161371, i32 -264193143, i32 1479980493, i32 1613224545, i32 672426645, i32 268764473, i32 2098462956, i32 1157984064, i32 221700020, i32 891793432, i32 -1655587236, i32 -1522478608, i32 -311205628, i32 -714994008, i32 754573305, i32 350793813, i32 1557856417, i32 1690988301, i32 -860069559, i32 -189985051, i32 -1130447343, i32 -2070949443, i32 -375466904, i32 -779109436, i32 -1715729616, i32 -1582472036, i32 165374680, i32 835323252, i32 2046408064, i32 1105779244, i32 -1545880022, i32 -1681206906, i32 -738631310, i32 -337113378, i32 1134428314, i32 2072997686, i32 868016066, i32 195932270, i32 1723643323, i32 1588451863, i32 379480803, i32 781124943, i32 -2030499061, i32 -1092066137, i32 -153365421, i32 -825574401, i32 1856165212, i32 1454619376, i32 511707652, i32 647062952, i32 -1897436180, i32 -1225391040, i32 -20597580, i32 -959128808, i32 -1413095731, i32 -1814777503, i32 -605617771, i32 -470389191, i32 1266704509, i32 1938886609, i32 1000521509, i32 62115977, i32 -511658865, i32 -644752605, i32 -1851626537, i32 -1447885701, i32 29690431, i32 970220947, i32 1911018855, i32 1240906443, i32 619167518, i32 485937330, i32 1422221382, i32 1825837034, i32 -996015698, i32 -55349758, i32 -1266622730, i32 -1936608934, i32 1963614219, i32 1293619111, i32 86556499, i32 1027199231, i32 -1789927749, i32 -1386303209, i32 -445840925, i32 -579047857, i32 -1335006310, i32 -2005138378, i32 -1068518206, i32 -128001170, i32 1344853290, i32 1748613766, i32 537528946, i32 404448734, i32 -98041384, i32 -1036423564, i32 -1978999168, i32 -1306808020, i32 443400040, i32 578605252, i32 1783586864, i32 1381896092, i32 1062144585, i32 123626981, i32 1332598033, i32 2004662973, i32 -552946439, i32 -417604779, i32 -1356305503, i32 -1757871091, i32 1509146610, i32 1642254430, i32 701587626, i32 297799430, i32 -1179254462, i32 -2119733522, i32 -912990694, i32 -242896458, i32 -1667976093, i32 -1534731313, i32 -323589317, i32 -727251817, i32 2094074579, i32 1153459583, i32 217306507, i32 887274023, i32 -690889183, i32 -289361523, i32 -1494023815, i32 -1629327659, i32 915693713, i32 243601213, i32 1186381769, i32 2124927077, i32 330749360, i32 732412444, i32 1670646504, i32 1535468868, i32 -202151168, i32 -874380116, i32 -2083408808, i32 -1144988684, i32 1113262757, i32 2051695881, i32 846845437, i32 174635601, i32 -1575046123, i32 -1710236743, i32 -767792307, i32 -366148383, i32 -2026110668, i32 -1087541608, i32 -148971924, i32 -821055040, i32 1736032132, i32 1600704552, i32 391864540, i32 793382768, i32 -847680650, i32 -177732390, i32 -1118063570, i32 -2058691710, i32 758961606, i32 355318378, i32 1562249886, i32 1695507762, i32 136208615, i32 806293323, i32 2017247167, i32 1076744211, i32 -396632489, i32 -800411141, i32 -1736900337, i32 -1603768669], [256 x i32] [i32 0, i32 -282039527, i32 -611540797, i32 884788186, i32 -1292552329, i32 1573215342, i32 1769576372, i32 -2041971539, i32 1611012127, i32 -1892257018, i32 -1148536612, i32 1421530053, i32 -755814552, i32 1036207217, i32 159354795, i32 -430971726, i32 -1072943042, i32 792484647, i32 461410557, i32 -189727772, i32 1928922953, i32 -1647743920, i32 -1451907190, i32 1178979475, i32 -1609947103, i32 1329218360, i32 2072414434, i32 -1799953413, i32 318709590, i32 -36735921, i32 -915161195, i32 641979532, i32 -2047601011, i32 1791262100, i32 1584969294, i32 -1320624809, i32 922821114, i32 -667858205, i32 -326270663, i32 62777888, i32 -437121390, i32 180512139, i32 1048489553, i32 -783366840, i32 1460091365, i32 -1204333828, i32 -1937008346, i32 1673261631, i32 1173890739, i32 -1429713494, i32 -1636530576, i32 1900342633, i32 -150138428, i32 406682333, i32 746696967, i32 -1011754466, i32 637419180, i32 -892447307, i32 -26042769, i32 289600886, i32 -1760884261, i32 2017157826, i32 1283959064, i32 -1548238335, i32 235166699, i32 -516673294, i32 -712443096, i32 985174065, i32 -1125028708, i32 1405159301, i32 1736297567, i32 -2008176826, i32 1845642228, i32 -2127419155, i32 -1248926921, i32 1522436142, i32 -587762557, i32 868687770, i32 125555776, i32 -397688999, i32 -838308907, i32 557318348, i32 361024278, i32 -88825841, i32 2096979106, i32 -1815267397, i32 -1485702047, i32 1212258168, i32 -1374784566, i32 1094588627, i32 1971507977, i32 -1699563504, i32 486229181, i32 -204787804, i32 -948444034, i32 675778407, i32 -1947185818, i32 1690314367, i32 1350364581, i32 -1085503812, i32 956660241, i32 -701165304, i32 -494282030, i32 230273483, i32 -336177799, i32 80100960, i32 813364666, i32 -548757853, i32 1493393934, i32 -1238169321, i32 -2104507699, i32 1841277396, i32 1274838360, i32 -1530128831, i32 -1871651429, i32 2134947458, i32 -116831697, i32 372842806, i32 579201772, i32 -843742731, i32 737830215, i32 -993391010, i32 -260651644, i32 524725917, i32 -1727049168, i32 1983854889, i32 1115943667, i32 -1380738582, i32 470333398, i32 -214377265, i32 -947644651, i32 682916876, i32 -1359118175, i32 1104014264, i32 1970348130, i32 -1706996869, i32 2081337289, i32 -1824602928, i32 -1484648694, i32 1219650579, i32 -822372162, i32 567014311, i32 360134781, i32 -95988892, i32 -603682840, i32 859106545, i32 126363435, i32 -390575054, i32 1861333151, i32 -2118001786, i32 -1250095012, i32 1515027269, i32 -1140678665, i32 1395848430, i32 1737375540, i32 -2000792531, i32 251111552, i32 -507001959, i32 -713357245, i32 978019162, i32 -1711496869, i32 1993132610, i32 1114636696, i32 -1388287359, i32 722048556, i32 -1002832587, i32 -259705105, i32 531979766, i32 -101009084, i32 382390877, i32 578165127, i32 -851021154, i32 1259310643, i32 -1539316438, i32 -1870450960, i32 2142455273, i32 1508938085, i32 -1228866948, i32 -2105790042, i32 1833720511, i32 -351951342, i32 70634763, i32 814286545, i32 -541495864, i32 972458362, i32 -691608989, i32 -495310407, i32 222970528, i32 -1962689011, i32 1681118484, i32 1351556814, i32 -1077971497, i32 302836797, i32 -46364892, i32 -914338562, i32 649078759, i32 -1594238134, i32 1338617939, i32 2071296905, i32 -1807413104, i32 1913320482, i32 -1657102533, i32 -1450814239, i32 1186349048, i32 -1056980139, i32 802138188, i32 460546966, i32 -196933489, i32 -771695613, i32 1026602778, i32 160201920, i32 -423880743, i32 1626729332, i32 -1882881939, i32 -1149678665, i32 1414078638, i32 -1308179428, i32 1563864837, i32 1770677471, i32 -2034626618, i32 15987563, i32 -272394126, i32 -612412504, i32 877607089, i32 -1745290576, i32 2026410409, i32 1282693747, i32 -1555811990, i32 621661639, i32 -901929250, i32 -25072380, i32 296814109, i32 -134290769, i32 416188854, i32 745685612, i32 -1019074187, i32 1158403544, i32 -1438925119, i32 -1635289829, i32 1907826178, i32 1475660430, i32 -1195073129, i32 -1938265523, i32 1665663316, i32 -452854279, i32 171022048, i32 1049451834, i32 -776128989, i32 938660497, i32 -658327160, i32 -327257518, i32 55449931, i32 -2063079962, i32 1782025983, i32 1586185509, i32 -1313132996], [256 x i32] [i32 0, i32 1745038536, i32 -804890224, i32 -1207601832, i32 -1511995951, i32 -840701671, i32 1978047553, i32 501592201, i32 1311636819, i32 640602523, i32 -1641306941, i32 -165115893, i32 -338872190, i32 -2083646390, i32 1003184402, i32 1405636058, i32 -1671693658, i32 -195504530, i32 1281205046, i32 610177022, i32 968572791, i32 1371018175, i32 -373463321, i32 -2118235601, i32 -764016651, i32 -1166726339, i32 40918629, i32 1785950893, i32 2006368804, i32 529919724, i32 -1483695180, i32 -812402820, i32 1029407677, i32 1431875445, i32 -312616403, i32 -2057373979, i32 -1732557204, i32 -256349532, i32 1220354044, i32 549335860, i32 1937145582, i32 460673574, i32 -1552930946, i32 -881652810, i32 -694764737, i32 -1097492489, i32 110158511, i32 1855180391, i32 -1593804517, i32 -922528301, i32 1896226955, i32 419761219, i32 81837258, i32 1826852866, i32 -723065510, i32 -1125791342, i32 -282229688, i32 -2026985344, i32 1059839448, i32 1462300944, i32 1254965657, i32 583953745, i32 -1697966071, i32 -221760319, i32 2058815354, i32 313797554, i32 -1431216406, i32 -1028492766, i32 -547896661, i32 -1219170717, i32 257006395, i32 1733474291, i32 882571817, i32 1553585889, i32 -459496519, i32 -1935700111, i32 -1854259208, i32 -109505744, i32 1098671720, i32 696208032, i32 -420676132, i32 -1896885996, i32 921347148, i32 1592363140, i32 1124874253, i32 722408645, i32 -1828036195, i32 -83276459, i32 -1463746417, i32 -1061016505, i32 2026330399, i32 281310679, i32 220317022, i32 1696786838, i32 -584606514, i32 -1255886842, i32 1206682823, i32 804235279, i32 -1746215593, i32 -1445473, i32 -502513386, i32 -1978700322, i32 839522438, i32 1510552654, i32 163674516, i32 1640125788, i32 -641261564, i32 -1312551732, i32 -1407075259, i32 -1004367731, i32 2082989525, i32 337955101, i32 -608731551, i32 -1280027991, i32 196159473, i32 1672612665, i32 2119678896, i32 374642552, i32 -1370365408, i32 -967651608, i32 -1785035982, i32 -40259590, i32 1167907490, i32 765458026, i32 813319907, i32 1484352043, i32 -528736397, i32 -2004929605, i32 -177336588, i32 -1653792196, i32 627595108, i32 1298889644, i32 1351535397, i32 948824045, i32 -2138533195, i32 -393494915, i32 -1153174617, i32 -750723217, i32 1799727671, i32 54953727, i32 514012790, i32 1990204094, i32 -828018714, i32 -1499053266, i32 1765143634, i32 20371610, i32 -1187795518, i32 -785350390, i32 -858443389, i32 -1529471669, i32 483616787, i32 1959806171, i32 655886593, i32 1327179209, i32 -149008239, i32 -1625457575, i32 -2097623856, i32 -352591848, i32 1392416064, i32 989706632, i32 -936014519, i32 -1607032447, i32 406050009, i32 1882257425, i32 1842694296, i32 97936464, i32 -1110241016, i32 -707772992, i32 -2045218790, i32 -300196654, i32 1444817290, i32 1042089282, i32 603502027, i32 1274779907, i32 -201397157, i32 -1677868909, i32 1416525807, i32 1013799719, i32 -2073547137, i32 -328531273, i32 -242306498, i32 -1718771978, i32 562621358, i32 1233897318, i32 440634044, i32 1916839540, i32 -901393620, i32 -1572405276, i32 -1079816339, i32 -677354587, i32 1873090301, i32 128334389, i32 -1881601650, i32 -405134010, i32 1608470558, i32 937196758, i32 708430943, i32 1111154839, i32 -96496177, i32 -1841514233, i32 -1040911139, i32 -1443375083, i32 301116749, i32 2045870469, i32 1679044876, i32 202841540, i32 -1273861988, i32 -602848172, i32 327349032, i32 2072109024, i32 -1014715720, i32 -1417181584, i32 -1235077383, i32 -564061647, i32 1717858153, i32 241648545, i32 1571753595, i32 900473523, i32 -1918281749, i32 -441812189, i32 -128988246, i32 -1874008222, i32 675910202, i32 1078640370, i32 -1300067789, i32 -629037317, i32 1652872099, i32 176684907, i32 392318946, i32 2137088810, i32 -949741966, i32 -1352189254, i32 -55609504, i32 -1800643672, i32 749285104, i32 1151992376, i32 1498395313, i32 827104889, i32 -1991644383, i32 -515192855, i32 786002069, i32 1188715613, i32 -18929403, i32 -1763965491, i32 -1959152316, i32 -482698868, i32 1530916052, i32 859619356, i32 1626639814, i32 150446350, i32 -1326263210, i32 -655230818, i32 -988526569, i32 -1390975777, i32 353505671, i32 2098281807], [256 x i32] [i32 0, i32 1228700967, i32 -1837565362, i32 -616265879, i32 555582061, i32 1747058506, i32 -1285195741, i32 -94829308, i32 1111164122, i32 185039357, i32 -800850284, i32 -1719696461, i32 1663469239, i32 706411408, i32 -245465863, i32 -1201536546, i32 -2072639052, i32 -850758509, i32 370078714, i32 1597148893, i32 -1519678503, i32 -329779458, i32 924021143, i32 2117012656, i32 -968028818, i32 -1888391095, i32 1412822816, i32 487164423, i32 -414150909, i32 -1368591836, i32 1965585741, i32 1007945834, i32 218129817, i32 1144789182, i32 -1619484713, i32 -700128528, i32 740157428, i32 1696701139, i32 -1100669510, i32 -145137507, i32 1329291587, i32 101129316, i32 -582771955, i32 -1803557334, i32 1848042286, i32 656055817, i32 -60941984, i32 -1251843001, i32 -1988727763, i32 -1068887798, i32 453940835, i32 1379068740, i32 -1469321664, i32 -514354329, i32 974328846, i32 1932486953, i32 -884119305, i32 -2106518064, i32 1496683193, i32 269086622, i32 -363795814, i32 -1553164355, i32 2015891668, i32 823422451, i32 436259634, i32 1396487701, i32 -2005388932, i32 -1052488613, i32 991775071, i32 1914778744, i32 -1452952815, i32 -530985418, i32 1480314856, i32 285717199, i32 -901565018, i32 -2088810367, i32 2032553349, i32 807022754, i32 -346114101, i32 -1570583828, i32 -1636384122, i32 -682967135, i32 202258632, i32 1160922607, i32 -1083490069, i32 -162054708, i32 756267685, i32 1680852866, i32 -598882724, i32 -1787708549, i32 1312111634, i32 118047029, i32 -45071311, i32 -1267975914, i32 1864941183, i32 638894936, i32 385920683, i32 1581044620, i32 -2055711515, i32 -867948094, i32 907881670, i32 2132890081, i32 -1536829816, i32 -312890449, i32 1429973617, i32 470275926, i32 -951889857, i32 -1904268008, i32 1948657692, i32 1025135931, i32 -429993390, i32 -1352487051, i32 -1820940513, i32 -632628680, i32 17718609, i32 1211244662, i32 -1301600910, i32 -78161835, i32 538173244, i32 1764729371, i32 -783440955, i32 -1737367838, i32 1127569803, i32 168371372, i32 -263183960, i32 -1184080753, i32 1646844902, i32 722773697, i32 872519268, i32 2101209923, i32 -1501991894, i32 -280686323, i32 354161673, i32 1545627950, i32 -2023428537, i32 -833055904, i32 1983550142, i32 1057419161, i32 -465409808, i32 -1384245801, i32 1462178003, i32 505114100, i32 -983569763, i32 -1939630150, i32 -1334337584, i32 -112467209, i32 571434398, i32 1798510777, i32 -1855316547, i32 -665427814, i32 51570675, i32 1244568276, i32 -229860598, i32 -1150228947, i32 1614045508, i32 688397411, i32 -749659801, i32 -1704106944, i32 1093264169, i32 135634446, i32 956429309, i32 1883082458, i32 -1418131021, i32 -498764652, i32 404517264, i32 1361054903, i32 -1973122082, i32 -1017579783, i32 2067461927, i32 839289344, i32 -381547159, i32 -1602326450, i32 1512535370, i32 320538733, i32 -933261564, i32 -2124156381, i32 -1116210615, i32 -196376722, i32 789512199, i32 1714650400, i32 -1670744028, i32 -715782909, i32 236094058, i32 1194262349, i32 -11731309, i32 -1234140236, i32 1832125661, i32 604535290, i32 -565084930, i32 -1754463783, i32 1277789872, i32 85326743, i32 771841366, i32 1732059249, i32 -1132878056, i32 -179971521, i32 253550395, i32 1176543772, i32 -1654381195, i32 -732407726, i32 1815763340, i32 621159595, i32 -29187134, i32 -1216422171, i32 1294457825, i32 68921030, i32 -547413585, i32 -1771873144, i32 -1435020062, i32 -481613371, i32 940551852, i32 1899221899, i32 -1955932529, i32 -1034507352, i32 420621505, i32 1345212902, i32 -397651912, i32 -1586483937, i32 2050271862, i32 856217425, i32 -917384619, i32 -2140295310, i32 1529423899, i32 303387964, i32 587282639, i32 1782400488, i32 -1317420415, i32 -129646682, i32 35437218, i32 1260439429, i32 -1872477972, i32 -648528437, i32 1631206421, i32 671498546, i32 -213727653, i32 -1166099588, i32 1076346488, i32 152814431, i32 -765508554, i32 -1687996143, i32 -1485360773, i32 -297055140, i32 890227509, i32 2083763730, i32 -2039827690, i32 -816394703, i32 336742744, i32 1563309183, i32 -447990367, i32 -1401927546, i32 1999949807, i32 1040757448, i32 -1001277492, i32 -1922184469, i32 1445547394, i32 521482405]], align 16
@__PRETTY_FUNCTION__.dma_read = private unnamed_addr constant [41 x i8] c"void dma_read(uintptr_t, size_t, void *)\00", align 1
@__PRETTY_FUNCTION__.dma_write = private unnamed_addr constant [48 x i8] c"void dma_write(uintptr_t, size_t, const void *)\00", align 1
@.str.36 = private unnamed_addr constant [17 x i8] c"pos < fs->rx_len\00", align 1
@__PRETTY_FUNCTION__.flow_rx_seq_write = private unnamed_addr constant [85 x i8] c"void flow_rx_seq_write(struct flextcp_pl_flowst *, uint32_t, uint16_t, const void *)\00", align 1
@eth_addr = external dso_local global %struct.ether_addr, align 1
@.str.37 = private unnamed_addr constant [43 x i8] c"tx_send: transmit buffer full, unexpected\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @rte_hash_crc_init_alg, i8* null }]
@llvm.global.annotations = appending global [1 x { i8*, i8*, i8*, i32 }] [{ i8*, i8*, i8*, i32 } { i8* bitcast (void (%struct.dataplane_context*, %struct.network_buf_handle**, i8**, i16)* @fast_flows_packet_fss to i8*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i32 1175 }], section "llvm.metadata"
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @rte_hash_crc_init_alg to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_hash_crc_init_alg() #0 {
entry:
  call void @rte_hash_crc_set_alg(i8 zeroext 6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_hash_crc_set_alg(i8 zeroext %alg) #0 {
entry:
  %alg.addr = alloca i8, align 1
  store i8 %alg, i8* %alg.addr, align 1
  %0 = load i8, i8* %alg.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @rte_cpu_get_flag_enabled(i32 83)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i8 2, i8* %alg.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %1 = load i8, i8* %alg.addr, align 1
  store i8 %1, i8* @crc32_alg, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_qman_pf(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queues.addr = alloca i32*, align 8
  %n.addr = alloca i16, align 2
  %i = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32* %queues, i32** %queues.addr, align 8
  store i16 %n, i16* %n.addr, align 2
  store i16 0, i16* %i, align 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i16, i16* %i, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16, i16* %n.addr, align 2
  %conv1 = zext i16 %1 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %2, i32 0, i32 1
  %3 = load i32*, i32** %queues.addr, align 8
  %4 = load i16, i16* %i, align 2
  %idxprom = zext i16 %4 to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %idxprom3 = zext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  %6 = bitcast %struct.flextcp_pl_flowst* %arrayidx4 to i8*
  call void @rte_prefetch0(i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i16, i16* %i, align 2
  %inc = add i16 %7, 1
  store i16 %inc, i16* %i, align 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_prefetch0(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  call void asm sideeffect "prefetcht0 $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %0) #5, !srcloc !2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_qman_pfbufs(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queues.addr = alloca i32*, align 8
  %n.addr = alloca i16, align 2
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %i = alloca i16, align 2
  %p = alloca i8*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32* %queues, i32** %queues.addr, align 8
  store i16 %n, i16* %n.addr, align 2
  store i16 0, i16* %i, align 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i16, i16* %i, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16, i16* %n.addr, align 2
  %conv1 = zext i16 %1 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %2, i32 0, i32 1
  %3 = load i32*, i32** %queues.addr, align 8
  %4 = load i16, i16* %i, align 2
  %idxprom = zext i16 %4 to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %idxprom3 = zext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  store %struct.flextcp_pl_flowst* %arrayidx4, %struct.flextcp_pl_flowst** %fs, align 8
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 2
  %7 = load i64, i64* %tx_base, align 16
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 22
  %9 = load i32, i32* %tx_next_pos, align 4
  %conv5 = zext i32 %9 to i64
  %add = add i64 %7, %conv5
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  store i8* %call, i8** %p, align 8
  %10 = load i8*, i8** %p, align 8
  call void @rte_prefetch0(i8* %10)
  %11 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr i8, i8* %11, i64 64
  call void @rte_prefetch0(i8* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i16, i16* %i, align 2
  %inc = add i16 %12, 1
  store i16 %inc, i16* %i, align 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @dma_pointer(i64 %addr, i64 %len) #0 {
entry:
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  store i64 %addr, i64* %addr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i64, i64* %addr.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i32 56, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.dma_pointer, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** @dma_mem, align 8
  %6 = load i64, i64* %addr.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6
  ret i8* %add.ptr
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fast_flows_qman(%struct.dataplane_context* %ctx, i32 %queue, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %ht.addr.i.i.i.i = alloca %struct.rte_ring_headtail*, align 8
  %old_val.addr.i.i.i.i = alloca i32, align 4
  %new_val.addr.i.i.i.i = alloca i32, align 4
  %single.addr.i.i.i.i = alloca i32, align 4
  %retval.i.i.i.i = alloca i32, align 4
  %r.addr.i.i.i.i = alloca %struct.rte_ring*, align 8
  %is_sp.addr.i.i.i.i = alloca i32, align 4
  %n.addr.i.i.i.i = alloca i32, align 4
  %behavior.addr.i.i.i.i = alloca i32, align 4
  %old_head.addr.i.i.i.i = alloca i32*, align 8
  %new_head.addr.i.i.i.i = alloca i32*, align 8
  %free_entries.addr.i.i.i.i = alloca i32*, align 8
  %capacity.i.i.i.i = alloca i32, align 4
  %max.i.i.i.i = alloca i32, align 4
  %success.i.i.i.i = alloca i32, align 4
  %cons_tail.i.i.i.i = alloca i32, align 4
  %r.addr.i.i.i = alloca %struct.rte_ring*, align 8
  %obj_table.addr.i.i.i = alloca i8**, align 8
  %n.addr.i.i.i = alloca i32, align 4
  %behavior.addr.i.i.i = alloca i32, align 4
  %is_sp.addr.i.i.i = alloca i32, align 4
  %free_space.addr.i.i.i = alloca i32*, align 8
  %prod_head.i.i.i = alloca i32, align 4
  %prod_next.i.i.i = alloca i32, align 4
  %free_entries.i.i.i = alloca i32, align 4
  %i.i.i.i = alloca i32, align 4
  %size.i.i.i = alloca i32, align 4
  %idx.i.i.i = alloca i32, align 4
  %ring.i.i.i = alloca i8**, align 8
  %r.addr.i.i = alloca %struct.rte_ring*, align 8
  %obj_table.addr.i.i = alloca i8**, align 8
  %n.addr.i.i = alloca i32, align 4
  %free_space.addr.i.i = alloca i32*, align 8
  %r.addr.i = alloca %struct.rte_ring*, align 8
  %obj.addr.i = alloca i8*, align 8
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queue.addr = alloca i32, align 4
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts.addr = alloca i32, align 4
  %flow_id = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %oh = alloca %struct.obj_hdr, align 1
  %avail = alloca i32, align 4
  %len = alloca i32, align 4
  %tx_pos = alloca i32, align 4
  %tx_seq = alloca i32, align 4
  %ack = alloca i32, align 4
  %rx_wnd = alloca i32, align 4
  %hdrlen = alloca i32, align 4
  %objlen = alloca i32, align 4
  %new_core = alloca i16, align 2
  %fin = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32 %queue, i32* %queue.addr, align 4
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store i32 %ts, i32* %ts.addr, align 4
  %0 = load i32, i32* %queue.addr, align 4
  store i32 %0, i32* %flow_id, align 4
  %1 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %1, i32 0, i32 1
  %2 = load i32, i32* %flow_id, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8
  store i32 0, i32* %ret, align 4
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %4 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flow_group_steering = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %4, i32 0, i32 5
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %flow_group = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 11
  %6 = load i16, i16* %flow_group, align 4
  %idxprom1 = zext i16 %6 to i64
  %arrayidx2 = getelementptr inbounds [4096 x i8], [4096 x i8]* %flow_group_steering, i64 0, i64 %idxprom1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %7 to i16
  store i16 %conv, i16* %new_core, align 2
  %8 = load i16, i16* %new_core, align 2
  %conv3 = zext i16 %8 to i32
  %9 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %9, i32 0, i32 3
  %10 = load i16, i16* %id, align 8
  %conv4 = zext i16 %10 to i32
  %cmp = icmp ne i32 %conv3, %conv4
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %11 = load %struct.dataplane_context**, %struct.dataplane_context*** @ctxs, align 8
  %12 = load i16, i16* %new_core, align 2
  %idxprom6 = zext i16 %12 to i64
  %arrayidx7 = getelementptr inbounds %struct.dataplane_context*, %struct.dataplane_context** %11, i64 %idxprom6
  %13 = load %struct.dataplane_context*, %struct.dataplane_context** %arrayidx7, align 8
  %qman_fwd_ring = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %13, i32 0, i32 2
  %14 = load %struct.rte_ring*, %struct.rte_ring** %qman_fwd_ring, align 8
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %16 = bitcast %struct.flextcp_pl_flowst* %15 to i8*
  store %struct.rte_ring* %14, %struct.rte_ring** %r.addr.i, align 8
  store i8* %16, i8** %obj.addr.i, align 8
  %17 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i, align 8
  store %struct.rte_ring* %17, %struct.rte_ring** %r.addr.i.i, align 8
  store i8** %obj.addr.i, i8*** %obj_table.addr.i.i, align 8
  store i32 1, i32* %n.addr.i.i, align 4
  store i32* null, i32** %free_space.addr.i.i, align 8
  %18 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i, align 8
  %19 = load i8**, i8*** %obj_table.addr.i.i, align 8
  %20 = load i32, i32* %n.addr.i.i, align 4
  %21 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i, align 8
  %prod.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %21, i32 0, i32 7
  %single.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod.i.i, i32 0, i32 2
  %22 = load i32, i32* %single.i.i, align 8
  %23 = load i32*, i32** %free_space.addr.i.i, align 8
  store %struct.rte_ring* %18, %struct.rte_ring** %r.addr.i.i.i, align 8
  store i8** %19, i8*** %obj_table.addr.i.i.i, align 8
  store i32 %20, i32* %n.addr.i.i.i, align 4
  store i32 0, i32* %behavior.addr.i.i.i, align 4
  store i32 %22, i32* %is_sp.addr.i.i.i, align 4
  store i32* %23, i32** %free_space.addr.i.i.i, align 8
  %24 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i, align 8
  %25 = load i32, i32* %is_sp.addr.i.i.i, align 4
  %26 = load i32, i32* %n.addr.i.i.i, align 4
  %27 = load i32, i32* %behavior.addr.i.i.i, align 4
  store %struct.rte_ring* %24, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  store i32 %25, i32* %is_sp.addr.i.i.i.i, align 4
  store i32 %26, i32* %n.addr.i.i.i.i, align 4
  store i32 %27, i32* %behavior.addr.i.i.i.i, align 4
  store i32* %prod_head.i.i.i, i32** %old_head.addr.i.i.i.i, align 8
  store i32* %prod_next.i.i.i, i32** %new_head.addr.i.i.i.i, align 8
  store i32* %free_entries.i.i.i, i32** %free_entries.addr.i.i.i.i, align 8
  %28 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  %capacity1.i.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %28, i32 0, i32 5
  %29 = load i32, i32* %capacity1.i.i.i.i, align 8
  store i32 %29, i32* %capacity.i.i.i.i, align 4
  %30 = load i32, i32* %n.addr.i.i.i.i, align 4
  store i32 %30, i32* %max.i.i.i.i, align 4
  br label %do.body.i.i.i.i

do.body.i.i.i.i:                                  ; preds = %if.end17.i.i.i.i, %if.then
  %31 = load i32, i32* %max.i.i.i.i, align 4
  store i32 %31, i32* %n.addr.i.i.i.i, align 4
  %32 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  %prod.i.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %32, i32 0, i32 7
  %head.i.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod.i.i.i.i, i32 0, i32 0
  %33 = load volatile i32, i32* %head.i.i.i.i, align 128
  %34 = load i32*, i32** %old_head.addr.i.i.i.i, align 8
  store i32 %33, i32* %34, align 4
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  %35 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  %cons.i.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %35, i32 0, i32 9
  %tail.i.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %cons.i.i.i.i, i32 0, i32 1
  %36 = load volatile i32, i32* %tail.i.i.i.i, align 4
  store i32 %36, i32* %cons_tail.i.i.i.i, align 4
  %37 = load i32, i32* %capacity.i.i.i.i, align 4
  %38 = load i32, i32* %cons_tail.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %37, %38
  %39 = load i32*, i32** %old_head.addr.i.i.i.i, align 8
  %40 = load i32, i32* %39, align 4
  %sub.i.i.i.i = sub i32 %add.i.i.i.i, %40
  %41 = load i32*, i32** %free_entries.addr.i.i.i.i, align 8
  store i32 %sub.i.i.i.i, i32* %41, align 4
  %42 = load i32, i32* %n.addr.i.i.i.i, align 4
  %43 = load i32*, i32** %free_entries.addr.i.i.i.i, align 8
  %44 = load i32, i32* %43, align 4
  %cmp.i.i.i.i = icmp ugt i32 %42, %44
  %conv.i.i.i.i = zext i1 %cmp.i.i.i.i to i32
  %conv3.i.i.i.i = sext i32 %conv.i.i.i.i to i64
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %if.end.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %do.body.i.i.i.i
  %45 = load i32, i32* %behavior.addr.i.i.i.i, align 4
  %cmp4.i.i.i.i = icmp eq i32 %45, 0
  br i1 %cmp4.i.i.i.i, label %cond.true.i.i.i.i, label %cond.false.i.i.i.i

cond.true.i.i.i.i:                                ; preds = %if.then.i.i.i.i
  br label %cond.end.i.i.i.i

cond.false.i.i.i.i:                               ; preds = %if.then.i.i.i.i
  %46 = load i32*, i32** %free_entries.addr.i.i.i.i, align 8
  %47 = load i32, i32* %46, align 4
  br label %cond.end.i.i.i.i

cond.end.i.i.i.i:                                 ; preds = %cond.false.i.i.i.i, %cond.true.i.i.i.i
  %cond.i.i.i.i = phi i32 [ 0, %cond.true.i.i.i.i ], [ %47, %cond.false.i.i.i.i ]
  store i32 %cond.i.i.i.i, i32* %n.addr.i.i.i.i, align 4
  br label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %cond.end.i.i.i.i, %do.body.i.i.i.i
  %48 = load i32, i32* %n.addr.i.i.i.i, align 4
  %cmp6.i.i.i.i = icmp eq i32 %48, 0
  br i1 %cmp6.i.i.i.i, label %if.then8.i.i.i.i, label %if.end9.i.i.i.i

if.then8.i.i.i.i:                                 ; preds = %if.end.i.i.i.i
  store i32 0, i32* %retval.i.i.i.i, align 4
  br label %__rte_ring_move_prod_head.exit.i.i.i

if.end9.i.i.i.i:                                  ; preds = %if.end.i.i.i.i
  %49 = load i32*, i32** %old_head.addr.i.i.i.i, align 8
  %50 = load i32, i32* %49, align 4
  %51 = load i32, i32* %n.addr.i.i.i.i, align 4
  %add10.i.i.i.i = add i32 %50, %51
  %52 = load i32*, i32** %new_head.addr.i.i.i.i, align 8
  store i32 %add10.i.i.i.i, i32* %52, align 4
  %53 = load i32, i32* %is_sp.addr.i.i.i.i, align 4
  %tobool11.i.i.i.i = icmp ne i32 %53, 0
  br i1 %tobool11.i.i.i.i, label %if.then12.i.i.i.i, label %if.else.i.i.i.i

if.then12.i.i.i.i:                                ; preds = %if.end9.i.i.i.i
  %54 = load i32*, i32** %new_head.addr.i.i.i.i, align 8
  %55 = load i32, i32* %54, align 4
  %56 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  %prod13.i.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %56, i32 0, i32 7
  %head14.i.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod13.i.i.i.i, i32 0, i32 0
  store volatile i32 %55, i32* %head14.i.i.i.i, align 128
  store i32 1, i32* %success.i.i.i.i, align 4
  br label %if.end17.i.i.i.i

if.else.i.i.i.i:                                  ; preds = %if.end9.i.i.i.i
  %57 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i.i, align 8
  %prod15.i.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %57, i32 0, i32 7
  %head16.i.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod15.i.i.i.i, i32 0, i32 0
  %58 = load i32*, i32** %old_head.addr.i.i.i.i, align 8
  %59 = load i32, i32* %58, align 4
  %60 = load i32*, i32** %new_head.addr.i.i.i.i, align 8
  %61 = load i32, i32* %60, align 4
  %call.i.i.i.i = call i32 @rte_atomic32_cmpset(i32* %head16.i.i.i.i, i32 %59, i32 %61) #5
  store i32 %call.i.i.i.i, i32* %success.i.i.i.i, align 4
  br label %if.end17.i.i.i.i

if.end17.i.i.i.i:                                 ; preds = %if.else.i.i.i.i, %if.then12.i.i.i.i
  %62 = load i32, i32* %success.i.i.i.i, align 4
  %cmp18.i.i.i.i = icmp eq i32 %62, 0
  %conv19.i.i.i.i = zext i1 %cmp18.i.i.i.i to i32
  %conv20.i.i.i.i = sext i32 %conv19.i.i.i.i to i64
  br i1 %cmp18.i.i.i.i, label %do.body.i.i.i.i, label %do.end22.i.i.i.i

do.end22.i.i.i.i:                                 ; preds = %if.end17.i.i.i.i
  %63 = load i32, i32* %n.addr.i.i.i.i, align 4
  store i32 %63, i32* %retval.i.i.i.i, align 4
  br label %__rte_ring_move_prod_head.exit.i.i.i

__rte_ring_move_prod_head.exit.i.i.i:             ; preds = %do.end22.i.i.i.i, %if.then8.i.i.i.i
  %64 = load i32, i32* %retval.i.i.i.i, align 4
  store i32 %64, i32* %n.addr.i.i.i, align 4
  %65 = load i32, i32* %n.addr.i.i.i, align 4
  %cmp.i.i.i = icmp eq i32 %65, 0
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__rte_ring_move_prod_head.exit.i.i.i
  br label %end.i.i.i

if.end.i.i.i:                                     ; preds = %__rte_ring_move_prod_head.exit.i.i.i
  %66 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i, align 8
  %size1.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %66, i32 0, i32 3
  %67 = load i32, i32* %size1.i.i.i, align 16
  store i32 %67, i32* %size.i.i.i, align 4
  %68 = load i32, i32* %prod_head.i.i.i, align 4
  %69 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i, align 8
  %mask.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %69, i32 0, i32 4
  %70 = load i32, i32* %mask.i.i.i, align 4
  %and.i.i.i = and i32 %68, %70
  store i32 %and.i.i.i, i32* %idx.i.i.i, align 4
  %71 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %71, i64 1
  %72 = bitcast %struct.rte_ring* %arrayidx.i.i.i to i8**
  store i8** %72, i8*** %ring.i.i.i, align 8
  %73 = load i32, i32* %idx.i.i.i, align 4
  %74 = load i32, i32* %n.addr.i.i.i, align 4
  %add.i.i.i = add i32 %73, %74
  %75 = load i32, i32* %size.i.i.i, align 4
  %cmp2.i.i.i = icmp ult i32 %add.i.i.i, %75
  %conv.i.i.i = zext i1 %cmp2.i.i.i to i32
  %conv3.i.i.i = sext i32 %conv.i.i.i to i64
  br i1 %cmp2.i.i.i, label %if.then4.i.i.i, label %if.else.i.i.i

if.then4.i.i.i:                                   ; preds = %if.end.i.i.i
  store i32 0, i32* %i.i.i.i, align 4
  br label %for.cond.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i, %if.then4.i.i.i
  %76 = load i32, i32* %i.i.i.i, align 4
  %77 = load i32, i32* %n.addr.i.i.i, align 4
  %and5.i.i.i = and i32 %77, -4
  %cmp6.i.i.i = icmp ult i32 %76, %and5.i.i.i
  br i1 %cmp6.i.i.i, label %for.body.i.i.i, label %for.end.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i
  %78 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %79 = load i32, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = zext i32 %79 to i64
  %arrayidx8.i.i.i = getelementptr inbounds i8*, i8** %78, i64 %idxprom.i.i.i
  %80 = load i8*, i8** %arrayidx8.i.i.i, align 8
  %81 = load i8**, i8*** %ring.i.i.i, align 8
  %82 = load i32, i32* %idx.i.i.i, align 4
  %idxprom9.i.i.i = zext i32 %82 to i64
  %arrayidx10.i.i.i = getelementptr inbounds i8*, i8** %81, i64 %idxprom9.i.i.i
  store i8* %80, i8** %arrayidx10.i.i.i, align 8
  %83 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %84 = load i32, i32* %i.i.i.i, align 4
  %add11.i.i.i = add i32 %84, 1
  %idxprom12.i.i.i = zext i32 %add11.i.i.i to i64
  %arrayidx13.i.i.i = getelementptr inbounds i8*, i8** %83, i64 %idxprom12.i.i.i
  %85 = load i8*, i8** %arrayidx13.i.i.i, align 8
  %86 = load i8**, i8*** %ring.i.i.i, align 8
  %87 = load i32, i32* %idx.i.i.i, align 4
  %add14.i.i.i = add i32 %87, 1
  %idxprom15.i.i.i = zext i32 %add14.i.i.i to i64
  %arrayidx16.i.i.i = getelementptr inbounds i8*, i8** %86, i64 %idxprom15.i.i.i
  store i8* %85, i8** %arrayidx16.i.i.i, align 8
  %88 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %89 = load i32, i32* %i.i.i.i, align 4
  %add17.i.i.i = add i32 %89, 2
  %idxprom18.i.i.i = zext i32 %add17.i.i.i to i64
  %arrayidx19.i.i.i = getelementptr inbounds i8*, i8** %88, i64 %idxprom18.i.i.i
  %90 = load i8*, i8** %arrayidx19.i.i.i, align 8
  %91 = load i8**, i8*** %ring.i.i.i, align 8
  %92 = load i32, i32* %idx.i.i.i, align 4
  %add20.i.i.i = add i32 %92, 2
  %idxprom21.i.i.i = zext i32 %add20.i.i.i to i64
  %arrayidx22.i.i.i = getelementptr inbounds i8*, i8** %91, i64 %idxprom21.i.i.i
  store i8* %90, i8** %arrayidx22.i.i.i, align 8
  %93 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %94 = load i32, i32* %i.i.i.i, align 4
  %add23.i.i.i = add i32 %94, 3
  %idxprom24.i.i.i = zext i32 %add23.i.i.i to i64
  %arrayidx25.i.i.i = getelementptr inbounds i8*, i8** %93, i64 %idxprom24.i.i.i
  %95 = load i8*, i8** %arrayidx25.i.i.i, align 8
  %96 = load i8**, i8*** %ring.i.i.i, align 8
  %97 = load i32, i32* %idx.i.i.i, align 4
  %add26.i.i.i = add i32 %97, 3
  %idxprom27.i.i.i = zext i32 %add26.i.i.i to i64
  %arrayidx28.i.i.i = getelementptr inbounds i8*, i8** %96, i64 %idxprom27.i.i.i
  store i8* %95, i8** %arrayidx28.i.i.i, align 8
  %98 = load i32, i32* %i.i.i.i, align 4
  %add29.i.i.i = add i32 %98, 4
  store i32 %add29.i.i.i, i32* %i.i.i.i, align 4
  %99 = load i32, i32* %idx.i.i.i, align 4
  %add30.i.i.i = add i32 %99, 4
  store i32 %add30.i.i.i, i32* %idx.i.i.i, align 4
  br label %for.cond.i.i.i

for.end.i.i.i:                                    ; preds = %for.cond.i.i.i
  %100 = load i32, i32* %n.addr.i.i.i, align 4
  %and31.i.i.i = and i32 %100, 3
  switch i32 %and31.i.i.i, label %sw.epilog.i.i.i [
    i32 3, label %sw.bb.i.i.i
    i32 2, label %sw.bb37.i.i.i
    i32 1, label %sw.bb44.i.i.i
  ]

sw.bb.i.i.i:                                      ; preds = %for.end.i.i.i
  %101 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %102 = load i32, i32* %i.i.i.i, align 4
  %inc.i.i.i = add i32 %102, 1
  store i32 %inc.i.i.i, i32* %i.i.i.i, align 4
  %idxprom32.i.i.i = zext i32 %102 to i64
  %arrayidx33.i.i.i = getelementptr inbounds i8*, i8** %101, i64 %idxprom32.i.i.i
  %103 = load i8*, i8** %arrayidx33.i.i.i, align 8
  %104 = load i8**, i8*** %ring.i.i.i, align 8
  %105 = load i32, i32* %idx.i.i.i, align 4
  %inc34.i.i.i = add i32 %105, 1
  store i32 %inc34.i.i.i, i32* %idx.i.i.i, align 4
  %idxprom35.i.i.i = zext i32 %105 to i64
  %arrayidx36.i.i.i = getelementptr inbounds i8*, i8** %104, i64 %idxprom35.i.i.i
  store i8* %103, i8** %arrayidx36.i.i.i, align 8
  br label %sw.bb37.i.i.i

sw.bb37.i.i.i:                                    ; preds = %sw.bb.i.i.i, %for.end.i.i.i
  %106 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %107 = load i32, i32* %i.i.i.i, align 4
  %inc38.i.i.i = add i32 %107, 1
  store i32 %inc38.i.i.i, i32* %i.i.i.i, align 4
  %idxprom39.i.i.i = zext i32 %107 to i64
  %arrayidx40.i.i.i = getelementptr inbounds i8*, i8** %106, i64 %idxprom39.i.i.i
  %108 = load i8*, i8** %arrayidx40.i.i.i, align 8
  %109 = load i8**, i8*** %ring.i.i.i, align 8
  %110 = load i32, i32* %idx.i.i.i, align 4
  %inc41.i.i.i = add i32 %110, 1
  store i32 %inc41.i.i.i, i32* %idx.i.i.i, align 4
  %idxprom42.i.i.i = zext i32 %110 to i64
  %arrayidx43.i.i.i = getelementptr inbounds i8*, i8** %109, i64 %idxprom42.i.i.i
  store i8* %108, i8** %arrayidx43.i.i.i, align 8
  br label %sw.bb44.i.i.i

sw.bb44.i.i.i:                                    ; preds = %sw.bb37.i.i.i, %for.end.i.i.i
  %111 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %112 = load i32, i32* %i.i.i.i, align 4
  %inc45.i.i.i = add i32 %112, 1
  store i32 %inc45.i.i.i, i32* %i.i.i.i, align 4
  %idxprom46.i.i.i = zext i32 %112 to i64
  %arrayidx47.i.i.i = getelementptr inbounds i8*, i8** %111, i64 %idxprom46.i.i.i
  %113 = load i8*, i8** %arrayidx47.i.i.i, align 8
  %114 = load i8**, i8*** %ring.i.i.i, align 8
  %115 = load i32, i32* %idx.i.i.i, align 4
  %inc48.i.i.i = add i32 %115, 1
  store i32 %inc48.i.i.i, i32* %idx.i.i.i, align 4
  %idxprom49.i.i.i = zext i32 %115 to i64
  %arrayidx50.i.i.i = getelementptr inbounds i8*, i8** %114, i64 %idxprom49.i.i.i
  store i8* %113, i8** %arrayidx50.i.i.i, align 8
  br label %sw.epilog.i.i.i

sw.epilog.i.i.i:                                  ; preds = %sw.bb44.i.i.i, %for.end.i.i.i
  br label %if.end75.i.i.i

if.else.i.i.i:                                    ; preds = %if.end.i.i.i
  store i32 0, i32* %i.i.i.i, align 4
  br label %for.cond51.i.i.i

for.cond51.i.i.i:                                 ; preds = %for.body54.i.i.i, %if.else.i.i.i
  %116 = load i32, i32* %idx.i.i.i, align 4
  %117 = load i32, i32* %size.i.i.i, align 4
  %cmp52.i.i.i = icmp ult i32 %116, %117
  br i1 %cmp52.i.i.i, label %for.body54.i.i.i, label %for.end62.i.i.i

for.body54.i.i.i:                                 ; preds = %for.cond51.i.i.i
  %118 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %119 = load i32, i32* %i.i.i.i, align 4
  %idxprom55.i.i.i = zext i32 %119 to i64
  %arrayidx56.i.i.i = getelementptr inbounds i8*, i8** %118, i64 %idxprom55.i.i.i
  %120 = load i8*, i8** %arrayidx56.i.i.i, align 8
  %121 = load i8**, i8*** %ring.i.i.i, align 8
  %122 = load i32, i32* %idx.i.i.i, align 4
  %idxprom57.i.i.i = zext i32 %122 to i64
  %arrayidx58.i.i.i = getelementptr inbounds i8*, i8** %121, i64 %idxprom57.i.i.i
  store i8* %120, i8** %arrayidx58.i.i.i, align 8
  %123 = load i32, i32* %i.i.i.i, align 4
  %inc60.i.i.i = add i32 %123, 1
  store i32 %inc60.i.i.i, i32* %i.i.i.i, align 4
  %124 = load i32, i32* %idx.i.i.i, align 4
  %inc61.i.i.i = add i32 %124, 1
  store i32 %inc61.i.i.i, i32* %idx.i.i.i, align 4
  br label %for.cond51.i.i.i

for.end62.i.i.i:                                  ; preds = %for.cond51.i.i.i
  store i32 0, i32* %idx.i.i.i, align 4
  br label %for.cond63.i.i.i

for.cond63.i.i.i:                                 ; preds = %for.body66.i.i.i, %for.end62.i.i.i
  %125 = load i32, i32* %i.i.i.i, align 4
  %126 = load i32, i32* %n.addr.i.i.i, align 4
  %cmp64.i.i.i = icmp ult i32 %125, %126
  br i1 %cmp64.i.i.i, label %for.body66.i.i.i, label %for.end74.i.i.i

for.body66.i.i.i:                                 ; preds = %for.cond63.i.i.i
  %127 = load i8**, i8*** %obj_table.addr.i.i.i, align 8
  %128 = load i32, i32* %i.i.i.i, align 4
  %idxprom67.i.i.i = zext i32 %128 to i64
  %arrayidx68.i.i.i = getelementptr inbounds i8*, i8** %127, i64 %idxprom67.i.i.i
  %129 = load i8*, i8** %arrayidx68.i.i.i, align 8
  %130 = load i8**, i8*** %ring.i.i.i, align 8
  %131 = load i32, i32* %idx.i.i.i, align 4
  %idxprom69.i.i.i = zext i32 %131 to i64
  %arrayidx70.i.i.i = getelementptr inbounds i8*, i8** %130, i64 %idxprom69.i.i.i
  store i8* %129, i8** %arrayidx70.i.i.i, align 8
  %132 = load i32, i32* %i.i.i.i, align 4
  %inc72.i.i.i = add i32 %132, 1
  store i32 %inc72.i.i.i, i32* %i.i.i.i, align 4
  %133 = load i32, i32* %idx.i.i.i, align 4
  %inc73.i.i.i = add i32 %133, 1
  store i32 %inc73.i.i.i, i32* %idx.i.i.i, align 4
  br label %for.cond63.i.i.i

for.end74.i.i.i:                                  ; preds = %for.cond63.i.i.i
  br label %if.end75.i.i.i

if.end75.i.i.i:                                   ; preds = %for.end74.i.i.i, %sw.epilog.i.i.i
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  %134 = load %struct.rte_ring*, %struct.rte_ring** %r.addr.i.i.i, align 8
  %prod.i.i.i = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %134, i32 0, i32 7
  %135 = load i32, i32* %prod_head.i.i.i, align 4
  %136 = load i32, i32* %prod_next.i.i.i, align 4
  %137 = load i32, i32* %is_sp.addr.i.i.i, align 4
  store %struct.rte_ring_headtail* %prod.i.i.i, %struct.rte_ring_headtail** %ht.addr.i.i.i.i, align 8
  store i32 %135, i32* %old_val.addr.i.i.i.i, align 4
  store i32 %136, i32* %new_val.addr.i.i.i.i, align 4
  store i32 %137, i32* %single.addr.i.i.i.i, align 4
  %138 = load i32, i32* %single.addr.i.i.i.i, align 4
  %tobool.i.i.i.i = icmp ne i32 %138, 0
  br i1 %tobool.i.i.i.i, label %update_tail.exit.i.i.i, label %if.then.i82.i.i.i

if.then.i82.i.i.i:                                ; preds = %if.end75.i.i.i
  br label %while.cond.i.i.i.i

while.cond.i.i.i.i:                               ; preds = %while.body.i.i.i.i, %if.then.i82.i.i.i
  %139 = load %struct.rte_ring_headtail*, %struct.rte_ring_headtail** %ht.addr.i.i.i.i, align 8
  %tail.i83.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %139, i32 0, i32 1
  %140 = load volatile i32, i32* %tail.i83.i.i.i, align 4
  %141 = load i32, i32* %old_val.addr.i.i.i.i, align 4
  %cmp.i84.i.i.i = icmp ne i32 %140, %141
  %conv.i85.i.i.i = zext i1 %cmp.i84.i.i.i to i32
  %conv1.i.i.i.i = sext i32 %conv.i85.i.i.i to i64
  br i1 %cmp.i84.i.i.i, label %while.body.i.i.i.i, label %while.end.i.i.i.i

while.body.i.i.i.i:                               ; preds = %while.cond.i.i.i.i
  call void @rte_pause() #5
  br label %while.cond.i.i.i.i

while.end.i.i.i.i:                                ; preds = %while.cond.i.i.i.i
  br label %update_tail.exit.i.i.i

update_tail.exit.i.i.i:                           ; preds = %while.end.i.i.i.i, %if.end75.i.i.i
  %142 = load i32, i32* %new_val.addr.i.i.i.i, align 4
  %143 = load %struct.rte_ring_headtail*, %struct.rte_ring_headtail** %ht.addr.i.i.i.i, align 8
  %tail3.i.i.i.i = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %143, i32 0, i32 1
  store volatile i32 %142, i32* %tail3.i.i.i.i, align 4
  br label %end.i.i.i

end.i.i.i:                                        ; preds = %update_tail.exit.i.i.i, %if.then.i.i.i
  %144 = load i32*, i32** %free_space.addr.i.i.i, align 8
  %cmp78.i.i.i = icmp ne i32* %144, null
  br i1 %cmp78.i.i.i, label %if.then80.i.i.i, label %rte_ring_enqueue.exit

if.then80.i.i.i:                                  ; preds = %end.i.i.i
  %145 = load i32, i32* %free_entries.i.i.i, align 4
  %146 = load i32, i32* %n.addr.i.i.i, align 4
  %sub.i.i.i = sub i32 %145, %146
  %147 = load i32*, i32** %free_space.addr.i.i.i, align 8
  store i32 %sub.i.i.i, i32* %147, align 4
  br label %rte_ring_enqueue.exit

rte_ring_enqueue.exit:                            ; preds = %end.i.i.i, %if.then80.i.i.i
  %148 = load i32, i32* %n.addr.i.i.i, align 4
  %tobool.i = icmp ne i32 %148, 0
  %149 = zext i1 %tobool.i to i64
  %cond.i = select i1 %tobool.i, i32 0, i32 -105
  %cmp8 = icmp ne i32 %cond.i, 0
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %rte_ring_enqueue.exit
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %150, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end:                                           ; preds = %rte_ring_enqueue.exit
  %151 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %151, i32 0, i32 1
  %152 = load %struct.qman_thread*, %struct.qman_thread** %qman_t, align 8
  %153 = load i32, i32* %flow_id, align 4
  %call12 = call i32 @qman_set(%struct.qman_thread* %152, i32 %153, i32 0, i32 0, i16 zeroext 0, i8 zeroext 11)
  %cmp13 = icmp ne i32 %call12, 0
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %154, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end17:                                         ; preds = %if.end
  %155 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %kctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %155, i32 0, i32 3
  %156 = load i16, i16* %new_core, align 2
  %idxprom18 = zext i16 %156 to i64
  %arrayidx19 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %kctx, i64 0, i64 %idxprom18
  %157 = load i32, i32* %ts.addr, align 4
  call void @util_flexnic_kick(%struct.flextcp_pl_appctx* %arrayidx19, i32 %157)
  store i32 -1, i32* %ret, align 4
  br label %unlock

if.end20:                                         ; preds = %entry
  %158 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call21 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %158, i32* null)
  store i32 %call21, i32* %avail, align 4
  %159 = load i32, i32* %avail, align 4
  %cmp22 = icmp eq i32 %159, 0
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end20
  store i32 -1, i32* %ret, align 4
  br label %unlock

if.end25:                                         ; preds = %if.end20
  %160 = load i32, i32* %avail, align 4
  %cmp26 = icmp ult i32 1448, %160
  br i1 %cmp26, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end25
  br label %cond.end

cond.false:                                       ; preds = %if.end25
  %161 = load i32, i32* %avail, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1448, %cond.true ], [ %161, %cond.false ]
  store i32 %cond, i32* %len, align 4
  %162 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %162, i32 0, i32 1
  %163 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %163, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then28, label %if.end70

if.then28:                                        ; preds = %cond.end
  %164 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %164, i32 0, i32 32
  %165 = load i32, i32* %tx_objrem, align 64
  %cmp29 = icmp eq i32 %165, 0
  br i1 %cmp29, label %if.then31, label %if.end49

if.then31:                                        ; preds = %if.then28
  %166 = load i32, i32* %len, align 4
  %conv32 = zext i32 %166 to i64
  %cmp33 = icmp ult i64 %conv32, 8
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.then31
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end37:                                         ; preds = %if.then31
  %168 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %169 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %169, i32 0, i32 22
  %170 = load i32, i32* %tx_next_pos, align 4
  %171 = bitcast %struct.obj_hdr* %oh to i8*
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %168, i32 %170, i16 zeroext 8, i8* %171)
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 3
  %172 = load i8, i8* %dstlen, align 1
  %conv38 = zext i8 %172 to i64
  %add = add i64 8, %conv38
  %conv39 = trunc i64 %add to i32
  store i32 %conv39, i32* %hdrlen, align 4
  %173 = load i32, i32* %hdrlen, align 4
  %len40 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 0
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %len40, i32 0, i32 0
  %174 = load i32, i32* %coerce.dive, align 1
  %call41 = call i32 @f_beui32(i32 %174)
  %add42 = add i32 %173, %call41
  store i32 %add42, i32* %objlen, align 4
  %175 = load i32, i32* %len, align 4
  %176 = load i32, i32* %hdrlen, align 4
  %cmp43 = icmp ult i32 %175, %176
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end37
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end47:                                         ; preds = %if.end37
  %178 = load i32, i32* %objlen, align 4
  %179 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_objrem48 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %179, i32 0, i32 32
  store i32 %178, i32* %tx_objrem48, align 64
  br label %if.end49

if.end49:                                         ; preds = %if.end47, %if.then28
  %180 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_objrem50 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %180, i32 0, i32 32
  %181 = load i32, i32* %tx_objrem50, align 64
  %182 = load i32, i32* %len, align 4
  %cmp51 = icmp ult i32 %181, %182
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %if.end49
  %183 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_objrem54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %183, i32 0, i32 32
  %184 = load i32, i32* %tx_objrem54, align 64
  br label %cond.end56

cond.false55:                                     ; preds = %if.end49
  %185 = load i32, i32* %len, align 4
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %184, %cond.true53 ], [ %185, %cond.false55 ]
  store i32 %cond57, i32* %len, align 4
  %186 = load i32, i32* %len, align 4
  %187 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_objrem58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %187, i32 0, i32 32
  %188 = load i32, i32* %tx_objrem58, align 64
  %sub = sub i32 %188, %186
  store i32 %sub, i32* %tx_objrem58, align 64
  %189 = load i32, i32* %avail, align 4
  %190 = load i32, i32* %len, align 4
  %cmp59 = icmp ugt i32 %189, %190
  br i1 %cmp59, label %if.then61, label %if.end69

if.then61:                                        ; preds = %cond.end56
  %191 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t62 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %191, i32 0, i32 1
  %192 = load %struct.qman_thread*, %struct.qman_thread** %qman_t62, align 8
  %193 = load i32, i32* %flow_id, align 4
  %call63 = call i32 @qman_set(%struct.qman_thread* %192, i32 %193, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp64 = icmp ne i32 %call63, 0
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then61
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %194, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end68:                                         ; preds = %if.then61
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %cond.end56
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %cond.end
  %195 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %195, i32 0, i32 23
  %196 = load i32, i32* %tx_next_seq, align 32
  store i32 %196, i32* %tx_seq, align 4
  %197 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos71 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %197, i32 0, i32 22
  %198 = load i32, i32* %tx_next_pos71, align 4
  store i32 %198, i32* %tx_pos, align 4
  %199 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %199, i32 0, i32 14
  %200 = load i32, i32* %rx_avail, align 4
  store i32 %200, i32* %rx_wnd, align 4
  %201 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %201, i32 0, i32 16
  %202 = load i32, i32* %rx_next_seq, align 4
  store i32 %202, i32* %ack, align 4
  %203 = load i32, i32* %len, align 4
  %204 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_seq72 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %204, i32 0, i32 23
  %205 = load i32, i32* %tx_next_seq72, align 32
  %add73 = add i32 %205, %203
  store i32 %add73, i32* %tx_next_seq72, align 32
  %206 = load i32, i32* %len, align 4
  %207 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos74 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %207, i32 0, i32 22
  %208 = load i32, i32* %tx_next_pos74, align 4
  %add75 = add i32 %208, %206
  store i32 %add75, i32* %tx_next_pos74, align 4
  %209 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos76 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %209, i32 0, i32 22
  %210 = load i32, i32* %tx_next_pos76, align 4
  %211 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %211, i32 0, i32 4
  %212 = load i32, i32* %tx_len, align 4
  %cmp77 = icmp uge i32 %210, %212
  br i1 %cmp77, label %if.then79, label %if.end83

if.then79:                                        ; preds = %if.end70
  %213 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_len80 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %213, i32 0, i32 4
  %214 = load i32, i32* %tx_len80, align 4
  %215 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos81 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %215, i32 0, i32 22
  %216 = load i32, i32* %tx_next_pos81, align 4
  %sub82 = sub i32 %216, %214
  store i32 %sub82, i32* %tx_next_pos81, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then79, %if.end70
  %217 = load i32, i32* %len, align 4
  %218 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %218, i32 0, i32 21
  %219 = load i32, i32* %tx_sent, align 8
  %add84 = add i32 %219, %217
  store i32 %add84, i32* %tx_sent, align 8
  %220 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp85 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %220, i32 0, i32 1
  %221 = load i64, i64* %rx_base_sp85, align 8
  %and86 = and i64 %221, 16
  %cmp87 = icmp eq i64 %and86, 16
  br i1 %cmp87, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end83
  %222 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos89 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %222, i32 0, i32 22
  %223 = load i32, i32* %tx_next_pos89, align 4
  %224 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %224, i32 0, i32 24
  %225 = load i32, i32* %tx_head, align 4
  %cmp90 = icmp eq i32 %223, %225
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end83
  %226 = phi i1 [ false, %if.end83 ], [ %cmp90, %land.rhs ]
  %land.ext = zext i1 %226 to i32
  %conv92 = trunc i32 %land.ext to i8
  store i8 %conv92, i8* %fin, align 1
  %227 = load i8, i8* %fin, align 1
  %tobool93 = icmp ne i8 %227, 0
  br i1 %tobool93, label %if.then94, label %if.end99

if.then94:                                        ; preds = %land.end
  %228 = load i32, i32* %len, align 4
  %cmp95 = icmp ugt i32 %228, 0
  br i1 %cmp95, label %if.then97, label %if.else

if.then97:                                        ; preds = %if.then94
  br label %if.end98

if.else:                                          ; preds = %if.then94
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 218, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @__PRETTY_FUNCTION__.fast_flows_qman, i32 0, i32 0)) #8
  unreachable

if.end98:                                         ; preds = %if.then97
  %229 = load i32, i32* %len, align 4
  %dec = add i32 %229, -1
  store i32 %dec, i32* %len, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %land.end
  %230 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %231 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %232 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %233 = load i32, i32* %tx_seq, align 4
  %234 = load i32, i32* %ack, align 4
  %235 = load i32, i32* %rx_wnd, align 4
  %236 = load i32, i32* %len, align 4
  %conv100 = trunc i32 %236 to i16
  %237 = load i32, i32* %tx_pos, align 4
  %238 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %238, i32 0, i32 25
  %239 = load i32, i32* %tx_next_ts, align 8
  %240 = load i32, i32* %ts.addr, align 4
  %241 = load i8, i8* %fin, align 1
  call void @flow_tx_segment(%struct.dataplane_context* %230, %struct.network_buf_handle* %231, %struct.flextcp_pl_flowst* %232, i32 %233, i32 %234, i32 %235, i16 zeroext %conv100, i32 %237, i32 %239, i32 %240, i8 zeroext %241)
  br label %unlock

unlock:                                           ; preds = %if.end99, %if.then24, %if.end17
  %242 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock101 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %242, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock101)
  %243 = load i32, i32* %ret, align 4
  ret i32 %243
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @util_spin_lock(i32* %sl) #0 {
entry:
  %sl.addr = alloca i32*, align 8
  %lock_val = alloca i32, align 4
  store i32* %sl, i32** %sl.addr, align 8
  store i32 1, i32* %lock_val, align 4
  %0 = load i32*, i32** %sl.addr, align 8
  %1 = load i32, i32* %lock_val, align 4
  %2 = call i32 asm sideeffect "1:\0Axchg $0, $1\0Atest $1, $1\0Ajz 3f\0A2:\0Apause\0Acmpl $$0, $0\0Ajnz 2b\0Ajmp 1b\0A3:\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %0, i32 %1) #5, !srcloc !5
  store i32 %2, i32* %lock_val, align 4
  ret void
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #2

declare dso_local i32 @qman_set(%struct.qman_thread*, i32, i32, i32, i16 zeroext, i8 zeroext) #1

declare dso_local void @util_flexnic_kick(%struct.flextcp_pl_appctx*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @tcp_txavail(%struct.flextcp_pl_flowst* %fs, i32* %phead) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %phead.addr = alloca i32*, align 8
  %buf_avail = alloca i32, align 4
  %fc_avail = alloca i32, align 4
  %head = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32* %phead, i32** %phead.addr, align 8
  %0 = load i32*, i32** %phead.addr, align 8
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32*, i32** %phead.addr, align 8
  %2 = load i32, i32* %1, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 24
  %4 = load i32, i32* %tx_head, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %4, %cond.false ]
  store i32 %cond, i32* %head, align 4
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 22
  %6 = load i32, i32* %tx_next_pos, align 4
  %7 = load i32, i32* %head, align 4
  %cmp1 = icmp ule i32 %6, %7
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %8 = load i32, i32* %head, align 4
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 22
  %10 = load i32, i32* %tx_next_pos2, align 4
  %sub = sub i32 %8, %10
  store i32 %sub, i32* %buf_avail, align 4
  br label %if.end

if.else:                                          ; preds = %cond.end
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 4
  %12 = load i32, i32* %tx_len, align 4
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 22
  %14 = load i32, i32* %tx_next_pos3, align 4
  %sub4 = sub i32 %12, %14
  %15 = load i32, i32* %head, align 4
  %add = add i32 %sub4, %15
  store i32 %add, i32* %buf_avail, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 17
  %17 = load i32, i32* %rx_remote_avail, align 8
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 21
  %19 = load i32, i32* %tx_sent, align 8
  %sub5 = sub i32 %17, %19
  store i32 %sub5, i32* %fc_avail, align 4
  %20 = load i32, i32* %fc_avail, align 4
  %21 = load i32, i32* %buf_avail, align 4
  %cmp6 = icmp ult i32 %20, %21
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.end
  %22 = load i32, i32* %fc_avail, align 4
  br label %cond.end9

cond.false8:                                      ; preds = %if.end
  %23 = load i32, i32* %buf_avail, align 4
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ %22, %cond.true7 ], [ %23, %cond.false8 ]
  ret i32 %cond10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_tx_read(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %dst) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pos.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %dst.addr = alloca i8*, align 8
  %part = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  store i16 %len, i16* %len.addr, align 2
  store i8* %dst, i8** %dst.addr, align 8
  %0 = load i32, i32* %pos.addr, align 4
  %1 = load i16, i16* %len.addr, align 2
  %conv = zext i16 %1 to i32
  %add = add i32 %0, %conv
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 4
  %3 = load i32, i32* %tx_len, align 4
  %cmp = icmp ule i32 %add, %3
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %tobool = icmp ne i64 %conv2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 2
  %5 = load i64, i64* %tx_base, align 16
  %6 = load i32, i32* %pos.addr, align 4
  %conv3 = zext i32 %6 to i64
  %add4 = add i64 %5, %conv3
  %7 = load i16, i16* %len.addr, align 2
  %conv5 = zext i16 %7 to i64
  %8 = load i8*, i8** %dst.addr, align 8
  call void @dma_read(i64 %add4, i64 %conv5, i8* %8)
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 4
  %10 = load i32, i32* %tx_len6, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub i32 %10, %11
  store i32 %sub, i32* %part, align 4
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_base7 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 2
  %13 = load i64, i64* %tx_base7, align 16
  %14 = load i32, i32* %pos.addr, align 4
  %conv8 = zext i32 %14 to i64
  %add9 = add i64 %13, %conv8
  %15 = load i32, i32* %part, align 4
  %conv10 = zext i32 %15 to i64
  %16 = load i8*, i8** %dst.addr, align 8
  call void @dma_read(i64 %add9, i64 %conv10, i8* %16)
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_base11 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %17, i32 0, i32 2
  %18 = load i64, i64* %tx_base11, align 16
  %19 = load i16, i16* %len.addr, align 2
  %conv12 = zext i16 %19 to i32
  %20 = load i32, i32* %part, align 4
  %sub13 = sub i32 %conv12, %20
  %conv14 = zext i32 %sub13 to i64
  %21 = load i8*, i8** %dst.addr, align 8
  %22 = load i32, i32* %part, align 4
  %idx.ext = zext i32 %22 to i64
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %idx.ext
  call void @dma_read(i64 %18, i64 %conv14, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @f_beui32(i32 %x.coerce) #0 {
entry:
  %x = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  store i32 %x.coerce, i32* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  %0 = load i32, i32* %x1, align 1
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %1
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_tx_segment(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, %struct.flextcp_pl_flowst* %fs, i32 %seq, i32 %ack, i32 %rxwnd, i16 zeroext %payload, i32 %payload_pos, i32 %ts_echo, i32 %ts_my, i8 zeroext %fin) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %seq.addr = alloca i32, align 4
  %ack.addr = alloca i32, align 4
  %rxwnd.addr = alloca i32, align 4
  %payload.addr = alloca i16, align 2
  %payload_pos.addr = alloca i32, align 4
  %ts_echo.addr = alloca i32, align 4
  %ts_my.addr = alloca i32, align 4
  %fin.addr = alloca i8, align 1
  %hdrs_len = alloca i16, align 2
  %optlen = alloca i16, align 2
  %fin_fl = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %opt_ts = alloca %struct.tcp_timestamp_opt*, align 8
  %tmp = alloca %struct.beui16, align 1
  %tmp7 = alloca %struct.beui16, align 1
  %tmp15 = alloca %struct.beui16, align 1
  %tmp19 = alloca %struct.beui16, align 1
  %tmp43 = alloca %struct.beui32, align 1
  %tmp47 = alloca %struct.beui32, align 1
  %tmp59 = alloca %struct.beui16, align 1
  %tmp69 = alloca %struct.beui16, align 1
  %tmp74 = alloca %struct.beui32, align 1
  %tmp77 = alloca %struct.beui32, align 1
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %seq, i32* %seq.addr, align 4
  store i32 %ack, i32* %ack.addr, align 4
  store i32 %rxwnd, i32* %rxwnd.addr, align 4
  store i16 %payload, i16* %payload.addr, align 2
  store i32 %payload_pos, i32* %payload_pos.addr, align 4
  store i32 %ts_echo, i32* %ts_echo.addr, align 4
  store i32 %ts_my, i32* %ts_my.addr, align 4
  store i8 %fin, i8* %fin.addr, align 1
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %call = call i8* @network_buf_buf(%struct.network_buf_handle* %0)
  %1 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %1, %struct.pkt_tcp** %p, align 8
  store i16 12, i16* %optlen, align 2
  %2 = load i16, i16* %optlen, align 2
  %conv = zext i16 %2 to i64
  %add = add i64 54, %conv
  %conv1 = trunc i64 %add to i16
  store i16 %conv1, i16* %hdrs_len, align 2
  %3 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 0
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %remote_mac = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 9
  %5 = bitcast %struct.eth_addr* %dest to i8*
  %6 = bitcast %struct.eth_addr* %remote_mac to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 4 %6, i64 6, i1 false)
  %7 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %7, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %8 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 getelementptr inbounds (%struct.ether_addr, %struct.ether_addr* @eth_addr, i32 0, i32 0, i32 0), i64 6, i1 false)
  %9 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth3 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %9, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth3, i32 0, i32 2
  %call4 = call i16 @t_beui16(i16 zeroext 2048)
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp, i32 0, i32 0
  store i16 %call4, i16* %coerce.dive, align 1
  %10 = bitcast %struct.beui16* %type to i8*
  %11 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %11, i64 2, i1 false)
  %12 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %12, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 0
  store i8 69, i8* %_v_hl, align 1
  %13 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %13, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip5, i32 0, i32 1
  store i8 0, i8* %_tos, align 1
  %14 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip6 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %14, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip6, i32 0, i32 2
  %15 = load i16, i16* %hdrs_len, align 2
  %conv8 = zext i16 %15 to i64
  %sub = sub i64 %conv8, 14
  %16 = load i16, i16* %payload.addr, align 2
  %conv9 = zext i16 %16 to i64
  %add10 = add i64 %sub, %conv9
  %conv11 = trunc i64 %add10 to i16
  %call12 = call i16 @t_beui16(i16 zeroext %conv11)
  %coerce.dive13 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp7, i32 0, i32 0
  store i16 %call12, i16* %coerce.dive13, align 1
  %17 = bitcast %struct.beui16* %len to i8*
  %18 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 2, i1 false)
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip14 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 1
  %id = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip14, i32 0, i32 3
  %call16 = call i16 @t_beui16(i16 zeroext 3)
  %coerce.dive17 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp15, i32 0, i32 0
  store i16 %call16, i16* %coerce.dive17, align 1
  %20 = bitcast %struct.beui16* %id to i8*
  %21 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 2, i1 false)
  %22 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %22, i32 0, i32 1
  %offset = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 4
  %call20 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive21 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp19, i32 0, i32 0
  store i16 %call20, i16* %coerce.dive21, align 1
  %23 = bitcast %struct.beui16* %offset to i8*
  %24 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 2, i1 false)
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip22, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1
  %26 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip23 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %26, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip23, i32 0, i32 6
  store i8 6, i8* %proto, align 1
  %27 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip24 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %27, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip24, i32 0, i32 7
  store i16 0, i16* %chksum, align 1
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %29 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %local_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %29, i32 0, i32 5
  %30 = bitcast %struct.beui32* %src26 to i8*
  %31 = bitcast %struct.beui32* %local_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 32 %31, i64 4, i1 false)
  %32 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip27 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %32, i32 0, i32 1
  %dest28 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip27, i32 0, i32 9
  %33 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %remote_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %33, i32 0, i32 6
  %34 = bitcast %struct.beui32* %dest28 to i8*
  %35 = bitcast %struct.beui32* %remote_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 4 %35, i64 4, i1 false)
  %36 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %36, i32 0, i32 1
  %37 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %37, 8
  %cmp = icmp eq i64 %and, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %38 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip30 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %38, i32 0, i32 1
  %_tos31 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip30, i32 0, i32 1
  %39 = load i8, i8* %_tos31, align 1
  %conv32 = zext i8 %39 to i32
  %and33 = and i32 %conv32, 4092
  %or = or i32 %and33, 2
  %conv34 = trunc i32 %or to i8
  %40 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip35 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %40, i32 0, i32 1
  %_tos36 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip35, i32 0, i32 1
  store i8 %conv34, i8* %_tos36, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %41 = load i8, i8* %fin.addr, align 1
  %conv37 = zext i8 %41 to i32
  %tobool = icmp ne i32 %conv37, 0
  %42 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %conv38 = trunc i32 %cond to i16
  store i16 %conv38, i16* %fin_fl, align 2
  %43 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %43, i32 0, i32 2
  %src39 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %44 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %local_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %44, i32 0, i32 7
  %45 = bitcast %struct.beui16* %src39 to i8*
  %46 = bitcast %struct.beui16* %local_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 8 %46, i64 2, i1 false)
  %47 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp40 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %47, i32 0, i32 2
  %dest41 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp40, i32 0, i32 1
  %48 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %remote_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %48, i32 0, i32 8
  %49 = bitcast %struct.beui16* %dest41 to i8*
  %50 = bitcast %struct.beui16* %remote_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 2 %50, i64 2, i1 false)
  %51 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %51, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 2
  %52 = load i32, i32* %seq.addr, align 4
  %call44 = call i32 @t_beui32(i32 %52)
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp43, i32 0, i32 0
  store i32 %call44, i32* %coerce.dive45, align 1
  %53 = bitcast %struct.beui32* %seqno to i8*
  %54 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %54, i64 4, i1 false)
  %55 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp46 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %55, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp46, i32 0, i32 3
  %56 = load i32, i32* %ack.addr, align 4
  %call48 = call i32 @t_beui32(i32 %56)
  %coerce.dive49 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp47, i32 0, i32 0
  store i32 %call48, i32* %coerce.dive49, align 1
  %57 = bitcast %struct.beui32* %ackno to i8*
  %58 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 4, i1 false)
  %59 = load i16, i16* %optlen, align 2
  %conv50 = zext i16 %59 to i32
  %div = sdiv i32 %conv50, 4
  %add51 = add nsw i32 5, %div
  %shl = shl i32 %add51, 12
  %60 = load i16, i16* %fin_fl, align 2
  %conv52 = zext i16 %60 to i32
  %or53 = or i32 24, %conv52
  %or54 = or i32 %shl, %or53
  %conv55 = trunc i32 %or54 to i16
  %call56 = call zeroext i16 @htons(i16 zeroext %conv55) #9
  %61 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp57 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %61, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp57, i32 0, i32 4
  store i16 %call56, i16* %_hdrlen_rsvd_flags, align 1
  %62 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp58 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %62, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp58, i32 0, i32 5
  %63 = load i32, i32* %rxwnd.addr, align 4
  %cmp60 = icmp ult i32 %63, 65535
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %64 = load i32, i32* %rxwnd.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi i32 [ %64, %cond.true ], [ 65535, %cond.false ]
  %conv63 = trunc i32 %cond62 to i16
  %call64 = call i16 @t_beui16(i16 zeroext %conv63)
  %coerce.dive65 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp59, i32 0, i32 0
  store i16 %call64, i16* %coerce.dive65, align 1
  %65 = bitcast %struct.beui16* %wnd to i8*
  %66 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 2, i1 false)
  %67 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp66 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %67, i32 0, i32 2
  %chksum67 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp66, i32 0, i32 6
  store i16 0, i16* %chksum67, align 1
  %68 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp68 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %68, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp68, i32 0, i32 7
  %call70 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive71 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp69, i32 0, i32 0
  store i16 %call70, i16* %coerce.dive71, align 1
  %69 = bitcast %struct.beui16* %urgp to i8*
  %70 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %70, i64 2, i1 false)
  %71 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %71, i64 1
  %72 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  %73 = load i16, i16* %optlen, align 2
  %conv72 = zext i16 %73 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 0, i64 %conv72, i1 false)
  %74 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %add.ptr73 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %74, i64 1
  %75 = bitcast %struct.pkt_tcp* %add.ptr73 to %struct.tcp_timestamp_opt*
  store %struct.tcp_timestamp_opt* %75, %struct.tcp_timestamp_opt** %opt_ts, align 8
  %76 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8
  %kind = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %76, i32 0, i32 0
  store i8 8, i8* %kind, align 1
  %77 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8
  %length = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %77, i32 0, i32 1
  store i8 10, i8* %length, align 1
  %78 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %78, i32 0, i32 2
  %79 = load i32, i32* %ts_my.addr, align 4
  %call75 = call i32 @t_beui32(i32 %79)
  %coerce.dive76 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp74, i32 0, i32 0
  store i32 %call75, i32* %coerce.dive76, align 1
  %80 = bitcast %struct.beui32* %ts_val to i8*
  %81 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %81, i64 4, i1 false)
  %82 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %82, i32 0, i32 3
  %83 = load i32, i32* %ts_echo.addr, align 4
  %call78 = call i32 @t_beui32(i32 %83)
  %coerce.dive79 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp77, i32 0, i32 0
  store i32 %call78, i32* %coerce.dive79, align 1
  %84 = bitcast %struct.beui32* %ts_ecr to i8*
  %85 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 4, i1 false)
  %86 = load i16, i16* %payload.addr, align 2
  %conv80 = zext i16 %86 to i32
  %cmp81 = icmp sgt i32 %conv80, 0
  br i1 %cmp81, label %if.then83, label %if.end86

if.then83:                                        ; preds = %cond.end
  %87 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %88 = load i32, i32* %payload_pos.addr, align 4
  %89 = load i16, i16* %payload.addr, align 2
  %90 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %91 = bitcast %struct.pkt_tcp* %90 to i8*
  %92 = load i16, i16* %hdrs_len, align 2
  %conv84 = zext i16 %92 to i32
  %idx.ext = sext i32 %conv84 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %91, i64 %idx.ext
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %87, i32 %88, i16 zeroext %89, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then83, %cond.end
  %93 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %94 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %95 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %local_ip87 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %95, i32 0, i32 5
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %remote_ip88 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 6
  %97 = load i16, i16* %hdrs_len, align 2
  %conv89 = zext i16 %97 to i64
  %sub90 = sub i64 %conv89, 34
  %98 = load i16, i16* %payload.addr, align 2
  %conv91 = zext i16 %98 to i64
  %add92 = add i64 %sub90, %conv91
  %conv93 = trunc i64 %add92 to i16
  %coerce.dive94 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip87, i32 0, i32 0
  %99 = load i32, i32* %coerce.dive94, align 32
  %coerce.dive95 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip88, i32 0, i32 0
  %100 = load i32, i32* %coerce.dive95, align 4
  call void @tcp_checksums(%struct.network_buf_handle* %93, %struct.pkt_tcp* %94, i32 %99, i32 %100, i16 zeroext %conv93)
  %101 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %102 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %103 = load i16, i16* %hdrs_len, align 2
  %conv96 = zext i16 %103 to i32
  %104 = load i16, i16* %payload.addr, align 2
  %conv97 = zext i16 %104 to i32
  %add98 = add nsw i32 %conv96, %conv97
  %conv99 = trunc i32 %add98 to i16
  call void @tx_send(%struct.dataplane_context* %101, %struct.network_buf_handle* %102, i16 zeroext 0, i16 zeroext %conv99)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @util_spin_unlock(i32* %sl) #0 {
entry:
  %sl.addr = alloca i32*, align 8
  %unlock_val = alloca i32, align 4
  store i32* %sl, i32** %sl.addr, align 8
  store i32 0, i32* %unlock_val, align 4
  %0 = load i32*, i32** %sl.addr, align 8
  %1 = load i32, i32* %unlock_val, align 4
  %2 = call i32 asm sideeffect "xchg $0, $1\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %0, i32 %1) #5, !srcloc !6
  store i32 %2, i32* %unlock_val, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fast_flows_qman_fwd(%struct.dataplane_context* %ctx, %struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %avail = alloca i32, align 4
  %flow_id = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %0 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %1 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %1, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  store i16 %conv, i16* %flow_id, align 2
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %3, i32* null)
  store i32 %call, i32* %avail, align 4
  %4 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %4, i32 0, i32 1
  %5 = load %struct.qman_thread*, %struct.qman_thread** %qman_t, align 8
  %6 = load i16, i16* %flow_id, align 2
  %conv1 = zext i16 %6 to i32
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 26
  %8 = load i32, i32* %tx_rate, align 4
  %9 = load i32, i32* %avail, align 4
  %call2 = call i32 @qman_set(%struct.qman_thread* %5, i32 %conv1, i32 %8, i32 %9, i16 zeroext 1448, i8 zeroext 11)
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end:                                           ; preds = %entry
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %lock5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock5)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_packet_parse(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, %struct.tcp_opts* %tos, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbhs.addr = alloca %struct.network_buf_handle**, align 8
  %fss.addr = alloca i8**, align 8
  %tos.addr = alloca %struct.tcp_opts*, align 8
  %n.addr = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %i = alloca i16, align 2
  %len = alloca i16, align 2
  %cond = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.network_buf_handle** %nbhs, %struct.network_buf_handle*** %nbhs.addr, align 8
  store i8** %fss, i8*** %fss.addr, align 8
  store %struct.tcp_opts* %tos, %struct.tcp_opts** %tos.addr, align 8
  store i16 %n, i16* %n.addr, align 2
  store i16 0, i16* %i, align 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i16, i16* %i, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16, i16* %n.addr, align 2
  %conv1 = zext i16 %1 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %fss.addr, align 8
  %3 = load i16, i16* %i, align 2
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8
  %cmp3 = icmp eq i8* %4, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %5 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8
  %6 = load i16, i16* %i, align 2
  %idxprom5 = zext i16 %6 to i64
  %arrayidx6 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %5, i64 %idxprom5
  %7 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx6, align 8
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %7)
  %8 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %8, %struct.pkt_tcp** %p, align 8
  %9 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8
  %10 = load i16, i16* %i, align 2
  %idxprom7 = zext i16 %10 to i64
  %arrayidx8 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %9, i64 %idxprom7
  %11 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx8, align 8
  %call9 = call zeroext i16 @network_buf_len(%struct.network_buf_handle* %11)
  store i16 %call9, i16* %len, align 2
  %12 = load i16, i16* %len, align 2
  %conv10 = zext i16 %12 to i64
  %cmp11 = icmp ult i64 %conv10, 54
  %conv12 = zext i1 %cmp11 to i32
  %13 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %13, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %type, i32 0, i32 0
  %14 = load i16, i16* %coerce.dive, align 1
  %call13 = call zeroext i16 @f_beui16(i16 %14)
  %conv14 = zext i16 %call13 to i32
  %cmp15 = icmp ne i32 %conv14, 2048
  %conv16 = zext i1 %cmp15 to i32
  %or = or i32 %conv12, %conv16
  %15 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %15, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 6
  %16 = load i8, i8* %proto, align 1
  %conv17 = zext i8 %16 to i32
  %cmp18 = icmp ne i32 %conv17, 6
  %conv19 = zext i1 %cmp18 to i32
  %or20 = or i32 %or, %conv19
  %17 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip21 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %17, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip21, i32 0, i32 0
  %18 = load i8, i8* %_v_hl, align 1
  %conv22 = zext i8 %18 to i32
  %shr = ashr i32 %conv22, 4
  %cmp23 = icmp ne i32 %shr, 4
  %conv24 = zext i1 %cmp23 to i32
  %or25 = or i32 %or20, %conv24
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 1
  %_v_hl27 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 0
  %20 = load i8, i8* %_v_hl27, align 1
  %conv28 = zext i8 %20 to i32
  %and = and i32 %conv28, 15
  %cmp29 = icmp ne i32 %and, 5
  %conv30 = zext i1 %cmp29 to i32
  %or31 = or i32 %or25, %conv30
  %21 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %21, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %22 = load i16, i16* %_hdrlen_rsvd_flags, align 1
  %call32 = call zeroext i16 @ntohs(i16 zeroext %22) #9
  %conv33 = zext i16 %call32 to i32
  %shr34 = ashr i32 %conv33, 12
  %cmp35 = icmp slt i32 %shr34, 5
  %conv36 = zext i1 %cmp35 to i32
  %or37 = or i32 %or31, %conv36
  %23 = load i16, i16* %len, align 2
  %conv38 = zext i16 %23 to i64
  %24 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip39 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %24, i32 0, i32 1
  %len40 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip39, i32 0, i32 2
  %coerce.dive41 = getelementptr inbounds %struct.beui16, %struct.beui16* %len40, i32 0, i32 0
  %25 = load i16, i16* %coerce.dive41, align 1
  %call42 = call zeroext i16 @f_beui16(i16 %25)
  %conv43 = zext i16 %call42 to i64
  %add = add i64 %conv43, 14
  %cmp44 = icmp ult i64 %conv38, %add
  %conv45 = zext i1 %cmp44 to i32
  %or46 = or i32 %or37, %conv45
  %26 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %27 = load i16, i16* %len, align 2
  %28 = load %struct.tcp_opts*, %struct.tcp_opts** %tos.addr, align 8
  %29 = load i16, i16* %i, align 2
  %idxprom47 = zext i16 %29 to i64
  %arrayidx48 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %28, i64 %idxprom47
  %call49 = call i32 @tcp_parse_options(%struct.pkt_tcp* %26, i16 zeroext %27, %struct.tcp_opts* %arrayidx48)
  %cmp50 = icmp ne i32 %call49, 0
  %conv51 = zext i1 %cmp50 to i32
  %or52 = or i32 %or46, %conv51
  %30 = load %struct.tcp_opts*, %struct.tcp_opts** %tos.addr, align 8
  %31 = load i16, i16* %i, align 2
  %idxprom53 = zext i16 %31 to i64
  %arrayidx54 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %30, i64 %idxprom53
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %arrayidx54, i32 0, i32 0
  %32 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts, align 8
  %cmp55 = icmp eq %struct.tcp_timestamp_opt* %32, null
  %conv56 = zext i1 %cmp55 to i32
  %or57 = or i32 %or52, %conv56
  store i32 %or57, i32* %cond, align 4
  %33 = load i32, i32* %cond, align 4
  %tobool = icmp ne i32 %33, 0
  br i1 %tobool, label %if.then58, label %if.end61

if.then58:                                        ; preds = %if.end
  %34 = load i8**, i8*** %fss.addr, align 8
  %35 = load i16, i16* %i, align 2
  %idxprom59 = zext i16 %35 to i64
  %arrayidx60 = getelementptr inbounds i8*, i8** %34, i64 %idxprom59
  store i8* null, i8** %arrayidx60, align 8
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end61, %if.then
  %36 = load i16, i16* %i, align 2
  %inc = add i16 %36, 1
  store i16 %inc, i16* %i, align 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @network_buf_bufoff(%struct.network_buf_handle* %bh) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %mb = alloca %struct.rte_mbuf*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %1, %struct.rte_mbuf** %mb, align 8
  %2 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %2, i32 0, i32 1
  %3 = load i8*, i8** %buf_addr, align 64
  %4 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %4, i32 0, i32 4
  %5 = load i16, i16* %data_off, align 16
  %conv = zext i16 %5 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr i8, i8* %3, i64 %idx.ext
  ret i8* %add.ptr
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @network_buf_len(%struct.network_buf_handle* %bh) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 12
  %2 = load i16, i16* %data_len, align 8
  ret i16 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @f_beui16(i16 %x.coerce) #0 {
entry:
  %x = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  store i16 %x.coerce, i16* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  %0 = load i16, i16* %x1, align 1
  %1 = call i16 @llvm.bswap.i16(i16 %0)
  ret i16 %1
}

; Function Attrs: nounwind readnone
declare dso_local zeroext i16 @ntohs(i16 zeroext) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @tcp_parse_options(%struct.pkt_tcp* %p, i16 zeroext %len, %struct.tcp_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.pkt_tcp*, align 8
  %len.addr = alloca i16, align 2
  %opts.addr = alloca %struct.tcp_opts*, align 8
  %opt = alloca i8*, align 8
  %opts_len = alloca i16, align 2
  %off = alloca i16, align 2
  %opt_kind = alloca i8, align 1
  %opt_len = alloca i8, align 1
  %opt_avail = alloca i8, align 1
  store %struct.pkt_tcp* %p, %struct.pkt_tcp** %p.addr, align 8
  store i16 %len, i16* %len.addr, align 2
  store %struct.tcp_opts* %opts, %struct.tcp_opts** %opts.addr, align 8
  %0 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i64 1
  %1 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  store i8* %1, i8** %opt, align 8
  %2 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %3 = load i16, i16* %_hdrlen_rsvd_flags, align 1
  %call = call zeroext i16 @ntohs(i16 zeroext %3) #9
  %conv = zext i16 %call to i32
  %shr = ashr i32 %conv, 12
  %mul = mul nsw i32 %shr, 4
  %sub = sub nsw i32 %mul, 20
  %conv1 = trunc i32 %sub to i16
  store i16 %conv1, i16* %opts_len, align 2
  store i16 0, i16* %off, align 2
  %4 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %4, i32 0, i32 0
  store %struct.tcp_timestamp_opt* null, %struct.tcp_timestamp_opt** %ts, align 8
  %5 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %tcp2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %5, i32 0, i32 2
  %_hdrlen_rsvd_flags3 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp2, i32 0, i32 4
  %6 = load i16, i16* %_hdrlen_rsvd_flags3, align 1
  %call4 = call zeroext i16 @ntohs(i16 zeroext %6) #9
  %conv5 = zext i16 %call4 to i32
  %shr6 = ashr i32 %conv5, 12
  %cmp = icmp slt i32 %shr6, 5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i16, i16* %opts_len, align 2
  %conv8 = zext i16 %7 to i64
  %8 = load i16, i16* %len.addr, align 2
  %conv9 = zext i16 %8 to i64
  %sub10 = sub i64 %conv9, 54
  %cmp11 = icmp ugt i64 %conv8, %sub10
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %10 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %tcp13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %10, i32 0, i32 2
  %_hdrlen_rsvd_flags14 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp13, i32 0, i32 4
  %11 = load i16, i16* %_hdrlen_rsvd_flags14, align 1
  %call15 = call zeroext i16 @ntohs(i16 zeroext %11) #9
  %conv16 = zext i16 %call15 to i32
  %shr17 = ashr i32 %conv16, 12
  %12 = load i16, i16* %opts_len, align 2
  %conv18 = zext i16 %12 to i32
  %13 = load i16, i16* %len.addr, align 2
  %conv19 = zext i16 %13 to i32
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.33, i32 0, i32 0), i32 %shr17, i32 %conv18, i32 %conv19, i64 54)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %if.end66, %if.end
  %14 = load i16, i16* %off, align 2
  %conv21 = zext i16 %14 to i32
  %15 = load i16, i16* %opts_len, align 2
  %conv22 = zext i16 %15 to i32
  %cmp23 = icmp slt i32 %conv21, %conv22
  br i1 %cmp23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i8*, i8** %opt, align 8
  %17 = load i16, i16* %off, align 2
  %idxprom = zext i16 %17 to i64
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 %idxprom
  %18 = load i8, i8* %arrayidx, align 1
  store i8 %18, i8* %opt_kind, align 1
  %19 = load i16, i16* %opts_len, align 2
  %conv25 = zext i16 %19 to i32
  %20 = load i16, i16* %off, align 2
  %conv26 = zext i16 %20 to i32
  %sub27 = sub nsw i32 %conv25, %conv26
  %conv28 = trunc i32 %sub27 to i8
  store i8 %conv28, i8* %opt_avail, align 1
  %21 = load i8, i8* %opt_kind, align 1
  %conv29 = zext i8 %21 to i32
  %cmp30 = icmp eq i32 %conv29, 0
  br i1 %cmp30, label %if.then32, label %if.else

if.then32:                                        ; preds = %while.body
  br label %while.end

if.else:                                          ; preds = %while.body
  %22 = load i8, i8* %opt_kind, align 1
  %conv33 = zext i8 %22 to i32
  %cmp34 = icmp eq i32 %conv33, 1
  br i1 %cmp34, label %if.then36, label %if.else37

if.then36:                                        ; preds = %if.else
  store i8 1, i8* %opt_len, align 1
  br label %if.end65

if.else37:                                        ; preds = %if.else
  %23 = load i8, i8* %opt_avail, align 1
  %conv38 = zext i8 %23 to i32
  %cmp39 = icmp slt i32 %conv38, 2
  br i1 %cmp39, label %if.then41, label %if.end46

if.then41:                                        ; preds = %if.else37
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %25 = load i8, i8* %opt_avail, align 1
  %conv42 = zext i8 %25 to i32
  %26 = load i8, i8* %opt_kind, align 1
  %conv43 = zext i8 %26 to i32
  %27 = load i16, i16* %off, align 2
  %conv44 = zext i16 %27 to i32
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.34, i32 0, i32 0), i32 %conv42, i32 %conv43, i32 %conv44)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end46:                                         ; preds = %if.else37
  %28 = load i8*, i8** %opt, align 8
  %29 = load i16, i16* %off, align 2
  %conv47 = zext i16 %29 to i32
  %add = add nsw i32 %conv47, 1
  %idxprom48 = sext i32 %add to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %28, i64 %idxprom48
  %30 = load i8, i8* %arrayidx49, align 1
  store i8 %30, i8* %opt_len, align 1
  %31 = load i8, i8* %opt_kind, align 1
  %conv50 = zext i8 %31 to i32
  %cmp51 = icmp eq i32 %conv50, 8
  br i1 %cmp51, label %if.then53, label %if.end64

if.then53:                                        ; preds = %if.end46
  %32 = load i8, i8* %opt_len, align 1
  %conv54 = zext i8 %32 to i64
  %cmp55 = icmp ne i64 %conv54, 10
  br i1 %cmp55, label %if.then57, label %if.end60

if.then57:                                        ; preds = %if.then53
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %34 = load i8, i8* %opt_len, align 1
  %conv58 = zext i8 %34 to i32
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0), i32 %conv58, i64 10)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.then53
  %35 = load i8*, i8** %opt, align 8
  %36 = load i16, i16* %off, align 2
  %conv61 = zext i16 %36 to i32
  %idx.ext = sext i32 %conv61 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  %37 = bitcast i8* %add.ptr62 to %struct.tcp_timestamp_opt*
  %38 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts63 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %38, i32 0, i32 0
  store %struct.tcp_timestamp_opt* %37, %struct.tcp_timestamp_opt** %ts63, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.end60, %if.end46
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then36
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  %39 = load i8, i8* %opt_len, align 1
  %conv67 = zext i8 %39 to i32
  %40 = load i16, i16* %off, align 2
  %conv68 = zext i16 %40 to i32
  %add69 = add nsw i32 %conv68, %conv67
  %conv70 = trunc i32 %add69 to i16
  store i16 %conv70, i16* %off, align 2
  br label %while.cond

while.end:                                        ; preds = %if.then32, %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then57, %if.then41, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_packet_pfbufs(%struct.dataplane_context* %ctx, i8** %fss, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %fss.addr = alloca i8**, align 8
  %n.addr = alloca i16, align 2
  %i = alloca i16, align 2
  %rx_base = alloca i64, align 8
  %p = alloca i8*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i8** %fss, i8*** %fss.addr, align 8
  store i16 %n, i16* %n.addr, align 2
  store i16 0, i16* %i, align 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i16, i16* %i, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16, i16* %n.addr, align 2
  %conv1 = zext i16 %1 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %fss.addr, align 8
  %3 = load i16, i16* %i, align 2
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8
  %cmp3 = icmp eq i8* %4, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %5 = load i8**, i8*** %fss.addr, align 8
  %6 = load i16, i16* %i, align 2
  %idxprom5 = zext i16 %6 to i64
  %arrayidx6 = getelementptr inbounds i8*, i8** %5, i64 %idxprom5
  %7 = load i8*, i8** %arrayidx6, align 8
  %8 = bitcast i8* %7 to %struct.flextcp_pl_flowst*
  store %struct.flextcp_pl_flowst* %8, %struct.flextcp_pl_flowst** %fs, align 8
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 1
  %10 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %10, -64
  store i64 %and, i64* %rx_base, align 8
  %11 = load i64, i64* %rx_base, align 8
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 15
  %13 = load i32, i32* %rx_next_pos, align 64
  %conv7 = zext i32 %13 to i64
  %add = add i64 %11, %conv7
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  store i8* %call, i8** %p, align 8
  %14 = load i8*, i8** %p, align 8
  call void @rte_prefetch0(i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %15 = load i16, i16* %i, align 2
  %inc = add i16 %15, 1
  store i16 %inc, i16* %i, align 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fast_flows_packet(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i8* %fsp, %struct.tcp_opts* %opts, i32 %ts) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %fsp.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.tcp_opts*, align 8
  %ts.addr = alloca i32, align 4
  %p = alloca %struct.pkt_tcp*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %appst = alloca %struct.flextcp_pl_appst*, align 8
  %payload_bytes = alloca i32, align 4
  %payload_off = alloca i32, align 4
  %seq = alloca i32, align 4
  %ack = alloca i32, align 4
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  %orig_payload = alloca i32, align 4
  %rx_bump = alloca i32, align 4
  %tx_bump = alloca i32, align 4
  %i = alloca i32, align 4
  %rx_pos = alloca i32, align 4
  %rtt = alloca i32, align 4
  %no_permanent_sp = alloca i32, align 4
  %tcp_extra_hlen = alloca i16, align 2
  %trim_start = alloca i16, align 2
  %trim_end = alloca i16, align 2
  %flow_id = alloca i16, align 2
  %oh = alloca %struct.obj_hdr*, align 8
  %trigger_ack = alloca i32, align 4
  %fin_bump = alloca i32, align 4
  %steer_id = alloca i64, align 8
  %type = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store i8* %fsp, i8** %fsp.addr, align 8
  store %struct.tcp_opts* %opts, %struct.tcp_opts** %opts.addr, align 8
  store i32 %ts, i32* %ts.addr, align 4
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %0)
  %1 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %1, %struct.pkt_tcp** %p, align 8
  %2 = load i8*, i8** %fsp.addr, align 8
  %3 = bitcast i8* %2 to %struct.flextcp_pl_flowst*
  store %struct.flextcp_pl_flowst* %3, %struct.flextcp_pl_flowst** %fs, align 8
  store %struct.flextcp_pl_appst* null, %struct.flextcp_pl_appst** %appst, align 8
  store i32 0, i32* %rx_bump, align 4
  store i32 0, i32* %tx_bump, align 4
  store i32 0, i32* %no_permanent_sp, align 4
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %5 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  store i16 %conv, i16* %flow_id, align 2
  store i32 0, i32* %trigger_ack, align 4
  store i32 0, i32* %fin_bump, align 4
  %6 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %6, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %7 = load i16, i16* %_hdrlen_rsvd_flags, align 1
  %call1 = call zeroext i16 @ntohs(i16 zeroext %7) #9
  %conv2 = zext i16 %call1 to i32
  %shr = ashr i32 %conv2, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv3 = trunc i32 %mul to i16
  store i16 %conv3, i16* %tcp_extra_hlen, align 2
  %8 = load i16, i16* %tcp_extra_hlen, align 2
  %conv4 = zext i16 %8 to i64
  %add = add i64 54, %conv4
  %conv5 = trunc i64 %add to i32
  store i32 %conv5, i32* %payload_off, align 4
  %9 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %9, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %len, i32 0, i32 0
  %10 = load i16, i16* %coerce.dive, align 1
  %call6 = call zeroext i16 @f_beui16(i16 %10)
  %conv7 = zext i16 %call6 to i64
  %11 = load i16, i16* %tcp_extra_hlen, align 2
  %conv8 = zext i16 %11 to i64
  %add9 = add i64 40, %conv8
  %sub10 = sub i64 %conv7, %add9
  %conv11 = trunc i64 %sub10 to i32
  store i32 %conv11, i32* %payload_bytes, align 4
  %12 = load i32, i32* %payload_bytes, align 4
  store i32 %12, i32* %orig_payload, align 4
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %14 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %14, i32 0, i32 1
  %15 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %15, 1
  %cmp = icmp ne i64 %and, 0
  %conv12 = zext i1 %cmp to i32
  %conv13 = sext i32 %conv12 to i64
  %tobool = icmp ne i64 %conv13, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i32 0, i32 0))
  br label %slowpath

if.end:                                           ; preds = %entry
  %17 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp15 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %17, i32 0, i32 2
  %_hdrlen_rsvd_flags16 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp15, i32 0, i32 4
  %18 = load i16, i16* %_hdrlen_rsvd_flags16, align 1
  %call17 = call zeroext i16 @ntohs(i16 zeroext %18) #9
  %conv18 = zext i16 %call17 to i32
  %and19 = and i32 %conv18, 511
  %and20 = and i32 %and19, -218
  %cmp21 = icmp ne i32 %and20, 0
  %conv22 = zext i1 %cmp21 to i32
  %conv23 = sext i32 %conv22 to i64
  %tobool24 = icmp ne i64 %conv23, 0
  br i1 %tobool24, label %if.then25, label %if.end42

if.then25:                                        ; preds = %if.end
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 2
  %_hdrlen_rsvd_flags27 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp26, i32 0, i32 4
  %20 = load i16, i16* %_hdrlen_rsvd_flags27, align 1
  %call28 = call zeroext i16 @ntohs(i16 zeroext %20) #9
  %conv29 = zext i16 %call28 to i32
  %and30 = and i32 %conv29, 511
  %and31 = and i32 %and30, 2
  %cmp32 = icmp ne i32 %and31, 0
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.then25
  store i32 1, i32* %no_permanent_sp, align 4
  br label %if.end41

if.else:                                          ; preds = %if.then25
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %22 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp35 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %22, i32 0, i32 2
  %_hdrlen_rsvd_flags36 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp35, i32 0, i32 4
  %23 = load i16, i16* %_hdrlen_rsvd_flags36, align 1
  %call37 = call zeroext i16 @ntohs(i16 zeroext %23) #9
  %conv38 = zext i16 %call37 to i32
  %and39 = and i32 %conv38, 511
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i32 0, i32 0), i32 %and39)
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.then34
  br label %slowpath

if.end42:                                         ; preds = %if.end
  %24 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call43 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %24, i32* null)
  store i32 %call43, i32* %old_avail, align 4
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp44 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp44, i32 0, i32 2
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %seqno, i32 0, i32 0
  %26 = load i32, i32* %coerce.dive45, align 1
  %call46 = call i32 @f_beui32(i32 %26)
  store i32 %call46, i32* %seq, align 4
  %27 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp47 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %27, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp47, i32 0, i32 3
  %coerce.dive48 = getelementptr inbounds %struct.beui32, %struct.beui32* %ackno, i32 0, i32 0
  %28 = load i32, i32* %coerce.dive48, align 1
  %call49 = call i32 @f_beui32(i32 %28)
  store i32 %call49, i32* %ack, align 4
  %29 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %29, i32 0, i32 15
  %30 = load i32, i32* %rx_next_pos, align 64
  store i32 %30, i32* %rx_pos, align 4
  %31 = load i32, i32* %payload_bytes, align 4
  %cmp50 = icmp ugt i32 %31, 0
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end42
  store i32 1, i32* %trigger_ack, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.end42
  %32 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp54 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %32, i32 0, i32 2
  %_hdrlen_rsvd_flags55 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp54, i32 0, i32 4
  %33 = load i16, i16* %_hdrlen_rsvd_flags55, align 1
  %call56 = call zeroext i16 @ntohs(i16 zeroext %33) #9
  %conv57 = zext i16 %call56 to i32
  %and58 = and i32 %conv57, 511
  %and59 = and i32 %and58, 16
  %cmp60 = icmp eq i32 %and59, 16
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end53
  %34 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %cnt_rx_acks = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %34, i32 0, i32 28
  %35 = load i16, i16* %cnt_rx_acks, align 2
  %inc = add i16 %35, 1
  store i16 %inc, i16* %cnt_rx_acks, align 2
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end53
  %36 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp64 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %36, i32 0, i32 2
  %_hdrlen_rsvd_flags65 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp64, i32 0, i32 4
  %37 = load i16, i16* %_hdrlen_rsvd_flags65, align 1
  %call66 = call zeroext i16 @ntohs(i16 zeroext %37) #9
  %conv67 = zext i16 %call66 to i32
  %and68 = and i32 %conv67, 511
  %and69 = and i32 %and68, 16
  %cmp70 = icmp eq i32 %and69, 16
  br i1 %cmp70, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end63
  %38 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %39 = load i32, i32* %ack, align 4
  %call72 = call i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %38, i32 %39, i32* %tx_bump)
  %cmp73 = icmp eq i32 %call72, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end63
  %40 = phi i1 [ false, %if.end63 ], [ %cmp73, %land.rhs ]
  %land.ext = zext i1 %40 to i32
  %conv75 = sext i32 %land.ext to i64
  %tobool76 = icmp ne i64 %conv75, 0
  br i1 %tobool76, label %if.then77, label %if.end134

if.then77:                                        ; preds = %land.end
  %41 = load i32, i32* %tx_bump, align 4
  %42 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %cnt_rx_ack_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %42, i32 0, i32 29
  %43 = load i32, i32* %cnt_rx_ack_bytes, align 4
  %add78 = add i32 %43, %41
  store i32 %add78, i32* %cnt_rx_ack_bytes, align 4
  %44 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp79 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %44, i32 0, i32 2
  %_hdrlen_rsvd_flags80 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp79, i32 0, i32 4
  %45 = load i16, i16* %_hdrlen_rsvd_flags80, align 1
  %call81 = call zeroext i16 @ntohs(i16 zeroext %45) #9
  %conv82 = zext i16 %call81 to i32
  %and83 = and i32 %conv82, 511
  %and84 = and i32 %and83, 64
  %cmp85 = icmp eq i32 %and84, 64
  br i1 %cmp85, label %if.then87, label %if.end89

if.then87:                                        ; preds = %if.then77
  %46 = load i32, i32* %tx_bump, align 4
  %47 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %cnt_rx_ecn_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %47, i32 0, i32 30
  %48 = load i32, i32* %cnt_rx_ecn_bytes, align 8
  %add88 = add i32 %48, %46
  store i32 %add88, i32* %cnt_rx_ecn_bytes, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.then87, %if.then77
  %49 = load i32, i32* %tx_bump, align 4
  %50 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %50, i32 0, i32 21
  %51 = load i32, i32* %tx_sent, align 8
  %cmp90 = icmp ule i32 %49, %51
  %conv91 = zext i1 %cmp90 to i32
  %conv92 = sext i32 %conv91 to i64
  %tobool93 = icmp ne i64 %conv92, 0
  br i1 %tobool93, label %if.then94, label %if.else97

if.then94:                                        ; preds = %if.end89
  %52 = load i32, i32* %tx_bump, align 4
  %53 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent95 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %53, i32 0, i32 21
  %54 = load i32, i32* %tx_sent95, align 8
  %sub96 = sub i32 %54, %52
  store i32 %sub96, i32* %tx_sent95, align 8
  br label %if.end113

if.else97:                                        ; preds = %if.end89
  %55 = load i32, i32* %tx_bump, align 4
  %56 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent98 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %56, i32 0, i32 21
  %57 = load i32, i32* %tx_sent98, align 8
  %sub99 = sub i32 %55, %57
  %58 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %58, i32 0, i32 23
  %59 = load i32, i32* %tx_next_seq, align 32
  %add100 = add i32 %59, %sub99
  store i32 %add100, i32* %tx_next_seq, align 32
  %60 = load i32, i32* %tx_bump, align 4
  %61 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent101 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %61, i32 0, i32 21
  %62 = load i32, i32* %tx_sent101, align 8
  %sub102 = sub i32 %60, %62
  %63 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %63, i32 0, i32 22
  %64 = load i32, i32* %tx_next_pos, align 4
  %add103 = add i32 %64, %sub102
  store i32 %add103, i32* %tx_next_pos, align 4
  %65 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos104 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %65, i32 0, i32 22
  %66 = load i32, i32* %tx_next_pos104, align 4
  %67 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %67, i32 0, i32 4
  %68 = load i32, i32* %tx_len, align 4
  %cmp105 = icmp uge i32 %66, %68
  br i1 %cmp105, label %if.then107, label %if.end111

if.then107:                                       ; preds = %if.else97
  %69 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_len108 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %69, i32 0, i32 4
  %70 = load i32, i32* %tx_len108, align 4
  %71 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_pos109 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %71, i32 0, i32 22
  %72 = load i32, i32* %tx_next_pos109, align 4
  %sub110 = sub i32 %72, %70
  store i32 %sub110, i32* %tx_next_pos109, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then107, %if.else97
  %73 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent112 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %73, i32 0, i32 21
  store i32 0, i32* %tx_sent112, align 8
  br label %if.end113

if.end113:                                        ; preds = %if.end111, %if.then94
  %74 = load i32, i32* %tx_bump, align 4
  %cmp114 = icmp ne i32 %74, 0
  %conv115 = zext i1 %cmp114 to i32
  %conv116 = sext i32 %conv115 to i64
  %tobool117 = icmp ne i64 %conv116, 0
  br i1 %tobool117, label %if.then118, label %if.else119

if.then118:                                       ; preds = %if.end113
  %75 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %75, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4
  br label %if.end133

if.else119:                                       ; preds = %if.end113
  %76 = load i32, i32* %orig_payload, align 4
  %cmp120 = icmp eq i32 %76, 0
  br i1 %cmp120, label %land.rhs122, label %land.end127

land.rhs122:                                      ; preds = %if.else119
  %77 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_dupack_cnt123 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %77, i32 0, i32 18
  %78 = load i32, i32* %rx_dupack_cnt123, align 4
  %inc124 = add i32 %78, 1
  store i32 %inc124, i32* %rx_dupack_cnt123, align 4
  %cmp125 = icmp uge i32 %inc124, 3
  br label %land.end127

land.end127:                                      ; preds = %land.rhs122, %if.else119
  %79 = phi i1 [ false, %if.else119 ], [ %cmp125, %land.rhs122 ]
  %land.ext128 = zext i1 %79 to i32
  %conv129 = sext i32 %land.ext128 to i64
  %tobool130 = icmp ne i64 %conv129, 0
  br i1 %tobool130, label %if.then131, label %if.end132

if.then131:                                       ; preds = %land.end127
  %80 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %80)
  br label %unlock

if.end132:                                        ; preds = %land.end127
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.then118
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %land.end
  %81 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %82 = load i32, i32* %seq, align 4
  %83 = load i32, i32* %payload_bytes, align 4
  %conv135 = trunc i32 %83 to i16
  %call136 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %81, i32 %82, i16 zeroext %conv135, i16* %trim_start, i16* %trim_end)
  %cmp137 = icmp ne i32 %call136, 0
  %conv138 = zext i1 %cmp137 to i32
  %conv139 = sext i32 %conv138 to i64
  %tobool140 = icmp ne i64 %conv139, 0
  br i1 %tobool140, label %if.then141, label %if.end142

if.then141:                                       ; preds = %if.end134
  br label %unlock

if.end142:                                        ; preds = %if.end134
  %84 = load i16, i16* %trim_start, align 2
  %conv143 = zext i16 %84 to i32
  %85 = load i16, i16* %trim_end, align 2
  %conv144 = zext i16 %85 to i32
  %add145 = add nsw i32 %conv143, %conv144
  %86 = load i32, i32* %payload_bytes, align 4
  %sub146 = sub i32 %86, %add145
  store i32 %sub146, i32* %payload_bytes, align 4
  %87 = load i16, i16* %trim_start, align 2
  %conv147 = zext i16 %87 to i32
  %88 = load i32, i32* %payload_off, align 4
  %add148 = add i32 %88, %conv147
  store i32 %add148, i32* %payload_off, align 4
  %89 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %90 = bitcast %struct.pkt_tcp* %89 to i8*
  %91 = load i32, i32* %payload_off, align 4
  %idx.ext = zext i32 %91 to i64
  %add.ptr = getelementptr inbounds i8, i8* %90, i64 %idx.ext
  %92 = bitcast i8* %add.ptr to %struct.obj_hdr*
  store %struct.obj_hdr* %92, %struct.obj_hdr** %oh, align 8
  %93 = load i16, i16* %trim_start, align 2
  %conv149 = zext i16 %93 to i32
  %94 = load i32, i32* %seq, align 4
  %add150 = add i32 %94, %conv149
  store i32 %add150, i32* %seq, align 4
  %95 = load i32, i32* %seq, align 4
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 16
  %97 = load i32, i32* %rx_next_seq, align 4
  %cmp151 = icmp ne i32 %95, %97
  %conv152 = zext i1 %cmp151 to i32
  %conv153 = sext i32 %conv152 to i64
  %tobool154 = icmp ne i64 %conv153, 0
  br i1 %tobool154, label %if.then155, label %if.end189

if.then155:                                       ; preds = %if.end142
  store i32 1, i32* %trigger_ack, align 4
  %98 = load i32, i32* %payload_bytes, align 4
  %cmp156 = icmp eq i32 %98, 0
  br i1 %cmp156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.then155
  br label %unlock

if.end159:                                        ; preds = %if.then155
  %99 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %99, i32 0, i32 20
  %100 = load i32, i32* %rx_ooo_len, align 4
  %cmp160 = icmp eq i32 %100, 0
  br i1 %cmp160, label %if.then162, label %if.else165

if.then162:                                       ; preds = %if.end159
  %101 = load i32, i32* %seq, align 4
  %102 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %102, i32 0, i32 19
  store i32 %101, i32* %rx_ooo_start, align 16
  %103 = load i32, i32* %payload_bytes, align 4
  %104 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len163 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %104, i32 0, i32 20
  store i32 %103, i32* %rx_ooo_len163, align 4
  %105 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %106 = load i32, i32* %seq, align 4
  %107 = load i32, i32* %payload_bytes, align 4
  %conv164 = trunc i32 %107 to i16
  %108 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %109 = bitcast %struct.obj_hdr* %108 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %105, i32 %106, i16 zeroext %conv164, i8* %109)
  br label %if.end188

if.else165:                                       ; preds = %if.end159
  %110 = load i32, i32* %seq, align 4
  %111 = load i32, i32* %payload_bytes, align 4
  %add166 = add i32 %110, %111
  %112 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start167 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %112, i32 0, i32 19
  %113 = load i32, i32* %rx_ooo_start167, align 16
  %cmp168 = icmp eq i32 %add166, %113
  br i1 %cmp168, label %if.then170, label %if.else175

if.then170:                                       ; preds = %if.else165
  %114 = load i32, i32* %seq, align 4
  %115 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start171 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %115, i32 0, i32 19
  store i32 %114, i32* %rx_ooo_start171, align 16
  %116 = load i32, i32* %payload_bytes, align 4
  %117 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len172 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %117, i32 0, i32 20
  %118 = load i32, i32* %rx_ooo_len172, align 4
  %add173 = add i32 %118, %116
  store i32 %add173, i32* %rx_ooo_len172, align 4
  %119 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %120 = load i32, i32* %seq, align 4
  %121 = load i32, i32* %payload_bytes, align 4
  %conv174 = trunc i32 %121 to i16
  %122 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %123 = bitcast %struct.obj_hdr* %122 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %119, i32 %120, i16 zeroext %conv174, i8* %123)
  br label %if.end187

if.else175:                                       ; preds = %if.else165
  %124 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start176 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %124, i32 0, i32 19
  %125 = load i32, i32* %rx_ooo_start176, align 16
  %126 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len177 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %126, i32 0, i32 20
  %127 = load i32, i32* %rx_ooo_len177, align 4
  %add178 = add i32 %125, %127
  %128 = load i32, i32* %seq, align 4
  %cmp179 = icmp eq i32 %add178, %128
  br i1 %cmp179, label %if.then181, label %if.else185

if.then181:                                       ; preds = %if.else175
  %129 = load i32, i32* %payload_bytes, align 4
  %130 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len182 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %130, i32 0, i32 20
  %131 = load i32, i32* %rx_ooo_len182, align 4
  %add183 = add i32 %131, %129
  store i32 %add183, i32* %rx_ooo_len182, align 4
  %132 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %133 = load i32, i32* %seq, align 4
  %134 = load i32, i32* %payload_bytes, align 4
  %conv184 = trunc i32 %134 to i16
  %135 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %136 = bitcast %struct.obj_hdr* %135 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %132, i32 %133, i16 zeroext %conv184, i8* %136)
  br label %if.end186

if.else185:                                       ; preds = %if.else175
  br label %if.end186

if.end186:                                        ; preds = %if.else185, %if.then181
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.then170
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then162
  br label %unlock

if.end189:                                        ; preds = %if.end142
  %137 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts190 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %137, i32 0, i32 0
  %138 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts190, align 8
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %138, i32 0, i32 2
  %coerce.dive191 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_val, i32 0, i32 0
  %139 = load i32, i32* %coerce.dive191, align 1
  %call192 = call i32 @f_beui32(i32 %139)
  %140 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %140, i32 0, i32 25
  store i32 %call192, i32* %tx_next_ts, align 8
  %141 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp193 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %141, i32 0, i32 2
  %_hdrlen_rsvd_flags194 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp193, i32 0, i32 4
  %142 = load i16, i16* %_hdrlen_rsvd_flags194, align 1
  %call195 = call zeroext i16 @ntohs(i16 zeroext %142) #9
  %conv196 = zext i16 %call195 to i32
  %and197 = and i32 %conv196, 511
  %and198 = and i32 %and197, 16
  %cmp199 = icmp eq i32 %and198, 16
  br i1 %cmp199, label %land.rhs201, label %land.end207

land.rhs201:                                      ; preds = %if.end189
  %143 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts202 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %143, i32 0, i32 0
  %144 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts202, align 8
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %144, i32 0, i32 3
  %coerce.dive203 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr, i32 0, i32 0
  %145 = load i32, i32* %coerce.dive203, align 1
  %call204 = call i32 @f_beui32(i32 %145)
  %cmp205 = icmp ne i32 %call204, 0
  br label %land.end207

land.end207:                                      ; preds = %land.rhs201, %if.end189
  %146 = phi i1 [ false, %if.end189 ], [ %cmp205, %land.rhs201 ]
  %land.ext208 = zext i1 %146 to i32
  %conv209 = sext i32 %land.ext208 to i64
  %tobool210 = icmp ne i64 %conv209, 0
  br i1 %tobool210, label %if.then211, label %if.end233

if.then211:                                       ; preds = %land.end207
  %147 = load i32, i32* %ts.addr, align 4
  %148 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts212 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %148, i32 0, i32 0
  %149 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts212, align 8
  %ts_ecr213 = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %149, i32 0, i32 3
  %coerce.dive214 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr213, i32 0, i32 0
  %150 = load i32, i32* %coerce.dive214, align 1
  %call215 = call i32 @f_beui32(i32 %150)
  %sub216 = sub i32 %147, %call215
  store i32 %sub216, i32* %rtt, align 4
  %151 = load i32, i32* %rtt, align 4
  %cmp217 = icmp ult i32 %151, 100000
  br i1 %cmp217, label %if.then219, label %if.end232

if.then219:                                       ; preds = %if.then211
  %152 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rtt_est = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %152, i32 0, i32 31
  %153 = load i32, i32* %rtt_est, align 4
  %cmp220 = icmp ne i32 %153, 0
  %conv221 = zext i1 %cmp220 to i32
  %conv222 = sext i32 %conv221 to i64
  %tobool223 = icmp ne i64 %conv222, 0
  br i1 %tobool223, label %if.then224, label %if.else229

if.then224:                                       ; preds = %if.then219
  %154 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rtt_est225 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %154, i32 0, i32 31
  %155 = load i32, i32* %rtt_est225, align 4
  %mul226 = mul i32 %155, 7
  %156 = load i32, i32* %rtt, align 4
  %add227 = add i32 %mul226, %156
  %div = udiv i32 %add227, 8
  %157 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rtt_est228 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %157, i32 0, i32 31
  store i32 %div, i32* %rtt_est228, align 4
  br label %if.end231

if.else229:                                       ; preds = %if.then219
  %158 = load i32, i32* %rtt, align 4
  %159 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rtt_est230 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %159, i32 0, i32 31
  store i32 %158, i32* %rtt_est230, align 4
  br label %if.end231

if.end231:                                        ; preds = %if.else229, %if.then224
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %if.then211
  br label %if.end233

if.end233:                                        ; preds = %if.end232, %land.end207
  %160 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp234 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %160, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp234, i32 0, i32 5
  %coerce.dive235 = getelementptr inbounds %struct.beui16, %struct.beui16* %wnd, i32 0, i32 0
  %161 = load i16, i16* %coerce.dive235, align 1
  %call236 = call zeroext i16 @f_beui16(i16 %161)
  %conv237 = zext i16 %call236 to i32
  %162 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %162, i32 0, i32 17
  store i32 %conv237, i32* %rx_remote_avail, align 8
  %163 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp238 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %163, i32 0, i32 1
  %164 = load i64, i64* %rx_base_sp238, align 8
  %and239 = and i64 %164, 32
  %cmp240 = icmp eq i64 %and239, 32
  br i1 %cmp240, label %land.lhs.true, label %if.end246

land.lhs.true:                                    ; preds = %if.end233
  %165 = load i32, i32* %payload_bytes, align 4
  %cmp242 = icmp ugt i32 %165, 0
  br i1 %cmp242, label %if.then244, label %if.end246

if.then244:                                       ; preds = %land.lhs.true
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i32 0, i32 0))
  br label %unlock

if.end246:                                        ; preds = %land.lhs.true, %if.end233
  %167 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp247 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %167, i32 0, i32 1
  %168 = load i64, i64* %rx_base_sp247, align 8
  %and248 = and i64 %168, 2
  %tobool249 = icmp ne i64 %and248, 0
  br i1 %tobool249, label %if.then250, label %if.end379

if.then250:                                       ; preds = %if.end246
  %169 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %169, i32 0, i32 33
  %170 = load i32, i32* %rx_objrem, align 4
  %cmp251 = icmp eq i32 %170, 0
  br i1 %cmp251, label %land.lhs.true253, label %if.end369

land.lhs.true253:                                 ; preds = %if.then250
  %171 = load i32, i32* %payload_bytes, align 4
  %cmp254 = icmp ugt i32 %171, 0
  br i1 %cmp254, label %if.then256, label %if.end369

if.then256:                                       ; preds = %land.lhs.true253
  %172 = load i32, i32* %payload_bytes, align 4
  %conv257 = zext i32 %172 to i64
  %cmp258 = icmp ult i64 %conv257, 8
  br i1 %cmp258, label %if.then265, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then256
  %173 = load i32, i32* %payload_bytes, align 4
  %conv260 = zext i32 %173 to i64
  %174 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %174, i32 0, i32 3
  %175 = load i8, i8* %dstlen, align 1
  %conv261 = zext i8 %175 to i64
  %add262 = add i64 8, %conv261
  %cmp263 = icmp ult i64 %conv260, %add262
  br i1 %cmp263, label %if.then265, label %if.end269

if.then265:                                       ; preds = %lor.lhs.false, %if.then256
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %177 = load i32, i32* %payload_bytes, align 4
  %178 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen266 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %178, i32 0, i32 3
  %179 = load i8, i8* %dstlen266, align 1
  %conv267 = zext i8 %179 to i32
  %call268 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %176, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.11, i32 0, i32 0), i32 %177, i32 %conv267)
  br label %slowpath

if.end269:                                        ; preds = %lor.lhs.false
  %180 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %magic = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %180, i32 0, i32 1
  %coerce.dive270 = getelementptr inbounds %struct.beui16, %struct.beui16* %magic, i32 0, i32 0
  %181 = load i16, i16* %coerce.dive270, align 1
  %call271 = call zeroext i16 @f_beui16(i16 %181)
  %conv272 = zext i16 %call271 to i32
  %cmp273 = icmp ne i32 %conv272, 47109
  br i1 %cmp273, label %if.then275, label %if.end281

if.then275:                                       ; preds = %if.end269
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %183 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %magic276 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %183, i32 0, i32 1
  %coerce.dive277 = getelementptr inbounds %struct.beui16, %struct.beui16* %magic276, i32 0, i32 0
  %184 = load i16, i16* %coerce.dive277, align 1
  %call278 = call zeroext i16 @f_beui16(i16 %184)
  %conv279 = zext i16 %call278 to i32
  %call280 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.12, i32 0, i32 0), i32 %conv279, i32 47109)
  br label %if.end281

if.end281:                                        ; preds = %if.then275, %if.end269
  %185 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %magic282 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %185, i32 0, i32 1
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %magic282, i32 0, i32 0
  store i16 0, i16* %x, align 1
  %186 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %db_id = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %186, i32 0, i32 10
  %187 = load i16, i16* %db_id, align 2
  %conv283 = zext i16 %187 to i32
  %cmp284 = icmp slt i32 %conv283, 16
  br i1 %cmp284, label %if.then286, label %if.else287

if.then286:                                       ; preds = %if.end281
  br label %if.end288

if.else287:                                       ; preds = %if.end281
  call void @__assert_fail(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 558, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end288:                                        ; preds = %if.then286
  %188 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %appctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %188, i32 0, i32 0
  %189 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %189, i32 0, i32 3
  %190 = load i16, i16* %id, align 8
  %idxprom = zext i16 %190 to i64
  %arrayidx = getelementptr inbounds [16 x [16 x %struct.flextcp_pl_appctx]], [16 x [16 x %struct.flextcp_pl_appctx]]* %appctx, i64 0, i64 %idxprom
  %191 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %db_id289 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %191, i32 0, i32 10
  %192 = load i16, i16* %db_id289, align 2
  %idxprom290 = zext i16 %192 to i64
  %arrayidx291 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %arrayidx, i64 0, i64 %idxprom290
  %appst_id = getelementptr inbounds %struct.flextcp_pl_appctx, %struct.flextcp_pl_appctx* %arrayidx291, i32 0, i32 4
  %193 = load i32, i32* %appst_id, align 1
  store i32 %193, i32* %i, align 4
  %194 = load i32, i32* %i, align 4
  %cmp292 = icmp ult i32 %194, 8
  br i1 %cmp292, label %if.then294, label %if.else295

if.then294:                                       ; preds = %if.end288
  br label %if.end296

if.else295:                                       ; preds = %if.end288
  call void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 560, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end296:                                        ; preds = %if.then294
  %195 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %appst297 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %195, i32 0, i32 4
  %196 = load i32, i32* %i, align 4
  %idxprom298 = zext i32 %196 to i64
  %arrayidx299 = getelementptr inbounds [8 x %struct.flextcp_pl_appst], [8 x %struct.flextcp_pl_appst]* %appst297, i64 0, i64 %idxprom298
  store %struct.flextcp_pl_appst* %arrayidx299, %struct.flextcp_pl_appst** %appst, align 8
  %197 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_num = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %197, i32 0, i32 0
  %198 = load i16, i16* %ctx_num, align 1
  %conv300 = zext i16 %198 to i32
  %cmp301 = icmp sgt i32 %conv300, 0
  br i1 %cmp301, label %if.then303, label %if.else304

if.then303:                                       ; preds = %if.end296
  br label %if.end305

if.else304:                                       ; preds = %if.end296
  call void @__assert_fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 562, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end305:                                        ; preds = %if.then303
  %199 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_num306 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %199, i32 0, i32 0
  %200 = load i16, i16* %ctx_num306, align 1
  %conv307 = zext i16 %200 to i32
  %cmp308 = icmp sle i32 %conv307, 31
  br i1 %cmp308, label %if.then310, label %if.else311

if.then310:                                       ; preds = %if.end305
  br label %if.end312

if.else311:                                       ; preds = %if.end305
  call void @__assert_fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 563, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end312:                                        ; preds = %if.then310
  %201 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp313 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %201, i32 0, i32 1
  %202 = load i64, i64* %rx_base_sp313, align 8
  %and314 = and i64 %202, 4
  %cmp315 = icmp eq i64 %and314, 0
  br i1 %cmp315, label %if.then317, label %if.else324

if.then317:                                       ; preds = %if.end312
  %203 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dst = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %203, i32 0, i32 4
  %arraydecay318 = getelementptr inbounds [0 x i8], [0 x i8]* %dst, i32 0, i32 0
  %204 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen319 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %204, i32 0, i32 3
  %205 = load i8, i8* %dstlen319, align 1
  %conv320 = zext i8 %205 to i32
  %call321 = call i32 @rte_hash_crc(i8* %arraydecay318, i32 %conv320, i32 0)
  store i32 %call321, i32* %i, align 4
  %206 = load i32, i32* %i, align 4
  %207 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_num322 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %207, i32 0, i32 0
  %208 = load i16, i16* %ctx_num322, align 1
  %conv323 = zext i16 %208 to i32
  %rem = urem i32 %206, %conv323
  store i32 %rem, i32* %i, align 4
  br label %if.end348

if.else324:                                       ; preds = %if.end312
  store i64 0, i64* %steer_id, align 8
  %209 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen325 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %209, i32 0, i32 3
  %210 = load i8, i8* %dstlen325, align 1
  %conv326 = zext i8 %210 to i32
  %cmp327 = icmp sgt i32 %conv326, 8
  br i1 %cmp327, label %if.then329, label %if.end333

if.then329:                                       ; preds = %if.else324
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %212 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen330 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %212, i32 0, i32 3
  %213 = load i8, i8* %dstlen330, align 1
  %conv331 = zext i8 %213 to i32
  %call332 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %211, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.17, i32 0, i32 0), i32 %conv331)
  br label %slowpath

if.end333:                                        ; preds = %if.else324
  %214 = bitcast i64* %steer_id to i8*
  %215 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dst334 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %215, i32 0, i32 4
  %arraydecay335 = getelementptr inbounds [0 x i8], [0 x i8]* %dst334, i32 0, i32 0
  %216 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen336 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %216, i32 0, i32 3
  %217 = load i8, i8* %dstlen336, align 1
  %conv337 = zext i8 %217 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 1 %arraydecay335, i64 %conv337, i1 false)
  %218 = load i64, i64* %steer_id, align 8
  %219 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_num338 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %219, i32 0, i32 0
  %220 = load i16, i16* %ctx_num338, align 1
  %conv339 = zext i16 %220 to i64
  %cmp340 = icmp uge i64 %218, %conv339
  br i1 %cmp340, label %if.then342, label %if.end346

if.then342:                                       ; preds = %if.end333
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %222 = load i64, i64* %steer_id, align 8
  %223 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_num343 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %223, i32 0, i32 0
  %224 = load i16, i16* %ctx_num343, align 1
  %conv344 = zext i16 %224 to i32
  %call345 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %221, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.18, i32 0, i32 0), i64 %222, i32 %conv344)
  br label %slowpath

if.end346:                                        ; preds = %if.end333
  %225 = load i64, i64* %steer_id, align 8
  %conv347 = trunc i64 %225 to i32
  store i32 %conv347, i32* %i, align 4
  br label %if.end348

if.end348:                                        ; preds = %if.end346, %if.then317
  %226 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8
  %ctx_ids = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %226, i32 0, i32 1
  %227 = load i32, i32* %i, align 4
  %idxprom349 = zext i32 %227 to i64
  %arrayidx350 = getelementptr inbounds [31 x i16], [31 x i16]* %ctx_ids, i64 0, i64 %idxprom349
  %228 = load i16, i16* %arrayidx350, align 1
  %conv351 = zext i16 %228 to i32
  store i32 %conv351, i32* %i, align 4
  %229 = load i32, i32* %i, align 4
  %cmp352 = icmp ult i32 %229, 16
  br i1 %cmp352, label %if.then354, label %if.else355

if.then354:                                       ; preds = %if.end348
  br label %if.end356

if.else355:                                       ; preds = %if.end348
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 587, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end356:                                        ; preds = %if.then354
  %230 = load i32, i32* %i, align 4
  %conv357 = trunc i32 %230 to i16
  %231 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %db_id358 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %231, i32 0, i32 10
  store i16 %conv357, i16* %db_id358, align 2
  %232 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %dstlen359 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %232, i32 0, i32 3
  %233 = load i8, i8* %dstlen359, align 1
  %conv360 = zext i8 %233 to i64
  %add361 = add i64 8, %conv360
  %234 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %len362 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %234, i32 0, i32 0
  %coerce.dive363 = getelementptr inbounds %struct.beui32, %struct.beui32* %len362, i32 0, i32 0
  %235 = load i32, i32* %coerce.dive363, align 1
  %call364 = call i32 @f_beui32(i32 %235)
  %conv365 = zext i32 %call364 to i64
  %add366 = add i64 %add361, %conv365
  %conv367 = trunc i64 %add366 to i32
  %236 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_objrem368 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %236, i32 0, i32 33
  store i32 %conv367, i32* %rx_objrem368, align 4
  br label %if.end369

if.end369:                                        ; preds = %if.end356, %land.lhs.true253, %if.then250
  %237 = load i32, i32* %payload_bytes, align 4
  %238 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_objrem370 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %238, i32 0, i32 33
  %239 = load i32, i32* %rx_objrem370, align 4
  %cmp371 = icmp ugt i32 %237, %239
  br i1 %cmp371, label %if.then373, label %if.end376

if.then373:                                       ; preds = %if.end369
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %241 = load i32, i32* %payload_bytes, align 4
  %242 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_objrem374 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %242, i32 0, i32 33
  %243 = load i32, i32* %rx_objrem374, align 4
  %call375 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.20, i32 0, i32 0), i32 %241, i32 %243)
  br label %slowpath

if.end376:                                        ; preds = %if.end369
  %244 = load i32, i32* %payload_bytes, align 4
  %245 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_objrem377 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %245, i32 0, i32 33
  %246 = load i32, i32* %rx_objrem377, align 4
  %sub378 = sub i32 %246, %244
  store i32 %sub378, i32* %rx_objrem377, align 4
  br label %if.end379

if.end379:                                        ; preds = %if.end376, %if.end246
  %247 = load i32, i32* %payload_bytes, align 4
  %cmp380 = icmp ugt i32 %247, 0
  br i1 %cmp380, label %if.then382, label %if.end468

if.then382:                                       ; preds = %if.end379
  %248 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %249 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos383 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %249, i32 0, i32 15
  %250 = load i32, i32* %rx_next_pos383, align 64
  %251 = load i32, i32* %payload_bytes, align 4
  %conv384 = trunc i32 %251 to i16
  %252 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8
  %253 = bitcast %struct.obj_hdr* %252 to i8*
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %248, i32 %250, i16 zeroext %conv384, i8* %253)
  %254 = load i32, i32* %payload_bytes, align 4
  store i32 %254, i32* %rx_bump, align 4
  %255 = load i32, i32* %payload_bytes, align 4
  %256 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %256, i32 0, i32 14
  %257 = load i32, i32* %rx_avail, align 4
  %sub385 = sub i32 %257, %255
  store i32 %sub385, i32* %rx_avail, align 4
  %258 = load i32, i32* %payload_bytes, align 4
  %259 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos386 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %259, i32 0, i32 15
  %260 = load i32, i32* %rx_next_pos386, align 64
  %add387 = add i32 %260, %258
  store i32 %add387, i32* %rx_next_pos386, align 64
  %261 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos388 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %261, i32 0, i32 15
  %262 = load i32, i32* %rx_next_pos388, align 64
  %263 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %263, i32 0, i32 3
  %264 = load i32, i32* %rx_len, align 8
  %cmp389 = icmp uge i32 %262, %264
  br i1 %cmp389, label %if.then391, label %if.end395

if.then391:                                       ; preds = %if.then382
  %265 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len392 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %265, i32 0, i32 3
  %266 = load i32, i32* %rx_len392, align 8
  %267 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos393 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %267, i32 0, i32 15
  %268 = load i32, i32* %rx_next_pos393, align 64
  %sub394 = sub i32 %268, %266
  store i32 %sub394, i32* %rx_next_pos393, align 64
  br label %if.end395

if.end395:                                        ; preds = %if.then391, %if.then382
  %269 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos396 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %269, i32 0, i32 15
  %270 = load i32, i32* %rx_next_pos396, align 64
  %271 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len397 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %271, i32 0, i32 3
  %272 = load i32, i32* %rx_len397, align 8
  %cmp398 = icmp ult i32 %270, %272
  br i1 %cmp398, label %if.then400, label %if.else401

if.then400:                                       ; preds = %if.end395
  br label %if.end402

if.else401:                                       ; preds = %if.end395
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 613, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end402:                                        ; preds = %if.then400
  %273 = load i32, i32* %payload_bytes, align 4
  %274 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq403 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %274, i32 0, i32 16
  %275 = load i32, i32* %rx_next_seq403, align 4
  %add404 = add i32 %275, %273
  store i32 %add404, i32* %rx_next_seq403, align 4
  store i32 1, i32* %trigger_ack, align 4
  %276 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len405 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %276, i32 0, i32 20
  %277 = load i32, i32* %rx_ooo_len405, align 4
  %cmp406 = icmp ne i32 %277, 0
  %conv407 = zext i1 %cmp406 to i32
  %conv408 = sext i32 %conv407 to i64
  %tobool409 = icmp ne i64 %conv408, 0
  br i1 %tobool409, label %if.then410, label %if.end467

if.then410:                                       ; preds = %if.end402
  %278 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %279 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start411 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %279, i32 0, i32 19
  %280 = load i32, i32* %rx_ooo_start411, align 16
  %281 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len412 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %281, i32 0, i32 20
  %282 = load i32, i32* %rx_ooo_len412, align 4
  %conv413 = trunc i32 %282 to i16
  %call414 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %278, i32 %280, i16 zeroext %conv413, i16* %trim_start, i16* %trim_end)
  %cmp415 = icmp ne i32 %call414, 0
  br i1 %cmp415, label %if.then417, label %if.else419

if.then417:                                       ; preds = %if.then410
  %283 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len418 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %283, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len418, align 4
  br label %if.end466

if.else419:                                       ; preds = %if.then410
  %284 = load i16, i16* %trim_start, align 2
  %conv420 = zext i16 %284 to i32
  %285 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start421 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %285, i32 0, i32 19
  %286 = load i32, i32* %rx_ooo_start421, align 16
  %add422 = add i32 %286, %conv420
  store i32 %add422, i32* %rx_ooo_start421, align 16
  %287 = load i16, i16* %trim_start, align 2
  %conv423 = zext i16 %287 to i32
  %288 = load i16, i16* %trim_end, align 2
  %conv424 = zext i16 %288 to i32
  %add425 = add nsw i32 %conv423, %conv424
  %289 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len426 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %289, i32 0, i32 20
  %290 = load i32, i32* %rx_ooo_len426, align 4
  %sub427 = sub i32 %290, %add425
  store i32 %sub427, i32* %rx_ooo_len426, align 4
  %291 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len428 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %291, i32 0, i32 20
  %292 = load i32, i32* %rx_ooo_len428, align 4
  %cmp429 = icmp ugt i32 %292, 0
  br i1 %cmp429, label %land.lhs.true431, label %if.end465

land.lhs.true431:                                 ; preds = %if.else419
  %293 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_start432 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %293, i32 0, i32 19
  %294 = load i32, i32* %rx_ooo_start432, align 16
  %295 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq433 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %295, i32 0, i32 16
  %296 = load i32, i32* %rx_next_seq433, align 4
  %cmp434 = icmp eq i32 %294, %296
  br i1 %cmp434, label %if.then436, label %if.end465

if.then436:                                       ; preds = %land.lhs.true431
  %297 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len437 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %297, i32 0, i32 20
  %298 = load i32, i32* %rx_ooo_len437, align 4
  %299 = load i32, i32* %rx_bump, align 4
  %add438 = add i32 %299, %298
  store i32 %add438, i32* %rx_bump, align 4
  %300 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len439 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %300, i32 0, i32 20
  %301 = load i32, i32* %rx_ooo_len439, align 4
  %302 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail440 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %302, i32 0, i32 14
  %303 = load i32, i32* %rx_avail440, align 4
  %sub441 = sub i32 %303, %301
  store i32 %sub441, i32* %rx_avail440, align 4
  %304 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len442 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %304, i32 0, i32 20
  %305 = load i32, i32* %rx_ooo_len442, align 4
  %306 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos443 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %306, i32 0, i32 15
  %307 = load i32, i32* %rx_next_pos443, align 64
  %add444 = add i32 %307, %305
  store i32 %add444, i32* %rx_next_pos443, align 64
  %308 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos445 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %308, i32 0, i32 15
  %309 = load i32, i32* %rx_next_pos445, align 64
  %310 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len446 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %310, i32 0, i32 3
  %311 = load i32, i32* %rx_len446, align 8
  %cmp447 = icmp uge i32 %309, %311
  br i1 %cmp447, label %if.then449, label %if.end453

if.then449:                                       ; preds = %if.then436
  %312 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len450 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %312, i32 0, i32 3
  %313 = load i32, i32* %rx_len450, align 8
  %314 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos451 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %314, i32 0, i32 15
  %315 = load i32, i32* %rx_next_pos451, align 64
  %sub452 = sub i32 %315, %313
  store i32 %sub452, i32* %rx_next_pos451, align 64
  br label %if.end453

if.end453:                                        ; preds = %if.then449, %if.then436
  %316 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos454 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %316, i32 0, i32 15
  %317 = load i32, i32* %rx_next_pos454, align 64
  %318 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len455 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %318, i32 0, i32 3
  %319 = load i32, i32* %rx_len455, align 8
  %cmp456 = icmp ult i32 %317, %319
  br i1 %cmp456, label %if.then458, label %if.else459

if.then458:                                       ; preds = %if.end453
  br label %if.end460

if.else459:                                       ; preds = %if.end453
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 648, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @__PRETTY_FUNCTION__.fast_flows_packet, i32 0, i32 0)) #8
  unreachable

if.end460:                                        ; preds = %if.then458
  %320 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len461 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %320, i32 0, i32 20
  %321 = load i32, i32* %rx_ooo_len461, align 4
  %322 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq462 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %322, i32 0, i32 16
  %323 = load i32, i32* %rx_next_seq462, align 4
  %add463 = add i32 %323, %321
  store i32 %add463, i32* %rx_next_seq462, align 4
  %324 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len464 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %324, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len464, align 4
  br label %if.end465

if.end465:                                        ; preds = %if.end460, %land.lhs.true431, %if.else419
  br label %if.end466

if.end466:                                        ; preds = %if.end465, %if.then417
  br label %if.end467

if.end467:                                        ; preds = %if.end466, %if.end402
  br label %if.end468

if.end468:                                        ; preds = %if.end467, %if.end379
  %325 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp469 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %325, i32 0, i32 2
  %_hdrlen_rsvd_flags470 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp469, i32 0, i32 4
  %326 = load i16, i16* %_hdrlen_rsvd_flags470, align 1
  %call471 = call zeroext i16 @ntohs(i16 zeroext %326) #9
  %conv472 = zext i16 %call471 to i32
  %and473 = and i32 %conv472, 511
  %and474 = and i32 %and473, 1
  %cmp475 = icmp eq i32 %and474, 1
  br i1 %cmp475, label %land.lhs.true477, label %if.end496

land.lhs.true477:                                 ; preds = %if.end468
  %327 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp478 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %327, i32 0, i32 1
  %328 = load i64, i64* %rx_base_sp478, align 8
  %and479 = and i64 %328, 32
  %tobool480 = icmp ne i64 %and479, 0
  br i1 %tobool480, label %if.end496, label %if.then481

if.then481:                                       ; preds = %land.lhs.true477
  %329 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq482 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %329, i32 0, i32 16
  %330 = load i32, i32* %rx_next_seq482, align 4
  %331 = load i32, i32* %seq, align 4
  %332 = load i32, i32* %orig_payload, align 4
  %add483 = add i32 %331, %332
  %cmp484 = icmp eq i32 %330, %add483
  br i1 %cmp484, label %land.lhs.true486, label %if.else493

land.lhs.true486:                                 ; preds = %if.then481
  %333 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_ooo_len487 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %333, i32 0, i32 20
  %334 = load i32, i32* %rx_ooo_len487, align 4
  %tobool488 = icmp ne i32 %334, 0
  br i1 %tobool488, label %if.else493, label %if.then489

if.then489:                                       ; preds = %land.lhs.true486
  store i32 1, i32* %fin_bump, align 4
  %335 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp490 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %335, i32 0, i32 1
  %336 = load i64, i64* %rx_base_sp490, align 8
  %or = or i64 %336, 32
  store i64 %or, i64* %rx_base_sp490, align 8
  %337 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq491 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %337, i32 0, i32 16
  %338 = load i32, i32* %rx_next_seq491, align 4
  %inc492 = add i32 %338, 1
  store i32 %inc492, i32* %rx_next_seq491, align 4
  store i32 1, i32* %trigger_ack, align 4
  br label %if.end495

if.else493:                                       ; preds = %land.lhs.true486, %if.then481
  %339 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call494 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %339, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.22, i32 0, i32 0))
  br label %if.end495

if.end495:                                        ; preds = %if.else493, %if.then489
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %land.lhs.true477, %if.end468
  br label %unlock

unlock:                                           ; preds = %if.end496, %if.then244, %if.end188, %if.then158, %if.then141, %if.then131
  %340 = load i32, i32* %rx_bump, align 4
  %cmp497 = icmp ne i32 %340, 0
  br i1 %cmp497, label %lor.end, label %lor.lhs.false499

lor.lhs.false499:                                 ; preds = %unlock
  %341 = load i32, i32* %tx_bump, align 4
  %cmp500 = icmp ne i32 %341, 0
  br i1 %cmp500, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false499
  %342 = load i32, i32* %fin_bump, align 4
  %tobool502 = icmp ne i32 %342, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false499, %unlock
  %343 = phi i1 [ true, %lor.lhs.false499 ], [ true, %unlock ], [ %tobool502, %lor.rhs ]
  %lor.ext = zext i1 %343 to i32
  %conv503 = sext i32 %lor.ext to i64
  %tobool504 = icmp ne i64 %conv503, 0
  br i1 %tobool504, label %if.then505, label %if.end519

if.then505:                                       ; preds = %lor.end
  %344 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp506 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %344, i32 0, i32 1
  %345 = load i64, i64* %rx_base_sp506, align 8
  %and507 = and i64 %345, 2
  %tobool508 = icmp ne i64 %and507, 0
  br i1 %tobool508, label %if.else510, label %if.then509

if.then509:                                       ; preds = %if.then505
  store i16 1, i16* %type, align 2
  br label %if.end511

if.else510:                                       ; preds = %if.then505
  store i16 2, i16* %type, align 2
  br label %if.end511

if.end511:                                        ; preds = %if.else510, %if.then509
  %346 = load i32, i32* %fin_bump, align 4
  %tobool512 = icmp ne i32 %346, 0
  br i1 %tobool512, label %if.then513, label %if.end517

if.then513:                                       ; preds = %if.end511
  %347 = load i16, i16* %type, align 2
  %conv514 = zext i16 %347 to i32
  %or515 = or i32 %conv514, 256
  %conv516 = trunc i32 %or515 to i16
  store i16 %conv516, i16* %type, align 2
  br label %if.end517

if.end517:                                        ; preds = %if.then513, %if.end511
  %348 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %349 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %db_id518 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %349, i32 0, i32 10
  %350 = load i16, i16* %db_id518, align 2
  %351 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %opaque = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %351, i32 0, i32 0
  %352 = load i64, i64* %opaque, align 64
  %353 = load i32, i32* %rx_bump, align 4
  %354 = load i32, i32* %rx_pos, align 4
  %355 = load i32, i32* %tx_bump, align 4
  %356 = load i16, i16* %type, align 2
  call void @arx_cache_add(%struct.dataplane_context* %348, i16 zeroext %350, i64 %352, i32 %353, i32 %354, i32 %355, i16 zeroext %356)
  br label %if.end519

if.end519:                                        ; preds = %if.end517, %lor.end
  %357 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call520 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %357, i32* null)
  store i32 %call520, i32* %new_avail, align 4
  %358 = load i32, i32* %new_avail, align 4
  %359 = load i32, i32* %old_avail, align 4
  %cmp521 = icmp ugt i32 %358, %359
  br i1 %cmp521, label %if.then523, label %if.end550

if.then523:                                       ; preds = %if.end519
  %360 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp524 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %360, i32 0, i32 1
  %361 = load i64, i64* %rx_base_sp524, align 8
  %and525 = and i64 %361, 2
  %tobool526 = icmp ne i64 %and525, 0
  br i1 %tobool526, label %if.else536, label %if.then527

if.then527:                                       ; preds = %if.then523
  %362 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %362, i32 0, i32 1
  %363 = load %struct.qman_thread*, %struct.qman_thread** %qman_t, align 8
  %364 = load i16, i16* %flow_id, align 2
  %conv528 = zext i16 %364 to i32
  %365 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %365, i32 0, i32 26
  %366 = load i32, i32* %tx_rate, align 4
  %367 = load i32, i32* %new_avail, align 4
  %368 = load i32, i32* %old_avail, align 4
  %sub529 = sub i32 %367, %368
  %call530 = call i32 @qman_set(%struct.qman_thread* %363, i32 %conv528, i32 %366, i32 %sub529, i16 zeroext 1448, i8 zeroext 19)
  %cmp531 = icmp ne i32 %call530, 0
  br i1 %cmp531, label %if.then533, label %if.end535

if.then533:                                       ; preds = %if.then527
  %369 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call534 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %369, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.23, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end535:                                        ; preds = %if.then527
  br label %if.end549

if.else536:                                       ; preds = %if.then523
  %370 = load i32, i32* %old_avail, align 4
  %cmp537 = icmp eq i32 %370, 0
  br i1 %cmp537, label %if.then539, label %if.end548

if.then539:                                       ; preds = %if.else536
  %371 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t540 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %371, i32 0, i32 1
  %372 = load %struct.qman_thread*, %struct.qman_thread** %qman_t540, align 8
  %373 = load i16, i16* %flow_id, align 2
  %conv541 = zext i16 %373 to i32
  %call542 = call i32 @qman_set(%struct.qman_thread* %372, i32 %conv541, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp543 = icmp ne i32 %call542, 0
  br i1 %cmp543, label %if.then545, label %if.end547

if.then545:                                       ; preds = %if.then539
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call546 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %374, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.24, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end547:                                        ; preds = %if.then539
  br label %if.end548

if.end548:                                        ; preds = %if.end547, %if.else536
  br label %if.end549

if.end549:                                        ; preds = %if.end548, %if.end535
  br label %if.end550

if.end550:                                        ; preds = %if.end549, %if.end519
  %375 = load i32, i32* %trigger_ack, align 4
  %tobool551 = icmp ne i32 %375, 0
  br i1 %tobool551, label %if.then552, label %if.end558

if.then552:                                       ; preds = %if.end550
  %376 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %377 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_seq553 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %377, i32 0, i32 23
  %378 = load i32, i32* %tx_next_seq553, align 32
  %379 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq554 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %379, i32 0, i32 16
  %380 = load i32, i32* %rx_next_seq554, align 4
  %381 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail555 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %381, i32 0, i32 14
  %382 = load i32, i32* %rx_avail555, align 4
  %383 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_ts556 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %383, i32 0, i32 25
  %384 = load i32, i32* %tx_next_ts556, align 8
  %385 = load i32, i32* %ts.addr, align 4
  %386 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %387 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8
  %ts557 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %387, i32 0, i32 0
  %388 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts557, align 8
  call void @flow_tx_ack(%struct.dataplane_context* %376, i32 %378, i32 %380, i32 %382, i32 %384, i32 %385, %struct.network_buf_handle* %386, %struct.tcp_timestamp_opt* %388)
  br label %if.end558

if.end558:                                        ; preds = %if.then552, %if.end550
  %389 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock559 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %389, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock559)
  %390 = load i32, i32* %trigger_ack, align 4
  store i32 %390, i32* %retval, align 4
  br label %return

slowpath:                                         ; preds = %if.then373, %if.then342, %if.then329, %if.then265, %if.end41, %if.then
  %391 = load i32, i32* %no_permanent_sp, align 4
  %tobool560 = icmp ne i32 %391, 0
  br i1 %tobool560, label %if.end564, label %if.then561

if.then561:                                       ; preds = %slowpath
  %392 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp562 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %392, i32 0, i32 1
  %393 = load i64, i64* %rx_base_sp562, align 8
  %or563 = or i64 %393, 1
  store i64 %or563, i64* %rx_base_sp562, align 8
  br label %if.end564

if.end564:                                        ; preds = %if.then561, %slowpath
  %394 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock565 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %394, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock565)
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end564, %if.end558
  %395 = load i32, i32* %retval, align 4
  ret i32 %395
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %fs, i32 %ack, i32* %bump) #0 {
entry:
  %retval = alloca i32, align 4
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %ack.addr = alloca i32, align 4
  %bump.addr = alloca i32*, align 8
  %fsack_a = alloca i32, align 4
  %fsack_b = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %ack, i32* %ack.addr, align 4
  store i32* %bump, i32** %bump.addr, align 8
  %0 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %0, i32 0, i32 23
  %1 = load i32, i32* %tx_next_seq, align 32
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %3 = load i32, i32* %tx_sent, align 8
  %sub = sub i32 %1, %3
  store i32 %sub, i32* %fsack_a, align 4
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 23
  %5 = load i32, i32* %tx_next_seq1, align 32
  store i32 %5, i32* %fsack_b, align 4
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 22
  %7 = load i32, i32* %tx_next_pos, align 4
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 24
  %9 = load i32, i32* %tx_head, align 4
  %cmp = icmp ule i32 %7, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_head2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 24
  %11 = load i32, i32* %tx_head2, align 4
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 22
  %13 = load i32, i32* %tx_next_pos3, align 4
  %sub4 = sub i32 %11, %13
  %14 = load i32, i32* %fsack_b, align 4
  %add = add i32 %14, %sub4
  store i32 %add, i32* %fsack_b, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_head5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %15, i32 0, i32 24
  %16 = load i32, i32* %tx_head5, align 4
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %17, i32 0, i32 22
  %18 = load i32, i32* %tx_next_pos6, align 4
  %sub7 = sub i32 %16, %18
  %19 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %19, i32 0, i32 4
  %20 = load i32, i32* %tx_len, align 4
  %add8 = add i32 %sub7, %20
  %21 = load i32, i32* %fsack_b, align 4
  %add9 = add i32 %21, %add8
  store i32 %add9, i32* %fsack_b, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load i32, i32* %fsack_a, align 4
  %23 = load i32, i32* %fsack_b, align 4
  %cmp10 = icmp ule i32 %22, %23
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end
  %24 = load i32, i32* %ack.addr, align 4
  %25 = load i32, i32* %fsack_a, align 4
  %cmp12 = icmp ult i32 %24, %25
  br i1 %cmp12, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then11
  %26 = load i32, i32* %ack.addr, align 4
  %27 = load i32, i32* %fsack_b, align 4
  %cmp13 = icmp ugt i32 %26, %27
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false, %if.then11
  store i32 -1, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %lor.lhs.false
  %28 = load i32, i32* %ack.addr, align 4
  %29 = load i32, i32* %fsack_a, align 4
  %sub16 = sub i32 %28, %29
  %30 = load i32*, i32** %bump.addr, align 8
  store i32 %sub16, i32* %30, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.else17:                                        ; preds = %if.end
  %31 = load i32, i32* %fsack_a, align 4
  %32 = load i32, i32* %ack.addr, align 4
  %cmp18 = icmp ugt i32 %31, %32
  br i1 %cmp18, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %if.else17
  %33 = load i32, i32* %ack.addr, align 4
  %34 = load i32, i32* %fsack_b, align 4
  %cmp19 = icmp ugt i32 %33, %34
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %land.lhs.true, %if.else17
  %35 = load i32, i32* %ack.addr, align 4
  %36 = load i32, i32* %fsack_a, align 4
  %sub22 = sub i32 %35, %36
  %37 = load i32*, i32** %bump.addr, align 8
  store i32 %sub22, i32* %37, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then20, %if.end15, %if.then14
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %x = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %0 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %0, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4
  %1 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %1, i32 0, i32 21
  %2 = load i32, i32* %tx_sent, align 8
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 23
  %4 = load i32, i32* %tx_next_seq, align 32
  %sub = sub i32 %4, %2
  store i32 %sub, i32* %tx_next_seq, align 32
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 22
  %6 = load i32, i32* %tx_next_pos, align 4
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 21
  %8 = load i32, i32* %tx_sent1, align 8
  %cmp = icmp uge i32 %6, %8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 21
  %10 = load i32, i32* %tx_sent2, align 8
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 22
  %12 = load i32, i32* %tx_next_pos3, align 4
  %sub4 = sub i32 %12, %10
  store i32 %sub4, i32* %tx_next_pos3, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 21
  %14 = load i32, i32* %tx_sent5, align 8
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %15, i32 0, i32 22
  %16 = load i32, i32* %tx_next_pos6, align 4
  %sub7 = sub i32 %14, %16
  store i32 %sub7, i32* %x, align 4
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %17, i32 0, i32 4
  %18 = load i32, i32* %tx_len, align 4
  %19 = load i32, i32* %x, align 4
  %sub8 = sub i32 %18, %19
  %20 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_next_pos9 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %20, i32 0, i32 22
  store i32 %sub8, i32* %tx_next_pos9, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_sent10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %21, i32 0, i32 21
  store i32 0, i32* %tx_sent10, align 8
  %22 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %cnt_tx_drops = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %22, i32 0, i32 27
  %23 = load i16, i16* %cnt_tx_drops, align 16
  %conv = zext i16 %23 to i32
  %cmp11 = icmp eq i32 %conv, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %24 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %24, i32 0, i32 26
  %25 = load i32, i32* %tx_rate, align 4
  %div = udiv i32 %25, 2
  store i32 %div, i32* %tx_rate, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  %26 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %cnt_tx_drops15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %26, i32 0, i32 27
  %27 = load i16, i16* %cnt_tx_drops15, align 16
  %inc = add i16 %27, 1
  store i16 %inc, i16* %cnt_tx_drops15, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %fs, i32 %pkt_seq, i16 zeroext %pkt_bytes, i16* %trim_start, i16* %trim_end) #0 {
entry:
  %retval = alloca i32, align 4
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pkt_seq.addr = alloca i32, align 4
  %pkt_bytes.addr = alloca i16, align 2
  %trim_start.addr = alloca i16*, align 8
  %trim_end.addr = alloca i16*, align 8
  %pseq_a = alloca i32, align 4
  %pseq_b = alloca i32, align 4
  %sseq_a = alloca i32, align 4
  %sseq_b = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %pkt_seq, i32* %pkt_seq.addr, align 4
  store i16 %pkt_bytes, i16* %pkt_bytes.addr, align 2
  store i16* %trim_start, i16** %trim_start.addr, align 8
  store i16* %trim_end, i16** %trim_end.addr, align 8
  %0 = load i32, i32* %pkt_seq.addr, align 4
  store i32 %0, i32* %pseq_a, align 4
  %1 = load i32, i32* %pkt_seq.addr, align 4
  %2 = load i16, i16* %pkt_bytes.addr, align 2
  %conv = zext i16 %2 to i32
  %add = add i32 %1, %conv
  store i32 %add, i32* %pseq_b, align 4
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 16
  %4 = load i32, i32* %rx_next_seq, align 4
  store i32 %4, i32* %sseq_a, align 4
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 16
  %6 = load i32, i32* %rx_next_seq1, align 4
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 14
  %8 = load i32, i32* %rx_avail, align 4
  %add2 = add i32 %6, %8
  store i32 %add2, i32* %sseq_b, align 4
  %9 = load i32, i32* %pseq_a, align 4
  %10 = load i32, i32* %pseq_b, align 4
  %cmp = icmp ule i32 %9, %10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %sseq_a, align 4
  %12 = load i32, i32* %sseq_b, align 4
  %cmp4 = icmp ule i32 %11, %12
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %13 = load i32, i32* %pseq_b, align 4
  %14 = load i32, i32* %sseq_a, align 4
  %cmp6 = icmp ult i32 %13, %14
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %15 = load i32, i32* %pseq_a, align 4
  %16 = load i32, i32* %sseq_b, align 4
  %cmp9 = icmp ugt i32 %15, %16
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end
  %17 = load i32, i32* %pseq_a, align 4
  %18 = load i32, i32* %sseq_a, align 4
  %cmp13 = icmp ult i32 %17, %18
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end12
  %19 = load i32, i32* %sseq_a, align 4
  %20 = load i32, i32* %pseq_a, align 4
  %sub = sub i32 %19, %20
  br label %cond.end

cond.false:                                       ; preds = %if.end12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %conv15 = trunc i32 %cond to i16
  %21 = load i16*, i16** %trim_start.addr, align 8
  store i16 %conv15, i16* %21, align 2
  %22 = load i32, i32* %pseq_b, align 4
  %23 = load i32, i32* %sseq_b, align 4
  %cmp16 = icmp ugt i32 %22, %23
  br i1 %cmp16, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end
  %24 = load i32, i32* %pseq_b, align 4
  %25 = load i32, i32* %sseq_b, align 4
  %sub19 = sub i32 %24, %25
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %sub19, %cond.true18 ], [ 0, %cond.false20 ]
  %conv23 = trunc i32 %cond22 to i16
  %26 = load i16*, i16** %trim_end.addr, align 8
  store i16 %conv23, i16* %26, align 2
  br label %if.end113

if.else:                                          ; preds = %land.lhs.true, %entry
  %27 = load i32, i32* %pseq_a, align 4
  %28 = load i32, i32* %pseq_b, align 4
  %cmp24 = icmp ule i32 %27, %28
  br i1 %cmp24, label %land.lhs.true26, label %if.else59

land.lhs.true26:                                  ; preds = %if.else
  %29 = load i32, i32* %sseq_a, align 4
  %30 = load i32, i32* %sseq_b, align 4
  %cmp27 = icmp ugt i32 %29, %30
  br i1 %cmp27, label %if.then29, label %if.else59

if.then29:                                        ; preds = %land.lhs.true26
  %31 = load i32, i32* %pseq_a, align 4
  %32 = load i32, i32* %sseq_b, align 4
  %cmp30 = icmp ugt i32 %31, %32
  br i1 %cmp30, label %land.lhs.true32, label %if.end36

land.lhs.true32:                                  ; preds = %if.then29
  %33 = load i32, i32* %pseq_b, align 4
  %34 = load i32, i32* %sseq_a, align 4
  %cmp33 = icmp ult i32 %33, %34
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %land.lhs.true32
  store i32 -1, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %land.lhs.true32, %if.then29
  %35 = load i32, i32* %pseq_a, align 4
  %36 = load i32, i32* %sseq_b, align 4
  %cmp37 = icmp ugt i32 %35, %36
  br i1 %cmp37, label %land.lhs.true39, label %cond.false44

land.lhs.true39:                                  ; preds = %if.end36
  %37 = load i32, i32* %pseq_a, align 4
  %38 = load i32, i32* %sseq_a, align 4
  %cmp40 = icmp ult i32 %37, %38
  br i1 %cmp40, label %cond.true42, label %cond.false44

cond.true42:                                      ; preds = %land.lhs.true39
  %39 = load i32, i32* %sseq_a, align 4
  %40 = load i32, i32* %pseq_a, align 4
  %sub43 = sub i32 %39, %40
  br label %cond.end45

cond.false44:                                     ; preds = %land.lhs.true39, %if.end36
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi i32 [ %sub43, %cond.true42 ], [ 0, %cond.false44 ]
  %conv47 = trunc i32 %cond46 to i16
  %41 = load i16*, i16** %trim_start.addr, align 8
  store i16 %conv47, i16* %41, align 2
  %42 = load i32, i32* %pseq_b, align 4
  %43 = load i32, i32* %sseq_b, align 4
  %cmp48 = icmp uge i32 %42, %43
  br i1 %cmp48, label %land.lhs.true50, label %cond.false55

land.lhs.true50:                                  ; preds = %cond.end45
  %44 = load i32, i32* %pseq_b, align 4
  %45 = load i32, i32* %sseq_a, align 4
  %cmp51 = icmp ult i32 %44, %45
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %land.lhs.true50
  %46 = load i32, i32* %pseq_b, align 4
  %47 = load i32, i32* %sseq_b, align 4
  %sub54 = sub i32 %46, %47
  br label %cond.end56

cond.false55:                                     ; preds = %land.lhs.true50, %cond.end45
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %sub54, %cond.true53 ], [ 0, %cond.false55 ]
  %conv58 = trunc i32 %cond57 to i16
  %48 = load i16*, i16** %trim_end.addr, align 8
  store i16 %conv58, i16* %48, align 2
  br label %if.end112

if.else59:                                        ; preds = %land.lhs.true26, %if.else
  %49 = load i32, i32* %pseq_a, align 4
  %50 = load i32, i32* %pseq_b, align 4
  %cmp60 = icmp ugt i32 %49, %50
  br i1 %cmp60, label %land.lhs.true62, label %if.else94

land.lhs.true62:                                  ; preds = %if.else59
  %51 = load i32, i32* %sseq_a, align 4
  %52 = load i32, i32* %sseq_b, align 4
  %cmp63 = icmp ule i32 %51, %52
  br i1 %cmp63, label %if.then65, label %if.else94

if.then65:                                        ; preds = %land.lhs.true62
  %53 = load i32, i32* %pseq_a, align 4
  %54 = load i32, i32* %sseq_b, align 4
  %cmp66 = icmp ugt i32 %53, %54
  br i1 %cmp66, label %land.lhs.true68, label %if.end72

land.lhs.true68:                                  ; preds = %if.then65
  %55 = load i32, i32* %pseq_b, align 4
  %56 = load i32, i32* %sseq_a, align 4
  %cmp69 = icmp ult i32 %55, %56
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %land.lhs.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %land.lhs.true68, %if.then65
  %57 = load i32, i32* %sseq_a, align 4
  %58 = load i32, i32* %pseq_b, align 4
  %cmp73 = icmp ule i32 %57, %58
  br i1 %cmp73, label %cond.true77, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end72
  %59 = load i32, i32* %sseq_a, align 4
  %60 = load i32, i32* %pseq_a, align 4
  %cmp75 = icmp ugt i32 %59, %60
  br i1 %cmp75, label %cond.true77, label %cond.false79

cond.true77:                                      ; preds = %lor.lhs.false, %if.end72
  %61 = load i32, i32* %sseq_a, align 4
  %62 = load i32, i32* %pseq_a, align 4
  %sub78 = sub i32 %61, %62
  br label %cond.end80

cond.false79:                                     ; preds = %lor.lhs.false
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false79, %cond.true77
  %cond81 = phi i32 [ %sub78, %cond.true77 ], [ 0, %cond.false79 ]
  %conv82 = trunc i32 %cond81 to i16
  %63 = load i16*, i16** %trim_start.addr, align 8
  store i16 %conv82, i16* %63, align 2
  %64 = load i32, i32* %pseq_b, align 4
  %65 = load i32, i32* %sseq_b, align 4
  %cmp83 = icmp ugt i32 %64, %65
  br i1 %cmp83, label %cond.true88, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %cond.end80
  %66 = load i32, i32* %sseq_a, align 4
  %67 = load i32, i32* %pseq_a, align 4
  %cmp86 = icmp uge i32 %66, %67
  br i1 %cmp86, label %cond.true88, label %cond.false90

cond.true88:                                      ; preds = %lor.lhs.false85, %cond.end80
  %68 = load i32, i32* %pseq_b, align 4
  %69 = load i32, i32* %sseq_b, align 4
  %sub89 = sub i32 %68, %69
  br label %cond.end91

cond.false90:                                     ; preds = %lor.lhs.false85
  br label %cond.end91

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi i32 [ %sub89, %cond.true88 ], [ 0, %cond.false90 ]
  %conv93 = trunc i32 %cond92 to i16
  %70 = load i16*, i16** %trim_end.addr, align 8
  store i16 %conv93, i16* %70, align 2
  br label %if.end111

if.else94:                                        ; preds = %land.lhs.true62, %if.else59
  %71 = load i32, i32* %pseq_a, align 4
  %72 = load i32, i32* %sseq_a, align 4
  %cmp95 = icmp ult i32 %71, %72
  br i1 %cmp95, label %cond.true97, label %cond.false99

cond.true97:                                      ; preds = %if.else94
  %73 = load i32, i32* %sseq_a, align 4
  %74 = load i32, i32* %pseq_a, align 4
  %sub98 = sub i32 %73, %74
  br label %cond.end100

cond.false99:                                     ; preds = %if.else94
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi i32 [ %sub98, %cond.true97 ], [ 0, %cond.false99 ]
  %conv102 = trunc i32 %cond101 to i16
  %75 = load i16*, i16** %trim_start.addr, align 8
  store i16 %conv102, i16* %75, align 2
  %76 = load i32, i32* %pseq_b, align 4
  %77 = load i32, i32* %sseq_b, align 4
  %cmp103 = icmp ugt i32 %76, %77
  br i1 %cmp103, label %cond.true105, label %cond.false107

cond.true105:                                     ; preds = %cond.end100
  %78 = load i32, i32* %pseq_b, align 4
  %79 = load i32, i32* %sseq_b, align 4
  %sub106 = sub i32 %78, %79
  br label %cond.end108

cond.false107:                                    ; preds = %cond.end100
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi i32 [ %sub106, %cond.true105 ], [ 0, %cond.false107 ]
  %conv110 = trunc i32 %cond109 to i16
  %80 = load i16*, i16** %trim_end.addr, align 8
  store i16 %conv110, i16* %80, align 2
  br label %if.end111

if.end111:                                        ; preds = %cond.end108, %cond.end91
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %cond.end56
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %cond.end21
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end113, %if.then71, %if.then35, %if.then11, %if.then8
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %fs, i32 %seq, i16 zeroext %len, i8* %src) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %seq.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %src.addr = alloca i8*, align 8
  %diff = alloca i32, align 4
  %pos = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %seq, i32* %seq.addr, align 4
  store i16 %len, i16* %len.addr, align 2
  store i8* %src, i8** %src.addr, align 8
  %0 = load i32, i32* %seq.addr, align 4
  %1 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %1, i32 0, i32 16
  %2 = load i32, i32* %rx_next_seq, align 4
  %sub = sub i32 %0, %2
  store i32 %sub, i32* %diff, align 4
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 15
  %4 = load i32, i32* %rx_next_pos, align 64
  %5 = load i32, i32* %diff, align 4
  %add = add i32 %4, %5
  store i32 %add, i32* %pos, align 4
  %6 = load i32, i32* %pos, align 4
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 3
  %8 = load i32, i32* %rx_len, align 8
  %cmp = icmp uge i32 %6, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_len1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 3
  %10 = load i32, i32* %rx_len1, align 8
  %11 = load i32, i32* %pos, align 4
  %sub2 = sub i32 %11, %10
  store i32 %sub2, i32* %pos, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %pos, align 4
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_len3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 3
  %14 = load i32, i32* %rx_len3, align 8
  %cmp4 = icmp ult i32 %12, %14
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  br label %if.end6

if.else:                                          ; preds = %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 969, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.flow_rx_seq_write, i32 0, i32 0)) #8
  unreachable

if.end6:                                          ; preds = %if.then5
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %16 = load i32, i32* %pos, align 4
  %17 = load i16, i16* %len.addr, align 2
  %18 = load i8*, i8** %src.addr, align 8
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %15, i32 %16, i16 zeroext %17, i8* %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_hash_crc(i8* %data, i32 %data_len, i32 %init_val) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %pd = alloca i64, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %data_len, i32* %data_len.addr, align 4
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  store i64 %1, i64* %pd, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %data_len.addr, align 4
  %div = udiv i32 %3, 8
  %cmp = icmp ult i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %pd, align 8
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = load i32, i32* %init_val.addr, align 4
  %call = call i32 @rte_hash_crc_8byte(i64 %6, i32 %7)
  store i32 %call, i32* %init_val.addr, align 4
  %8 = load i64, i64* %pd, align 8
  %add = add i64 %8, 8
  store i64 %add, i64* %pd, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %data_len.addr, align 4
  %and = and i32 %10, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %11 = load i64, i64* %pd, align 8
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* %init_val.addr, align 4
  %call1 = call i32 @rte_hash_crc_4byte(i32 %13, i32 %14)
  store i32 %call1, i32* %init_val.addr, align 4
  %15 = load i64, i64* %pd, align 8
  %add2 = add i64 %15, 4
  store i64 %add2, i64* %pd, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load i32, i32* %data_len.addr, align 4
  %and3 = and i32 %16, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %17 = load i64, i64* %pd, align 8
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = load i32, i32* %init_val.addr, align 4
  %call6 = call i32 @rte_hash_crc_2byte(i16 zeroext %19, i32 %20)
  store i32 %call6, i32* %init_val.addr, align 4
  %21 = load i64, i64* %pd, align 8
  %add7 = add i64 %21, 2
  store i64 %add7, i64* %pd, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %22 = load i32, i32* %data_len.addr, align 4
  %and9 = and i32 %22, 1
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end8
  %23 = load i64, i64* %pd, align 8
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24, align 1
  %26 = load i32, i32* %init_val.addr, align 4
  %call12 = call i32 @rte_hash_crc_1byte(i8 zeroext %25, i32 %26)
  store i32 %call12, i32* %init_val.addr, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end8
  %27 = load i32, i32* %init_val.addr, align 4
  ret i32 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_rx_write(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %src) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pos.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %src.addr = alloca i8*, align 8
  %part = alloca i32, align 4
  %rx_base = alloca i64, align 8
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  store i16 %len, i16* %len.addr, align 2
  store i8* %src, i8** %src.addr, align 8
  %0 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %0, i32 0, i32 1
  %1 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %1, -64
  store i64 %and, i64* %rx_base, align 8
  %2 = load i32, i32* %pos.addr, align 4
  %3 = load i16, i16* %len.addr, align 2
  %conv = zext i16 %3 to i32
  %add = add i32 %2, %conv
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 3
  %5 = load i32, i32* %rx_len, align 8
  %cmp = icmp ule i32 %add, %5
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %tobool = icmp ne i64 %conv2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %rx_base, align 8
  %7 = load i32, i32* %pos.addr, align 4
  %conv3 = zext i32 %7 to i64
  %add4 = add i64 %6, %conv3
  %8 = load i16, i16* %len.addr, align 2
  %conv5 = zext i16 %8 to i64
  %9 = load i8*, i8** %src.addr, align 8
  call void @dma_write(i64 %add4, i64 %conv5, i8* %9)
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8
  %rx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 3
  %11 = load i32, i32* %rx_len6, align 8
  %12 = load i32, i32* %pos.addr, align 4
  %sub = sub i32 %11, %12
  store i32 %sub, i32* %part, align 4
  %13 = load i64, i64* %rx_base, align 8
  %14 = load i32, i32* %pos.addr, align 4
  %conv7 = zext i32 %14 to i64
  %add8 = add i64 %13, %conv7
  %15 = load i32, i32* %part, align 4
  %conv9 = zext i32 %15 to i64
  %16 = load i8*, i8** %src.addr, align 8
  call void @dma_write(i64 %add8, i64 %conv9, i8* %16)
  %17 = load i64, i64* %rx_base, align 8
  %18 = load i16, i16* %len.addr, align 2
  %conv10 = zext i16 %18 to i32
  %19 = load i32, i32* %part, align 4
  %sub11 = sub i32 %conv10, %19
  %conv12 = zext i32 %sub11 to i64
  %20 = load i8*, i8** %src.addr, align 8
  %21 = load i32, i32* %part, align 4
  %idx.ext = zext i32 %21 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  call void @dma_write(i64 %17, i64 %conv12, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arx_cache_add(%struct.dataplane_context* %ctx, i16 zeroext %ctx_id, i64 %opaque, i32 %rx_bump, i32 %rx_pos, i32 %tx_bump, i16 zeroext %type_flags) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %ctx_id.addr = alloca i16, align 2
  %opaque.addr = alloca i64, align 8
  %rx_bump.addr = alloca i32, align 4
  %rx_pos.addr = alloca i32, align 4
  %tx_bump.addr = alloca i32, align 4
  %type_flags.addr = alloca i16, align 2
  %id = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i16 %ctx_id, i16* %ctx_id.addr, align 2
  store i64 %opaque, i64* %opaque.addr, align 8
  store i32 %rx_bump, i32* %rx_bump.addr, align 4
  store i32 %rx_pos, i32* %rx_pos.addr, align 4
  store i32 %tx_bump, i32* %tx_bump.addr, align 4
  store i16 %type_flags, i16* %type_flags.addr, align 2
  %0 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %0, i32 0, i32 8
  %1 = load i16, i16* %arx_num, align 8
  %inc = add i16 %1, 1
  store i16 %inc, i16* %arx_num, align 8
  store i16 %1, i16* %id, align 2
  %2 = load i16, i16* %ctx_id.addr, align 2
  %3 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_ctx = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %3, i32 0, i32 7
  %4 = load i16, i16* %id, align 2
  %idxprom = zext i16 %4 to i64
  %arrayidx = getelementptr inbounds [32 x i16], [32 x i16]* %arx_ctx, i64 0, i64 %idxprom
  store i16 %2, i16* %arrayidx, align 2
  %5 = load i16, i16* %type_flags.addr, align 2
  %conv = zext i16 %5 to i32
  %and = and i32 %conv, 255
  %conv1 = trunc i32 %and to i8
  %6 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %6, i32 0, i32 6
  %7 = load i16, i16* %id, align 2
  %idxprom2 = zext i16 %7 to i64
  %arrayidx3 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache, i64 0, i64 %idxprom2
  %type = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx3, i32 0, i32 1
  store volatile i8 %conv1, i8* %type, align 1
  %8 = load i64, i64* %opaque.addr, align 8
  %9 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache4 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %9, i32 0, i32 6
  %10 = load i16, i16* %id, align 2
  %idxprom5 = zext i16 %10 to i64
  %arrayidx6 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache4, i64 0, i64 %idxprom5
  %msg = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx6, i32 0, i32 0
  %connupdate = bitcast %union.anon.5* %msg to %struct.flextcp_pl_arx_connupdate*
  %opaque7 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate, i32 0, i32 0
  store i64 %8, i64* %opaque7, align 8
  %11 = load i32, i32* %rx_bump.addr, align 4
  %12 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache8 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %12, i32 0, i32 6
  %13 = load i16, i16* %id, align 2
  %idxprom9 = zext i16 %13 to i64
  %arrayidx10 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache8, i64 0, i64 %idxprom9
  %msg11 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx10, i32 0, i32 0
  %connupdate12 = bitcast %union.anon.5* %msg11 to %struct.flextcp_pl_arx_connupdate*
  %rx_bump13 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate12, i32 0, i32 1
  store i32 %11, i32* %rx_bump13, align 8
  %14 = load i32, i32* %rx_pos.addr, align 4
  %15 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache14 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %15, i32 0, i32 6
  %16 = load i16, i16* %id, align 2
  %idxprom15 = zext i16 %16 to i64
  %arrayidx16 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache14, i64 0, i64 %idxprom15
  %msg17 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx16, i32 0, i32 0
  %connupdate18 = bitcast %union.anon.5* %msg17 to %struct.flextcp_pl_arx_connupdate*
  %rx_pos19 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate18, i32 0, i32 2
  store i32 %14, i32* %rx_pos19, align 4
  %17 = load i32, i32* %tx_bump.addr, align 4
  %18 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache20 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %18, i32 0, i32 6
  %19 = load i16, i16* %id, align 2
  %idxprom21 = zext i16 %19 to i64
  %arrayidx22 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache20, i64 0, i64 %idxprom21
  %msg23 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx22, i32 0, i32 0
  %connupdate24 = bitcast %union.anon.5* %msg23 to %struct.flextcp_pl_arx_connupdate*
  %tx_bump25 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate24, i32 0, i32 3
  store i32 %17, i32* %tx_bump25, align 8
  %20 = load i16, i16* %type_flags.addr, align 2
  %conv26 = zext i16 %20 to i32
  %shr = ashr i32 %conv26, 8
  %conv27 = trunc i32 %shr to i8
  %21 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %arx_cache28 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %21, i32 0, i32 6
  %22 = load i16, i16* %id, align 2
  %idxprom29 = zext i16 %22 to i64
  %arrayidx30 = getelementptr inbounds [32 x %struct.flextcp_pl_arx], [32 x %struct.flextcp_pl_arx]* %arx_cache28, i64 0, i64 %idxprom29
  %msg31 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx30, i32 0, i32 0
  %connupdate32 = bitcast %union.anon.5* %msg31 to %struct.flextcp_pl_arx_connupdate*
  %flags = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate32, i32 0, i32 4
  store i8 %conv27, i8* %flags, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flow_tx_ack(%struct.dataplane_context* %ctx, i32 %seq, i32 %ack, i32 %rxwnd, i32 %echots, i32 %myts, %struct.network_buf_handle* %nbh, %struct.tcp_timestamp_opt* %ts_opt) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %seq.addr = alloca i32, align 4
  %ack.addr = alloca i32, align 4
  %rxwnd.addr = alloca i32, align 4
  %echots.addr = alloca i32, align 4
  %myts.addr = alloca i32, align 4
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts_opt.addr = alloca %struct.tcp_timestamp_opt*, align 8
  %p = alloca %struct.pkt_tcp*, align 8
  %eth = alloca %struct.eth_addr, align 1
  %ip = alloca %struct.beui32, align 1
  %port = alloca %struct.beui16, align 1
  %hdrlen = alloca i16, align 2
  %ecn_flags = alloca i16, align 2
  %tmp = alloca %struct.beui32, align 1
  %tmp39 = alloca %struct.beui32, align 1
  %tmp54 = alloca %struct.beui16, align 1
  %tmp61 = alloca %struct.beui16, align 1
  %tmp64 = alloca %struct.beui32, align 1
  %tmp67 = alloca %struct.beui32, align 1
  %tmp71 = alloca %struct.beui16, align 1
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32 %seq, i32* %seq.addr, align 4
  store i32 %ack, i32* %ack.addr, align 4
  store i32 %rxwnd, i32* %rxwnd.addr, align 4
  store i32 %echots, i32* %echots.addr, align 4
  store i32 %myts, i32* %myts.addr, align 4
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store %struct.tcp_timestamp_opt* %ts_opt, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8
  store i16 0, i16* %ecn_flags, align 2
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %0)
  %1 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %1, %struct.pkt_tcp** %p, align 8
  %2 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth1 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth1, i32 0, i32 1
  %3 = bitcast %struct.eth_addr* %eth to i8*
  %4 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %4, i64 6, i1 false)
  %5 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %5, i32 0, i32 0
  %src3 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %6 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth4 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %6, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth4, i32 0, i32 0
  %7 = bitcast %struct.eth_addr* %src3 to i8*
  %8 = bitcast %struct.eth_addr* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 6, i1 false)
  %9 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %eth5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %9, i32 0, i32 0
  %dest6 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth5, i32 0, i32 0
  %10 = bitcast %struct.eth_addr* %dest6 to i8*
  %11 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %11, i64 6, i1 false)
  %12 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip7 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %12, i32 0, i32 1
  %src8 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip7, i32 0, i32 8
  %13 = bitcast %struct.beui32* %ip to i8*
  %14 = bitcast %struct.beui32* %src8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 4, i1 false)
  %15 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip9 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %15, i32 0, i32 1
  %src10 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip9, i32 0, i32 8
  %16 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip11 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %16, i32 0, i32 1
  %dest12 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip11, i32 0, i32 9
  %17 = bitcast %struct.beui32* %src10 to i8*
  %18 = bitcast %struct.beui32* %dest12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 4, i1 false)
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 1
  %dest14 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip13, i32 0, i32 9
  %20 = bitcast %struct.beui32* %dest14 to i8*
  %21 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 4, i1 false)
  %22 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %22, i32 0, i32 2
  %src15 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %23 = bitcast %struct.beui16* %port to i8*
  %24 = bitcast %struct.beui16* %src15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 2, i1 false)
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp16 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 2
  %src17 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp16, i32 0, i32 0
  %26 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %26, i32 0, i32 2
  %dest19 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp18, i32 0, i32 1
  %27 = bitcast %struct.beui16* %src17 to i8*
  %28 = bitcast %struct.beui16* %dest19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 2, i1 false)
  %29 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp20 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %29, i32 0, i32 2
  %dest21 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp20, i32 0, i32 1
  %30 = bitcast %struct.beui16* %dest21 to i8*
  %31 = bitcast %struct.beui16* %port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 2, i1 false)
  %32 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %32, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp22, i32 0, i32 4
  %33 = load i16, i16* %_hdrlen_rsvd_flags, align 1
  %call23 = call zeroext i16 @ntohs(i16 zeroext %33) #9
  %conv = zext i16 %call23 to i32
  %shr = ashr i32 %conv, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv24 = sext i32 %mul to i64
  %add = add i64 54, %conv24
  %conv25 = trunc i64 %add to i16
  store i16 %conv25, i16* %hdrlen, align 2
  %34 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %34, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 1
  %35 = load i8, i8* %_tos, align 1
  %conv27 = zext i8 %35 to i32
  %and = and i32 %conv27, 3
  %cmp = icmp eq i32 %and, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i16 64, i16* %ecn_flags, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %36 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip29 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %36, i32 0, i32 1
  %_tos30 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip29, i32 0, i32 1
  %37 = load i8, i8* %_tos30, align 1
  %conv31 = zext i8 %37 to i32
  %and32 = and i32 %conv31, 4092
  %conv33 = trunc i32 %and32 to i8
  %38 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip34 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %38, i32 0, i32 1
  %_tos35 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip34, i32 0, i32 1
  store i8 %conv33, i8* %_tos35, align 1
  %39 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp36 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %39, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp36, i32 0, i32 2
  %40 = load i32, i32* %seq.addr, align 4
  %call37 = call i32 @t_beui32(i32 %40)
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp, i32 0, i32 0
  store i32 %call37, i32* %coerce.dive, align 1
  %41 = bitcast %struct.beui32* %seqno to i8*
  %42 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %42, i64 4, i1 false)
  %43 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp38 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %43, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp38, i32 0, i32 3
  %44 = load i32, i32* %ack.addr, align 4
  %call40 = call i32 @t_beui32(i32 %44)
  %coerce.dive41 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp39, i32 0, i32 0
  store i32 %call40, i32* %coerce.dive41, align 1
  %45 = bitcast %struct.beui32* %ackno to i8*
  %46 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %46, i64 4, i1 false)
  %47 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %47, i32 0, i32 2
  %_hdrlen_rsvd_flags43 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 4
  %48 = load i16, i16* %_hdrlen_rsvd_flags43, align 1
  %call44 = call zeroext i16 @ntohs(i16 zeroext %48) #9
  %conv45 = zext i16 %call44 to i32
  %shr46 = ashr i32 %conv45, 12
  %shl = shl i32 %shr46, 12
  %49 = load i16, i16* %ecn_flags, align 2
  %conv47 = zext i16 %49 to i32
  %or = or i32 16, %conv47
  %or48 = or i32 %shl, %or
  %conv49 = trunc i32 %or48 to i16
  %call50 = call zeroext i16 @htons(i16 zeroext %conv49) #9
  %50 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp51 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %50, i32 0, i32 2
  %_hdrlen_rsvd_flags52 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp51, i32 0, i32 4
  store i16 %call50, i16* %_hdrlen_rsvd_flags52, align 1
  %51 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp53 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %51, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp53, i32 0, i32 5
  %52 = load i32, i32* %rxwnd.addr, align 4
  %cmp55 = icmp ult i32 %52, 65535
  br i1 %cmp55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %53 = load i32, i32* %rxwnd.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %53, %cond.true ], [ 65535, %cond.false ]
  %conv57 = trunc i32 %cond to i16
  %call58 = call i16 @t_beui16(i16 zeroext %conv57)
  %coerce.dive59 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp54, i32 0, i32 0
  store i16 %call58, i16* %coerce.dive59, align 1
  %54 = bitcast %struct.beui16* %wnd to i8*
  %55 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 2, i1 false)
  %56 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp60 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %56, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp60, i32 0, i32 7
  %call62 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive63 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp61, i32 0, i32 0
  store i16 %call62, i16* %coerce.dive63, align 1
  %57 = bitcast %struct.beui16* %urgp to i8*
  %58 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 2, i1 false)
  %59 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %59, i32 0, i32 2
  %60 = load i32, i32* %myts.addr, align 4
  %call65 = call i32 @t_beui32(i32 %60)
  %coerce.dive66 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp64, i32 0, i32 0
  store i32 %call65, i32* %coerce.dive66, align 1
  %61 = bitcast %struct.beui32* %ts_val to i8*
  %62 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 4, i1 false)
  %63 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %63, i32 0, i32 3
  %64 = load i32, i32* %echots.addr, align 4
  %call68 = call i32 @t_beui32(i32 %64)
  %coerce.dive69 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp67, i32 0, i32 0
  store i32 %call68, i32* %coerce.dive69, align 1
  %65 = bitcast %struct.beui32* %ts_ecr to i8*
  %66 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 4, i1 false)
  %67 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip70 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %67, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip70, i32 0, i32 2
  %68 = load i16, i16* %hdrlen, align 2
  %conv72 = zext i16 %68 to i64
  %sub73 = sub i64 %conv72, 14
  %conv74 = trunc i64 %sub73 to i16
  %call75 = call i16 @t_beui16(i16 zeroext %conv74)
  %coerce.dive76 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp71, i32 0, i32 0
  store i16 %call75, i16* %coerce.dive76, align 1
  %69 = bitcast %struct.beui16* %len to i8*
  %70 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %70, i64 2, i1 false)
  %71 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip77 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %71, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip77, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1
  %72 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %73 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %74 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip78 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %74, i32 0, i32 1
  %src79 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip78, i32 0, i32 8
  %75 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip80 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %75, i32 0, i32 1
  %dest81 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip80, i32 0, i32 9
  %76 = load i16, i16* %hdrlen, align 2
  %conv82 = zext i16 %76 to i64
  %sub83 = sub i64 %conv82, 34
  %conv84 = trunc i64 %sub83 to i16
  %coerce.dive85 = getelementptr inbounds %struct.beui32, %struct.beui32* %src79, i32 0, i32 0
  %77 = load i32, i32* %coerce.dive85, align 1
  %coerce.dive86 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest81, i32 0, i32 0
  %78 = load i32, i32* %coerce.dive86, align 1
  call void @tcp_checksums(%struct.network_buf_handle* %72, %struct.pkt_tcp* %73, i32 %77, i32 %78, i16 zeroext %conv84)
  %79 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %80 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %81 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %call87 = call zeroext i16 @network_buf_off(%struct.network_buf_handle* %81)
  %82 = load i16, i16* %hdrlen, align 2
  call void @tx_send(%struct.dataplane_context* %79, %struct.network_buf_handle* %80, i16 zeroext %call87, i16 zeroext %82)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fast_flows_bump(%struct.dataplane_context* %ctx, i32 %flow_id, i16 zeroext %bump_seq, i32 %rx_tail, i32 %tx_head, i8 zeroext %flags, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %flow_id.addr = alloca i32, align 4
  %bump_seq.addr = alloca i16, align 2
  %rx_tail.addr = alloca i32, align 4
  %tx_head.addr = alloca i32, align 4
  %flags.addr = alloca i8, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts.addr = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %tail = alloca i32, align 4
  %rx_avail_prev = alloca i32, align 4
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32 %flow_id, i32* %flow_id.addr, align 4
  store i16 %bump_seq, i16* %bump_seq.addr, align 2
  store i32 %rx_tail, i32* %rx_tail.addr, align 4
  store i32 %tx_head, i32* %tx_head.addr, align 4
  store i8 %flags, i8* %flags.addr, align 1
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store i32 %ts, i32* %ts.addr, align 4
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %1 = load i32, i32* %flow_id.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8
  store i32 -1, i32* %ret, align 4
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %3 = load i16, i16* %bump_seq.addr, align 2
  %conv = zext i16 %3 to i32
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %bump_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 12
  %5 = load i16, i16* %bump_seq1, align 2
  %conv2 = zext i16 %5 to i32
  %cmp = icmp sge i32 %conv, %conv2
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %6 = load i16, i16* %bump_seq.addr, align 2
  %conv4 = zext i16 %6 to i32
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %bump_seq5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 12
  %8 = load i16, i16* %bump_seq5, align 2
  %conv6 = zext i16 %8 to i32
  %sub = sub nsw i32 %conv4, %conv6
  %cmp7 = icmp sgt i32 %sub, 32767
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %9 = load i16, i16* %bump_seq.addr, align 2
  %conv9 = zext i16 %9 to i32
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %bump_seq10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 12
  %11 = load i16, i16* %bump_seq10, align 2
  %conv11 = zext i16 %11 to i32
  %cmp12 = icmp slt i32 %conv9, %conv11
  br i1 %cmp12, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %lor.lhs.false
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %bump_seq15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 12
  %13 = load i16, i16* %bump_seq15, align 2
  %conv16 = zext i16 %13 to i32
  %cmp17 = icmp slt i32 %conv16, 49149
  br i1 %cmp17, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %land.lhs.true14
  %14 = load i16, i16* %bump_seq.addr, align 2
  %conv20 = zext i16 %14 to i32
  %cmp21 = icmp sgt i32 %conv20, 16383
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false19, %land.lhs.true14, %land.lhs.true
  br label %unlock

if.end:                                           ; preds = %lor.lhs.false19, %lor.lhs.false
  %15 = load i16, i16* %bump_seq.addr, align 2
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %bump_seq23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 12
  store i16 %15, i16* %bump_seq23, align 2
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %17, i32 0, i32 1
  %18 = load i64, i64* %rx_base_sp, align 8
  %and = and i64 %18, 16
  %cmp24 = icmp eq i64 %and, 16
  br i1 %cmp24, label %land.lhs.true26, label %if.else

land.lhs.true26:                                  ; preds = %if.end
  %19 = load i32, i32* %tx_head.addr, align 4
  %20 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_head27 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %20, i32 0, i32 24
  %21 = load i32, i32* %tx_head27, align 4
  %cmp28 = icmp ne i32 %19, %21
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %land.lhs.true26
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.25, i32 0, i32 0))
  %23 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_head31 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %23, i32 0, i32 24
  %24 = load i32, i32* %tx_head31, align 4
  store i32 %24, i32* %tx_head.addr, align 4
  br label %if.end46

if.else:                                          ; preds = %land.lhs.true26, %if.end
  %25 = load i8, i8* %flags.addr, align 1
  %conv32 = zext i8 %25 to i32
  %and33 = and i32 %conv32, 1
  %cmp34 = icmp eq i32 %and33, 1
  br i1 %cmp34, label %land.lhs.true36, label %if.end45

land.lhs.true36:                                  ; preds = %if.else
  %26 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp37 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %26, i32 0, i32 1
  %27 = load i64, i64* %rx_base_sp37, align 8
  %and38 = and i64 %27, 16
  %tobool = icmp ne i64 %and38, 0
  br i1 %tobool, label %if.end45, label %land.lhs.true39

land.lhs.true39:                                  ; preds = %land.lhs.true36
  %28 = load i32, i32* %tx_head.addr, align 4
  %29 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_head40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %29, i32 0, i32 24
  %30 = load i32, i32* %tx_head40, align 4
  %cmp41 = icmp eq i32 %28, %30
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %land.lhs.true39
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.26, i32 0, i32 0))
  br label %unlock

if.end45:                                         ; preds = %land.lhs.true39, %land.lhs.true36, %if.else
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  %32 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call47 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %32, i32* null)
  store i32 %call47, i32* %old_avail, align 4
  %33 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call48 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %33, i32* %tx_head.addr)
  store i32 %call48, i32* %new_avail, align 4
  %34 = load i8, i8* %flags.addr, align 1
  %conv49 = zext i8 %34 to i32
  %and50 = and i32 %conv49, 1
  %cmp51 = icmp eq i32 %and50, 1
  br i1 %cmp51, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end46
  %35 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %35, i32 0, i32 1
  %36 = load i64, i64* %rx_base_sp54, align 8
  %and55 = and i64 %36, 16
  %tobool56 = icmp ne i64 %and55, 0
  br i1 %tobool56, label %if.end59, label %if.then57

if.then57:                                        ; preds = %land.lhs.true53
  %37 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %37, i32 0, i32 1
  %38 = load i64, i64* %rx_base_sp58, align 8
  %or = or i64 %38, 16
  store i64 %or, i64* %rx_base_sp58, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %land.lhs.true53, %if.end46
  %39 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_base_sp60 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %39, i32 0, i32 1
  %40 = load i64, i64* %rx_base_sp60, align 8
  %and61 = and i64 %40, 2
  %tobool62 = icmp ne i64 %and61, 0
  br i1 %tobool62, label %if.else75, label %if.then63

if.then63:                                        ; preds = %if.end59
  %41 = load i32, i32* %old_avail, align 4
  %42 = load i32, i32* %new_avail, align 4
  %cmp64 = icmp ult i32 %41, %42
  br i1 %cmp64, label %if.then66, label %if.end74

if.then66:                                        ; preds = %if.then63
  %43 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %43, i32 0, i32 1
  %44 = load %struct.qman_thread*, %struct.qman_thread** %qman_t, align 8
  %45 = load i32, i32* %flow_id.addr, align 4
  %46 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %46, i32 0, i32 26
  %47 = load i32, i32* %tx_rate, align 4
  %48 = load i32, i32* %new_avail, align 4
  %49 = load i32, i32* %old_avail, align 4
  %sub67 = sub i32 %48, %49
  %call68 = call i32 @qman_set(%struct.qman_thread* %44, i32 %45, i32 %47, i32 %sub67, i16 zeroext 1448, i8 zeroext 19)
  %cmp69 = icmp ne i32 %call68, 0
  br i1 %cmp69, label %if.then71, label %if.end73

if.then71:                                        ; preds = %if.then66
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.27, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end73:                                         ; preds = %if.then66
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then63
  br label %if.end90

if.else75:                                        ; preds = %if.end59
  %51 = load i32, i32* %old_avail, align 4
  %cmp76 = icmp eq i32 %51, 0
  br i1 %cmp76, label %land.lhs.true78, label %if.end89

land.lhs.true78:                                  ; preds = %if.else75
  %52 = load i32, i32* %new_avail, align 4
  %cmp79 = icmp ne i32 %52, 0
  br i1 %cmp79, label %if.then81, label %if.end89

if.then81:                                        ; preds = %land.lhs.true78
  %53 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t82 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %53, i32 0, i32 1
  %54 = load %struct.qman_thread*, %struct.qman_thread** %qman_t82, align 8
  %55 = load i32, i32* %flow_id.addr, align 4
  %call83 = call i32 @qman_set(%struct.qman_thread* %54, i32 %55, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp84 = icmp ne i32 %call83, 0
  br i1 %cmp84, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.then81
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.27, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end88:                                         ; preds = %if.then81
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %land.lhs.true78, %if.else75
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end74
  %57 = load i32, i32* %tx_head.addr, align 4
  %58 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_head91 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %58, i32 0, i32 24
  store i32 %57, i32* %tx_head91, align 4
  %59 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %59, i32 0, i32 15
  %60 = load i32, i32* %rx_next_pos, align 64
  %61 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %61, i32 0, i32 14
  %62 = load i32, i32* %rx_avail, align 4
  %add = add i32 %60, %62
  store i32 %add, i32* %tail, align 4
  %63 = load i32, i32* %tail, align 4
  %64 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %64, i32 0, i32 3
  %65 = load i32, i32* %rx_len, align 8
  %cmp92 = icmp uge i32 %63, %65
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %if.end90
  %66 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len95 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %66, i32 0, i32 3
  %67 = load i32, i32* %rx_len95, align 8
  %68 = load i32, i32* %tail, align 4
  %sub96 = sub i32 %68, %67
  store i32 %sub96, i32* %tail, align 4
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.end90
  %69 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail98 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %69, i32 0, i32 14
  %70 = load i32, i32* %rx_avail98, align 4
  store i32 %70, i32* %rx_avail_prev, align 4
  %71 = load i32, i32* %rx_tail.addr, align 4
  %72 = load i32, i32* %tail, align 4
  %cmp99 = icmp uge i32 %71, %72
  br i1 %cmp99, label %if.then101, label %if.else105

if.then101:                                       ; preds = %if.end97
  %73 = load i32, i32* %rx_tail.addr, align 4
  %74 = load i32, i32* %tail, align 4
  %sub102 = sub i32 %73, %74
  %75 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail103 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %75, i32 0, i32 14
  %76 = load i32, i32* %rx_avail103, align 4
  %add104 = add i32 %76, %sub102
  store i32 %add104, i32* %rx_avail103, align 4
  br label %if.end111

if.else105:                                       ; preds = %if.end97
  %77 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_len106 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %77, i32 0, i32 3
  %78 = load i32, i32* %rx_len106, align 8
  %79 = load i32, i32* %tail, align 4
  %sub107 = sub i32 %78, %79
  %80 = load i32, i32* %rx_tail.addr, align 4
  %add108 = add i32 %sub107, %80
  %81 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail109 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %81, i32 0, i32 14
  %82 = load i32, i32* %rx_avail109, align 4
  %add110 = add i32 %82, %add108
  store i32 %add110, i32* %rx_avail109, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.else105, %if.then101
  %83 = load i32, i32* %new_avail, align 4
  %cmp112 = icmp eq i32 %83, 0
  br i1 %cmp112, label %land.lhs.true114, label %if.end123

land.lhs.true114:                                 ; preds = %if.end111
  %84 = load i32, i32* %rx_avail_prev, align 4
  %cmp115 = icmp eq i32 %84, 0
  br i1 %cmp115, label %land.lhs.true117, label %if.end123

land.lhs.true117:                                 ; preds = %land.lhs.true114
  %85 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail118 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %85, i32 0, i32 14
  %86 = load i32, i32* %rx_avail118, align 4
  %cmp119 = icmp ne i32 %86, 0
  br i1 %cmp119, label %if.then121, label %if.end123

if.then121:                                       ; preds = %land.lhs.true117
  %87 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %88 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %89 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %90 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %90, i32 0, i32 23
  %91 = load i32, i32* %tx_next_seq, align 32
  %92 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %92, i32 0, i32 16
  %93 = load i32, i32* %rx_next_seq, align 4
  %94 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %rx_avail122 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %94, i32 0, i32 14
  %95 = load i32, i32* %rx_avail122, align 4
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 25
  %97 = load i32, i32* %tx_next_ts, align 8
  %98 = load i32, i32* %ts.addr, align 4
  call void @flow_tx_segment(%struct.dataplane_context* %87, %struct.network_buf_handle* %88, %struct.flextcp_pl_flowst* %89, i32 %91, i32 %93, i32 %95, i16 zeroext 0, i32 0, i32 %97, i32 %98, i8 zeroext 0)
  store i32 0, i32* %ret, align 4
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %land.lhs.true117, %land.lhs.true114, %if.end111
  br label %unlock

unlock:                                           ; preds = %if.end123, %if.then43, %if.then
  %99 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock124 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %99, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock124)
  %100 = load i32, i32* %ret, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_retransmit(%struct.dataplane_context* %ctx, i32 %flow_id) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %flow_id.addr = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store i32 %flow_id, i32* %flow_id.addr, align 4
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %1 = load i32, i32* %flow_id.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8
  store i32 -1, i32* %new_avail, align 4
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %3, i32* null)
  store i32 %call, i32* %old_avail, align 4
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 21
  %5 = load i32, i32* %tx_sent, align 8
  %cmp = icmp eq i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out

if.end:                                           ; preds = %entry
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %6)
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %call1 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %7, i32* null)
  store i32 %call1, i32* %new_avail, align 4
  %8 = load i32, i32* %new_avail, align 4
  %9 = load i32, i32* %old_avail, align 4
  %cmp2 = icmp ugt i32 %8, %9
  br i1 %cmp2, label %if.then3, label %if.end9

if.then3:                                         ; preds = %if.end
  %10 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %qman_t = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %10, i32 0, i32 1
  %11 = load %struct.qman_thread*, %struct.qman_thread** %qman_t, align 8
  %12 = load i32, i32* %flow_id.addr, align 4
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 26
  %14 = load i32, i32* %tx_rate, align 4
  %15 = load i32, i32* %new_avail, align 4
  %16 = load i32, i32* %old_avail, align 4
  %sub = sub i32 %15, %16
  %call4 = call i32 @qman_set(%struct.qman_thread* %11, i32 %12, i32 %14, i32 %sub, i16 zeroext 1448, i8 zeroext 19)
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.then3
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.27, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end8:                                          ; preds = %if.then3
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  br label %out

out:                                              ; preds = %if.end9, %if.then
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %lock10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fast_flows_packet_fss(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbhs.addr = alloca %struct.network_buf_handle**, align 8
  %fss.addr = alloca i8**, align 8
  %n.addr = alloca i16, align 2
  %h = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %eh = alloca i32, align 4
  %fid = alloca i32, align 4
  %i = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %key = alloca %struct.flow_key, align 1
  %e = alloca %struct.flextcp_pl_flowhte*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.network_buf_handle** %nbhs, %struct.network_buf_handle*** %nbhs.addr, align 8
  store i8** %fss, i8*** %fss.addr, align 8
  store i16 %n, i16* %n.addr, align 2
  %p1 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.var.annotation(i8* %p1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i32 1180)
  %e2 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.var.annotation(i8* %e2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i32 1182)
  %fs3 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.var.annotation(i8* %fs3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i32 1183)
  store i16 0, i16* %i, align 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i16, i16* %i, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16, i16* %n.addr, align 2
  %conv4 = zext i16 %1 to i32
  %cmp = icmp slt i32 %conv, %conv4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8
  %3 = load i16, i16* %i, align 2
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %2, i64 %idxprom
  %4 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx, align 8
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %4)
  %5 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %5, %struct.pkt_tcp** %p, align 8 ;HERE
  %6 = load i8**, i8*** %fss.addr, align 8
  %7 = load i16, i16* %i, align 2
  %idxprom6 = zext i16 %7 to i64
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i64 %idxprom6
  store i8* null, i8** %arrayidx7, align 8
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 0
  %8 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8 ;FIRST USE OF PREFETCH VARIABLE
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %8, i32 0, i32 1
  %dest = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 9
  %9 = bitcast %struct.beui32* %local_ip to i8*
  %10 = bitcast %struct.beui32* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 4, i1 false)
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 1
  %11 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip8 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %11, i32 0, i32 1
  %src = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip8, i32 0, i32 8
  %12 = bitcast %struct.beui32* %remote_ip to i8*
  %13 = bitcast %struct.beui32* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 4, i1 false)
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 2
  %14 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %14, i32 0, i32 2
  %dest9 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 1
  %15 = bitcast %struct.beui16* %local_port to i8*
  %16 = bitcast %struct.beui16* %dest9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 2, i1 false)
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 3
  %17 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp10 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %17, i32 0, i32 2
  %src11 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp10, i32 0, i32 0
  %18 = bitcast %struct.beui16* %remote_port to i8*
  %19 = bitcast %struct.beui16* %src11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 2, i1 false)
  %call12 = call i32 @flow_hash(%struct.flow_key* %key)
  store i32 %call12, i32* %h, align 4
  %20 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowht = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %20, i32 0, i32 2
  %21 = load i32, i32* %h, align 4
  %idxprom13 = zext i32 %21 to i64
  %arrayidx14 = getelementptr inbounds [262144 x %struct.flextcp_pl_flowhte], [262144 x %struct.flextcp_pl_flowhte]* %flowht, i64 0, i64 %idxprom13
  store %struct.flextcp_pl_flowhte* %arrayidx14, %struct.flextcp_pl_flowhte** %e, align 8 ;HERE
  %22 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8 ;FIRST USE OF PREFETCH HERE
  %flow_id = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %22, i32 0, i32 0
  %23 = load i32, i32* %flow_id, align 1
  store i32 %23, i32* %fid, align 4
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !7
  %24 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8
  %flow_hash = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %24, i32 0, i32 1
  %25 = load i32, i32* %flow_hash, align 1
  store i32 %25, i32* %eh, align 4
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !8
  %26 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %26, i32 0, i32 1
  %27 = load i32, i32* %fid, align 4
  %idxprom15 = zext i32 %27 to i64
  %arrayidx16 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom15
  store %struct.flextcp_pl_flowst* %arrayidx16, %struct.flextcp_pl_flowst** %fs, align 8 ;HERE
  %28 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %local_ip17 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %28, i32 0, i32 5
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip17, i32 0, i32 0
  %29 = load i32, i32* %x, align 32
  %30 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %30, i32 0, i32 1
  %dest19 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 9
  %x20 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest19, i32 0, i32 0
  %31 = load i32, i32* %x20, align 1
  %cmp21 = icmp eq i32 %29, %31
  %conv22 = zext i1 %cmp21 to i32
  %32 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %remote_ip23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %32, i32 0, i32 6
  %x24 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip23, i32 0, i32 0
  %33 = load i32, i32* %x24, align 4
  %34 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %34, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %x27 = getelementptr inbounds %struct.beui32, %struct.beui32* %src26, i32 0, i32 0
  %35 = load i32, i32* %x27, align 1
  %cmp28 = icmp eq i32 %33, %35
  %conv29 = zext i1 %cmp28 to i32
  %and = and i32 %conv22, %conv29
  %36 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %local_port30 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %36, i32 0, i32 7
  %x31 = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port30, i32 0, i32 0
  %37 = load i16, i16* %x31, align 8
  %conv32 = zext i16 %37 to i32
  %38 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp33 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %38, i32 0, i32 2
  %dest34 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp33, i32 0, i32 1
  %x35 = getelementptr inbounds %struct.beui16, %struct.beui16* %dest34, i32 0, i32 0
  %39 = load i16, i16* %x35, align 1
  %conv36 = zext i16 %39 to i32
  %cmp37 = icmp eq i32 %conv32, %conv36
  %conv38 = zext i1 %cmp37 to i32
  %and39 = and i32 %and, %conv38
  %40 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8
  %remote_port40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %40, i32 0, i32 8
  %x41 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port40, i32 0, i32 0
  %41 = load i16, i16* %x41, align 2
  %conv42 = zext i16 %41 to i32
  %42 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8
  %tcp43 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %42, i32 0, i32 2
  %src44 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp43, i32 0, i32 0
  %x45 = getelementptr inbounds %struct.beui16, %struct.beui16* %src44, i32 0, i32 0
  %43 = load i16, i16* %x45, align 1
  %conv46 = zext i16 %43 to i32
  %cmp47 = icmp eq i32 %conv42, %conv46
  %conv48 = zext i1 %cmp47 to i32
  %and49 = and i32 %and39, %conv48
  %tobool = icmp ne i32 %and49, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %44 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @pl_memory, align 8
  %flowst50 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %44, i32 0, i32 1
  %45 = load i32, i32* %fid, align 4
  %idxprom51 = zext i32 %45 to i64
  %arrayidx52 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst50, i64 0, i64 %idxprom51
  %46 = bitcast %struct.flextcp_pl_flowst* %arrayidx52 to i8*
  %47 = load i8**, i8*** %fss.addr, align 8
  %48 = load i16, i16* %i, align 2
  %idxprom53 = zext i16 %48 to i64
  %arrayidx54 = getelementptr inbounds i8*, i8** %47, i64 %idxprom53
  store i8* %46, i8** %arrayidx54, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %49 = load i16, i16* %i, align 2
  %inc = add i16 %49, 1
  store i16 %inc, i16* %i, align 2
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind
declare void @llvm.var.annotation(i8*, i8*, i8*, i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @flow_hash(%struct.flow_key* %k) #0 {
entry:
  %k.addr = alloca %struct.flow_key*, align 8
  store %struct.flow_key* %k, %struct.flow_key** %k.addr, align 8
  %0 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %0, i32 0, i32 2
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port, i32 0, i32 0
  %1 = load i16, i16* %x, align 1
  %conv = zext i16 %1 to i32
  %2 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %2, i32 0, i32 3
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port, i32 0, i32 0
  %3 = load i16, i16* %x1, align 1
  %conv2 = zext i16 %3 to i32
  %shl = shl i32 %conv2, 16
  %or = or i32 %conv, %shl
  %4 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %4, i32 0, i32 0
  %x3 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip, i32 0, i32 0
  %5 = load i32, i32* %x3, align 1
  %conv4 = zext i32 %5 to i64
  %6 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %6, i32 0, i32 1
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip, i32 0, i32 0
  %7 = load i32, i32* %x5, align 1
  %conv6 = zext i32 %7 to i64
  %shl7 = shl i64 %conv6, 32
  %or8 = or i64 %conv4, %shl7
  %call = call i32 @crc32c_sse42_u64(i64 %or8, i64 0)
  %call9 = call i32 @crc32c_sse42_u32(i32 %or, i32 %call)
  ret i32 %call9
}

declare dso_local i32 @rte_cpu_get_flag_enabled(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_atomic32_cmpset(i32* %dst, i32 %exp, i32 %src) #0 {
entry:
  %dst.addr = alloca i32*, align 8
  %exp.addr = alloca i32, align 4
  %src.addr = alloca i32, align 4
  %res = alloca i8, align 1
  store i32* %dst, i32** %dst.addr, align 8
  store i32 %exp, i32* %exp.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32*, i32** %dst.addr, align 8
  %1 = load i32, i32* %src.addr, align 4
  %2 = load i32, i32* %exp.addr, align 4
  %3 = load i32*, i32** %dst.addr, align 8
  %4 = call i8 asm sideeffect "lock ; cmpxchgl $2, $1;sete $0;", "={ax},=*m,r,{ax},*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %0, i32 %1, i32 %2, i32* %3) #5, !srcloc !9
  store i8 %4, i8* %res, align 1
  %5 = load i8, i8* %res, align 1
  %conv = zext i8 %5 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_pause() #0 {
entry:
  call void @llvm.x86.sse2.pause()
  ret void
}

; Function Attrs: nounwind
declare void @llvm.x86.sse2.pause() #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #6

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_hash_crc_8byte(i64 %data, i32 %init_val) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i32, align 4
  store i64 %data, i64* %data.addr, align 8
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i8, i8* @crc32_alg, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %tobool = icmp ne i64 %conv2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %data.addr, align 8
  %2 = load i32, i32* %init_val.addr, align 4
  %conv3 = zext i32 %2 to i64
  %call = call i32 @crc32c_sse42_u64(i64 %1, i64 %conv3)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8, i8* @crc32_alg, align 1
  %conv4 = zext i8 %3 to i32
  %and = and i32 %conv4, 2
  %conv5 = zext i32 %and to i64
  %tobool6 = icmp ne i64 %conv5, 0
  br i1 %tobool6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end
  %4 = load i64, i64* %data.addr, align 8
  %5 = load i32, i32* %init_val.addr, align 4
  %conv8 = zext i32 %5 to i64
  %call9 = call i32 @crc32c_sse42_u64_mimic(i64 %4, i64 %conv8)
  store i32 %call9, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end
  %6 = load i64, i64* %data.addr, align 8
  %7 = load i32, i32* %init_val.addr, align 4
  %call11 = call i32 @crc32c_2words(i64 %6, i32 %7)
  store i32 %call11, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end10, %if.then7, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_hash_crc_4byte(i32 %data, i32 %init_val) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i8, i8* @crc32_alg, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %tobool = icmp ne i64 %conv1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %data.addr, align 4
  %2 = load i32, i32* %init_val.addr, align 4
  %call = call i32 @crc32c_sse42_u32(i32 %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %data.addr, align 4
  %4 = load i32, i32* %init_val.addr, align 4
  %call2 = call i32 @crc32c_1word(i32 %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_hash_crc_2byte(i16 zeroext %data, i32 %init_val) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i8, i8* @crc32_alg, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %tobool = icmp ne i64 %conv1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i16, i16* %data.addr, align 2
  %2 = load i32, i32* %init_val.addr, align 4
  %call = call i32 @crc32c_sse42_u16(i16 zeroext %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i16, i16* %data.addr, align 2
  %4 = load i32, i32* %init_val.addr, align 4
  %call2 = call i32 @crc32c_2bytes(i16 zeroext %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rte_hash_crc_1byte(i8 zeroext %data, i32 %init_val) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i8, i8* @crc32_alg, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %tobool = icmp ne i64 %conv1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %data.addr, align 1
  %2 = load i32, i32* %init_val.addr, align 4
  %call = call i32 @crc32c_sse42_u8(i8 zeroext %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8, i8* %data.addr, align 1
  %4 = load i32, i32* %init_val.addr, align 4
  %call2 = call i32 @crc32c_1byte(i8 zeroext %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_sse42_u64(i64 %data, i64 %init_val) #0 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i64, align 8
  store i64 %data, i64* %data.addr, align 8
  store i64 %init_val, i64* %init_val.addr, align 8
  %0 = load i64, i64* %init_val.addr, align 8
  %1 = load i64, i64* %data.addr, align 8
  %2 = call i64 asm sideeffect "crc32q $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %1, i64 %0) #5, !srcloc !10
  store i64 %2, i64* %init_val.addr, align 8
  %3 = load i64, i64* %init_val.addr, align 8
  %conv = trunc i64 %3 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_sse42_u64_mimic(i64 %data, i64 %init_val) #0 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i64, align 8
  %d = alloca %union.anon.20, align 8
  store i64 %data, i64* %data.addr, align 8
  store i64 %init_val, i64* %init_val.addr, align 8
  %0 = load i64, i64* %data.addr, align 8
  %u64 = bitcast %union.anon.20* %d to i64*
  store i64 %0, i64* %u64, align 8
  %u32 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 8
  %2 = load i64, i64* %init_val.addr, align 8
  %conv = trunc i64 %2 to i32
  %call = call i32 @crc32c_sse42_u32(i32 %1, i32 %conv)
  %conv1 = zext i32 %call to i64
  store i64 %conv1, i64* %init_val.addr, align 8
  %u322 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %u322, i64 0, i64 1
  %3 = load i32, i32* %arrayidx3, align 4
  %4 = load i64, i64* %init_val.addr, align 8
  %conv4 = trunc i64 %4 to i32
  %call5 = call i32 @crc32c_sse42_u32(i32 %3, i32 %conv4)
  %conv6 = zext i32 %call5 to i64
  store i64 %conv6, i64* %init_val.addr, align 8
  %5 = load i64, i64* %init_val.addr, align 8
  %conv7 = trunc i64 %5 to i32
  ret i32 %conv7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_2words(i64 %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i32, align 4
  %d = alloca %union.anon.21, align 8
  %crc = alloca i32, align 4
  %term1 = alloca i32, align 4
  %term2 = alloca i32, align 4
  store i64 %data, i64* %data.addr, align 8
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i64, i64* %data.addr, align 8
  %u64 = bitcast %union.anon.21* %d to i64*
  store i64 %0, i64* %u64, align 8
  %1 = load i32, i32* %init_val.addr, align 4
  store i32 %1, i32* %crc, align 4
  %u32 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %2 = load i32, i32* %arrayidx, align 8
  %3 = load i32, i32* %crc, align 4
  %xor = xor i32 %3, %2
  store i32 %xor, i32* %crc, align 4
  %4 = load i32, i32* %crc, align 4
  %and = and i32 %4, 255
  %idxprom = zext i32 %and to i64
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 7), i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx1, align 4
  %6 = load i32, i32* %crc, align 4
  %shr = lshr i32 %6, 8
  %and2 = and i32 %shr, 255
  %idxprom3 = zext i32 %and2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 6), i64 0, i64 %idxprom3
  %7 = load i32, i32* %arrayidx4, align 4
  %xor5 = xor i32 %5, %7
  store i32 %xor5, i32* %term1, align 4
  %8 = load i32, i32* %crc, align 4
  %shr6 = lshr i32 %8, 16
  store i32 %shr6, i32* %term2, align 4
  %9 = load i32, i32* %term1, align 4
  %10 = load i32, i32* %term2, align 4
  %and7 = and i32 %10, 255
  %idxprom8 = zext i32 %and7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 5), i64 0, i64 %idxprom8
  %11 = load i32, i32* %arrayidx9, align 4
  %12 = load i32, i32* %term2, align 4
  %shr10 = lshr i32 %12, 8
  %and11 = and i32 %shr10, 255
  %idxprom12 = zext i32 %and11 to i64
  %arrayidx13 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 4), i64 0, i64 %idxprom12
  %13 = load i32, i32* %arrayidx13, align 4
  %xor14 = xor i32 %11, %13
  %xor15 = xor i32 %9, %xor14
  store i32 %xor15, i32* %crc, align 4
  %u3216 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %u3216, i64 0, i64 1
  %14 = load i32, i32* %arrayidx17, align 4
  %and18 = and i32 %14, 255
  %idxprom19 = zext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom19
  %15 = load i32, i32* %arrayidx20, align 4
  %u3221 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %u3221, i64 0, i64 1
  %16 = load i32, i32* %arrayidx22, align 4
  %shr23 = lshr i32 %16, 8
  %and24 = and i32 %shr23, 255
  %idxprom25 = zext i32 %and24 to i64
  %arrayidx26 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom25
  %17 = load i32, i32* %arrayidx26, align 4
  %xor27 = xor i32 %15, %17
  store i32 %xor27, i32* %term1, align 4
  %u3228 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %u3228, i64 0, i64 1
  %18 = load i32, i32* %arrayidx29, align 4
  %shr30 = lshr i32 %18, 16
  store i32 %shr30, i32* %term2, align 4
  %19 = load i32, i32* %term1, align 4
  %20 = load i32, i32* %term2, align 4
  %and31 = and i32 %20, 255
  %idxprom32 = zext i32 %and31 to i64
  %arrayidx33 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom32
  %21 = load i32, i32* %arrayidx33, align 4
  %22 = load i32, i32* %term2, align 4
  %shr34 = lshr i32 %22, 8
  %and35 = and i32 %shr34, 255
  %idxprom36 = zext i32 %and35 to i64
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom36
  %23 = load i32, i32* %arrayidx37, align 4
  %xor38 = xor i32 %21, %23
  %xor39 = xor i32 %19, %xor38
  %24 = load i32, i32* %crc, align 4
  %xor40 = xor i32 %24, %xor39
  store i32 %xor40, i32* %crc, align 4
  %25 = load i32, i32* %crc, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_sse42_u32(i32 %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  %1 = load i32, i32* %data.addr, align 4
  %2 = call i32 asm sideeffect "crc32l $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %1, i32 %0) #5, !srcloc !11
  store i32 %2, i32* %init_val.addr, align 4
  %3 = load i32, i32* %init_val.addr, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_1word(i32 %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  %term1 = alloca i32, align 4
  %term2 = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  store i32 %0, i32* %crc, align 4
  %1 = load i32, i32* %data.addr, align 4
  %2 = load i32, i32* %crc, align 4
  %xor = xor i32 %2, %1
  store i32 %xor, i32* %crc, align 4
  %3 = load i32, i32* %crc, align 4
  %and = and i32 %3, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %crc, align 4
  %shr = lshr i32 %5, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom2
  %6 = load i32, i32* %arrayidx3, align 4
  %xor4 = xor i32 %4, %6
  store i32 %xor4, i32* %term1, align 4
  %7 = load i32, i32* %crc, align 4
  %shr5 = lshr i32 %7, 16
  store i32 %shr5, i32* %term2, align 4
  %8 = load i32, i32* %term1, align 4
  %9 = load i32, i32* %term2, align 4
  %and6 = and i32 %9, 255
  %idxprom7 = zext i32 %and6 to i64
  %arrayidx8 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom7
  %10 = load i32, i32* %arrayidx8, align 4
  %11 = load i32, i32* %term2, align 4
  %shr9 = lshr i32 %11, 8
  %and10 = and i32 %shr9, 255
  %idxprom11 = zext i32 %and10 to i64
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom11
  %12 = load i32, i32* %arrayidx12, align 4
  %xor13 = xor i32 %10, %12
  %xor14 = xor i32 %8, %xor13
  store i32 %xor14, i32* %crc, align 4
  %13 = load i32, i32* %crc, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_sse42_u16(i16 zeroext %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  %1 = load i16, i16* %data.addr, align 2
  %2 = call i32 asm sideeffect "crc32w $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i16 %1, i32 %0) #5, !srcloc !12
  store i32 %2, i32* %init_val.addr, align 4
  %3 = load i32, i32* %init_val.addr, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_2bytes(i16 zeroext %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  store i32 %0, i32* %crc, align 4
  %1 = load i16, i16* %data.addr, align 2
  %conv = zext i16 %1 to i32
  %2 = load i32, i32* %crc, align 4
  %xor = xor i32 %2, %conv
  store i32 %xor, i32* %crc, align 4
  %3 = load i32, i32* %crc, align 4
  %and = and i32 %3, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %crc, align 4
  %shr = lshr i32 %5, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom2
  %6 = load i32, i32* %arrayidx3, align 4
  %xor4 = xor i32 %4, %6
  %7 = load i32, i32* %crc, align 4
  %shr5 = lshr i32 %7, 16
  %xor6 = xor i32 %xor4, %shr5
  store i32 %xor6, i32* %crc, align 4
  %8 = load i32, i32* %crc, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_sse42_u8(i8 zeroext %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  %1 = load i8, i8* %data.addr, align 1
  %2 = call i32 asm sideeffect "crc32b $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i8 %1, i32 %0) #5, !srcloc !13
  store i32 %2, i32* %init_val.addr, align 4
  %3 = load i32, i32* %init_val.addr, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @crc32c_1byte(i8 zeroext %data, i32 %init_val) #0 {
entry:
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1
  store i32 %init_val, i32* %init_val.addr, align 4
  %0 = load i32, i32* %init_val.addr, align 4
  store i32 %0, i32* %crc, align 4
  %1 = load i8, i8* %data.addr, align 1
  %conv = zext i8 %1 to i32
  %2 = load i32, i32* %crc, align 4
  %xor = xor i32 %2, %conv
  store i32 %xor, i32* %crc, align 4
  %3 = load i32, i32* %crc, align 4
  %and = and i32 %3, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %crc, align 4
  %shr = lshr i32 %5, 8
  %xor1 = xor i32 %4, %shr
  ret i32 %xor1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dma_read(i64 %addr, i64 %len, i8* %buf) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %dst.addr.i = alloca i8*, align 8
  %src.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  store i64 %addr, i64* %addr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load i64, i64* %addr.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i32 23, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.dma_read, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** %buf.addr, align 8
  %6 = load i8*, i8** @dma_mem, align 8
  %7 = load i64, i64* %addr.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i64, i64* %len.addr, align 8
  store i8* %5, i8** %dst.addr.i, align 8
  store i8* %add.ptr, i8** %src.addr.i, align 8
  store i64 %8, i64* %n.addr.i, align 8
  %9 = load i8*, i8** %dst.addr.i, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = load i8*, i8** %src.addr.i, align 8
  %12 = ptrtoint i8* %11 to i64
  %or.i = or i64 %10, %12
  %and.i = and i64 %or.i, 15
  %tobool.i = icmp ne i64 %and.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %13 = load i8*, i8** %dst.addr.i, align 8
  %14 = load i8*, i8** %src.addr.i, align 8
  %15 = load i64, i64* %n.addr.i, align 8
  %call.i = call i8* @rte_memcpy_aligned(i8* %13, i8* %14, i64 %15) #5
  store i8* %call.i, i8** %retval.i, align 8
  br label %rte_memcpy.exit

if.else.i:                                        ; preds = %if.end
  %16 = load i8*, i8** %dst.addr.i, align 8
  %17 = load i8*, i8** %src.addr.i, align 8
  %18 = load i64, i64* %n.addr.i, align 8
  %call1.i = call i8* @rte_memcpy_generic(i8* %16, i8* %17, i64 %18) #5
  store i8* %call1.i, i8** %retval.i, align 8
  br label %rte_memcpy.exit

rte_memcpy.exit:                                  ; preds = %if.then.i, %if.else.i
  %19 = load i8*, i8** %retval.i, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @rte_memcpy_aligned(i8* %dst, i8* %src, i64 %n) #0 {
entry:
  %retval = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ret = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  store i8* %0, i8** %ret, align 8
  %1 = load i64, i64* %n.addr, align 8
  %cmp = icmp ult i64 %1, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8
  %and = and i64 %2, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %3 = load i8*, i8** %src.addr, align 8
  %4 = load i8, i8* %3, align 1
  %5 = load i8*, i8** %dst.addr, align 8
  store i8 %4, i8* %5, align 1
  %6 = load i8*, i8** %src.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 1
  store i8* %add.ptr, i8** %src.addr, align 8
  %7 = load i8*, i8** %dst.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 1
  store i8* %add.ptr2, i8** %dst.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %8 = load i64, i64* %n.addr, align 8
  %and3 = and i64 %8, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %9 = load i8*, i8** %src.addr, align 8
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = load i8*, i8** %dst.addr, align 8
  %13 = bitcast i8* %12 to i16*
  store i16 %11, i16* %13, align 2
  %14 = load i8*, i8** %src.addr, align 8
  %15 = bitcast i8* %14 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %15, i64 1
  %16 = bitcast i16* %add.ptr6 to i8*
  store i8* %16, i8** %src.addr, align 8
  %17 = load i8*, i8** %dst.addr, align 8
  %18 = bitcast i8* %17 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %18, i64 1
  %19 = bitcast i16* %add.ptr7 to i8*
  store i8* %19, i8** %dst.addr, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %20 = load i64, i64* %n.addr, align 8
  %and9 = and i64 %20, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %21 = load i8*, i8** %src.addr, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = load i8*, i8** %dst.addr, align 8
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = load i8*, i8** %src.addr, align 8
  %27 = bitcast i8* %26 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %27, i64 1
  %28 = bitcast i32* %add.ptr12 to i8*
  store i8* %28, i8** %src.addr, align 8
  %29 = load i8*, i8** %dst.addr, align 8
  %30 = bitcast i8* %29 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %30, i64 1
  %31 = bitcast i32* %add.ptr13 to i8*
  store i8* %31, i8** %dst.addr, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %32 = load i64, i64* %n.addr, align 8
  %and15 = and i64 %32, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %33 = load i8*, i8** %src.addr, align 8
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = load i8*, i8** %dst.addr, align 8
  %37 = bitcast i8* %36 to i64*
  store i64 %35, i64* %37, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  %38 = load i8*, i8** %ret, align 8
  store i8* %38, i8** %retval, align 8
  br label %return

if.end19:                                         ; preds = %entry
  %39 = load i64, i64* %n.addr, align 8
  %cmp20 = icmp ule i64 %39, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  %40 = load i8*, i8** %dst.addr, align 8
  %41 = load i8*, i8** %src.addr, align 8
  call void @rte_mov16(i8* %40, i8* %41)
  %42 = load i8*, i8** %dst.addr, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %42, i64 -16
  %43 = load i64, i64* %n.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %43
  %44 = load i8*, i8** %src.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %44, i64 -16
  %45 = load i64, i64* %n.addr, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %45
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  %46 = load i8*, i8** %ret, align 8
  store i8* %46, i8** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end19
  %47 = load i64, i64* %n.addr, align 8
  %cmp27 = icmp ule i64 %47, 64
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  %48 = load i8*, i8** %dst.addr, align 8
  %49 = load i8*, i8** %src.addr, align 8
  call void @rte_mov32(i8* %48, i8* %49)
  %50 = load i8*, i8** %dst.addr, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %50, i64 -32
  %51 = load i64, i64* %n.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %51
  %52 = load i8*, i8** %src.addr, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %52, i64 -32
  %53 = load i64, i64* %n.addr, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %53
  call void @rte_mov32(i8* %add.ptr30, i8* %add.ptr32)
  %54 = load i8*, i8** %ret, align 8
  store i8* %54, i8** %retval, align 8
  br label %return

if.end33:                                         ; preds = %if.end26
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end33
  %55 = load i64, i64* %n.addr, align 8
  %cmp34 = icmp uge i64 %55, 64
  br i1 %cmp34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %56 = load i8*, i8** %dst.addr, align 8
  %57 = load i8*, i8** %src.addr, align 8
  call void @rte_mov64(i8* %56, i8* %57)
  %58 = load i8*, i8** %dst.addr, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %58, i64 64
  store i8* %add.ptr35, i8** %dst.addr, align 8
  %59 = load i8*, i8** %src.addr, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %59, i64 64
  store i8* %add.ptr36, i8** %src.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %60 = load i64, i64* %n.addr, align 8
  %sub = sub i64 %60, 64
  store i64 %sub, i64* %n.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %61 = load i8*, i8** %dst.addr, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %61, i64 -64
  %62 = load i64, i64* %n.addr, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr37, i64 %62
  %63 = load i8*, i8** %src.addr, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %63, i64 -64
  %64 = load i64, i64* %n.addr, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr39, i64 %64
  call void @rte_mov64(i8* %add.ptr38, i8* %add.ptr40)
  %65 = load i8*, i8** %ret, align 8
  store i8* %65, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then28, %if.then21, %if.end18
  %66 = load i8*, i8** %retval, align 8
  ret i8* %66
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @rte_memcpy_generic(i8* %dst, i8* %src, i64 %n) #7 {
entry:
  %__p.addr.i2459 = alloca <2 x i64>*, align 8
  %__p.addr.i2457 = alloca <2 x i64>*, align 8
  %__p.addr.i2455 = alloca <2 x i64>*, align 8
  %__p.addr.i2453 = alloca <2 x i64>*, align 8
  %__p.addr.i2451 = alloca <2 x i64>*, align 8
  %__p.addr.i2449 = alloca <2 x i64>*, align 8
  %__p.addr.i2447 = alloca <2 x i64>*, align 8
  %__p.addr.i2445 = alloca <2 x i64>*, align 8
  %__p.addr.i2442 = alloca <2 x i64>*, align 8
  %__b.addr.i2443 = alloca <2 x i64>, align 16
  %__p.addr.i2439 = alloca <2 x i64>*, align 8
  %__b.addr.i2440 = alloca <2 x i64>, align 16
  %__p.addr.i2436 = alloca <2 x i64>*, align 8
  %__b.addr.i2437 = alloca <2 x i64>, align 16
  %__p.addr.i2433 = alloca <2 x i64>*, align 8
  %__b.addr.i2434 = alloca <2 x i64>, align 16
  %__p.addr.i2430 = alloca <2 x i64>*, align 8
  %__b.addr.i2431 = alloca <2 x i64>, align 16
  %__p.addr.i2427 = alloca <2 x i64>*, align 8
  %__b.addr.i2428 = alloca <2 x i64>, align 16
  %__p.addr.i2424 = alloca <2 x i64>*, align 8
  %__b.addr.i2425 = alloca <2 x i64>, align 16
  %__p.addr.i2421 = alloca <2 x i64>*, align 8
  %__b.addr.i2422 = alloca <2 x i64>, align 16
  %__p.addr.i2419 = alloca <2 x i64>*, align 8
  %__p.addr.i2417 = alloca <2 x i64>*, align 8
  %__p.addr.i2415 = alloca <2 x i64>*, align 8
  %__p.addr.i2412 = alloca <2 x i64>*, align 8
  %__b.addr.i2413 = alloca <2 x i64>, align 16
  %__p.addr.i2409 = alloca <2 x i64>*, align 8
  %__b.addr.i2410 = alloca <2 x i64>, align 16
  %__p.addr.i2407 = alloca <2 x i64>*, align 8
  %__p.addr.i2405 = alloca <2 x i64>*, align 8
  %__p.addr.i2403 = alloca <2 x i64>*, align 8
  %__p.addr.i2401 = alloca <2 x i64>*, align 8
  %__p.addr.i2399 = alloca <2 x i64>*, align 8
  %__p.addr.i2397 = alloca <2 x i64>*, align 8
  %__p.addr.i2395 = alloca <2 x i64>*, align 8
  %__p.addr.i2393 = alloca <2 x i64>*, align 8
  %__p.addr.i2391 = alloca <2 x i64>*, align 8
  %__p.addr.i2388 = alloca <2 x i64>*, align 8
  %__b.addr.i2389 = alloca <2 x i64>, align 16
  %__p.addr.i2385 = alloca <2 x i64>*, align 8
  %__b.addr.i2386 = alloca <2 x i64>, align 16
  %__p.addr.i2382 = alloca <2 x i64>*, align 8
  %__b.addr.i2383 = alloca <2 x i64>, align 16
  %__p.addr.i2379 = alloca <2 x i64>*, align 8
  %__b.addr.i2380 = alloca <2 x i64>, align 16
  %__p.addr.i2376 = alloca <2 x i64>*, align 8
  %__b.addr.i2377 = alloca <2 x i64>, align 16
  %__p.addr.i2373 = alloca <2 x i64>*, align 8
  %__b.addr.i2374 = alloca <2 x i64>, align 16
  %__p.addr.i2370 = alloca <2 x i64>*, align 8
  %__b.addr.i2371 = alloca <2 x i64>, align 16
  %__p.addr.i2367 = alloca <2 x i64>*, align 8
  %__b.addr.i2368 = alloca <2 x i64>, align 16
  %__p.addr.i2365 = alloca <2 x i64>*, align 8
  %__p.addr.i2363 = alloca <2 x i64>*, align 8
  %__p.addr.i2361 = alloca <2 x i64>*, align 8
  %__p.addr.i2358 = alloca <2 x i64>*, align 8
  %__b.addr.i2359 = alloca <2 x i64>, align 16
  %__p.addr.i2355 = alloca <2 x i64>*, align 8
  %__b.addr.i2356 = alloca <2 x i64>, align 16
  %__p.addr.i2353 = alloca <2 x i64>*, align 8
  %__p.addr.i2351 = alloca <2 x i64>*, align 8
  %__p.addr.i2349 = alloca <2 x i64>*, align 8
  %__p.addr.i2347 = alloca <2 x i64>*, align 8
  %__p.addr.i2345 = alloca <2 x i64>*, align 8
  %__p.addr.i2343 = alloca <2 x i64>*, align 8
  %__p.addr.i2341 = alloca <2 x i64>*, align 8
  %__p.addr.i2339 = alloca <2 x i64>*, align 8
  %__p.addr.i2337 = alloca <2 x i64>*, align 8
  %__p.addr.i2334 = alloca <2 x i64>*, align 8
  %__b.addr.i2335 = alloca <2 x i64>, align 16
  %__p.addr.i2331 = alloca <2 x i64>*, align 8
  %__b.addr.i2332 = alloca <2 x i64>, align 16
  %__p.addr.i2328 = alloca <2 x i64>*, align 8
  %__b.addr.i2329 = alloca <2 x i64>, align 16
  %__p.addr.i2325 = alloca <2 x i64>*, align 8
  %__b.addr.i2326 = alloca <2 x i64>, align 16
  %__p.addr.i2322 = alloca <2 x i64>*, align 8
  %__b.addr.i2323 = alloca <2 x i64>, align 16
  %__p.addr.i2319 = alloca <2 x i64>*, align 8
  %__b.addr.i2320 = alloca <2 x i64>, align 16
  %__p.addr.i2316 = alloca <2 x i64>*, align 8
  %__b.addr.i2317 = alloca <2 x i64>, align 16
  %__p.addr.i2313 = alloca <2 x i64>*, align 8
  %__b.addr.i2314 = alloca <2 x i64>, align 16
  %__p.addr.i2311 = alloca <2 x i64>*, align 8
  %__p.addr.i2309 = alloca <2 x i64>*, align 8
  %__p.addr.i2307 = alloca <2 x i64>*, align 8
  %__p.addr.i2304 = alloca <2 x i64>*, align 8
  %__b.addr.i2305 = alloca <2 x i64>, align 16
  %__p.addr.i2301 = alloca <2 x i64>*, align 8
  %__b.addr.i2302 = alloca <2 x i64>, align 16
  %__p.addr.i2299 = alloca <2 x i64>*, align 8
  %__p.addr.i2297 = alloca <2 x i64>*, align 8
  %__p.addr.i2295 = alloca <2 x i64>*, align 8
  %__p.addr.i2293 = alloca <2 x i64>*, align 8
  %__p.addr.i2291 = alloca <2 x i64>*, align 8
  %__p.addr.i2289 = alloca <2 x i64>*, align 8
  %__p.addr.i2287 = alloca <2 x i64>*, align 8
  %__p.addr.i2285 = alloca <2 x i64>*, align 8
  %__p.addr.i2283 = alloca <2 x i64>*, align 8
  %__p.addr.i2280 = alloca <2 x i64>*, align 8
  %__b.addr.i2281 = alloca <2 x i64>, align 16
  %__p.addr.i2277 = alloca <2 x i64>*, align 8
  %__b.addr.i2278 = alloca <2 x i64>, align 16
  %__p.addr.i2274 = alloca <2 x i64>*, align 8
  %__b.addr.i2275 = alloca <2 x i64>, align 16
  %__p.addr.i2271 = alloca <2 x i64>*, align 8
  %__b.addr.i2272 = alloca <2 x i64>, align 16
  %__p.addr.i2268 = alloca <2 x i64>*, align 8
  %__b.addr.i2269 = alloca <2 x i64>, align 16
  %__p.addr.i2265 = alloca <2 x i64>*, align 8
  %__b.addr.i2266 = alloca <2 x i64>, align 16
  %__p.addr.i2262 = alloca <2 x i64>*, align 8
  %__b.addr.i2263 = alloca <2 x i64>, align 16
  %__p.addr.i2259 = alloca <2 x i64>*, align 8
  %__b.addr.i2260 = alloca <2 x i64>, align 16
  %__p.addr.i2257 = alloca <2 x i64>*, align 8
  %__p.addr.i2255 = alloca <2 x i64>*, align 8
  %__p.addr.i2253 = alloca <2 x i64>*, align 8
  %__p.addr.i2250 = alloca <2 x i64>*, align 8
  %__b.addr.i2251 = alloca <2 x i64>, align 16
  %__p.addr.i2247 = alloca <2 x i64>*, align 8
  %__b.addr.i2248 = alloca <2 x i64>, align 16
  %__p.addr.i2245 = alloca <2 x i64>*, align 8
  %__p.addr.i2243 = alloca <2 x i64>*, align 8
  %__p.addr.i2241 = alloca <2 x i64>*, align 8
  %__p.addr.i2239 = alloca <2 x i64>*, align 8
  %__p.addr.i2237 = alloca <2 x i64>*, align 8
  %__p.addr.i2235 = alloca <2 x i64>*, align 8
  %__p.addr.i2233 = alloca <2 x i64>*, align 8
  %__p.addr.i2231 = alloca <2 x i64>*, align 8
  %__p.addr.i2229 = alloca <2 x i64>*, align 8
  %__p.addr.i2226 = alloca <2 x i64>*, align 8
  %__b.addr.i2227 = alloca <2 x i64>, align 16
  %__p.addr.i2223 = alloca <2 x i64>*, align 8
  %__b.addr.i2224 = alloca <2 x i64>, align 16
  %__p.addr.i2220 = alloca <2 x i64>*, align 8
  %__b.addr.i2221 = alloca <2 x i64>, align 16
  %__p.addr.i2217 = alloca <2 x i64>*, align 8
  %__b.addr.i2218 = alloca <2 x i64>, align 16
  %__p.addr.i2214 = alloca <2 x i64>*, align 8
  %__b.addr.i2215 = alloca <2 x i64>, align 16
  %__p.addr.i2211 = alloca <2 x i64>*, align 8
  %__b.addr.i2212 = alloca <2 x i64>, align 16
  %__p.addr.i2208 = alloca <2 x i64>*, align 8
  %__b.addr.i2209 = alloca <2 x i64>, align 16
  %__p.addr.i2205 = alloca <2 x i64>*, align 8
  %__b.addr.i2206 = alloca <2 x i64>, align 16
  %__p.addr.i2203 = alloca <2 x i64>*, align 8
  %__p.addr.i2201 = alloca <2 x i64>*, align 8
  %__p.addr.i2199 = alloca <2 x i64>*, align 8
  %__p.addr.i2196 = alloca <2 x i64>*, align 8
  %__b.addr.i2197 = alloca <2 x i64>, align 16
  %__p.addr.i2193 = alloca <2 x i64>*, align 8
  %__b.addr.i2194 = alloca <2 x i64>, align 16
  %__p.addr.i2191 = alloca <2 x i64>*, align 8
  %__p.addr.i2189 = alloca <2 x i64>*, align 8
  %__p.addr.i2187 = alloca <2 x i64>*, align 8
  %__p.addr.i2185 = alloca <2 x i64>*, align 8
  %__p.addr.i2183 = alloca <2 x i64>*, align 8
  %__p.addr.i2181 = alloca <2 x i64>*, align 8
  %__p.addr.i2179 = alloca <2 x i64>*, align 8
  %__p.addr.i2177 = alloca <2 x i64>*, align 8
  %__p.addr.i2175 = alloca <2 x i64>*, align 8
  %__p.addr.i2172 = alloca <2 x i64>*, align 8
  %__b.addr.i2173 = alloca <2 x i64>, align 16
  %__p.addr.i2169 = alloca <2 x i64>*, align 8
  %__b.addr.i2170 = alloca <2 x i64>, align 16
  %__p.addr.i2166 = alloca <2 x i64>*, align 8
  %__b.addr.i2167 = alloca <2 x i64>, align 16
  %__p.addr.i2163 = alloca <2 x i64>*, align 8
  %__b.addr.i2164 = alloca <2 x i64>, align 16
  %__p.addr.i2160 = alloca <2 x i64>*, align 8
  %__b.addr.i2161 = alloca <2 x i64>, align 16
  %__p.addr.i2157 = alloca <2 x i64>*, align 8
  %__b.addr.i2158 = alloca <2 x i64>, align 16
  %__p.addr.i2154 = alloca <2 x i64>*, align 8
  %__b.addr.i2155 = alloca <2 x i64>, align 16
  %__p.addr.i2151 = alloca <2 x i64>*, align 8
  %__b.addr.i2152 = alloca <2 x i64>, align 16
  %__p.addr.i2149 = alloca <2 x i64>*, align 8
  %__p.addr.i2147 = alloca <2 x i64>*, align 8
  %__p.addr.i2145 = alloca <2 x i64>*, align 8
  %__p.addr.i2142 = alloca <2 x i64>*, align 8
  %__b.addr.i2143 = alloca <2 x i64>, align 16
  %__p.addr.i2139 = alloca <2 x i64>*, align 8
  %__b.addr.i2140 = alloca <2 x i64>, align 16
  %__p.addr.i2137 = alloca <2 x i64>*, align 8
  %__p.addr.i2135 = alloca <2 x i64>*, align 8
  %__p.addr.i2133 = alloca <2 x i64>*, align 8
  %__p.addr.i2131 = alloca <2 x i64>*, align 8
  %__p.addr.i2129 = alloca <2 x i64>*, align 8
  %__p.addr.i2127 = alloca <2 x i64>*, align 8
  %__p.addr.i2125 = alloca <2 x i64>*, align 8
  %__p.addr.i2123 = alloca <2 x i64>*, align 8
  %__p.addr.i2121 = alloca <2 x i64>*, align 8
  %__p.addr.i2118 = alloca <2 x i64>*, align 8
  %__b.addr.i2119 = alloca <2 x i64>, align 16
  %__p.addr.i2115 = alloca <2 x i64>*, align 8
  %__b.addr.i2116 = alloca <2 x i64>, align 16
  %__p.addr.i2112 = alloca <2 x i64>*, align 8
  %__b.addr.i2113 = alloca <2 x i64>, align 16
  %__p.addr.i2109 = alloca <2 x i64>*, align 8
  %__b.addr.i2110 = alloca <2 x i64>, align 16
  %__p.addr.i2106 = alloca <2 x i64>*, align 8
  %__b.addr.i2107 = alloca <2 x i64>, align 16
  %__p.addr.i2103 = alloca <2 x i64>*, align 8
  %__b.addr.i2104 = alloca <2 x i64>, align 16
  %__p.addr.i2100 = alloca <2 x i64>*, align 8
  %__b.addr.i2101 = alloca <2 x i64>, align 16
  %__p.addr.i2097 = alloca <2 x i64>*, align 8
  %__b.addr.i2098 = alloca <2 x i64>, align 16
  %__p.addr.i2095 = alloca <2 x i64>*, align 8
  %__p.addr.i2093 = alloca <2 x i64>*, align 8
  %__p.addr.i2091 = alloca <2 x i64>*, align 8
  %__p.addr.i2088 = alloca <2 x i64>*, align 8
  %__b.addr.i2089 = alloca <2 x i64>, align 16
  %__p.addr.i2085 = alloca <2 x i64>*, align 8
  %__b.addr.i2086 = alloca <2 x i64>, align 16
  %__p.addr.i2083 = alloca <2 x i64>*, align 8
  %__p.addr.i2081 = alloca <2 x i64>*, align 8
  %__p.addr.i2079 = alloca <2 x i64>*, align 8
  %__p.addr.i2077 = alloca <2 x i64>*, align 8
  %__p.addr.i2075 = alloca <2 x i64>*, align 8
  %__p.addr.i2073 = alloca <2 x i64>*, align 8
  %__p.addr.i2071 = alloca <2 x i64>*, align 8
  %__p.addr.i2069 = alloca <2 x i64>*, align 8
  %__p.addr.i2067 = alloca <2 x i64>*, align 8
  %__p.addr.i2064 = alloca <2 x i64>*, align 8
  %__b.addr.i2065 = alloca <2 x i64>, align 16
  %__p.addr.i2061 = alloca <2 x i64>*, align 8
  %__b.addr.i2062 = alloca <2 x i64>, align 16
  %__p.addr.i2058 = alloca <2 x i64>*, align 8
  %__b.addr.i2059 = alloca <2 x i64>, align 16
  %__p.addr.i2055 = alloca <2 x i64>*, align 8
  %__b.addr.i2056 = alloca <2 x i64>, align 16
  %__p.addr.i2052 = alloca <2 x i64>*, align 8
  %__b.addr.i2053 = alloca <2 x i64>, align 16
  %__p.addr.i2049 = alloca <2 x i64>*, align 8
  %__b.addr.i2050 = alloca <2 x i64>, align 16
  %__p.addr.i2046 = alloca <2 x i64>*, align 8
  %__b.addr.i2047 = alloca <2 x i64>, align 16
  %__p.addr.i2043 = alloca <2 x i64>*, align 8
  %__b.addr.i2044 = alloca <2 x i64>, align 16
  %__p.addr.i2041 = alloca <2 x i64>*, align 8
  %__p.addr.i2039 = alloca <2 x i64>*, align 8
  %__p.addr.i2037 = alloca <2 x i64>*, align 8
  %__p.addr.i2034 = alloca <2 x i64>*, align 8
  %__b.addr.i2035 = alloca <2 x i64>, align 16
  %__p.addr.i2031 = alloca <2 x i64>*, align 8
  %__b.addr.i2032 = alloca <2 x i64>, align 16
  %__p.addr.i2029 = alloca <2 x i64>*, align 8
  %__p.addr.i2027 = alloca <2 x i64>*, align 8
  %__p.addr.i2025 = alloca <2 x i64>*, align 8
  %__p.addr.i2023 = alloca <2 x i64>*, align 8
  %__p.addr.i2021 = alloca <2 x i64>*, align 8
  %__p.addr.i2019 = alloca <2 x i64>*, align 8
  %__p.addr.i2017 = alloca <2 x i64>*, align 8
  %__p.addr.i2015 = alloca <2 x i64>*, align 8
  %__p.addr.i2013 = alloca <2 x i64>*, align 8
  %__p.addr.i2010 = alloca <2 x i64>*, align 8
  %__b.addr.i2011 = alloca <2 x i64>, align 16
  %__p.addr.i2007 = alloca <2 x i64>*, align 8
  %__b.addr.i2008 = alloca <2 x i64>, align 16
  %__p.addr.i2004 = alloca <2 x i64>*, align 8
  %__b.addr.i2005 = alloca <2 x i64>, align 16
  %__p.addr.i2001 = alloca <2 x i64>*, align 8
  %__b.addr.i2002 = alloca <2 x i64>, align 16
  %__p.addr.i1998 = alloca <2 x i64>*, align 8
  %__b.addr.i1999 = alloca <2 x i64>, align 16
  %__p.addr.i1995 = alloca <2 x i64>*, align 8
  %__b.addr.i1996 = alloca <2 x i64>, align 16
  %__p.addr.i1992 = alloca <2 x i64>*, align 8
  %__b.addr.i1993 = alloca <2 x i64>, align 16
  %__p.addr.i1989 = alloca <2 x i64>*, align 8
  %__b.addr.i1990 = alloca <2 x i64>, align 16
  %__p.addr.i1987 = alloca <2 x i64>*, align 8
  %__p.addr.i1985 = alloca <2 x i64>*, align 8
  %__p.addr.i1983 = alloca <2 x i64>*, align 8
  %__p.addr.i1980 = alloca <2 x i64>*, align 8
  %__b.addr.i1981 = alloca <2 x i64>, align 16
  %__p.addr.i1977 = alloca <2 x i64>*, align 8
  %__b.addr.i1978 = alloca <2 x i64>, align 16
  %__p.addr.i1975 = alloca <2 x i64>*, align 8
  %__p.addr.i1973 = alloca <2 x i64>*, align 8
  %__p.addr.i1971 = alloca <2 x i64>*, align 8
  %__p.addr.i1969 = alloca <2 x i64>*, align 8
  %__p.addr.i1967 = alloca <2 x i64>*, align 8
  %__p.addr.i1965 = alloca <2 x i64>*, align 8
  %__p.addr.i1963 = alloca <2 x i64>*, align 8
  %__p.addr.i1961 = alloca <2 x i64>*, align 8
  %__p.addr.i1959 = alloca <2 x i64>*, align 8
  %__p.addr.i1956 = alloca <2 x i64>*, align 8
  %__b.addr.i1957 = alloca <2 x i64>, align 16
  %__p.addr.i1953 = alloca <2 x i64>*, align 8
  %__b.addr.i1954 = alloca <2 x i64>, align 16
  %__p.addr.i1950 = alloca <2 x i64>*, align 8
  %__b.addr.i1951 = alloca <2 x i64>, align 16
  %__p.addr.i1947 = alloca <2 x i64>*, align 8
  %__b.addr.i1948 = alloca <2 x i64>, align 16
  %__p.addr.i1944 = alloca <2 x i64>*, align 8
  %__b.addr.i1945 = alloca <2 x i64>, align 16
  %__p.addr.i1941 = alloca <2 x i64>*, align 8
  %__b.addr.i1942 = alloca <2 x i64>, align 16
  %__p.addr.i1938 = alloca <2 x i64>*, align 8
  %__b.addr.i1939 = alloca <2 x i64>, align 16
  %__p.addr.i1935 = alloca <2 x i64>*, align 8
  %__b.addr.i1936 = alloca <2 x i64>, align 16
  %__p.addr.i1933 = alloca <2 x i64>*, align 8
  %__p.addr.i1931 = alloca <2 x i64>*, align 8
  %__p.addr.i1929 = alloca <2 x i64>*, align 8
  %__p.addr.i1926 = alloca <2 x i64>*, align 8
  %__b.addr.i1927 = alloca <2 x i64>, align 16
  %__p.addr.i1923 = alloca <2 x i64>*, align 8
  %__b.addr.i1924 = alloca <2 x i64>, align 16
  %__p.addr.i1921 = alloca <2 x i64>*, align 8
  %__p.addr.i1919 = alloca <2 x i64>*, align 8
  %__p.addr.i1917 = alloca <2 x i64>*, align 8
  %__p.addr.i1915 = alloca <2 x i64>*, align 8
  %__p.addr.i1913 = alloca <2 x i64>*, align 8
  %__p.addr.i1911 = alloca <2 x i64>*, align 8
  %__p.addr.i1909 = alloca <2 x i64>*, align 8
  %__p.addr.i1907 = alloca <2 x i64>*, align 8
  %__p.addr.i1905 = alloca <2 x i64>*, align 8
  %__p.addr.i1902 = alloca <2 x i64>*, align 8
  %__b.addr.i1903 = alloca <2 x i64>, align 16
  %__p.addr.i1899 = alloca <2 x i64>*, align 8
  %__b.addr.i1900 = alloca <2 x i64>, align 16
  %__p.addr.i1896 = alloca <2 x i64>*, align 8
  %__b.addr.i1897 = alloca <2 x i64>, align 16
  %__p.addr.i1893 = alloca <2 x i64>*, align 8
  %__b.addr.i1894 = alloca <2 x i64>, align 16
  %__p.addr.i1890 = alloca <2 x i64>*, align 8
  %__b.addr.i1891 = alloca <2 x i64>, align 16
  %__p.addr.i1887 = alloca <2 x i64>*, align 8
  %__b.addr.i1888 = alloca <2 x i64>, align 16
  %__p.addr.i1884 = alloca <2 x i64>*, align 8
  %__b.addr.i1885 = alloca <2 x i64>, align 16
  %__p.addr.i1881 = alloca <2 x i64>*, align 8
  %__b.addr.i1882 = alloca <2 x i64>, align 16
  %__p.addr.i1879 = alloca <2 x i64>*, align 8
  %__p.addr.i1877 = alloca <2 x i64>*, align 8
  %__p.addr.i1875 = alloca <2 x i64>*, align 8
  %__p.addr.i1872 = alloca <2 x i64>*, align 8
  %__b.addr.i1873 = alloca <2 x i64>, align 16
  %__p.addr.i1869 = alloca <2 x i64>*, align 8
  %__b.addr.i1870 = alloca <2 x i64>, align 16
  %__p.addr.i1867 = alloca <2 x i64>*, align 8
  %__p.addr.i1865 = alloca <2 x i64>*, align 8
  %__p.addr.i1863 = alloca <2 x i64>*, align 8
  %__p.addr.i1861 = alloca <2 x i64>*, align 8
  %__p.addr.i1859 = alloca <2 x i64>*, align 8
  %__p.addr.i1857 = alloca <2 x i64>*, align 8
  %__p.addr.i1855 = alloca <2 x i64>*, align 8
  %__p.addr.i1853 = alloca <2 x i64>*, align 8
  %__p.addr.i1851 = alloca <2 x i64>*, align 8
  %__p.addr.i1848 = alloca <2 x i64>*, align 8
  %__b.addr.i1849 = alloca <2 x i64>, align 16
  %__p.addr.i1845 = alloca <2 x i64>*, align 8
  %__b.addr.i1846 = alloca <2 x i64>, align 16
  %__p.addr.i1842 = alloca <2 x i64>*, align 8
  %__b.addr.i1843 = alloca <2 x i64>, align 16
  %__p.addr.i1839 = alloca <2 x i64>*, align 8
  %__b.addr.i1840 = alloca <2 x i64>, align 16
  %__p.addr.i1836 = alloca <2 x i64>*, align 8
  %__b.addr.i1837 = alloca <2 x i64>, align 16
  %__p.addr.i1833 = alloca <2 x i64>*, align 8
  %__b.addr.i1834 = alloca <2 x i64>, align 16
  %__p.addr.i1830 = alloca <2 x i64>*, align 8
  %__b.addr.i1831 = alloca <2 x i64>, align 16
  %__p.addr.i1827 = alloca <2 x i64>*, align 8
  %__b.addr.i1828 = alloca <2 x i64>, align 16
  %__p.addr.i1825 = alloca <2 x i64>*, align 8
  %__p.addr.i1823 = alloca <2 x i64>*, align 8
  %__p.addr.i1821 = alloca <2 x i64>*, align 8
  %__p.addr.i1818 = alloca <2 x i64>*, align 8
  %__b.addr.i1819 = alloca <2 x i64>, align 16
  %__p.addr.i1815 = alloca <2 x i64>*, align 8
  %__b.addr.i1816 = alloca <2 x i64>, align 16
  %__p.addr.i1813 = alloca <2 x i64>*, align 8
  %__p.addr.i1811 = alloca <2 x i64>*, align 8
  %__p.addr.i1809 = alloca <2 x i64>*, align 8
  %__p.addr.i1807 = alloca <2 x i64>*, align 8
  %__p.addr.i1805 = alloca <2 x i64>*, align 8
  %__p.addr.i1803 = alloca <2 x i64>*, align 8
  %__p.addr.i1801 = alloca <2 x i64>*, align 8
  %__p.addr.i1799 = alloca <2 x i64>*, align 8
  %__p.addr.i1797 = alloca <2 x i64>*, align 8
  %__p.addr.i1794 = alloca <2 x i64>*, align 8
  %__b.addr.i1795 = alloca <2 x i64>, align 16
  %__p.addr.i1791 = alloca <2 x i64>*, align 8
  %__b.addr.i1792 = alloca <2 x i64>, align 16
  %__p.addr.i1788 = alloca <2 x i64>*, align 8
  %__b.addr.i1789 = alloca <2 x i64>, align 16
  %__p.addr.i1785 = alloca <2 x i64>*, align 8
  %__b.addr.i1786 = alloca <2 x i64>, align 16
  %__p.addr.i1782 = alloca <2 x i64>*, align 8
  %__b.addr.i1783 = alloca <2 x i64>, align 16
  %__p.addr.i1779 = alloca <2 x i64>*, align 8
  %__b.addr.i1780 = alloca <2 x i64>, align 16
  %__p.addr.i1776 = alloca <2 x i64>*, align 8
  %__b.addr.i1777 = alloca <2 x i64>, align 16
  %__p.addr.i1773 = alloca <2 x i64>*, align 8
  %__b.addr.i1774 = alloca <2 x i64>, align 16
  %__p.addr.i1771 = alloca <2 x i64>*, align 8
  %__p.addr.i1769 = alloca <2 x i64>*, align 8
  %__p.addr.i1767 = alloca <2 x i64>*, align 8
  %__p.addr.i1764 = alloca <2 x i64>*, align 8
  %__b.addr.i1765 = alloca <2 x i64>, align 16
  %__p.addr.i1761 = alloca <2 x i64>*, align 8
  %__b.addr.i1762 = alloca <2 x i64>, align 16
  %__p.addr.i1759 = alloca <2 x i64>*, align 8
  %__p.addr.i1757 = alloca <2 x i64>*, align 8
  %__p.addr.i1755 = alloca <2 x i64>*, align 8
  %__p.addr.i1753 = alloca <2 x i64>*, align 8
  %__p.addr.i1751 = alloca <2 x i64>*, align 8
  %__p.addr.i1749 = alloca <2 x i64>*, align 8
  %__p.addr.i1747 = alloca <2 x i64>*, align 8
  %__p.addr.i1745 = alloca <2 x i64>*, align 8
  %__p.addr.i1743 = alloca <2 x i64>*, align 8
  %__p.addr.i1740 = alloca <2 x i64>*, align 8
  %__b.addr.i1741 = alloca <2 x i64>, align 16
  %__p.addr.i1737 = alloca <2 x i64>*, align 8
  %__b.addr.i1738 = alloca <2 x i64>, align 16
  %__p.addr.i1734 = alloca <2 x i64>*, align 8
  %__b.addr.i1735 = alloca <2 x i64>, align 16
  %__p.addr.i1731 = alloca <2 x i64>*, align 8
  %__b.addr.i1732 = alloca <2 x i64>, align 16
  %__p.addr.i1728 = alloca <2 x i64>*, align 8
  %__b.addr.i1729 = alloca <2 x i64>, align 16
  %__p.addr.i1725 = alloca <2 x i64>*, align 8
  %__b.addr.i1726 = alloca <2 x i64>, align 16
  %__p.addr.i1722 = alloca <2 x i64>*, align 8
  %__b.addr.i1723 = alloca <2 x i64>, align 16
  %__p.addr.i1719 = alloca <2 x i64>*, align 8
  %__b.addr.i1720 = alloca <2 x i64>, align 16
  %__p.addr.i1717 = alloca <2 x i64>*, align 8
  %__p.addr.i1715 = alloca <2 x i64>*, align 8
  %__p.addr.i1713 = alloca <2 x i64>*, align 8
  %__p.addr.i1710 = alloca <2 x i64>*, align 8
  %__b.addr.i1711 = alloca <2 x i64>, align 16
  %__p.addr.i1707 = alloca <2 x i64>*, align 8
  %__b.addr.i1708 = alloca <2 x i64>, align 16
  %__p.addr.i1705 = alloca <2 x i64>*, align 8
  %__p.addr.i1703 = alloca <2 x i64>*, align 8
  %__p.addr.i1701 = alloca <2 x i64>*, align 8
  %__p.addr.i1699 = alloca <2 x i64>*, align 8
  %__p.addr.i1697 = alloca <2 x i64>*, align 8
  %__p.addr.i1695 = alloca <2 x i64>*, align 8
  %__p.addr.i1693 = alloca <2 x i64>*, align 8
  %__p.addr.i1691 = alloca <2 x i64>*, align 8
  %__p.addr.i1689 = alloca <2 x i64>*, align 8
  %__p.addr.i1686 = alloca <2 x i64>*, align 8
  %__b.addr.i1687 = alloca <2 x i64>, align 16
  %__p.addr.i1683 = alloca <2 x i64>*, align 8
  %__b.addr.i1684 = alloca <2 x i64>, align 16
  %__p.addr.i1680 = alloca <2 x i64>*, align 8
  %__b.addr.i1681 = alloca <2 x i64>, align 16
  %__p.addr.i1677 = alloca <2 x i64>*, align 8
  %__b.addr.i1678 = alloca <2 x i64>, align 16
  %__p.addr.i1674 = alloca <2 x i64>*, align 8
  %__b.addr.i1675 = alloca <2 x i64>, align 16
  %__p.addr.i1671 = alloca <2 x i64>*, align 8
  %__b.addr.i1672 = alloca <2 x i64>, align 16
  %__p.addr.i1668 = alloca <2 x i64>*, align 8
  %__b.addr.i1669 = alloca <2 x i64>, align 16
  %__p.addr.i1665 = alloca <2 x i64>*, align 8
  %__b.addr.i1666 = alloca <2 x i64>, align 16
  %__p.addr.i1663 = alloca <2 x i64>*, align 8
  %__p.addr.i1661 = alloca <2 x i64>*, align 8
  %__p.addr.i1659 = alloca <2 x i64>*, align 8
  %__p.addr.i1656 = alloca <2 x i64>*, align 8
  %__b.addr.i1657 = alloca <2 x i64>, align 16
  %__p.addr.i1654 = alloca <2 x i64>*, align 8
  %__b.addr.i = alloca <2 x i64>, align 16
  %__p.addr.i = alloca <2 x i64>*, align 8
  %retval = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %xmm0 = alloca <2 x i64>, align 16
  %xmm1 = alloca <2 x i64>, align 16
  %xmm2 = alloca <2 x i64>, align 16
  %xmm3 = alloca <2 x i64>, align 16
  %xmm4 = alloca <2 x i64>, align 16
  %xmm5 = alloca <2 x i64>, align 16
  %xmm6 = alloca <2 x i64>, align 16
  %xmm7 = alloca <2 x i64>, align 16
  %xmm8 = alloca <2 x i64>, align 16
  %dstu = alloca i64, align 8
  %srcu = alloca i64, align 8
  %ret = alloca i8*, align 8
  %dstofss = alloca i64, align 8
  %srcofs = alloca i64, align 8
  %tmp = alloca i32, align 4
  %tmp199 = alloca i32, align 4
  %tmp303 = alloca i32, align 4
  %tmp407 = alloca i32, align 4
  %tmp511 = alloca i32, align 4
  %tmp615 = alloca i32, align 4
  %tmp719 = alloca i32, align 4
  %tmp823 = alloca i32, align 4
  %tmp927 = alloca i32, align 4
  %tmp1031 = alloca i32, align 4
  %tmp1135 = alloca i32, align 4
  %tmp1239 = alloca i32, align 4
  %tmp1343 = alloca i32, align 4
  %tmp1447 = alloca i32, align 4
  %tmp1551 = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  store i64 %1, i64* %dstu, align 8
  %2 = load i8*, i8** %src.addr, align 8
  %3 = ptrtoint i8* %2 to i64
  store i64 %3, i64* %srcu, align 8
  %4 = load i8*, i8** %dst.addr, align 8
  store i8* %4, i8** %ret, align 8
  %5 = load i64, i64* %n.addr, align 8
  %cmp = icmp ult i64 %5, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %n.addr, align 8
  %and = and i64 %6, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %7 = load i64, i64* %srcu, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = load i64, i64* %dstu, align 8
  %11 = inttoptr i64 %10 to i8*
  store i8 %9, i8* %11, align 1
  %12 = load i64, i64* %srcu, align 8
  %13 = inttoptr i64 %12 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 1
  %14 = ptrtoint i8* %add.ptr to i64
  store i64 %14, i64* %srcu, align 8
  %15 = load i64, i64* %dstu, align 8
  %16 = inttoptr i64 %15 to i8*
  %add.ptr2 = getelementptr inbounds i8, i8* %16, i64 1
  %17 = ptrtoint i8* %add.ptr2 to i64
  store i64 %17, i64* %dstu, align 8
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %18 = load i64, i64* %n.addr, align 8
  %and3 = and i64 %18, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %19 = load i64, i64* %srcu, align 8
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = load i64, i64* %dstu, align 8
  %23 = inttoptr i64 %22 to i16*
  store i16 %21, i16* %23, align 2
  %24 = load i64, i64* %srcu, align 8
  %25 = inttoptr i64 %24 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %25, i64 1
  %26 = ptrtoint i16* %add.ptr6 to i64
  store i64 %26, i64* %srcu, align 8
  %27 = load i64, i64* %dstu, align 8
  %28 = inttoptr i64 %27 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %28, i64 1
  %29 = ptrtoint i16* %add.ptr7 to i64
  store i64 %29, i64* %dstu, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %30 = load i64, i64* %n.addr, align 8
  %and9 = and i64 %30, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %31 = load i64, i64* %srcu, align 8
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = load i64, i64* %dstu, align 8
  %35 = inttoptr i64 %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = load i64, i64* %srcu, align 8
  %37 = inttoptr i64 %36 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %37, i64 1
  %38 = ptrtoint i32* %add.ptr12 to i64
  store i64 %38, i64* %srcu, align 8
  %39 = load i64, i64* %dstu, align 8
  %40 = inttoptr i64 %39 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %40, i64 1
  %41 = ptrtoint i32* %add.ptr13 to i64
  store i64 %41, i64* %dstu, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %42 = load i64, i64* %n.addr, align 8
  %and15 = and i64 %42, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %43 = load i64, i64* %srcu, align 8
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = load i64, i64* %dstu, align 8
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  %48 = load i8*, i8** %ret, align 8
  store i8* %48, i8** %retval, align 8
  br label %return

if.end19:                                         ; preds = %entry
  %49 = load i64, i64* %n.addr, align 8
  %cmp20 = icmp ule i64 %49, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  %50 = load i8*, i8** %dst.addr, align 8
  %51 = load i8*, i8** %src.addr, align 8
  call void @rte_mov16(i8* %50, i8* %51)
  %52 = load i8*, i8** %dst.addr, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %52, i64 -16
  %53 = load i64, i64* %n.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %53
  %54 = load i8*, i8** %src.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %54, i64 -16
  %55 = load i64, i64* %n.addr, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %55
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  %56 = load i8*, i8** %ret, align 8
  store i8* %56, i8** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end19
  %57 = load i64, i64* %n.addr, align 8
  %cmp27 = icmp ule i64 %57, 48
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  %58 = load i8*, i8** %dst.addr, align 8
  %59 = load i8*, i8** %src.addr, align 8
  call void @rte_mov32(i8* %58, i8* %59)
  %60 = load i8*, i8** %dst.addr, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %60, i64 -16
  %61 = load i64, i64* %n.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %61
  %62 = load i8*, i8** %src.addr, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %62, i64 -16
  %63 = load i64, i64* %n.addr, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %63
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr32)
  %64 = load i8*, i8** %ret, align 8
  store i8* %64, i8** %retval, align 8
  br label %return

if.end33:                                         ; preds = %if.end26
  %65 = load i64, i64* %n.addr, align 8
  %cmp34 = icmp ule i64 %65, 64
  br i1 %cmp34, label %if.then35, label %if.end42

if.then35:                                        ; preds = %if.end33
  %66 = load i8*, i8** %dst.addr, align 8
  %67 = load i8*, i8** %src.addr, align 8
  call void @rte_mov32(i8* %66, i8* %67)
  %68 = load i8*, i8** %dst.addr, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %68, i64 32
  %69 = load i8*, i8** %src.addr, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %69, i64 32
  call void @rte_mov16(i8* %add.ptr36, i8* %add.ptr37)
  %70 = load i8*, i8** %dst.addr, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %70, i64 -16
  %71 = load i64, i64* %n.addr, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 %71
  %72 = load i8*, i8** %src.addr, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %72, i64 -16
  %73 = load i64, i64* %n.addr, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 %73
  call void @rte_mov16(i8* %add.ptr39, i8* %add.ptr41)
  %74 = load i8*, i8** %ret, align 8
  store i8* %74, i8** %retval, align 8
  br label %return

if.end42:                                         ; preds = %if.end33
  %75 = load i64, i64* %n.addr, align 8
  %cmp43 = icmp ule i64 %75, 128
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end42
  br label %COPY_BLOCK_128_BACK15

if.end45:                                         ; preds = %if.end42
  %76 = load i64, i64* %n.addr, align 8
  %cmp46 = icmp ule i64 %76, 512
  br i1 %cmp46, label %if.then47, label %if.end87

if.then47:                                        ; preds = %if.end45
  %77 = load i64, i64* %n.addr, align 8
  %cmp48 = icmp uge i64 %77, 256
  br i1 %cmp48, label %if.then49, label %if.end54

if.then49:                                        ; preds = %if.then47
  %78 = load i64, i64* %n.addr, align 8
  %sub = sub i64 %78, 256
  store i64 %sub, i64* %n.addr, align 8
  %79 = load i8*, i8** %dst.addr, align 8
  %80 = load i8*, i8** %src.addr, align 8
  call void @rte_mov128(i8* %79, i8* %80)
  %81 = load i8*, i8** %dst.addr, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %81, i64 128
  %82 = load i8*, i8** %src.addr, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %82, i64 128
  call void @rte_mov128(i8* %add.ptr50, i8* %add.ptr51)
  %83 = load i8*, i8** %src.addr, align 8
  %add.ptr52 = getelementptr inbounds i8, i8* %83, i64 256
  store i8* %add.ptr52, i8** %src.addr, align 8
  %84 = load i8*, i8** %dst.addr, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %84, i64 256
  store i8* %add.ptr53, i8** %dst.addr, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then49, %if.then47
  br label %COPY_BLOCK_255_BACK15

COPY_BLOCK_255_BACK15:                            ; preds = %for.end, %if.end54
  %85 = load i64, i64* %n.addr, align 8
  %cmp55 = icmp uge i64 %85, 128
  br i1 %cmp55, label %if.then56, label %if.end60

if.then56:                                        ; preds = %COPY_BLOCK_255_BACK15
  %86 = load i64, i64* %n.addr, align 8
  %sub57 = sub i64 %86, 128
  store i64 %sub57, i64* %n.addr, align 8
  %87 = load i8*, i8** %dst.addr, align 8
  %88 = load i8*, i8** %src.addr, align 8
  call void @rte_mov128(i8* %87, i8* %88)
  %89 = load i8*, i8** %src.addr, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %89, i64 128
  store i8* %add.ptr58, i8** %src.addr, align 8
  %90 = load i8*, i8** %dst.addr, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %90, i64 128
  store i8* %add.ptr59, i8** %dst.addr, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.then56, %COPY_BLOCK_255_BACK15
  br label %COPY_BLOCK_128_BACK15

COPY_BLOCK_128_BACK15:                            ; preds = %if.end60, %if.then44
  %91 = load i64, i64* %n.addr, align 8
  %cmp61 = icmp uge i64 %91, 64
  br i1 %cmp61, label %if.then62, label %if.end66

if.then62:                                        ; preds = %COPY_BLOCK_128_BACK15
  %92 = load i64, i64* %n.addr, align 8
  %sub63 = sub i64 %92, 64
  store i64 %sub63, i64* %n.addr, align 8
  %93 = load i8*, i8** %dst.addr, align 8
  %94 = load i8*, i8** %src.addr, align 8
  call void @rte_mov64(i8* %93, i8* %94)
  %95 = load i8*, i8** %src.addr, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %95, i64 64
  store i8* %add.ptr64, i8** %src.addr, align 8
  %96 = load i8*, i8** %dst.addr, align 8
  %add.ptr65 = getelementptr inbounds i8, i8* %96, i64 64
  store i8* %add.ptr65, i8** %dst.addr, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %COPY_BLOCK_128_BACK15
  br label %COPY_BLOCK_64_BACK15

COPY_BLOCK_64_BACK15:                             ; preds = %sw.epilog, %if.end66
  %97 = load i64, i64* %n.addr, align 8
  %cmp67 = icmp uge i64 %97, 32
  br i1 %cmp67, label %if.then68, label %if.end72

if.then68:                                        ; preds = %COPY_BLOCK_64_BACK15
  %98 = load i64, i64* %n.addr, align 8
  %sub69 = sub i64 %98, 32
  store i64 %sub69, i64* %n.addr, align 8
  %99 = load i8*, i8** %dst.addr, align 8
  %100 = load i8*, i8** %src.addr, align 8
  call void @rte_mov32(i8* %99, i8* %100)
  %101 = load i8*, i8** %src.addr, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %101, i64 32
  store i8* %add.ptr70, i8** %src.addr, align 8
  %102 = load i8*, i8** %dst.addr, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %102, i64 32
  store i8* %add.ptr71, i8** %dst.addr, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.then68, %COPY_BLOCK_64_BACK15
  %103 = load i64, i64* %n.addr, align 8
  %cmp73 = icmp ugt i64 %103, 16
  br i1 %cmp73, label %if.then74, label %if.end79

if.then74:                                        ; preds = %if.end72
  %104 = load i8*, i8** %dst.addr, align 8
  %105 = load i8*, i8** %src.addr, align 8
  call void @rte_mov16(i8* %104, i8* %105)
  %106 = load i8*, i8** %dst.addr, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %106, i64 -16
  %107 = load i64, i64* %n.addr, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %add.ptr75, i64 %107
  %108 = load i8*, i8** %src.addr, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %108, i64 -16
  %109 = load i64, i64* %n.addr, align 8
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 %109
  call void @rte_mov16(i8* %add.ptr76, i8* %add.ptr78)
  %110 = load i8*, i8** %ret, align 8
  store i8* %110, i8** %retval, align 8
  br label %return

if.end79:                                         ; preds = %if.end72
  %111 = load i64, i64* %n.addr, align 8
  %cmp80 = icmp ugt i64 %111, 0
  br i1 %cmp80, label %if.then81, label %if.end86

if.then81:                                        ; preds = %if.end79
  %112 = load i8*, i8** %dst.addr, align 8
  %add.ptr82 = getelementptr inbounds i8, i8* %112, i64 -16
  %113 = load i64, i64* %n.addr, align 8
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr82, i64 %113
  %114 = load i8*, i8** %src.addr, align 8
  %add.ptr84 = getelementptr inbounds i8, i8* %114, i64 -16
  %115 = load i64, i64* %n.addr, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %add.ptr84, i64 %115
  call void @rte_mov16(i8* %add.ptr83, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %if.end79
  %116 = load i8*, i8** %ret, align 8
  store i8* %116, i8** %retval, align 8
  br label %return

if.end87:                                         ; preds = %if.end45
  %117 = load i8*, i8** %dst.addr, align 8
  %118 = ptrtoint i8* %117 to i64
  %and88 = and i64 %118, 15
  store i64 %and88, i64* %dstofss, align 8
  %119 = load i64, i64* %dstofss, align 8
  %cmp89 = icmp ugt i64 %119, 0
  br i1 %cmp89, label %if.then90, label %if.end95

if.then90:                                        ; preds = %if.end87
  %120 = load i64, i64* %dstofss, align 8
  %sub91 = sub i64 16, %120
  %add = add i64 %sub91, 16
  store i64 %add, i64* %dstofss, align 8
  %121 = load i64, i64* %dstofss, align 8
  %122 = load i64, i64* %n.addr, align 8
  %sub92 = sub i64 %122, %121
  store i64 %sub92, i64* %n.addr, align 8
  %123 = load i8*, i8** %dst.addr, align 8
  %124 = load i8*, i8** %src.addr, align 8
  call void @rte_mov32(i8* %123, i8* %124)
  %125 = load i8*, i8** %src.addr, align 8
  %126 = load i64, i64* %dstofss, align 8
  %add.ptr93 = getelementptr inbounds i8, i8* %125, i64 %126
  store i8* %add.ptr93, i8** %src.addr, align 8
  %127 = load i8*, i8** %dst.addr, align 8
  %128 = load i64, i64* %dstofss, align 8
  %add.ptr94 = getelementptr inbounds i8, i8* %127, i64 %128
  store i8* %add.ptr94, i8** %dst.addr, align 8
  br label %if.end95

if.end95:                                         ; preds = %if.then90, %if.end87
  %129 = load i8*, i8** %src.addr, align 8
  %130 = ptrtoint i8* %129 to i64
  %and96 = and i64 %130, 15
  store i64 %and96, i64* %srcofs, align 8
  %131 = load i64, i64* %srcofs, align 8
  %cmp97 = icmp eq i64 %131, 0
  br i1 %cmp97, label %if.then98, label %if.end103

if.then98:                                        ; preds = %if.end95
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then98
  %132 = load i64, i64* %n.addr, align 8
  %cmp99 = icmp uge i64 %132, 256
  br i1 %cmp99, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %133 = load i8*, i8** %dst.addr, align 8
  %134 = load i8*, i8** %src.addr, align 8
  call void @rte_mov256(i8* %133, i8* %134)
  %135 = load i8*, i8** %dst.addr, align 8
  %add.ptr100 = getelementptr inbounds i8, i8* %135, i64 256
  store i8* %add.ptr100, i8** %dst.addr, align 8
  %136 = load i8*, i8** %src.addr, align 8
  %add.ptr101 = getelementptr inbounds i8, i8* %136, i64 256
  store i8* %add.ptr101, i8** %src.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %137 = load i64, i64* %n.addr, align 8
  %sub102 = sub i64 %137, 256
  store i64 %sub102, i64* %n.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %COPY_BLOCK_255_BACK15

if.end103:                                        ; preds = %if.end95
  %138 = load i64, i64* %srcofs, align 8
  switch i64 %138, label %sw.default [
    i64 1, label %sw.bb
    i64 2, label %sw.bb198
    i64 3, label %sw.bb302
    i64 4, label %sw.bb406
    i64 5, label %sw.bb510
    i64 6, label %sw.bb614
    i64 7, label %sw.bb718
    i64 8, label %sw.bb822
    i64 9, label %sw.bb926
    i64 10, label %sw.bb1030
    i64 11, label %sw.bb1134
    i64 12, label %sw.bb1238
    i64 13, label %sw.bb1342
    i64 14, label %sw.bb1446
    i64 15, label %sw.bb1550
  ]

sw.bb:                                            ; preds = %if.end103
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb
  %139 = load i64, i64* %n.addr, align 8
  %cmp104 = icmp uge i64 %139, 143
  br i1 %cmp104, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %140 = load i8*, i8** %src.addr, align 8
  %add.ptr105 = getelementptr inbounds i8, i8* %140, i64 -1
  %add.ptr106 = getelementptr inbounds i8, i8* %add.ptr105, i64 0
  %141 = bitcast i8* %add.ptr106 to <2 x i64>*
  store <2 x i64>* %141, <2 x i64>** %__p.addr.i, align 8
  %142 = load <2 x i64>*, <2 x i64>** %__p.addr.i, align 8
  %143 = bitcast <2 x i64>* %142 to %struct.__loadu_si128*
  %__v.i = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %143, i32 0, i32 0
  %144 = load <2 x i64>, <2 x i64>* %__v.i, align 1
  store <2 x i64> %144, <2 x i64>* %xmm0, align 16
  %145 = load i64, i64* %n.addr, align 8
  %sub107 = sub i64 %145, 128
  store i64 %sub107, i64* %n.addr, align 8
  %146 = load i8*, i8** %src.addr, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %146, i64 -1
  %add.ptr109 = getelementptr inbounds i8, i8* %add.ptr108, i64 16
  %147 = bitcast i8* %add.ptr109 to <2 x i64>*
  store <2 x i64>* %147, <2 x i64>** %__p.addr.i2459, align 8
  %148 = load <2 x i64>*, <2 x i64>** %__p.addr.i2459, align 8
  %149 = bitcast <2 x i64>* %148 to %struct.__loadu_si128*
  %__v.i2460 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %149, i32 0, i32 0
  %150 = load <2 x i64>, <2 x i64>* %__v.i2460, align 1
  store <2 x i64> %150, <2 x i64>* %xmm1, align 16
  %151 = load i8*, i8** %src.addr, align 8
  %add.ptr111 = getelementptr inbounds i8, i8* %151, i64 -1
  %add.ptr112 = getelementptr inbounds i8, i8* %add.ptr111, i64 32
  %152 = bitcast i8* %add.ptr112 to <2 x i64>*
  store <2 x i64>* %152, <2 x i64>** %__p.addr.i2457, align 8
  %153 = load <2 x i64>*, <2 x i64>** %__p.addr.i2457, align 8
  %154 = bitcast <2 x i64>* %153 to %struct.__loadu_si128*
  %__v.i2458 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %154, i32 0, i32 0
  %155 = load <2 x i64>, <2 x i64>* %__v.i2458, align 1
  store <2 x i64> %155, <2 x i64>* %xmm2, align 16
  %156 = load i8*, i8** %src.addr, align 8
  %add.ptr114 = getelementptr inbounds i8, i8* %156, i64 -1
  %add.ptr115 = getelementptr inbounds i8, i8* %add.ptr114, i64 48
  %157 = bitcast i8* %add.ptr115 to <2 x i64>*
  store <2 x i64>* %157, <2 x i64>** %__p.addr.i2455, align 8
  %158 = load <2 x i64>*, <2 x i64>** %__p.addr.i2455, align 8
  %159 = bitcast <2 x i64>* %158 to %struct.__loadu_si128*
  %__v.i2456 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %159, i32 0, i32 0
  %160 = load <2 x i64>, <2 x i64>* %__v.i2456, align 1
  store <2 x i64> %160, <2 x i64>* %xmm3, align 16
  %161 = load i8*, i8** %src.addr, align 8
  %add.ptr117 = getelementptr inbounds i8, i8* %161, i64 -1
  %add.ptr118 = getelementptr inbounds i8, i8* %add.ptr117, i64 64
  %162 = bitcast i8* %add.ptr118 to <2 x i64>*
  store <2 x i64>* %162, <2 x i64>** %__p.addr.i2453, align 8
  %163 = load <2 x i64>*, <2 x i64>** %__p.addr.i2453, align 8
  %164 = bitcast <2 x i64>* %163 to %struct.__loadu_si128*
  %__v.i2454 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %164, i32 0, i32 0
  %165 = load <2 x i64>, <2 x i64>* %__v.i2454, align 1
  store <2 x i64> %165, <2 x i64>* %xmm4, align 16
  %166 = load i8*, i8** %src.addr, align 8
  %add.ptr120 = getelementptr inbounds i8, i8* %166, i64 -1
  %add.ptr121 = getelementptr inbounds i8, i8* %add.ptr120, i64 80
  %167 = bitcast i8* %add.ptr121 to <2 x i64>*
  store <2 x i64>* %167, <2 x i64>** %__p.addr.i2451, align 8
  %168 = load <2 x i64>*, <2 x i64>** %__p.addr.i2451, align 8
  %169 = bitcast <2 x i64>* %168 to %struct.__loadu_si128*
  %__v.i2452 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %169, i32 0, i32 0
  %170 = load <2 x i64>, <2 x i64>* %__v.i2452, align 1
  store <2 x i64> %170, <2 x i64>* %xmm5, align 16
  %171 = load i8*, i8** %src.addr, align 8
  %add.ptr123 = getelementptr inbounds i8, i8* %171, i64 -1
  %add.ptr124 = getelementptr inbounds i8, i8* %add.ptr123, i64 96
  %172 = bitcast i8* %add.ptr124 to <2 x i64>*
  store <2 x i64>* %172, <2 x i64>** %__p.addr.i2449, align 8
  %173 = load <2 x i64>*, <2 x i64>** %__p.addr.i2449, align 8
  %174 = bitcast <2 x i64>* %173 to %struct.__loadu_si128*
  %__v.i2450 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %174, i32 0, i32 0
  %175 = load <2 x i64>, <2 x i64>* %__v.i2450, align 1
  store <2 x i64> %175, <2 x i64>* %xmm6, align 16
  %176 = load i8*, i8** %src.addr, align 8
  %add.ptr126 = getelementptr inbounds i8, i8* %176, i64 -1
  %add.ptr127 = getelementptr inbounds i8, i8* %add.ptr126, i64 112
  %177 = bitcast i8* %add.ptr127 to <2 x i64>*
  store <2 x i64>* %177, <2 x i64>** %__p.addr.i2447, align 8
  %178 = load <2 x i64>*, <2 x i64>** %__p.addr.i2447, align 8
  %179 = bitcast <2 x i64>* %178 to %struct.__loadu_si128*
  %__v.i2448 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %179, i32 0, i32 0
  %180 = load <2 x i64>, <2 x i64>* %__v.i2448, align 1
  store <2 x i64> %180, <2 x i64>* %xmm7, align 16
  %181 = load i8*, i8** %src.addr, align 8
  %add.ptr129 = getelementptr inbounds i8, i8* %181, i64 -1
  %add.ptr130 = getelementptr inbounds i8, i8* %add.ptr129, i64 128
  %182 = bitcast i8* %add.ptr130 to <2 x i64>*
  store <2 x i64>* %182, <2 x i64>** %__p.addr.i2445, align 8
  %183 = load <2 x i64>*, <2 x i64>** %__p.addr.i2445, align 8
  %184 = bitcast <2 x i64>* %183 to %struct.__loadu_si128*
  %__v.i2446 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %184, i32 0, i32 0
  %185 = load <2 x i64>, <2 x i64>* %__v.i2446, align 1
  store <2 x i64> %185, <2 x i64>* %xmm8, align 16
  %186 = load i8*, i8** %src.addr, align 8
  %add.ptr132 = getelementptr inbounds i8, i8* %186, i64 128
  store i8* %add.ptr132, i8** %src.addr, align 8
  %187 = load i8*, i8** %dst.addr, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %187, i64 0
  %188 = bitcast i8* %add.ptr133 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %190 = bitcast <2 x i64> %189 to <16 x i8>
  %191 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %192 = bitcast <2 x i64> %191 to <16 x i8>
  %palignr = shufflevector <16 x i8> %192, <16 x i8> %190, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %193 = bitcast <16 x i8> %palignr to <2 x i64>
  store <2 x i64>* %188, <2 x i64>** %__p.addr.i2442, align 8
  store <2 x i64> %193, <2 x i64>* %__b.addr.i2443, align 16
  %194 = load <2 x i64>, <2 x i64>* %__b.addr.i2443, align 16
  %195 = load <2 x i64>*, <2 x i64>** %__p.addr.i2442, align 8
  %196 = bitcast <2 x i64>* %195 to %struct.__storeu_si128*
  %__v.i2444 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %196, i32 0, i32 0
  store <2 x i64> %194, <2 x i64>* %__v.i2444, align 1
  %197 = load i8*, i8** %dst.addr, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %197, i64 16
  %198 = bitcast i8* %add.ptr134 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %202 = bitcast <2 x i64> %201 to <16 x i8>
  %palignr135 = shufflevector <16 x i8> %202, <16 x i8> %200, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %203 = bitcast <16 x i8> %palignr135 to <2 x i64>
  store <2 x i64>* %198, <2 x i64>** %__p.addr.i2439, align 8
  store <2 x i64> %203, <2 x i64>* %__b.addr.i2440, align 16
  %204 = load <2 x i64>, <2 x i64>* %__b.addr.i2440, align 16
  %205 = load <2 x i64>*, <2 x i64>** %__p.addr.i2439, align 8
  %206 = bitcast <2 x i64>* %205 to %struct.__storeu_si128*
  %__v.i2441 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %206, i32 0, i32 0
  store <2 x i64> %204, <2 x i64>* %__v.i2441, align 1
  %207 = load i8*, i8** %dst.addr, align 8
  %add.ptr136 = getelementptr inbounds i8, i8* %207, i64 32
  %208 = bitcast i8* %add.ptr136 to <2 x i64>*
  %209 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %210 = bitcast <2 x i64> %209 to <16 x i8>
  %211 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %212 = bitcast <2 x i64> %211 to <16 x i8>
  %palignr137 = shufflevector <16 x i8> %212, <16 x i8> %210, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %213 = bitcast <16 x i8> %palignr137 to <2 x i64>
  store <2 x i64>* %208, <2 x i64>** %__p.addr.i2436, align 8
  store <2 x i64> %213, <2 x i64>* %__b.addr.i2437, align 16
  %214 = load <2 x i64>, <2 x i64>* %__b.addr.i2437, align 16
  %215 = load <2 x i64>*, <2 x i64>** %__p.addr.i2436, align 8
  %216 = bitcast <2 x i64>* %215 to %struct.__storeu_si128*
  %__v.i2438 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %216, i32 0, i32 0
  store <2 x i64> %214, <2 x i64>* %__v.i2438, align 1
  %217 = load i8*, i8** %dst.addr, align 8
  %add.ptr138 = getelementptr inbounds i8, i8* %217, i64 48
  %218 = bitcast i8* %add.ptr138 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %220 = bitcast <2 x i64> %219 to <16 x i8>
  %221 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %palignr139 = shufflevector <16 x i8> %222, <16 x i8> %220, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %223 = bitcast <16 x i8> %palignr139 to <2 x i64>
  store <2 x i64>* %218, <2 x i64>** %__p.addr.i2433, align 8
  store <2 x i64> %223, <2 x i64>* %__b.addr.i2434, align 16
  %224 = load <2 x i64>, <2 x i64>* %__b.addr.i2434, align 16
  %225 = load <2 x i64>*, <2 x i64>** %__p.addr.i2433, align 8
  %226 = bitcast <2 x i64>* %225 to %struct.__storeu_si128*
  %__v.i2435 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %226, i32 0, i32 0
  store <2 x i64> %224, <2 x i64>* %__v.i2435, align 1
  %227 = load i8*, i8** %dst.addr, align 8
  %add.ptr140 = getelementptr inbounds i8, i8* %227, i64 64
  %228 = bitcast i8* %add.ptr140 to <2 x i64>*
  %229 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %232 = bitcast <2 x i64> %231 to <16 x i8>
  %palignr141 = shufflevector <16 x i8> %232, <16 x i8> %230, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %233 = bitcast <16 x i8> %palignr141 to <2 x i64>
  store <2 x i64>* %228, <2 x i64>** %__p.addr.i2430, align 8
  store <2 x i64> %233, <2 x i64>* %__b.addr.i2431, align 16
  %234 = load <2 x i64>, <2 x i64>* %__b.addr.i2431, align 16
  %235 = load <2 x i64>*, <2 x i64>** %__p.addr.i2430, align 8
  %236 = bitcast <2 x i64>* %235 to %struct.__storeu_si128*
  %__v.i2432 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %236, i32 0, i32 0
  store <2 x i64> %234, <2 x i64>* %__v.i2432, align 1
  %237 = load i8*, i8** %dst.addr, align 8
  %add.ptr142 = getelementptr inbounds i8, i8* %237, i64 80
  %238 = bitcast i8* %add.ptr142 to <2 x i64>*
  %239 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %240 = bitcast <2 x i64> %239 to <16 x i8>
  %241 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %242 = bitcast <2 x i64> %241 to <16 x i8>
  %palignr143 = shufflevector <16 x i8> %242, <16 x i8> %240, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %243 = bitcast <16 x i8> %palignr143 to <2 x i64>
  store <2 x i64>* %238, <2 x i64>** %__p.addr.i2427, align 8
  store <2 x i64> %243, <2 x i64>* %__b.addr.i2428, align 16
  %244 = load <2 x i64>, <2 x i64>* %__b.addr.i2428, align 16
  %245 = load <2 x i64>*, <2 x i64>** %__p.addr.i2427, align 8
  %246 = bitcast <2 x i64>* %245 to %struct.__storeu_si128*
  %__v.i2429 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %246, i32 0, i32 0
  store <2 x i64> %244, <2 x i64>* %__v.i2429, align 1
  %247 = load i8*, i8** %dst.addr, align 8
  %add.ptr144 = getelementptr inbounds i8, i8* %247, i64 96
  %248 = bitcast i8* %add.ptr144 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %250 = bitcast <2 x i64> %249 to <16 x i8>
  %251 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %252 = bitcast <2 x i64> %251 to <16 x i8>
  %palignr145 = shufflevector <16 x i8> %252, <16 x i8> %250, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %253 = bitcast <16 x i8> %palignr145 to <2 x i64>
  store <2 x i64>* %248, <2 x i64>** %__p.addr.i2424, align 8
  store <2 x i64> %253, <2 x i64>* %__b.addr.i2425, align 16
  %254 = load <2 x i64>, <2 x i64>* %__b.addr.i2425, align 16
  %255 = load <2 x i64>*, <2 x i64>** %__p.addr.i2424, align 8
  %256 = bitcast <2 x i64>* %255 to %struct.__storeu_si128*
  %__v.i2426 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %256, i32 0, i32 0
  store <2 x i64> %254, <2 x i64>* %__v.i2426, align 1
  %257 = load i8*, i8** %dst.addr, align 8
  %add.ptr146 = getelementptr inbounds i8, i8* %257, i64 112
  %258 = bitcast i8* %add.ptr146 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %260 = bitcast <2 x i64> %259 to <16 x i8>
  %261 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %262 = bitcast <2 x i64> %261 to <16 x i8>
  %palignr147 = shufflevector <16 x i8> %262, <16 x i8> %260, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %263 = bitcast <16 x i8> %palignr147 to <2 x i64>
  store <2 x i64>* %258, <2 x i64>** %__p.addr.i2421, align 8
  store <2 x i64> %263, <2 x i64>* %__b.addr.i2422, align 16
  %264 = load <2 x i64>, <2 x i64>* %__b.addr.i2422, align 16
  %265 = load <2 x i64>*, <2 x i64>** %__p.addr.i2421, align 8
  %266 = bitcast <2 x i64>* %265 to %struct.__storeu_si128*
  %__v.i2423 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %266, i32 0, i32 0
  store <2 x i64> %264, <2 x i64>* %__v.i2423, align 1
  %267 = load i8*, i8** %dst.addr, align 8
  %add.ptr148 = getelementptr inbounds i8, i8* %267, i64 128
  store i8* %add.ptr148, i8** %dst.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %268 = load i64, i64* %n.addr, align 8
  %conv = trunc i64 %268 to i32
  store i32 %conv, i32* %tmp, align 4
  %269 = load i64, i64* %n.addr, align 8
  %sub149 = sub i64 %269, 16
  %add150 = add i64 %sub149, 1
  %and151 = and i64 %add150, 127
  %add152 = add i64 %and151, 16
  %sub153 = sub i64 %add152, 1
  store i64 %sub153, i64* %n.addr, align 8
  %270 = load i64, i64* %n.addr, align 8
  %271 = load i32, i32* %tmp, align 4
  %conv154 = sext i32 %271 to i64
  %sub155 = sub i64 %conv154, %270
  %conv156 = trunc i64 %sub155 to i32
  store i32 %conv156, i32* %tmp, align 4
  %272 = load i8*, i8** %src.addr, align 8
  %273 = load i32, i32* %tmp, align 4
  %idx.ext = sext i32 %273 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %272, i64 %idx.ext
  store i8* %add.ptr157, i8** %src.addr, align 8
  %274 = load i8*, i8** %dst.addr, align 8
  %275 = load i32, i32* %tmp, align 4
  %idx.ext158 = sext i32 %275 to i64
  %add.ptr159 = getelementptr inbounds i8, i8* %274, i64 %idx.ext158
  store i8* %add.ptr159, i8** %dst.addr, align 8
  %276 = load i64, i64* %n.addr, align 8
  %cmp160 = icmp uge i64 %276, 47
  br i1 %cmp160, label %if.then162, label %if.end197

if.then162:                                       ; preds = %while.end
  br label %while.cond163

while.cond163:                                    ; preds = %while.body166, %if.then162
  %277 = load i64, i64* %n.addr, align 8
  %cmp164 = icmp uge i64 %277, 47
  br i1 %cmp164, label %while.body166, label %while.end183

while.body166:                                    ; preds = %while.cond163
  %278 = load i8*, i8** %src.addr, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %278, i64 -1
  %add.ptr168 = getelementptr inbounds i8, i8* %add.ptr167, i64 0
  %279 = bitcast i8* %add.ptr168 to <2 x i64>*
  store <2 x i64>* %279, <2 x i64>** %__p.addr.i2419, align 8
  %280 = load <2 x i64>*, <2 x i64>** %__p.addr.i2419, align 8
  %281 = bitcast <2 x i64>* %280 to %struct.__loadu_si128*
  %__v.i2420 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %281, i32 0, i32 0
  %282 = load <2 x i64>, <2 x i64>* %__v.i2420, align 1
  store <2 x i64> %282, <2 x i64>* %xmm0, align 16
  %283 = load i64, i64* %n.addr, align 8
  %sub170 = sub i64 %283, 32
  store i64 %sub170, i64* %n.addr, align 8
  %284 = load i8*, i8** %src.addr, align 8
  %add.ptr171 = getelementptr inbounds i8, i8* %284, i64 -1
  %add.ptr172 = getelementptr inbounds i8, i8* %add.ptr171, i64 16
  %285 = bitcast i8* %add.ptr172 to <2 x i64>*
  store <2 x i64>* %285, <2 x i64>** %__p.addr.i2417, align 8
  %286 = load <2 x i64>*, <2 x i64>** %__p.addr.i2417, align 8
  %287 = bitcast <2 x i64>* %286 to %struct.__loadu_si128*
  %__v.i2418 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %287, i32 0, i32 0
  %288 = load <2 x i64>, <2 x i64>* %__v.i2418, align 1
  store <2 x i64> %288, <2 x i64>* %xmm1, align 16
  %289 = load i8*, i8** %src.addr, align 8
  %add.ptr174 = getelementptr inbounds i8, i8* %289, i64 -1
  %add.ptr175 = getelementptr inbounds i8, i8* %add.ptr174, i64 32
  %290 = bitcast i8* %add.ptr175 to <2 x i64>*
  store <2 x i64>* %290, <2 x i64>** %__p.addr.i2415, align 8
  %291 = load <2 x i64>*, <2 x i64>** %__p.addr.i2415, align 8
  %292 = bitcast <2 x i64>* %291 to %struct.__loadu_si128*
  %__v.i2416 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %292, i32 0, i32 0
  %293 = load <2 x i64>, <2 x i64>* %__v.i2416, align 1
  store <2 x i64> %293, <2 x i64>* %xmm2, align 16
  %294 = load i8*, i8** %src.addr, align 8
  %add.ptr177 = getelementptr inbounds i8, i8* %294, i64 32
  store i8* %add.ptr177, i8** %src.addr, align 8
  %295 = load i8*, i8** %dst.addr, align 8
  %add.ptr178 = getelementptr inbounds i8, i8* %295, i64 0
  %296 = bitcast i8* %add.ptr178 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %298 = bitcast <2 x i64> %297 to <16 x i8>
  %299 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %300 = bitcast <2 x i64> %299 to <16 x i8>
  %palignr179 = shufflevector <16 x i8> %300, <16 x i8> %298, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %301 = bitcast <16 x i8> %palignr179 to <2 x i64>
  store <2 x i64>* %296, <2 x i64>** %__p.addr.i2412, align 8
  store <2 x i64> %301, <2 x i64>* %__b.addr.i2413, align 16
  %302 = load <2 x i64>, <2 x i64>* %__b.addr.i2413, align 16
  %303 = load <2 x i64>*, <2 x i64>** %__p.addr.i2412, align 8
  %304 = bitcast <2 x i64>* %303 to %struct.__storeu_si128*
  %__v.i2414 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %304, i32 0, i32 0
  store <2 x i64> %302, <2 x i64>* %__v.i2414, align 1
  %305 = load i8*, i8** %dst.addr, align 8
  %add.ptr180 = getelementptr inbounds i8, i8* %305, i64 16
  %306 = bitcast i8* %add.ptr180 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %308 = bitcast <2 x i64> %307 to <16 x i8>
  %309 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %310 = bitcast <2 x i64> %309 to <16 x i8>
  %palignr181 = shufflevector <16 x i8> %310, <16 x i8> %308, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %311 = bitcast <16 x i8> %palignr181 to <2 x i64>
  store <2 x i64>* %306, <2 x i64>** %__p.addr.i2409, align 8
  store <2 x i64> %311, <2 x i64>* %__b.addr.i2410, align 16
  %312 = load <2 x i64>, <2 x i64>* %__b.addr.i2410, align 16
  %313 = load <2 x i64>*, <2 x i64>** %__p.addr.i2409, align 8
  %314 = bitcast <2 x i64>* %313 to %struct.__storeu_si128*
  %__v.i2411 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %314, i32 0, i32 0
  store <2 x i64> %312, <2 x i64>* %__v.i2411, align 1
  %315 = load i8*, i8** %dst.addr, align 8
  %add.ptr182 = getelementptr inbounds i8, i8* %315, i64 32
  store i8* %add.ptr182, i8** %dst.addr, align 8
  br label %while.cond163

while.end183:                                     ; preds = %while.cond163
  %316 = load i64, i64* %n.addr, align 8
  %conv184 = trunc i64 %316 to i32
  store i32 %conv184, i32* %tmp, align 4
  %317 = load i64, i64* %n.addr, align 8
  %sub185 = sub i64 %317, 16
  %add186 = add i64 %sub185, 1
  %and187 = and i64 %add186, 31
  %add188 = add i64 %and187, 16
  %sub189 = sub i64 %add188, 1
  store i64 %sub189, i64* %n.addr, align 8
  %318 = load i64, i64* %n.addr, align 8
  %319 = load i32, i32* %tmp, align 4
  %conv190 = sext i32 %319 to i64
  %sub191 = sub i64 %conv190, %318
  %conv192 = trunc i64 %sub191 to i32
  store i32 %conv192, i32* %tmp, align 4
  %320 = load i8*, i8** %src.addr, align 8
  %321 = load i32, i32* %tmp, align 4
  %idx.ext193 = sext i32 %321 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %320, i64 %idx.ext193
  store i8* %add.ptr194, i8** %src.addr, align 8
  %322 = load i8*, i8** %dst.addr, align 8
  %323 = load i32, i32* %tmp, align 4
  %idx.ext195 = sext i32 %323 to i64
  %add.ptr196 = getelementptr inbounds i8, i8* %322, i64 %idx.ext195
  store i8* %add.ptr196, i8** %dst.addr, align 8
  br label %if.end197

if.end197:                                        ; preds = %while.end183, %while.end
  br label %sw.epilog

sw.bb198:                                         ; preds = %if.end103
  br label %while.cond200

while.cond200:                                    ; preds = %while.body203, %sw.bb198
  %324 = load i64, i64* %n.addr, align 8
  %cmp201 = icmp uge i64 %324, 142
  br i1 %cmp201, label %while.body203, label %while.end250

while.body203:                                    ; preds = %while.cond200
  %325 = load i8*, i8** %src.addr, align 8
  %add.ptr204 = getelementptr inbounds i8, i8* %325, i64 -2
  %add.ptr205 = getelementptr inbounds i8, i8* %add.ptr204, i64 0
  %326 = bitcast i8* %add.ptr205 to <2 x i64>*
  store <2 x i64>* %326, <2 x i64>** %__p.addr.i2407, align 8
  %327 = load <2 x i64>*, <2 x i64>** %__p.addr.i2407, align 8
  %328 = bitcast <2 x i64>* %327 to %struct.__loadu_si128*
  %__v.i2408 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %328, i32 0, i32 0
  %329 = load <2 x i64>, <2 x i64>* %__v.i2408, align 1
  store <2 x i64> %329, <2 x i64>* %xmm0, align 16
  %330 = load i64, i64* %n.addr, align 8
  %sub207 = sub i64 %330, 128
  store i64 %sub207, i64* %n.addr, align 8
  %331 = load i8*, i8** %src.addr, align 8
  %add.ptr208 = getelementptr inbounds i8, i8* %331, i64 -2
  %add.ptr209 = getelementptr inbounds i8, i8* %add.ptr208, i64 16
  %332 = bitcast i8* %add.ptr209 to <2 x i64>*
  store <2 x i64>* %332, <2 x i64>** %__p.addr.i2405, align 8
  %333 = load <2 x i64>*, <2 x i64>** %__p.addr.i2405, align 8
  %334 = bitcast <2 x i64>* %333 to %struct.__loadu_si128*
  %__v.i2406 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %334, i32 0, i32 0
  %335 = load <2 x i64>, <2 x i64>* %__v.i2406, align 1
  store <2 x i64> %335, <2 x i64>* %xmm1, align 16
  %336 = load i8*, i8** %src.addr, align 8
  %add.ptr211 = getelementptr inbounds i8, i8* %336, i64 -2
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr211, i64 32
  %337 = bitcast i8* %add.ptr212 to <2 x i64>*
  store <2 x i64>* %337, <2 x i64>** %__p.addr.i2403, align 8
  %338 = load <2 x i64>*, <2 x i64>** %__p.addr.i2403, align 8
  %339 = bitcast <2 x i64>* %338 to %struct.__loadu_si128*
  %__v.i2404 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %339, i32 0, i32 0
  %340 = load <2 x i64>, <2 x i64>* %__v.i2404, align 1
  store <2 x i64> %340, <2 x i64>* %xmm2, align 16
  %341 = load i8*, i8** %src.addr, align 8
  %add.ptr214 = getelementptr inbounds i8, i8* %341, i64 -2
  %add.ptr215 = getelementptr inbounds i8, i8* %add.ptr214, i64 48
  %342 = bitcast i8* %add.ptr215 to <2 x i64>*
  store <2 x i64>* %342, <2 x i64>** %__p.addr.i2401, align 8
  %343 = load <2 x i64>*, <2 x i64>** %__p.addr.i2401, align 8
  %344 = bitcast <2 x i64>* %343 to %struct.__loadu_si128*
  %__v.i2402 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %344, i32 0, i32 0
  %345 = load <2 x i64>, <2 x i64>* %__v.i2402, align 1
  store <2 x i64> %345, <2 x i64>* %xmm3, align 16
  %346 = load i8*, i8** %src.addr, align 8
  %add.ptr217 = getelementptr inbounds i8, i8* %346, i64 -2
  %add.ptr218 = getelementptr inbounds i8, i8* %add.ptr217, i64 64
  %347 = bitcast i8* %add.ptr218 to <2 x i64>*
  store <2 x i64>* %347, <2 x i64>** %__p.addr.i2399, align 8
  %348 = load <2 x i64>*, <2 x i64>** %__p.addr.i2399, align 8
  %349 = bitcast <2 x i64>* %348 to %struct.__loadu_si128*
  %__v.i2400 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %349, i32 0, i32 0
  %350 = load <2 x i64>, <2 x i64>* %__v.i2400, align 1
  store <2 x i64> %350, <2 x i64>* %xmm4, align 16
  %351 = load i8*, i8** %src.addr, align 8
  %add.ptr220 = getelementptr inbounds i8, i8* %351, i64 -2
  %add.ptr221 = getelementptr inbounds i8, i8* %add.ptr220, i64 80
  %352 = bitcast i8* %add.ptr221 to <2 x i64>*
  store <2 x i64>* %352, <2 x i64>** %__p.addr.i2397, align 8
  %353 = load <2 x i64>*, <2 x i64>** %__p.addr.i2397, align 8
  %354 = bitcast <2 x i64>* %353 to %struct.__loadu_si128*
  %__v.i2398 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %354, i32 0, i32 0
  %355 = load <2 x i64>, <2 x i64>* %__v.i2398, align 1
  store <2 x i64> %355, <2 x i64>* %xmm5, align 16
  %356 = load i8*, i8** %src.addr, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %356, i64 -2
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 96
  %357 = bitcast i8* %add.ptr224 to <2 x i64>*
  store <2 x i64>* %357, <2 x i64>** %__p.addr.i2395, align 8
  %358 = load <2 x i64>*, <2 x i64>** %__p.addr.i2395, align 8
  %359 = bitcast <2 x i64>* %358 to %struct.__loadu_si128*
  %__v.i2396 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %359, i32 0, i32 0
  %360 = load <2 x i64>, <2 x i64>* %__v.i2396, align 1
  store <2 x i64> %360, <2 x i64>* %xmm6, align 16
  %361 = load i8*, i8** %src.addr, align 8
  %add.ptr226 = getelementptr inbounds i8, i8* %361, i64 -2
  %add.ptr227 = getelementptr inbounds i8, i8* %add.ptr226, i64 112
  %362 = bitcast i8* %add.ptr227 to <2 x i64>*
  store <2 x i64>* %362, <2 x i64>** %__p.addr.i2393, align 8
  %363 = load <2 x i64>*, <2 x i64>** %__p.addr.i2393, align 8
  %364 = bitcast <2 x i64>* %363 to %struct.__loadu_si128*
  %__v.i2394 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %364, i32 0, i32 0
  %365 = load <2 x i64>, <2 x i64>* %__v.i2394, align 1
  store <2 x i64> %365, <2 x i64>* %xmm7, align 16
  %366 = load i8*, i8** %src.addr, align 8
  %add.ptr229 = getelementptr inbounds i8, i8* %366, i64 -2
  %add.ptr230 = getelementptr inbounds i8, i8* %add.ptr229, i64 128
  %367 = bitcast i8* %add.ptr230 to <2 x i64>*
  store <2 x i64>* %367, <2 x i64>** %__p.addr.i2391, align 8
  %368 = load <2 x i64>*, <2 x i64>** %__p.addr.i2391, align 8
  %369 = bitcast <2 x i64>* %368 to %struct.__loadu_si128*
  %__v.i2392 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %369, i32 0, i32 0
  %370 = load <2 x i64>, <2 x i64>* %__v.i2392, align 1
  store <2 x i64> %370, <2 x i64>* %xmm8, align 16
  %371 = load i8*, i8** %src.addr, align 8
  %add.ptr232 = getelementptr inbounds i8, i8* %371, i64 128
  store i8* %add.ptr232, i8** %src.addr, align 8
  %372 = load i8*, i8** %dst.addr, align 8
  %add.ptr233 = getelementptr inbounds i8, i8* %372, i64 0
  %373 = bitcast i8* %add.ptr233 to <2 x i64>*
  %374 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %375 = bitcast <2 x i64> %374 to <16 x i8>
  %376 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %377 = bitcast <2 x i64> %376 to <16 x i8>
  %palignr234 = shufflevector <16 x i8> %377, <16 x i8> %375, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %378 = bitcast <16 x i8> %palignr234 to <2 x i64>
  store <2 x i64>* %373, <2 x i64>** %__p.addr.i2388, align 8
  store <2 x i64> %378, <2 x i64>* %__b.addr.i2389, align 16
  %379 = load <2 x i64>, <2 x i64>* %__b.addr.i2389, align 16
  %380 = load <2 x i64>*, <2 x i64>** %__p.addr.i2388, align 8
  %381 = bitcast <2 x i64>* %380 to %struct.__storeu_si128*
  %__v.i2390 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %381, i32 0, i32 0
  store <2 x i64> %379, <2 x i64>* %__v.i2390, align 1
  %382 = load i8*, i8** %dst.addr, align 8
  %add.ptr235 = getelementptr inbounds i8, i8* %382, i64 16
  %383 = bitcast i8* %add.ptr235 to <2 x i64>*
  %384 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %385 = bitcast <2 x i64> %384 to <16 x i8>
  %386 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %387 = bitcast <2 x i64> %386 to <16 x i8>
  %palignr236 = shufflevector <16 x i8> %387, <16 x i8> %385, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %388 = bitcast <16 x i8> %palignr236 to <2 x i64>
  store <2 x i64>* %383, <2 x i64>** %__p.addr.i2385, align 8
  store <2 x i64> %388, <2 x i64>* %__b.addr.i2386, align 16
  %389 = load <2 x i64>, <2 x i64>* %__b.addr.i2386, align 16
  %390 = load <2 x i64>*, <2 x i64>** %__p.addr.i2385, align 8
  %391 = bitcast <2 x i64>* %390 to %struct.__storeu_si128*
  %__v.i2387 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %391, i32 0, i32 0
  store <2 x i64> %389, <2 x i64>* %__v.i2387, align 1
  %392 = load i8*, i8** %dst.addr, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %392, i64 32
  %393 = bitcast i8* %add.ptr237 to <2 x i64>*
  %394 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %395 = bitcast <2 x i64> %394 to <16 x i8>
  %396 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %397 = bitcast <2 x i64> %396 to <16 x i8>
  %palignr238 = shufflevector <16 x i8> %397, <16 x i8> %395, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %398 = bitcast <16 x i8> %palignr238 to <2 x i64>
  store <2 x i64>* %393, <2 x i64>** %__p.addr.i2382, align 8
  store <2 x i64> %398, <2 x i64>* %__b.addr.i2383, align 16
  %399 = load <2 x i64>, <2 x i64>* %__b.addr.i2383, align 16
  %400 = load <2 x i64>*, <2 x i64>** %__p.addr.i2382, align 8
  %401 = bitcast <2 x i64>* %400 to %struct.__storeu_si128*
  %__v.i2384 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %401, i32 0, i32 0
  store <2 x i64> %399, <2 x i64>* %__v.i2384, align 1
  %402 = load i8*, i8** %dst.addr, align 8
  %add.ptr239 = getelementptr inbounds i8, i8* %402, i64 48
  %403 = bitcast i8* %add.ptr239 to <2 x i64>*
  %404 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %405 = bitcast <2 x i64> %404 to <16 x i8>
  %406 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %407 = bitcast <2 x i64> %406 to <16 x i8>
  %palignr240 = shufflevector <16 x i8> %407, <16 x i8> %405, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %408 = bitcast <16 x i8> %palignr240 to <2 x i64>
  store <2 x i64>* %403, <2 x i64>** %__p.addr.i2379, align 8
  store <2 x i64> %408, <2 x i64>* %__b.addr.i2380, align 16
  %409 = load <2 x i64>, <2 x i64>* %__b.addr.i2380, align 16
  %410 = load <2 x i64>*, <2 x i64>** %__p.addr.i2379, align 8
  %411 = bitcast <2 x i64>* %410 to %struct.__storeu_si128*
  %__v.i2381 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %411, i32 0, i32 0
  store <2 x i64> %409, <2 x i64>* %__v.i2381, align 1
  %412 = load i8*, i8** %dst.addr, align 8
  %add.ptr241 = getelementptr inbounds i8, i8* %412, i64 64
  %413 = bitcast i8* %add.ptr241 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %415 = bitcast <2 x i64> %414 to <16 x i8>
  %416 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %417 = bitcast <2 x i64> %416 to <16 x i8>
  %palignr242 = shufflevector <16 x i8> %417, <16 x i8> %415, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %418 = bitcast <16 x i8> %palignr242 to <2 x i64>
  store <2 x i64>* %413, <2 x i64>** %__p.addr.i2376, align 8
  store <2 x i64> %418, <2 x i64>* %__b.addr.i2377, align 16
  %419 = load <2 x i64>, <2 x i64>* %__b.addr.i2377, align 16
  %420 = load <2 x i64>*, <2 x i64>** %__p.addr.i2376, align 8
  %421 = bitcast <2 x i64>* %420 to %struct.__storeu_si128*
  %__v.i2378 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %421, i32 0, i32 0
  store <2 x i64> %419, <2 x i64>* %__v.i2378, align 1
  %422 = load i8*, i8** %dst.addr, align 8
  %add.ptr243 = getelementptr inbounds i8, i8* %422, i64 80
  %423 = bitcast i8* %add.ptr243 to <2 x i64>*
  %424 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %425 = bitcast <2 x i64> %424 to <16 x i8>
  %426 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %427 = bitcast <2 x i64> %426 to <16 x i8>
  %palignr244 = shufflevector <16 x i8> %427, <16 x i8> %425, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %428 = bitcast <16 x i8> %palignr244 to <2 x i64>
  store <2 x i64>* %423, <2 x i64>** %__p.addr.i2373, align 8
  store <2 x i64> %428, <2 x i64>* %__b.addr.i2374, align 16
  %429 = load <2 x i64>, <2 x i64>* %__b.addr.i2374, align 16
  %430 = load <2 x i64>*, <2 x i64>** %__p.addr.i2373, align 8
  %431 = bitcast <2 x i64>* %430 to %struct.__storeu_si128*
  %__v.i2375 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %431, i32 0, i32 0
  store <2 x i64> %429, <2 x i64>* %__v.i2375, align 1
  %432 = load i8*, i8** %dst.addr, align 8
  %add.ptr245 = getelementptr inbounds i8, i8* %432, i64 96
  %433 = bitcast i8* %add.ptr245 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %435 = bitcast <2 x i64> %434 to <16 x i8>
  %436 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %437 = bitcast <2 x i64> %436 to <16 x i8>
  %palignr246 = shufflevector <16 x i8> %437, <16 x i8> %435, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %438 = bitcast <16 x i8> %palignr246 to <2 x i64>
  store <2 x i64>* %433, <2 x i64>** %__p.addr.i2370, align 8
  store <2 x i64> %438, <2 x i64>* %__b.addr.i2371, align 16
  %439 = load <2 x i64>, <2 x i64>* %__b.addr.i2371, align 16
  %440 = load <2 x i64>*, <2 x i64>** %__p.addr.i2370, align 8
  %441 = bitcast <2 x i64>* %440 to %struct.__storeu_si128*
  %__v.i2372 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %441, i32 0, i32 0
  store <2 x i64> %439, <2 x i64>* %__v.i2372, align 1
  %442 = load i8*, i8** %dst.addr, align 8
  %add.ptr247 = getelementptr inbounds i8, i8* %442, i64 112
  %443 = bitcast i8* %add.ptr247 to <2 x i64>*
  %444 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %445 = bitcast <2 x i64> %444 to <16 x i8>
  %446 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %447 = bitcast <2 x i64> %446 to <16 x i8>
  %palignr248 = shufflevector <16 x i8> %447, <16 x i8> %445, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %448 = bitcast <16 x i8> %palignr248 to <2 x i64>
  store <2 x i64>* %443, <2 x i64>** %__p.addr.i2367, align 8
  store <2 x i64> %448, <2 x i64>* %__b.addr.i2368, align 16
  %449 = load <2 x i64>, <2 x i64>* %__b.addr.i2368, align 16
  %450 = load <2 x i64>*, <2 x i64>** %__p.addr.i2367, align 8
  %451 = bitcast <2 x i64>* %450 to %struct.__storeu_si128*
  %__v.i2369 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %451, i32 0, i32 0
  store <2 x i64> %449, <2 x i64>* %__v.i2369, align 1
  %452 = load i8*, i8** %dst.addr, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %452, i64 128
  store i8* %add.ptr249, i8** %dst.addr, align 8
  br label %while.cond200

while.end250:                                     ; preds = %while.cond200
  %453 = load i64, i64* %n.addr, align 8
  %conv251 = trunc i64 %453 to i32
  store i32 %conv251, i32* %tmp199, align 4
  %454 = load i64, i64* %n.addr, align 8
  %sub252 = sub i64 %454, 16
  %add253 = add i64 %sub252, 2
  %and254 = and i64 %add253, 127
  %add255 = add i64 %and254, 16
  %sub256 = sub i64 %add255, 2
  store i64 %sub256, i64* %n.addr, align 8
  %455 = load i64, i64* %n.addr, align 8
  %456 = load i32, i32* %tmp199, align 4
  %conv257 = sext i32 %456 to i64
  %sub258 = sub i64 %conv257, %455
  %conv259 = trunc i64 %sub258 to i32
  store i32 %conv259, i32* %tmp199, align 4
  %457 = load i8*, i8** %src.addr, align 8
  %458 = load i32, i32* %tmp199, align 4
  %idx.ext260 = sext i32 %458 to i64
  %add.ptr261 = getelementptr inbounds i8, i8* %457, i64 %idx.ext260
  store i8* %add.ptr261, i8** %src.addr, align 8
  %459 = load i8*, i8** %dst.addr, align 8
  %460 = load i32, i32* %tmp199, align 4
  %idx.ext262 = sext i32 %460 to i64
  %add.ptr263 = getelementptr inbounds i8, i8* %459, i64 %idx.ext262
  store i8* %add.ptr263, i8** %dst.addr, align 8
  %461 = load i64, i64* %n.addr, align 8
  %cmp264 = icmp uge i64 %461, 46
  br i1 %cmp264, label %if.then266, label %if.end301

if.then266:                                       ; preds = %while.end250
  br label %while.cond267

while.cond267:                                    ; preds = %while.body270, %if.then266
  %462 = load i64, i64* %n.addr, align 8
  %cmp268 = icmp uge i64 %462, 46
  br i1 %cmp268, label %while.body270, label %while.end287

while.body270:                                    ; preds = %while.cond267
  %463 = load i8*, i8** %src.addr, align 8
  %add.ptr271 = getelementptr inbounds i8, i8* %463, i64 -2
  %add.ptr272 = getelementptr inbounds i8, i8* %add.ptr271, i64 0
  %464 = bitcast i8* %add.ptr272 to <2 x i64>*
  store <2 x i64>* %464, <2 x i64>** %__p.addr.i2365, align 8
  %465 = load <2 x i64>*, <2 x i64>** %__p.addr.i2365, align 8
  %466 = bitcast <2 x i64>* %465 to %struct.__loadu_si128*
  %__v.i2366 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %466, i32 0, i32 0
  %467 = load <2 x i64>, <2 x i64>* %__v.i2366, align 1
  store <2 x i64> %467, <2 x i64>* %xmm0, align 16
  %468 = load i64, i64* %n.addr, align 8
  %sub274 = sub i64 %468, 32
  store i64 %sub274, i64* %n.addr, align 8
  %469 = load i8*, i8** %src.addr, align 8
  %add.ptr275 = getelementptr inbounds i8, i8* %469, i64 -2
  %add.ptr276 = getelementptr inbounds i8, i8* %add.ptr275, i64 16
  %470 = bitcast i8* %add.ptr276 to <2 x i64>*
  store <2 x i64>* %470, <2 x i64>** %__p.addr.i2363, align 8
  %471 = load <2 x i64>*, <2 x i64>** %__p.addr.i2363, align 8
  %472 = bitcast <2 x i64>* %471 to %struct.__loadu_si128*
  %__v.i2364 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %472, i32 0, i32 0
  %473 = load <2 x i64>, <2 x i64>* %__v.i2364, align 1
  store <2 x i64> %473, <2 x i64>* %xmm1, align 16
  %474 = load i8*, i8** %src.addr, align 8
  %add.ptr278 = getelementptr inbounds i8, i8* %474, i64 -2
  %add.ptr279 = getelementptr inbounds i8, i8* %add.ptr278, i64 32
  %475 = bitcast i8* %add.ptr279 to <2 x i64>*
  store <2 x i64>* %475, <2 x i64>** %__p.addr.i2361, align 8
  %476 = load <2 x i64>*, <2 x i64>** %__p.addr.i2361, align 8
  %477 = bitcast <2 x i64>* %476 to %struct.__loadu_si128*
  %__v.i2362 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %477, i32 0, i32 0
  %478 = load <2 x i64>, <2 x i64>* %__v.i2362, align 1
  store <2 x i64> %478, <2 x i64>* %xmm2, align 16
  %479 = load i8*, i8** %src.addr, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %479, i64 32
  store i8* %add.ptr281, i8** %src.addr, align 8
  %480 = load i8*, i8** %dst.addr, align 8
  %add.ptr282 = getelementptr inbounds i8, i8* %480, i64 0
  %481 = bitcast i8* %add.ptr282 to <2 x i64>*
  %482 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %483 = bitcast <2 x i64> %482 to <16 x i8>
  %484 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %485 = bitcast <2 x i64> %484 to <16 x i8>
  %palignr283 = shufflevector <16 x i8> %485, <16 x i8> %483, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %486 = bitcast <16 x i8> %palignr283 to <2 x i64>
  store <2 x i64>* %481, <2 x i64>** %__p.addr.i2358, align 8
  store <2 x i64> %486, <2 x i64>* %__b.addr.i2359, align 16
  %487 = load <2 x i64>, <2 x i64>* %__b.addr.i2359, align 16
  %488 = load <2 x i64>*, <2 x i64>** %__p.addr.i2358, align 8
  %489 = bitcast <2 x i64>* %488 to %struct.__storeu_si128*
  %__v.i2360 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %489, i32 0, i32 0
  store <2 x i64> %487, <2 x i64>* %__v.i2360, align 1
  %490 = load i8*, i8** %dst.addr, align 8
  %add.ptr284 = getelementptr inbounds i8, i8* %490, i64 16
  %491 = bitcast i8* %add.ptr284 to <2 x i64>*
  %492 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %493 = bitcast <2 x i64> %492 to <16 x i8>
  %494 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %495 = bitcast <2 x i64> %494 to <16 x i8>
  %palignr285 = shufflevector <16 x i8> %495, <16 x i8> %493, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %496 = bitcast <16 x i8> %palignr285 to <2 x i64>
  store <2 x i64>* %491, <2 x i64>** %__p.addr.i2355, align 8
  store <2 x i64> %496, <2 x i64>* %__b.addr.i2356, align 16
  %497 = load <2 x i64>, <2 x i64>* %__b.addr.i2356, align 16
  %498 = load <2 x i64>*, <2 x i64>** %__p.addr.i2355, align 8
  %499 = bitcast <2 x i64>* %498 to %struct.__storeu_si128*
  %__v.i2357 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %499, i32 0, i32 0
  store <2 x i64> %497, <2 x i64>* %__v.i2357, align 1
  %500 = load i8*, i8** %dst.addr, align 8
  %add.ptr286 = getelementptr inbounds i8, i8* %500, i64 32
  store i8* %add.ptr286, i8** %dst.addr, align 8
  br label %while.cond267

while.end287:                                     ; preds = %while.cond267
  %501 = load i64, i64* %n.addr, align 8
  %conv288 = trunc i64 %501 to i32
  store i32 %conv288, i32* %tmp199, align 4
  %502 = load i64, i64* %n.addr, align 8
  %sub289 = sub i64 %502, 16
  %add290 = add i64 %sub289, 2
  %and291 = and i64 %add290, 31
  %add292 = add i64 %and291, 16
  %sub293 = sub i64 %add292, 2
  store i64 %sub293, i64* %n.addr, align 8
  %503 = load i64, i64* %n.addr, align 8
  %504 = load i32, i32* %tmp199, align 4
  %conv294 = sext i32 %504 to i64
  %sub295 = sub i64 %conv294, %503
  %conv296 = trunc i64 %sub295 to i32
  store i32 %conv296, i32* %tmp199, align 4
  %505 = load i8*, i8** %src.addr, align 8
  %506 = load i32, i32* %tmp199, align 4
  %idx.ext297 = sext i32 %506 to i64
  %add.ptr298 = getelementptr inbounds i8, i8* %505, i64 %idx.ext297
  store i8* %add.ptr298, i8** %src.addr, align 8
  %507 = load i8*, i8** %dst.addr, align 8
  %508 = load i32, i32* %tmp199, align 4
  %idx.ext299 = sext i32 %508 to i64
  %add.ptr300 = getelementptr inbounds i8, i8* %507, i64 %idx.ext299
  store i8* %add.ptr300, i8** %dst.addr, align 8
  br label %if.end301

if.end301:                                        ; preds = %while.end287, %while.end250
  br label %sw.epilog

sw.bb302:                                         ; preds = %if.end103
  br label %while.cond304

while.cond304:                                    ; preds = %while.body307, %sw.bb302
  %509 = load i64, i64* %n.addr, align 8
  %cmp305 = icmp uge i64 %509, 141
  br i1 %cmp305, label %while.body307, label %while.end354

while.body307:                                    ; preds = %while.cond304
  %510 = load i8*, i8** %src.addr, align 8
  %add.ptr308 = getelementptr inbounds i8, i8* %510, i64 -3
  %add.ptr309 = getelementptr inbounds i8, i8* %add.ptr308, i64 0
  %511 = bitcast i8* %add.ptr309 to <2 x i64>*
  store <2 x i64>* %511, <2 x i64>** %__p.addr.i2353, align 8
  %512 = load <2 x i64>*, <2 x i64>** %__p.addr.i2353, align 8
  %513 = bitcast <2 x i64>* %512 to %struct.__loadu_si128*
  %__v.i2354 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %513, i32 0, i32 0
  %514 = load <2 x i64>, <2 x i64>* %__v.i2354, align 1
  store <2 x i64> %514, <2 x i64>* %xmm0, align 16
  %515 = load i64, i64* %n.addr, align 8
  %sub311 = sub i64 %515, 128
  store i64 %sub311, i64* %n.addr, align 8
  %516 = load i8*, i8** %src.addr, align 8
  %add.ptr312 = getelementptr inbounds i8, i8* %516, i64 -3
  %add.ptr313 = getelementptr inbounds i8, i8* %add.ptr312, i64 16
  %517 = bitcast i8* %add.ptr313 to <2 x i64>*
  store <2 x i64>* %517, <2 x i64>** %__p.addr.i2351, align 8
  %518 = load <2 x i64>*, <2 x i64>** %__p.addr.i2351, align 8
  %519 = bitcast <2 x i64>* %518 to %struct.__loadu_si128*
  %__v.i2352 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %519, i32 0, i32 0
  %520 = load <2 x i64>, <2 x i64>* %__v.i2352, align 1
  store <2 x i64> %520, <2 x i64>* %xmm1, align 16
  %521 = load i8*, i8** %src.addr, align 8
  %add.ptr315 = getelementptr inbounds i8, i8* %521, i64 -3
  %add.ptr316 = getelementptr inbounds i8, i8* %add.ptr315, i64 32
  %522 = bitcast i8* %add.ptr316 to <2 x i64>*
  store <2 x i64>* %522, <2 x i64>** %__p.addr.i2349, align 8
  %523 = load <2 x i64>*, <2 x i64>** %__p.addr.i2349, align 8
  %524 = bitcast <2 x i64>* %523 to %struct.__loadu_si128*
  %__v.i2350 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %524, i32 0, i32 0
  %525 = load <2 x i64>, <2 x i64>* %__v.i2350, align 1
  store <2 x i64> %525, <2 x i64>* %xmm2, align 16
  %526 = load i8*, i8** %src.addr, align 8
  %add.ptr318 = getelementptr inbounds i8, i8* %526, i64 -3
  %add.ptr319 = getelementptr inbounds i8, i8* %add.ptr318, i64 48
  %527 = bitcast i8* %add.ptr319 to <2 x i64>*
  store <2 x i64>* %527, <2 x i64>** %__p.addr.i2347, align 8
  %528 = load <2 x i64>*, <2 x i64>** %__p.addr.i2347, align 8
  %529 = bitcast <2 x i64>* %528 to %struct.__loadu_si128*
  %__v.i2348 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %529, i32 0, i32 0
  %530 = load <2 x i64>, <2 x i64>* %__v.i2348, align 1
  store <2 x i64> %530, <2 x i64>* %xmm3, align 16
  %531 = load i8*, i8** %src.addr, align 8
  %add.ptr321 = getelementptr inbounds i8, i8* %531, i64 -3
  %add.ptr322 = getelementptr inbounds i8, i8* %add.ptr321, i64 64
  %532 = bitcast i8* %add.ptr322 to <2 x i64>*
  store <2 x i64>* %532, <2 x i64>** %__p.addr.i2345, align 8
  %533 = load <2 x i64>*, <2 x i64>** %__p.addr.i2345, align 8
  %534 = bitcast <2 x i64>* %533 to %struct.__loadu_si128*
  %__v.i2346 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %534, i32 0, i32 0
  %535 = load <2 x i64>, <2 x i64>* %__v.i2346, align 1
  store <2 x i64> %535, <2 x i64>* %xmm4, align 16
  %536 = load i8*, i8** %src.addr, align 8
  %add.ptr324 = getelementptr inbounds i8, i8* %536, i64 -3
  %add.ptr325 = getelementptr inbounds i8, i8* %add.ptr324, i64 80
  %537 = bitcast i8* %add.ptr325 to <2 x i64>*
  store <2 x i64>* %537, <2 x i64>** %__p.addr.i2343, align 8
  %538 = load <2 x i64>*, <2 x i64>** %__p.addr.i2343, align 8
  %539 = bitcast <2 x i64>* %538 to %struct.__loadu_si128*
  %__v.i2344 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %539, i32 0, i32 0
  %540 = load <2 x i64>, <2 x i64>* %__v.i2344, align 1
  store <2 x i64> %540, <2 x i64>* %xmm5, align 16
  %541 = load i8*, i8** %src.addr, align 8
  %add.ptr327 = getelementptr inbounds i8, i8* %541, i64 -3
  %add.ptr328 = getelementptr inbounds i8, i8* %add.ptr327, i64 96
  %542 = bitcast i8* %add.ptr328 to <2 x i64>*
  store <2 x i64>* %542, <2 x i64>** %__p.addr.i2341, align 8
  %543 = load <2 x i64>*, <2 x i64>** %__p.addr.i2341, align 8
  %544 = bitcast <2 x i64>* %543 to %struct.__loadu_si128*
  %__v.i2342 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %544, i32 0, i32 0
  %545 = load <2 x i64>, <2 x i64>* %__v.i2342, align 1
  store <2 x i64> %545, <2 x i64>* %xmm6, align 16
  %546 = load i8*, i8** %src.addr, align 8
  %add.ptr330 = getelementptr inbounds i8, i8* %546, i64 -3
  %add.ptr331 = getelementptr inbounds i8, i8* %add.ptr330, i64 112
  %547 = bitcast i8* %add.ptr331 to <2 x i64>*
  store <2 x i64>* %547, <2 x i64>** %__p.addr.i2339, align 8
  %548 = load <2 x i64>*, <2 x i64>** %__p.addr.i2339, align 8
  %549 = bitcast <2 x i64>* %548 to %struct.__loadu_si128*
  %__v.i2340 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %549, i32 0, i32 0
  %550 = load <2 x i64>, <2 x i64>* %__v.i2340, align 1
  store <2 x i64> %550, <2 x i64>* %xmm7, align 16
  %551 = load i8*, i8** %src.addr, align 8
  %add.ptr333 = getelementptr inbounds i8, i8* %551, i64 -3
  %add.ptr334 = getelementptr inbounds i8, i8* %add.ptr333, i64 128
  %552 = bitcast i8* %add.ptr334 to <2 x i64>*
  store <2 x i64>* %552, <2 x i64>** %__p.addr.i2337, align 8
  %553 = load <2 x i64>*, <2 x i64>** %__p.addr.i2337, align 8
  %554 = bitcast <2 x i64>* %553 to %struct.__loadu_si128*
  %__v.i2338 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %554, i32 0, i32 0
  %555 = load <2 x i64>, <2 x i64>* %__v.i2338, align 1
  store <2 x i64> %555, <2 x i64>* %xmm8, align 16
  %556 = load i8*, i8** %src.addr, align 8
  %add.ptr336 = getelementptr inbounds i8, i8* %556, i64 128
  store i8* %add.ptr336, i8** %src.addr, align 8
  %557 = load i8*, i8** %dst.addr, align 8
  %add.ptr337 = getelementptr inbounds i8, i8* %557, i64 0
  %558 = bitcast i8* %add.ptr337 to <2 x i64>*
  %559 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %560 = bitcast <2 x i64> %559 to <16 x i8>
  %561 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %562 = bitcast <2 x i64> %561 to <16 x i8>
  %palignr338 = shufflevector <16 x i8> %562, <16 x i8> %560, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %563 = bitcast <16 x i8> %palignr338 to <2 x i64>
  store <2 x i64>* %558, <2 x i64>** %__p.addr.i2334, align 8
  store <2 x i64> %563, <2 x i64>* %__b.addr.i2335, align 16
  %564 = load <2 x i64>, <2 x i64>* %__b.addr.i2335, align 16
  %565 = load <2 x i64>*, <2 x i64>** %__p.addr.i2334, align 8
  %566 = bitcast <2 x i64>* %565 to %struct.__storeu_si128*
  %__v.i2336 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %566, i32 0, i32 0
  store <2 x i64> %564, <2 x i64>* %__v.i2336, align 1
  %567 = load i8*, i8** %dst.addr, align 8
  %add.ptr339 = getelementptr inbounds i8, i8* %567, i64 16
  %568 = bitcast i8* %add.ptr339 to <2 x i64>*
  %569 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %570 = bitcast <2 x i64> %569 to <16 x i8>
  %571 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %572 = bitcast <2 x i64> %571 to <16 x i8>
  %palignr340 = shufflevector <16 x i8> %572, <16 x i8> %570, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %573 = bitcast <16 x i8> %palignr340 to <2 x i64>
  store <2 x i64>* %568, <2 x i64>** %__p.addr.i2331, align 8
  store <2 x i64> %573, <2 x i64>* %__b.addr.i2332, align 16
  %574 = load <2 x i64>, <2 x i64>* %__b.addr.i2332, align 16
  %575 = load <2 x i64>*, <2 x i64>** %__p.addr.i2331, align 8
  %576 = bitcast <2 x i64>* %575 to %struct.__storeu_si128*
  %__v.i2333 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %576, i32 0, i32 0
  store <2 x i64> %574, <2 x i64>* %__v.i2333, align 1
  %577 = load i8*, i8** %dst.addr, align 8
  %add.ptr341 = getelementptr inbounds i8, i8* %577, i64 32
  %578 = bitcast i8* %add.ptr341 to <2 x i64>*
  %579 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %580 = bitcast <2 x i64> %579 to <16 x i8>
  %581 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %582 = bitcast <2 x i64> %581 to <16 x i8>
  %palignr342 = shufflevector <16 x i8> %582, <16 x i8> %580, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %583 = bitcast <16 x i8> %palignr342 to <2 x i64>
  store <2 x i64>* %578, <2 x i64>** %__p.addr.i2328, align 8
  store <2 x i64> %583, <2 x i64>* %__b.addr.i2329, align 16
  %584 = load <2 x i64>, <2 x i64>* %__b.addr.i2329, align 16
  %585 = load <2 x i64>*, <2 x i64>** %__p.addr.i2328, align 8
  %586 = bitcast <2 x i64>* %585 to %struct.__storeu_si128*
  %__v.i2330 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %586, i32 0, i32 0
  store <2 x i64> %584, <2 x i64>* %__v.i2330, align 1
  %587 = load i8*, i8** %dst.addr, align 8
  %add.ptr343 = getelementptr inbounds i8, i8* %587, i64 48
  %588 = bitcast i8* %add.ptr343 to <2 x i64>*
  %589 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %590 = bitcast <2 x i64> %589 to <16 x i8>
  %591 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %592 = bitcast <2 x i64> %591 to <16 x i8>
  %palignr344 = shufflevector <16 x i8> %592, <16 x i8> %590, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %593 = bitcast <16 x i8> %palignr344 to <2 x i64>
  store <2 x i64>* %588, <2 x i64>** %__p.addr.i2325, align 8
  store <2 x i64> %593, <2 x i64>* %__b.addr.i2326, align 16
  %594 = load <2 x i64>, <2 x i64>* %__b.addr.i2326, align 16
  %595 = load <2 x i64>*, <2 x i64>** %__p.addr.i2325, align 8
  %596 = bitcast <2 x i64>* %595 to %struct.__storeu_si128*
  %__v.i2327 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %596, i32 0, i32 0
  store <2 x i64> %594, <2 x i64>* %__v.i2327, align 1
  %597 = load i8*, i8** %dst.addr, align 8
  %add.ptr345 = getelementptr inbounds i8, i8* %597, i64 64
  %598 = bitcast i8* %add.ptr345 to <2 x i64>*
  %599 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %600 = bitcast <2 x i64> %599 to <16 x i8>
  %601 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %602 = bitcast <2 x i64> %601 to <16 x i8>
  %palignr346 = shufflevector <16 x i8> %602, <16 x i8> %600, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %603 = bitcast <16 x i8> %palignr346 to <2 x i64>
  store <2 x i64>* %598, <2 x i64>** %__p.addr.i2322, align 8
  store <2 x i64> %603, <2 x i64>* %__b.addr.i2323, align 16
  %604 = load <2 x i64>, <2 x i64>* %__b.addr.i2323, align 16
  %605 = load <2 x i64>*, <2 x i64>** %__p.addr.i2322, align 8
  %606 = bitcast <2 x i64>* %605 to %struct.__storeu_si128*
  %__v.i2324 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %606, i32 0, i32 0
  store <2 x i64> %604, <2 x i64>* %__v.i2324, align 1
  %607 = load i8*, i8** %dst.addr, align 8
  %add.ptr347 = getelementptr inbounds i8, i8* %607, i64 80
  %608 = bitcast i8* %add.ptr347 to <2 x i64>*
  %609 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %610 = bitcast <2 x i64> %609 to <16 x i8>
  %611 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %612 = bitcast <2 x i64> %611 to <16 x i8>
  %palignr348 = shufflevector <16 x i8> %612, <16 x i8> %610, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %613 = bitcast <16 x i8> %palignr348 to <2 x i64>
  store <2 x i64>* %608, <2 x i64>** %__p.addr.i2319, align 8
  store <2 x i64> %613, <2 x i64>* %__b.addr.i2320, align 16
  %614 = load <2 x i64>, <2 x i64>* %__b.addr.i2320, align 16
  %615 = load <2 x i64>*, <2 x i64>** %__p.addr.i2319, align 8
  %616 = bitcast <2 x i64>* %615 to %struct.__storeu_si128*
  %__v.i2321 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %616, i32 0, i32 0
  store <2 x i64> %614, <2 x i64>* %__v.i2321, align 1
  %617 = load i8*, i8** %dst.addr, align 8
  %add.ptr349 = getelementptr inbounds i8, i8* %617, i64 96
  %618 = bitcast i8* %add.ptr349 to <2 x i64>*
  %619 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %620 = bitcast <2 x i64> %619 to <16 x i8>
  %621 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %622 = bitcast <2 x i64> %621 to <16 x i8>
  %palignr350 = shufflevector <16 x i8> %622, <16 x i8> %620, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %623 = bitcast <16 x i8> %palignr350 to <2 x i64>
  store <2 x i64>* %618, <2 x i64>** %__p.addr.i2316, align 8
  store <2 x i64> %623, <2 x i64>* %__b.addr.i2317, align 16
  %624 = load <2 x i64>, <2 x i64>* %__b.addr.i2317, align 16
  %625 = load <2 x i64>*, <2 x i64>** %__p.addr.i2316, align 8
  %626 = bitcast <2 x i64>* %625 to %struct.__storeu_si128*
  %__v.i2318 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %626, i32 0, i32 0
  store <2 x i64> %624, <2 x i64>* %__v.i2318, align 1
  %627 = load i8*, i8** %dst.addr, align 8
  %add.ptr351 = getelementptr inbounds i8, i8* %627, i64 112
  %628 = bitcast i8* %add.ptr351 to <2 x i64>*
  %629 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %630 = bitcast <2 x i64> %629 to <16 x i8>
  %631 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %632 = bitcast <2 x i64> %631 to <16 x i8>
  %palignr352 = shufflevector <16 x i8> %632, <16 x i8> %630, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %633 = bitcast <16 x i8> %palignr352 to <2 x i64>
  store <2 x i64>* %628, <2 x i64>** %__p.addr.i2313, align 8
  store <2 x i64> %633, <2 x i64>* %__b.addr.i2314, align 16
  %634 = load <2 x i64>, <2 x i64>* %__b.addr.i2314, align 16
  %635 = load <2 x i64>*, <2 x i64>** %__p.addr.i2313, align 8
  %636 = bitcast <2 x i64>* %635 to %struct.__storeu_si128*
  %__v.i2315 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %636, i32 0, i32 0
  store <2 x i64> %634, <2 x i64>* %__v.i2315, align 1
  %637 = load i8*, i8** %dst.addr, align 8
  %add.ptr353 = getelementptr inbounds i8, i8* %637, i64 128
  store i8* %add.ptr353, i8** %dst.addr, align 8
  br label %while.cond304

while.end354:                                     ; preds = %while.cond304
  %638 = load i64, i64* %n.addr, align 8
  %conv355 = trunc i64 %638 to i32
  store i32 %conv355, i32* %tmp303, align 4
  %639 = load i64, i64* %n.addr, align 8
  %sub356 = sub i64 %639, 16
  %add357 = add i64 %sub356, 3
  %and358 = and i64 %add357, 127
  %add359 = add i64 %and358, 16
  %sub360 = sub i64 %add359, 3
  store i64 %sub360, i64* %n.addr, align 8
  %640 = load i64, i64* %n.addr, align 8
  %641 = load i32, i32* %tmp303, align 4
  %conv361 = sext i32 %641 to i64
  %sub362 = sub i64 %conv361, %640
  %conv363 = trunc i64 %sub362 to i32
  store i32 %conv363, i32* %tmp303, align 4
  %642 = load i8*, i8** %src.addr, align 8
  %643 = load i32, i32* %tmp303, align 4
  %idx.ext364 = sext i32 %643 to i64
  %add.ptr365 = getelementptr inbounds i8, i8* %642, i64 %idx.ext364
  store i8* %add.ptr365, i8** %src.addr, align 8
  %644 = load i8*, i8** %dst.addr, align 8
  %645 = load i32, i32* %tmp303, align 4
  %idx.ext366 = sext i32 %645 to i64
  %add.ptr367 = getelementptr inbounds i8, i8* %644, i64 %idx.ext366
  store i8* %add.ptr367, i8** %dst.addr, align 8
  %646 = load i64, i64* %n.addr, align 8
  %cmp368 = icmp uge i64 %646, 45
  br i1 %cmp368, label %if.then370, label %if.end405

if.then370:                                       ; preds = %while.end354
  br label %while.cond371

while.cond371:                                    ; preds = %while.body374, %if.then370
  %647 = load i64, i64* %n.addr, align 8
  %cmp372 = icmp uge i64 %647, 45
  br i1 %cmp372, label %while.body374, label %while.end391

while.body374:                                    ; preds = %while.cond371
  %648 = load i8*, i8** %src.addr, align 8
  %add.ptr375 = getelementptr inbounds i8, i8* %648, i64 -3
  %add.ptr376 = getelementptr inbounds i8, i8* %add.ptr375, i64 0
  %649 = bitcast i8* %add.ptr376 to <2 x i64>*
  store <2 x i64>* %649, <2 x i64>** %__p.addr.i2311, align 8
  %650 = load <2 x i64>*, <2 x i64>** %__p.addr.i2311, align 8
  %651 = bitcast <2 x i64>* %650 to %struct.__loadu_si128*
  %__v.i2312 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %651, i32 0, i32 0
  %652 = load <2 x i64>, <2 x i64>* %__v.i2312, align 1
  store <2 x i64> %652, <2 x i64>* %xmm0, align 16
  %653 = load i64, i64* %n.addr, align 8
  %sub378 = sub i64 %653, 32
  store i64 %sub378, i64* %n.addr, align 8
  %654 = load i8*, i8** %src.addr, align 8
  %add.ptr379 = getelementptr inbounds i8, i8* %654, i64 -3
  %add.ptr380 = getelementptr inbounds i8, i8* %add.ptr379, i64 16
  %655 = bitcast i8* %add.ptr380 to <2 x i64>*
  store <2 x i64>* %655, <2 x i64>** %__p.addr.i2309, align 8
  %656 = load <2 x i64>*, <2 x i64>** %__p.addr.i2309, align 8
  %657 = bitcast <2 x i64>* %656 to %struct.__loadu_si128*
  %__v.i2310 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %657, i32 0, i32 0
  %658 = load <2 x i64>, <2 x i64>* %__v.i2310, align 1
  store <2 x i64> %658, <2 x i64>* %xmm1, align 16
  %659 = load i8*, i8** %src.addr, align 8
  %add.ptr382 = getelementptr inbounds i8, i8* %659, i64 -3
  %add.ptr383 = getelementptr inbounds i8, i8* %add.ptr382, i64 32
  %660 = bitcast i8* %add.ptr383 to <2 x i64>*
  store <2 x i64>* %660, <2 x i64>** %__p.addr.i2307, align 8
  %661 = load <2 x i64>*, <2 x i64>** %__p.addr.i2307, align 8
  %662 = bitcast <2 x i64>* %661 to %struct.__loadu_si128*
  %__v.i2308 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %662, i32 0, i32 0
  %663 = load <2 x i64>, <2 x i64>* %__v.i2308, align 1
  store <2 x i64> %663, <2 x i64>* %xmm2, align 16
  %664 = load i8*, i8** %src.addr, align 8
  %add.ptr385 = getelementptr inbounds i8, i8* %664, i64 32
  store i8* %add.ptr385, i8** %src.addr, align 8
  %665 = load i8*, i8** %dst.addr, align 8
  %add.ptr386 = getelementptr inbounds i8, i8* %665, i64 0
  %666 = bitcast i8* %add.ptr386 to <2 x i64>*
  %667 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %668 = bitcast <2 x i64> %667 to <16 x i8>
  %669 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %670 = bitcast <2 x i64> %669 to <16 x i8>
  %palignr387 = shufflevector <16 x i8> %670, <16 x i8> %668, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %671 = bitcast <16 x i8> %palignr387 to <2 x i64>
  store <2 x i64>* %666, <2 x i64>** %__p.addr.i2304, align 8
  store <2 x i64> %671, <2 x i64>* %__b.addr.i2305, align 16
  %672 = load <2 x i64>, <2 x i64>* %__b.addr.i2305, align 16
  %673 = load <2 x i64>*, <2 x i64>** %__p.addr.i2304, align 8
  %674 = bitcast <2 x i64>* %673 to %struct.__storeu_si128*
  %__v.i2306 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %674, i32 0, i32 0
  store <2 x i64> %672, <2 x i64>* %__v.i2306, align 1
  %675 = load i8*, i8** %dst.addr, align 8
  %add.ptr388 = getelementptr inbounds i8, i8* %675, i64 16
  %676 = bitcast i8* %add.ptr388 to <2 x i64>*
  %677 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %678 = bitcast <2 x i64> %677 to <16 x i8>
  %679 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %680 = bitcast <2 x i64> %679 to <16 x i8>
  %palignr389 = shufflevector <16 x i8> %680, <16 x i8> %678, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %681 = bitcast <16 x i8> %palignr389 to <2 x i64>
  store <2 x i64>* %676, <2 x i64>** %__p.addr.i2301, align 8
  store <2 x i64> %681, <2 x i64>* %__b.addr.i2302, align 16
  %682 = load <2 x i64>, <2 x i64>* %__b.addr.i2302, align 16
  %683 = load <2 x i64>*, <2 x i64>** %__p.addr.i2301, align 8
  %684 = bitcast <2 x i64>* %683 to %struct.__storeu_si128*
  %__v.i2303 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %684, i32 0, i32 0
  store <2 x i64> %682, <2 x i64>* %__v.i2303, align 1
  %685 = load i8*, i8** %dst.addr, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %685, i64 32
  store i8* %add.ptr390, i8** %dst.addr, align 8
  br label %while.cond371

while.end391:                                     ; preds = %while.cond371
  %686 = load i64, i64* %n.addr, align 8
  %conv392 = trunc i64 %686 to i32
  store i32 %conv392, i32* %tmp303, align 4
  %687 = load i64, i64* %n.addr, align 8
  %sub393 = sub i64 %687, 16
  %add394 = add i64 %sub393, 3
  %and395 = and i64 %add394, 31
  %add396 = add i64 %and395, 16
  %sub397 = sub i64 %add396, 3
  store i64 %sub397, i64* %n.addr, align 8
  %688 = load i64, i64* %n.addr, align 8
  %689 = load i32, i32* %tmp303, align 4
  %conv398 = sext i32 %689 to i64
  %sub399 = sub i64 %conv398, %688
  %conv400 = trunc i64 %sub399 to i32
  store i32 %conv400, i32* %tmp303, align 4
  %690 = load i8*, i8** %src.addr, align 8
  %691 = load i32, i32* %tmp303, align 4
  %idx.ext401 = sext i32 %691 to i64
  %add.ptr402 = getelementptr inbounds i8, i8* %690, i64 %idx.ext401
  store i8* %add.ptr402, i8** %src.addr, align 8
  %692 = load i8*, i8** %dst.addr, align 8
  %693 = load i32, i32* %tmp303, align 4
  %idx.ext403 = sext i32 %693 to i64
  %add.ptr404 = getelementptr inbounds i8, i8* %692, i64 %idx.ext403
  store i8* %add.ptr404, i8** %dst.addr, align 8
  br label %if.end405

if.end405:                                        ; preds = %while.end391, %while.end354
  br label %sw.epilog

sw.bb406:                                         ; preds = %if.end103
  br label %while.cond408

while.cond408:                                    ; preds = %while.body411, %sw.bb406
  %694 = load i64, i64* %n.addr, align 8
  %cmp409 = icmp uge i64 %694, 140
  br i1 %cmp409, label %while.body411, label %while.end458

while.body411:                                    ; preds = %while.cond408
  %695 = load i8*, i8** %src.addr, align 8
  %add.ptr412 = getelementptr inbounds i8, i8* %695, i64 -4
  %add.ptr413 = getelementptr inbounds i8, i8* %add.ptr412, i64 0
  %696 = bitcast i8* %add.ptr413 to <2 x i64>*
  store <2 x i64>* %696, <2 x i64>** %__p.addr.i2299, align 8
  %697 = load <2 x i64>*, <2 x i64>** %__p.addr.i2299, align 8
  %698 = bitcast <2 x i64>* %697 to %struct.__loadu_si128*
  %__v.i2300 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %698, i32 0, i32 0
  %699 = load <2 x i64>, <2 x i64>* %__v.i2300, align 1
  store <2 x i64> %699, <2 x i64>* %xmm0, align 16
  %700 = load i64, i64* %n.addr, align 8
  %sub415 = sub i64 %700, 128
  store i64 %sub415, i64* %n.addr, align 8
  %701 = load i8*, i8** %src.addr, align 8
  %add.ptr416 = getelementptr inbounds i8, i8* %701, i64 -4
  %add.ptr417 = getelementptr inbounds i8, i8* %add.ptr416, i64 16
  %702 = bitcast i8* %add.ptr417 to <2 x i64>*
  store <2 x i64>* %702, <2 x i64>** %__p.addr.i2297, align 8
  %703 = load <2 x i64>*, <2 x i64>** %__p.addr.i2297, align 8
  %704 = bitcast <2 x i64>* %703 to %struct.__loadu_si128*
  %__v.i2298 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %704, i32 0, i32 0
  %705 = load <2 x i64>, <2 x i64>* %__v.i2298, align 1
  store <2 x i64> %705, <2 x i64>* %xmm1, align 16
  %706 = load i8*, i8** %src.addr, align 8
  %add.ptr419 = getelementptr inbounds i8, i8* %706, i64 -4
  %add.ptr420 = getelementptr inbounds i8, i8* %add.ptr419, i64 32
  %707 = bitcast i8* %add.ptr420 to <2 x i64>*
  store <2 x i64>* %707, <2 x i64>** %__p.addr.i2295, align 8
  %708 = load <2 x i64>*, <2 x i64>** %__p.addr.i2295, align 8
  %709 = bitcast <2 x i64>* %708 to %struct.__loadu_si128*
  %__v.i2296 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %709, i32 0, i32 0
  %710 = load <2 x i64>, <2 x i64>* %__v.i2296, align 1
  store <2 x i64> %710, <2 x i64>* %xmm2, align 16
  %711 = load i8*, i8** %src.addr, align 8
  %add.ptr422 = getelementptr inbounds i8, i8* %711, i64 -4
  %add.ptr423 = getelementptr inbounds i8, i8* %add.ptr422, i64 48
  %712 = bitcast i8* %add.ptr423 to <2 x i64>*
  store <2 x i64>* %712, <2 x i64>** %__p.addr.i2293, align 8
  %713 = load <2 x i64>*, <2 x i64>** %__p.addr.i2293, align 8
  %714 = bitcast <2 x i64>* %713 to %struct.__loadu_si128*
  %__v.i2294 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %714, i32 0, i32 0
  %715 = load <2 x i64>, <2 x i64>* %__v.i2294, align 1
  store <2 x i64> %715, <2 x i64>* %xmm3, align 16
  %716 = load i8*, i8** %src.addr, align 8
  %add.ptr425 = getelementptr inbounds i8, i8* %716, i64 -4
  %add.ptr426 = getelementptr inbounds i8, i8* %add.ptr425, i64 64
  %717 = bitcast i8* %add.ptr426 to <2 x i64>*
  store <2 x i64>* %717, <2 x i64>** %__p.addr.i2291, align 8
  %718 = load <2 x i64>*, <2 x i64>** %__p.addr.i2291, align 8
  %719 = bitcast <2 x i64>* %718 to %struct.__loadu_si128*
  %__v.i2292 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %719, i32 0, i32 0
  %720 = load <2 x i64>, <2 x i64>* %__v.i2292, align 1
  store <2 x i64> %720, <2 x i64>* %xmm4, align 16
  %721 = load i8*, i8** %src.addr, align 8
  %add.ptr428 = getelementptr inbounds i8, i8* %721, i64 -4
  %add.ptr429 = getelementptr inbounds i8, i8* %add.ptr428, i64 80
  %722 = bitcast i8* %add.ptr429 to <2 x i64>*
  store <2 x i64>* %722, <2 x i64>** %__p.addr.i2289, align 8
  %723 = load <2 x i64>*, <2 x i64>** %__p.addr.i2289, align 8
  %724 = bitcast <2 x i64>* %723 to %struct.__loadu_si128*
  %__v.i2290 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %724, i32 0, i32 0
  %725 = load <2 x i64>, <2 x i64>* %__v.i2290, align 1
  store <2 x i64> %725, <2 x i64>* %xmm5, align 16
  %726 = load i8*, i8** %src.addr, align 8
  %add.ptr431 = getelementptr inbounds i8, i8* %726, i64 -4
  %add.ptr432 = getelementptr inbounds i8, i8* %add.ptr431, i64 96
  %727 = bitcast i8* %add.ptr432 to <2 x i64>*
  store <2 x i64>* %727, <2 x i64>** %__p.addr.i2287, align 8
  %728 = load <2 x i64>*, <2 x i64>** %__p.addr.i2287, align 8
  %729 = bitcast <2 x i64>* %728 to %struct.__loadu_si128*
  %__v.i2288 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %729, i32 0, i32 0
  %730 = load <2 x i64>, <2 x i64>* %__v.i2288, align 1
  store <2 x i64> %730, <2 x i64>* %xmm6, align 16
  %731 = load i8*, i8** %src.addr, align 8
  %add.ptr434 = getelementptr inbounds i8, i8* %731, i64 -4
  %add.ptr435 = getelementptr inbounds i8, i8* %add.ptr434, i64 112
  %732 = bitcast i8* %add.ptr435 to <2 x i64>*
  store <2 x i64>* %732, <2 x i64>** %__p.addr.i2285, align 8
  %733 = load <2 x i64>*, <2 x i64>** %__p.addr.i2285, align 8
  %734 = bitcast <2 x i64>* %733 to %struct.__loadu_si128*
  %__v.i2286 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %734, i32 0, i32 0
  %735 = load <2 x i64>, <2 x i64>* %__v.i2286, align 1
  store <2 x i64> %735, <2 x i64>* %xmm7, align 16
  %736 = load i8*, i8** %src.addr, align 8
  %add.ptr437 = getelementptr inbounds i8, i8* %736, i64 -4
  %add.ptr438 = getelementptr inbounds i8, i8* %add.ptr437, i64 128
  %737 = bitcast i8* %add.ptr438 to <2 x i64>*
  store <2 x i64>* %737, <2 x i64>** %__p.addr.i2283, align 8
  %738 = load <2 x i64>*, <2 x i64>** %__p.addr.i2283, align 8
  %739 = bitcast <2 x i64>* %738 to %struct.__loadu_si128*
  %__v.i2284 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %739, i32 0, i32 0
  %740 = load <2 x i64>, <2 x i64>* %__v.i2284, align 1
  store <2 x i64> %740, <2 x i64>* %xmm8, align 16
  %741 = load i8*, i8** %src.addr, align 8
  %add.ptr440 = getelementptr inbounds i8, i8* %741, i64 128
  store i8* %add.ptr440, i8** %src.addr, align 8
  %742 = load i8*, i8** %dst.addr, align 8
  %add.ptr441 = getelementptr inbounds i8, i8* %742, i64 0
  %743 = bitcast i8* %add.ptr441 to <2 x i64>*
  %744 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %745 = bitcast <2 x i64> %744 to <16 x i8>
  %746 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %747 = bitcast <2 x i64> %746 to <16 x i8>
  %palignr442 = shufflevector <16 x i8> %747, <16 x i8> %745, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %748 = bitcast <16 x i8> %palignr442 to <2 x i64>
  store <2 x i64>* %743, <2 x i64>** %__p.addr.i2280, align 8
  store <2 x i64> %748, <2 x i64>* %__b.addr.i2281, align 16
  %749 = load <2 x i64>, <2 x i64>* %__b.addr.i2281, align 16
  %750 = load <2 x i64>*, <2 x i64>** %__p.addr.i2280, align 8
  %751 = bitcast <2 x i64>* %750 to %struct.__storeu_si128*
  %__v.i2282 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %751, i32 0, i32 0
  store <2 x i64> %749, <2 x i64>* %__v.i2282, align 1
  %752 = load i8*, i8** %dst.addr, align 8
  %add.ptr443 = getelementptr inbounds i8, i8* %752, i64 16
  %753 = bitcast i8* %add.ptr443 to <2 x i64>*
  %754 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %755 = bitcast <2 x i64> %754 to <16 x i8>
  %756 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %757 = bitcast <2 x i64> %756 to <16 x i8>
  %palignr444 = shufflevector <16 x i8> %757, <16 x i8> %755, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %758 = bitcast <16 x i8> %palignr444 to <2 x i64>
  store <2 x i64>* %753, <2 x i64>** %__p.addr.i2277, align 8
  store <2 x i64> %758, <2 x i64>* %__b.addr.i2278, align 16
  %759 = load <2 x i64>, <2 x i64>* %__b.addr.i2278, align 16
  %760 = load <2 x i64>*, <2 x i64>** %__p.addr.i2277, align 8
  %761 = bitcast <2 x i64>* %760 to %struct.__storeu_si128*
  %__v.i2279 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %761, i32 0, i32 0
  store <2 x i64> %759, <2 x i64>* %__v.i2279, align 1
  %762 = load i8*, i8** %dst.addr, align 8
  %add.ptr445 = getelementptr inbounds i8, i8* %762, i64 32
  %763 = bitcast i8* %add.ptr445 to <2 x i64>*
  %764 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %765 = bitcast <2 x i64> %764 to <16 x i8>
  %766 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %767 = bitcast <2 x i64> %766 to <16 x i8>
  %palignr446 = shufflevector <16 x i8> %767, <16 x i8> %765, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %768 = bitcast <16 x i8> %palignr446 to <2 x i64>
  store <2 x i64>* %763, <2 x i64>** %__p.addr.i2274, align 8
  store <2 x i64> %768, <2 x i64>* %__b.addr.i2275, align 16
  %769 = load <2 x i64>, <2 x i64>* %__b.addr.i2275, align 16
  %770 = load <2 x i64>*, <2 x i64>** %__p.addr.i2274, align 8
  %771 = bitcast <2 x i64>* %770 to %struct.__storeu_si128*
  %__v.i2276 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %771, i32 0, i32 0
  store <2 x i64> %769, <2 x i64>* %__v.i2276, align 1
  %772 = load i8*, i8** %dst.addr, align 8
  %add.ptr447 = getelementptr inbounds i8, i8* %772, i64 48
  %773 = bitcast i8* %add.ptr447 to <2 x i64>*
  %774 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %775 = bitcast <2 x i64> %774 to <16 x i8>
  %776 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %777 = bitcast <2 x i64> %776 to <16 x i8>
  %palignr448 = shufflevector <16 x i8> %777, <16 x i8> %775, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %778 = bitcast <16 x i8> %palignr448 to <2 x i64>
  store <2 x i64>* %773, <2 x i64>** %__p.addr.i2271, align 8
  store <2 x i64> %778, <2 x i64>* %__b.addr.i2272, align 16
  %779 = load <2 x i64>, <2 x i64>* %__b.addr.i2272, align 16
  %780 = load <2 x i64>*, <2 x i64>** %__p.addr.i2271, align 8
  %781 = bitcast <2 x i64>* %780 to %struct.__storeu_si128*
  %__v.i2273 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %781, i32 0, i32 0
  store <2 x i64> %779, <2 x i64>* %__v.i2273, align 1
  %782 = load i8*, i8** %dst.addr, align 8
  %add.ptr449 = getelementptr inbounds i8, i8* %782, i64 64
  %783 = bitcast i8* %add.ptr449 to <2 x i64>*
  %784 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %785 = bitcast <2 x i64> %784 to <16 x i8>
  %786 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %787 = bitcast <2 x i64> %786 to <16 x i8>
  %palignr450 = shufflevector <16 x i8> %787, <16 x i8> %785, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %788 = bitcast <16 x i8> %palignr450 to <2 x i64>
  store <2 x i64>* %783, <2 x i64>** %__p.addr.i2268, align 8
  store <2 x i64> %788, <2 x i64>* %__b.addr.i2269, align 16
  %789 = load <2 x i64>, <2 x i64>* %__b.addr.i2269, align 16
  %790 = load <2 x i64>*, <2 x i64>** %__p.addr.i2268, align 8
  %791 = bitcast <2 x i64>* %790 to %struct.__storeu_si128*
  %__v.i2270 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %791, i32 0, i32 0
  store <2 x i64> %789, <2 x i64>* %__v.i2270, align 1
  %792 = load i8*, i8** %dst.addr, align 8
  %add.ptr451 = getelementptr inbounds i8, i8* %792, i64 80
  %793 = bitcast i8* %add.ptr451 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %795 = bitcast <2 x i64> %794 to <16 x i8>
  %796 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %797 = bitcast <2 x i64> %796 to <16 x i8>
  %palignr452 = shufflevector <16 x i8> %797, <16 x i8> %795, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %798 = bitcast <16 x i8> %palignr452 to <2 x i64>
  store <2 x i64>* %793, <2 x i64>** %__p.addr.i2265, align 8
  store <2 x i64> %798, <2 x i64>* %__b.addr.i2266, align 16
  %799 = load <2 x i64>, <2 x i64>* %__b.addr.i2266, align 16
  %800 = load <2 x i64>*, <2 x i64>** %__p.addr.i2265, align 8
  %801 = bitcast <2 x i64>* %800 to %struct.__storeu_si128*
  %__v.i2267 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %801, i32 0, i32 0
  store <2 x i64> %799, <2 x i64>* %__v.i2267, align 1
  %802 = load i8*, i8** %dst.addr, align 8
  %add.ptr453 = getelementptr inbounds i8, i8* %802, i64 96
  %803 = bitcast i8* %add.ptr453 to <2 x i64>*
  %804 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %805 = bitcast <2 x i64> %804 to <16 x i8>
  %806 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %807 = bitcast <2 x i64> %806 to <16 x i8>
  %palignr454 = shufflevector <16 x i8> %807, <16 x i8> %805, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %808 = bitcast <16 x i8> %palignr454 to <2 x i64>
  store <2 x i64>* %803, <2 x i64>** %__p.addr.i2262, align 8
  store <2 x i64> %808, <2 x i64>* %__b.addr.i2263, align 16
  %809 = load <2 x i64>, <2 x i64>* %__b.addr.i2263, align 16
  %810 = load <2 x i64>*, <2 x i64>** %__p.addr.i2262, align 8
  %811 = bitcast <2 x i64>* %810 to %struct.__storeu_si128*
  %__v.i2264 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %811, i32 0, i32 0
  store <2 x i64> %809, <2 x i64>* %__v.i2264, align 1
  %812 = load i8*, i8** %dst.addr, align 8
  %add.ptr455 = getelementptr inbounds i8, i8* %812, i64 112
  %813 = bitcast i8* %add.ptr455 to <2 x i64>*
  %814 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %815 = bitcast <2 x i64> %814 to <16 x i8>
  %816 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %817 = bitcast <2 x i64> %816 to <16 x i8>
  %palignr456 = shufflevector <16 x i8> %817, <16 x i8> %815, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %818 = bitcast <16 x i8> %palignr456 to <2 x i64>
  store <2 x i64>* %813, <2 x i64>** %__p.addr.i2259, align 8
  store <2 x i64> %818, <2 x i64>* %__b.addr.i2260, align 16
  %819 = load <2 x i64>, <2 x i64>* %__b.addr.i2260, align 16
  %820 = load <2 x i64>*, <2 x i64>** %__p.addr.i2259, align 8
  %821 = bitcast <2 x i64>* %820 to %struct.__storeu_si128*
  %__v.i2261 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %821, i32 0, i32 0
  store <2 x i64> %819, <2 x i64>* %__v.i2261, align 1
  %822 = load i8*, i8** %dst.addr, align 8
  %add.ptr457 = getelementptr inbounds i8, i8* %822, i64 128
  store i8* %add.ptr457, i8** %dst.addr, align 8
  br label %while.cond408

while.end458:                                     ; preds = %while.cond408
  %823 = load i64, i64* %n.addr, align 8
  %conv459 = trunc i64 %823 to i32
  store i32 %conv459, i32* %tmp407, align 4
  %824 = load i64, i64* %n.addr, align 8
  %sub460 = sub i64 %824, 16
  %add461 = add i64 %sub460, 4
  %and462 = and i64 %add461, 127
  %add463 = add i64 %and462, 16
  %sub464 = sub i64 %add463, 4
  store i64 %sub464, i64* %n.addr, align 8
  %825 = load i64, i64* %n.addr, align 8
  %826 = load i32, i32* %tmp407, align 4
  %conv465 = sext i32 %826 to i64
  %sub466 = sub i64 %conv465, %825
  %conv467 = trunc i64 %sub466 to i32
  store i32 %conv467, i32* %tmp407, align 4
  %827 = load i8*, i8** %src.addr, align 8
  %828 = load i32, i32* %tmp407, align 4
  %idx.ext468 = sext i32 %828 to i64
  %add.ptr469 = getelementptr inbounds i8, i8* %827, i64 %idx.ext468
  store i8* %add.ptr469, i8** %src.addr, align 8
  %829 = load i8*, i8** %dst.addr, align 8
  %830 = load i32, i32* %tmp407, align 4
  %idx.ext470 = sext i32 %830 to i64
  %add.ptr471 = getelementptr inbounds i8, i8* %829, i64 %idx.ext470
  store i8* %add.ptr471, i8** %dst.addr, align 8
  %831 = load i64, i64* %n.addr, align 8
  %cmp472 = icmp uge i64 %831, 44
  br i1 %cmp472, label %if.then474, label %if.end509

if.then474:                                       ; preds = %while.end458
  br label %while.cond475

while.cond475:                                    ; preds = %while.body478, %if.then474
  %832 = load i64, i64* %n.addr, align 8
  %cmp476 = icmp uge i64 %832, 44
  br i1 %cmp476, label %while.body478, label %while.end495

while.body478:                                    ; preds = %while.cond475
  %833 = load i8*, i8** %src.addr, align 8
  %add.ptr479 = getelementptr inbounds i8, i8* %833, i64 -4
  %add.ptr480 = getelementptr inbounds i8, i8* %add.ptr479, i64 0
  %834 = bitcast i8* %add.ptr480 to <2 x i64>*
  store <2 x i64>* %834, <2 x i64>** %__p.addr.i2257, align 8
  %835 = load <2 x i64>*, <2 x i64>** %__p.addr.i2257, align 8
  %836 = bitcast <2 x i64>* %835 to %struct.__loadu_si128*
  %__v.i2258 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %836, i32 0, i32 0
  %837 = load <2 x i64>, <2 x i64>* %__v.i2258, align 1
  store <2 x i64> %837, <2 x i64>* %xmm0, align 16
  %838 = load i64, i64* %n.addr, align 8
  %sub482 = sub i64 %838, 32
  store i64 %sub482, i64* %n.addr, align 8
  %839 = load i8*, i8** %src.addr, align 8
  %add.ptr483 = getelementptr inbounds i8, i8* %839, i64 -4
  %add.ptr484 = getelementptr inbounds i8, i8* %add.ptr483, i64 16
  %840 = bitcast i8* %add.ptr484 to <2 x i64>*
  store <2 x i64>* %840, <2 x i64>** %__p.addr.i2255, align 8
  %841 = load <2 x i64>*, <2 x i64>** %__p.addr.i2255, align 8
  %842 = bitcast <2 x i64>* %841 to %struct.__loadu_si128*
  %__v.i2256 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %842, i32 0, i32 0
  %843 = load <2 x i64>, <2 x i64>* %__v.i2256, align 1
  store <2 x i64> %843, <2 x i64>* %xmm1, align 16
  %844 = load i8*, i8** %src.addr, align 8
  %add.ptr486 = getelementptr inbounds i8, i8* %844, i64 -4
  %add.ptr487 = getelementptr inbounds i8, i8* %add.ptr486, i64 32
  %845 = bitcast i8* %add.ptr487 to <2 x i64>*
  store <2 x i64>* %845, <2 x i64>** %__p.addr.i2253, align 8
  %846 = load <2 x i64>*, <2 x i64>** %__p.addr.i2253, align 8
  %847 = bitcast <2 x i64>* %846 to %struct.__loadu_si128*
  %__v.i2254 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %847, i32 0, i32 0
  %848 = load <2 x i64>, <2 x i64>* %__v.i2254, align 1
  store <2 x i64> %848, <2 x i64>* %xmm2, align 16
  %849 = load i8*, i8** %src.addr, align 8
  %add.ptr489 = getelementptr inbounds i8, i8* %849, i64 32
  store i8* %add.ptr489, i8** %src.addr, align 8
  %850 = load i8*, i8** %dst.addr, align 8
  %add.ptr490 = getelementptr inbounds i8, i8* %850, i64 0
  %851 = bitcast i8* %add.ptr490 to <2 x i64>*
  %852 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %853 = bitcast <2 x i64> %852 to <16 x i8>
  %854 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %855 = bitcast <2 x i64> %854 to <16 x i8>
  %palignr491 = shufflevector <16 x i8> %855, <16 x i8> %853, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %856 = bitcast <16 x i8> %palignr491 to <2 x i64>
  store <2 x i64>* %851, <2 x i64>** %__p.addr.i2250, align 8
  store <2 x i64> %856, <2 x i64>* %__b.addr.i2251, align 16
  %857 = load <2 x i64>, <2 x i64>* %__b.addr.i2251, align 16
  %858 = load <2 x i64>*, <2 x i64>** %__p.addr.i2250, align 8
  %859 = bitcast <2 x i64>* %858 to %struct.__storeu_si128*
  %__v.i2252 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %859, i32 0, i32 0
  store <2 x i64> %857, <2 x i64>* %__v.i2252, align 1
  %860 = load i8*, i8** %dst.addr, align 8
  %add.ptr492 = getelementptr inbounds i8, i8* %860, i64 16
  %861 = bitcast i8* %add.ptr492 to <2 x i64>*
  %862 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %863 = bitcast <2 x i64> %862 to <16 x i8>
  %864 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %865 = bitcast <2 x i64> %864 to <16 x i8>
  %palignr493 = shufflevector <16 x i8> %865, <16 x i8> %863, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %866 = bitcast <16 x i8> %palignr493 to <2 x i64>
  store <2 x i64>* %861, <2 x i64>** %__p.addr.i2247, align 8
  store <2 x i64> %866, <2 x i64>* %__b.addr.i2248, align 16
  %867 = load <2 x i64>, <2 x i64>* %__b.addr.i2248, align 16
  %868 = load <2 x i64>*, <2 x i64>** %__p.addr.i2247, align 8
  %869 = bitcast <2 x i64>* %868 to %struct.__storeu_si128*
  %__v.i2249 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %869, i32 0, i32 0
  store <2 x i64> %867, <2 x i64>* %__v.i2249, align 1
  %870 = load i8*, i8** %dst.addr, align 8
  %add.ptr494 = getelementptr inbounds i8, i8* %870, i64 32
  store i8* %add.ptr494, i8** %dst.addr, align 8
  br label %while.cond475

while.end495:                                     ; preds = %while.cond475
  %871 = load i64, i64* %n.addr, align 8
  %conv496 = trunc i64 %871 to i32
  store i32 %conv496, i32* %tmp407, align 4
  %872 = load i64, i64* %n.addr, align 8
  %sub497 = sub i64 %872, 16
  %add498 = add i64 %sub497, 4
  %and499 = and i64 %add498, 31
  %add500 = add i64 %and499, 16
  %sub501 = sub i64 %add500, 4
  store i64 %sub501, i64* %n.addr, align 8
  %873 = load i64, i64* %n.addr, align 8
  %874 = load i32, i32* %tmp407, align 4
  %conv502 = sext i32 %874 to i64
  %sub503 = sub i64 %conv502, %873
  %conv504 = trunc i64 %sub503 to i32
  store i32 %conv504, i32* %tmp407, align 4
  %875 = load i8*, i8** %src.addr, align 8
  %876 = load i32, i32* %tmp407, align 4
  %idx.ext505 = sext i32 %876 to i64
  %add.ptr506 = getelementptr inbounds i8, i8* %875, i64 %idx.ext505
  store i8* %add.ptr506, i8** %src.addr, align 8
  %877 = load i8*, i8** %dst.addr, align 8
  %878 = load i32, i32* %tmp407, align 4
  %idx.ext507 = sext i32 %878 to i64
  %add.ptr508 = getelementptr inbounds i8, i8* %877, i64 %idx.ext507
  store i8* %add.ptr508, i8** %dst.addr, align 8
  br label %if.end509

if.end509:                                        ; preds = %while.end495, %while.end458
  br label %sw.epilog

sw.bb510:                                         ; preds = %if.end103
  br label %while.cond512

while.cond512:                                    ; preds = %while.body515, %sw.bb510
  %879 = load i64, i64* %n.addr, align 8
  %cmp513 = icmp uge i64 %879, 139
  br i1 %cmp513, label %while.body515, label %while.end562

while.body515:                                    ; preds = %while.cond512
  %880 = load i8*, i8** %src.addr, align 8
  %add.ptr516 = getelementptr inbounds i8, i8* %880, i64 -5
  %add.ptr517 = getelementptr inbounds i8, i8* %add.ptr516, i64 0
  %881 = bitcast i8* %add.ptr517 to <2 x i64>*
  store <2 x i64>* %881, <2 x i64>** %__p.addr.i2245, align 8
  %882 = load <2 x i64>*, <2 x i64>** %__p.addr.i2245, align 8
  %883 = bitcast <2 x i64>* %882 to %struct.__loadu_si128*
  %__v.i2246 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %883, i32 0, i32 0
  %884 = load <2 x i64>, <2 x i64>* %__v.i2246, align 1
  store <2 x i64> %884, <2 x i64>* %xmm0, align 16
  %885 = load i64, i64* %n.addr, align 8
  %sub519 = sub i64 %885, 128
  store i64 %sub519, i64* %n.addr, align 8
  %886 = load i8*, i8** %src.addr, align 8
  %add.ptr520 = getelementptr inbounds i8, i8* %886, i64 -5
  %add.ptr521 = getelementptr inbounds i8, i8* %add.ptr520, i64 16
  %887 = bitcast i8* %add.ptr521 to <2 x i64>*
  store <2 x i64>* %887, <2 x i64>** %__p.addr.i2243, align 8
  %888 = load <2 x i64>*, <2 x i64>** %__p.addr.i2243, align 8
  %889 = bitcast <2 x i64>* %888 to %struct.__loadu_si128*
  %__v.i2244 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %889, i32 0, i32 0
  %890 = load <2 x i64>, <2 x i64>* %__v.i2244, align 1
  store <2 x i64> %890, <2 x i64>* %xmm1, align 16
  %891 = load i8*, i8** %src.addr, align 8
  %add.ptr523 = getelementptr inbounds i8, i8* %891, i64 -5
  %add.ptr524 = getelementptr inbounds i8, i8* %add.ptr523, i64 32
  %892 = bitcast i8* %add.ptr524 to <2 x i64>*
  store <2 x i64>* %892, <2 x i64>** %__p.addr.i2241, align 8
  %893 = load <2 x i64>*, <2 x i64>** %__p.addr.i2241, align 8
  %894 = bitcast <2 x i64>* %893 to %struct.__loadu_si128*
  %__v.i2242 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %894, i32 0, i32 0
  %895 = load <2 x i64>, <2 x i64>* %__v.i2242, align 1
  store <2 x i64> %895, <2 x i64>* %xmm2, align 16
  %896 = load i8*, i8** %src.addr, align 8
  %add.ptr526 = getelementptr inbounds i8, i8* %896, i64 -5
  %add.ptr527 = getelementptr inbounds i8, i8* %add.ptr526, i64 48
  %897 = bitcast i8* %add.ptr527 to <2 x i64>*
  store <2 x i64>* %897, <2 x i64>** %__p.addr.i2239, align 8
  %898 = load <2 x i64>*, <2 x i64>** %__p.addr.i2239, align 8
  %899 = bitcast <2 x i64>* %898 to %struct.__loadu_si128*
  %__v.i2240 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %899, i32 0, i32 0
  %900 = load <2 x i64>, <2 x i64>* %__v.i2240, align 1
  store <2 x i64> %900, <2 x i64>* %xmm3, align 16
  %901 = load i8*, i8** %src.addr, align 8
  %add.ptr529 = getelementptr inbounds i8, i8* %901, i64 -5
  %add.ptr530 = getelementptr inbounds i8, i8* %add.ptr529, i64 64
  %902 = bitcast i8* %add.ptr530 to <2 x i64>*
  store <2 x i64>* %902, <2 x i64>** %__p.addr.i2237, align 8
  %903 = load <2 x i64>*, <2 x i64>** %__p.addr.i2237, align 8
  %904 = bitcast <2 x i64>* %903 to %struct.__loadu_si128*
  %__v.i2238 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %904, i32 0, i32 0
  %905 = load <2 x i64>, <2 x i64>* %__v.i2238, align 1
  store <2 x i64> %905, <2 x i64>* %xmm4, align 16
  %906 = load i8*, i8** %src.addr, align 8
  %add.ptr532 = getelementptr inbounds i8, i8* %906, i64 -5
  %add.ptr533 = getelementptr inbounds i8, i8* %add.ptr532, i64 80
  %907 = bitcast i8* %add.ptr533 to <2 x i64>*
  store <2 x i64>* %907, <2 x i64>** %__p.addr.i2235, align 8
  %908 = load <2 x i64>*, <2 x i64>** %__p.addr.i2235, align 8
  %909 = bitcast <2 x i64>* %908 to %struct.__loadu_si128*
  %__v.i2236 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %909, i32 0, i32 0
  %910 = load <2 x i64>, <2 x i64>* %__v.i2236, align 1
  store <2 x i64> %910, <2 x i64>* %xmm5, align 16
  %911 = load i8*, i8** %src.addr, align 8
  %add.ptr535 = getelementptr inbounds i8, i8* %911, i64 -5
  %add.ptr536 = getelementptr inbounds i8, i8* %add.ptr535, i64 96
  %912 = bitcast i8* %add.ptr536 to <2 x i64>*
  store <2 x i64>* %912, <2 x i64>** %__p.addr.i2233, align 8
  %913 = load <2 x i64>*, <2 x i64>** %__p.addr.i2233, align 8
  %914 = bitcast <2 x i64>* %913 to %struct.__loadu_si128*
  %__v.i2234 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %914, i32 0, i32 0
  %915 = load <2 x i64>, <2 x i64>* %__v.i2234, align 1
  store <2 x i64> %915, <2 x i64>* %xmm6, align 16
  %916 = load i8*, i8** %src.addr, align 8
  %add.ptr538 = getelementptr inbounds i8, i8* %916, i64 -5
  %add.ptr539 = getelementptr inbounds i8, i8* %add.ptr538, i64 112
  %917 = bitcast i8* %add.ptr539 to <2 x i64>*
  store <2 x i64>* %917, <2 x i64>** %__p.addr.i2231, align 8
  %918 = load <2 x i64>*, <2 x i64>** %__p.addr.i2231, align 8
  %919 = bitcast <2 x i64>* %918 to %struct.__loadu_si128*
  %__v.i2232 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %919, i32 0, i32 0
  %920 = load <2 x i64>, <2 x i64>* %__v.i2232, align 1
  store <2 x i64> %920, <2 x i64>* %xmm7, align 16
  %921 = load i8*, i8** %src.addr, align 8
  %add.ptr541 = getelementptr inbounds i8, i8* %921, i64 -5
  %add.ptr542 = getelementptr inbounds i8, i8* %add.ptr541, i64 128
  %922 = bitcast i8* %add.ptr542 to <2 x i64>*
  store <2 x i64>* %922, <2 x i64>** %__p.addr.i2229, align 8
  %923 = load <2 x i64>*, <2 x i64>** %__p.addr.i2229, align 8
  %924 = bitcast <2 x i64>* %923 to %struct.__loadu_si128*
  %__v.i2230 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %924, i32 0, i32 0
  %925 = load <2 x i64>, <2 x i64>* %__v.i2230, align 1
  store <2 x i64> %925, <2 x i64>* %xmm8, align 16
  %926 = load i8*, i8** %src.addr, align 8
  %add.ptr544 = getelementptr inbounds i8, i8* %926, i64 128
  store i8* %add.ptr544, i8** %src.addr, align 8
  %927 = load i8*, i8** %dst.addr, align 8
  %add.ptr545 = getelementptr inbounds i8, i8* %927, i64 0
  %928 = bitcast i8* %add.ptr545 to <2 x i64>*
  %929 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %930 = bitcast <2 x i64> %929 to <16 x i8>
  %931 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %932 = bitcast <2 x i64> %931 to <16 x i8>
  %palignr546 = shufflevector <16 x i8> %932, <16 x i8> %930, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %933 = bitcast <16 x i8> %palignr546 to <2 x i64>
  store <2 x i64>* %928, <2 x i64>** %__p.addr.i2226, align 8
  store <2 x i64> %933, <2 x i64>* %__b.addr.i2227, align 16
  %934 = load <2 x i64>, <2 x i64>* %__b.addr.i2227, align 16
  %935 = load <2 x i64>*, <2 x i64>** %__p.addr.i2226, align 8
  %936 = bitcast <2 x i64>* %935 to %struct.__storeu_si128*
  %__v.i2228 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %936, i32 0, i32 0
  store <2 x i64> %934, <2 x i64>* %__v.i2228, align 1
  %937 = load i8*, i8** %dst.addr, align 8
  %add.ptr547 = getelementptr inbounds i8, i8* %937, i64 16
  %938 = bitcast i8* %add.ptr547 to <2 x i64>*
  %939 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %940 = bitcast <2 x i64> %939 to <16 x i8>
  %941 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %942 = bitcast <2 x i64> %941 to <16 x i8>
  %palignr548 = shufflevector <16 x i8> %942, <16 x i8> %940, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %943 = bitcast <16 x i8> %palignr548 to <2 x i64>
  store <2 x i64>* %938, <2 x i64>** %__p.addr.i2223, align 8
  store <2 x i64> %943, <2 x i64>* %__b.addr.i2224, align 16
  %944 = load <2 x i64>, <2 x i64>* %__b.addr.i2224, align 16
  %945 = load <2 x i64>*, <2 x i64>** %__p.addr.i2223, align 8
  %946 = bitcast <2 x i64>* %945 to %struct.__storeu_si128*
  %__v.i2225 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %946, i32 0, i32 0
  store <2 x i64> %944, <2 x i64>* %__v.i2225, align 1
  %947 = load i8*, i8** %dst.addr, align 8
  %add.ptr549 = getelementptr inbounds i8, i8* %947, i64 32
  %948 = bitcast i8* %add.ptr549 to <2 x i64>*
  %949 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %950 = bitcast <2 x i64> %949 to <16 x i8>
  %951 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %952 = bitcast <2 x i64> %951 to <16 x i8>
  %palignr550 = shufflevector <16 x i8> %952, <16 x i8> %950, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %953 = bitcast <16 x i8> %palignr550 to <2 x i64>
  store <2 x i64>* %948, <2 x i64>** %__p.addr.i2220, align 8
  store <2 x i64> %953, <2 x i64>* %__b.addr.i2221, align 16
  %954 = load <2 x i64>, <2 x i64>* %__b.addr.i2221, align 16
  %955 = load <2 x i64>*, <2 x i64>** %__p.addr.i2220, align 8
  %956 = bitcast <2 x i64>* %955 to %struct.__storeu_si128*
  %__v.i2222 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %956, i32 0, i32 0
  store <2 x i64> %954, <2 x i64>* %__v.i2222, align 1
  %957 = load i8*, i8** %dst.addr, align 8
  %add.ptr551 = getelementptr inbounds i8, i8* %957, i64 48
  %958 = bitcast i8* %add.ptr551 to <2 x i64>*
  %959 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %960 = bitcast <2 x i64> %959 to <16 x i8>
  %961 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %962 = bitcast <2 x i64> %961 to <16 x i8>
  %palignr552 = shufflevector <16 x i8> %962, <16 x i8> %960, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %963 = bitcast <16 x i8> %palignr552 to <2 x i64>
  store <2 x i64>* %958, <2 x i64>** %__p.addr.i2217, align 8
  store <2 x i64> %963, <2 x i64>* %__b.addr.i2218, align 16
  %964 = load <2 x i64>, <2 x i64>* %__b.addr.i2218, align 16
  %965 = load <2 x i64>*, <2 x i64>** %__p.addr.i2217, align 8
  %966 = bitcast <2 x i64>* %965 to %struct.__storeu_si128*
  %__v.i2219 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %966, i32 0, i32 0
  store <2 x i64> %964, <2 x i64>* %__v.i2219, align 1
  %967 = load i8*, i8** %dst.addr, align 8
  %add.ptr553 = getelementptr inbounds i8, i8* %967, i64 64
  %968 = bitcast i8* %add.ptr553 to <2 x i64>*
  %969 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %970 = bitcast <2 x i64> %969 to <16 x i8>
  %971 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %972 = bitcast <2 x i64> %971 to <16 x i8>
  %palignr554 = shufflevector <16 x i8> %972, <16 x i8> %970, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %973 = bitcast <16 x i8> %palignr554 to <2 x i64>
  store <2 x i64>* %968, <2 x i64>** %__p.addr.i2214, align 8
  store <2 x i64> %973, <2 x i64>* %__b.addr.i2215, align 16
  %974 = load <2 x i64>, <2 x i64>* %__b.addr.i2215, align 16
  %975 = load <2 x i64>*, <2 x i64>** %__p.addr.i2214, align 8
  %976 = bitcast <2 x i64>* %975 to %struct.__storeu_si128*
  %__v.i2216 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %976, i32 0, i32 0
  store <2 x i64> %974, <2 x i64>* %__v.i2216, align 1
  %977 = load i8*, i8** %dst.addr, align 8
  %add.ptr555 = getelementptr inbounds i8, i8* %977, i64 80
  %978 = bitcast i8* %add.ptr555 to <2 x i64>*
  %979 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %980 = bitcast <2 x i64> %979 to <16 x i8>
  %981 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %982 = bitcast <2 x i64> %981 to <16 x i8>
  %palignr556 = shufflevector <16 x i8> %982, <16 x i8> %980, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %983 = bitcast <16 x i8> %palignr556 to <2 x i64>
  store <2 x i64>* %978, <2 x i64>** %__p.addr.i2211, align 8
  store <2 x i64> %983, <2 x i64>* %__b.addr.i2212, align 16
  %984 = load <2 x i64>, <2 x i64>* %__b.addr.i2212, align 16
  %985 = load <2 x i64>*, <2 x i64>** %__p.addr.i2211, align 8
  %986 = bitcast <2 x i64>* %985 to %struct.__storeu_si128*
  %__v.i2213 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %986, i32 0, i32 0
  store <2 x i64> %984, <2 x i64>* %__v.i2213, align 1
  %987 = load i8*, i8** %dst.addr, align 8
  %add.ptr557 = getelementptr inbounds i8, i8* %987, i64 96
  %988 = bitcast i8* %add.ptr557 to <2 x i64>*
  %989 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %990 = bitcast <2 x i64> %989 to <16 x i8>
  %991 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %992 = bitcast <2 x i64> %991 to <16 x i8>
  %palignr558 = shufflevector <16 x i8> %992, <16 x i8> %990, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %993 = bitcast <16 x i8> %palignr558 to <2 x i64>
  store <2 x i64>* %988, <2 x i64>** %__p.addr.i2208, align 8
  store <2 x i64> %993, <2 x i64>* %__b.addr.i2209, align 16
  %994 = load <2 x i64>, <2 x i64>* %__b.addr.i2209, align 16
  %995 = load <2 x i64>*, <2 x i64>** %__p.addr.i2208, align 8
  %996 = bitcast <2 x i64>* %995 to %struct.__storeu_si128*
  %__v.i2210 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %996, i32 0, i32 0
  store <2 x i64> %994, <2 x i64>* %__v.i2210, align 1
  %997 = load i8*, i8** %dst.addr, align 8
  %add.ptr559 = getelementptr inbounds i8, i8* %997, i64 112
  %998 = bitcast i8* %add.ptr559 to <2 x i64>*
  %999 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1000 = bitcast <2 x i64> %999 to <16 x i8>
  %1001 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1002 = bitcast <2 x i64> %1001 to <16 x i8>
  %palignr560 = shufflevector <16 x i8> %1002, <16 x i8> %1000, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %1003 = bitcast <16 x i8> %palignr560 to <2 x i64>
  store <2 x i64>* %998, <2 x i64>** %__p.addr.i2205, align 8
  store <2 x i64> %1003, <2 x i64>* %__b.addr.i2206, align 16
  %1004 = load <2 x i64>, <2 x i64>* %__b.addr.i2206, align 16
  %1005 = load <2 x i64>*, <2 x i64>** %__p.addr.i2205, align 8
  %1006 = bitcast <2 x i64>* %1005 to %struct.__storeu_si128*
  %__v.i2207 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1006, i32 0, i32 0
  store <2 x i64> %1004, <2 x i64>* %__v.i2207, align 1
  %1007 = load i8*, i8** %dst.addr, align 8
  %add.ptr561 = getelementptr inbounds i8, i8* %1007, i64 128
  store i8* %add.ptr561, i8** %dst.addr, align 8
  br label %while.cond512

while.end562:                                     ; preds = %while.cond512
  %1008 = load i64, i64* %n.addr, align 8
  %conv563 = trunc i64 %1008 to i32
  store i32 %conv563, i32* %tmp511, align 4
  %1009 = load i64, i64* %n.addr, align 8
  %sub564 = sub i64 %1009, 16
  %add565 = add i64 %sub564, 5
  %and566 = and i64 %add565, 127
  %add567 = add i64 %and566, 16
  %sub568 = sub i64 %add567, 5
  store i64 %sub568, i64* %n.addr, align 8
  %1010 = load i64, i64* %n.addr, align 8
  %1011 = load i32, i32* %tmp511, align 4
  %conv569 = sext i32 %1011 to i64
  %sub570 = sub i64 %conv569, %1010
  %conv571 = trunc i64 %sub570 to i32
  store i32 %conv571, i32* %tmp511, align 4
  %1012 = load i8*, i8** %src.addr, align 8
  %1013 = load i32, i32* %tmp511, align 4
  %idx.ext572 = sext i32 %1013 to i64
  %add.ptr573 = getelementptr inbounds i8, i8* %1012, i64 %idx.ext572
  store i8* %add.ptr573, i8** %src.addr, align 8
  %1014 = load i8*, i8** %dst.addr, align 8
  %1015 = load i32, i32* %tmp511, align 4
  %idx.ext574 = sext i32 %1015 to i64
  %add.ptr575 = getelementptr inbounds i8, i8* %1014, i64 %idx.ext574
  store i8* %add.ptr575, i8** %dst.addr, align 8
  %1016 = load i64, i64* %n.addr, align 8
  %cmp576 = icmp uge i64 %1016, 43
  br i1 %cmp576, label %if.then578, label %if.end613

if.then578:                                       ; preds = %while.end562
  br label %while.cond579

while.cond579:                                    ; preds = %while.body582, %if.then578
  %1017 = load i64, i64* %n.addr, align 8
  %cmp580 = icmp uge i64 %1017, 43
  br i1 %cmp580, label %while.body582, label %while.end599

while.body582:                                    ; preds = %while.cond579
  %1018 = load i8*, i8** %src.addr, align 8
  %add.ptr583 = getelementptr inbounds i8, i8* %1018, i64 -5
  %add.ptr584 = getelementptr inbounds i8, i8* %add.ptr583, i64 0
  %1019 = bitcast i8* %add.ptr584 to <2 x i64>*
  store <2 x i64>* %1019, <2 x i64>** %__p.addr.i2203, align 8
  %1020 = load <2 x i64>*, <2 x i64>** %__p.addr.i2203, align 8
  %1021 = bitcast <2 x i64>* %1020 to %struct.__loadu_si128*
  %__v.i2204 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1021, i32 0, i32 0
  %1022 = load <2 x i64>, <2 x i64>* %__v.i2204, align 1
  store <2 x i64> %1022, <2 x i64>* %xmm0, align 16
  %1023 = load i64, i64* %n.addr, align 8
  %sub586 = sub i64 %1023, 32
  store i64 %sub586, i64* %n.addr, align 8
  %1024 = load i8*, i8** %src.addr, align 8
  %add.ptr587 = getelementptr inbounds i8, i8* %1024, i64 -5
  %add.ptr588 = getelementptr inbounds i8, i8* %add.ptr587, i64 16
  %1025 = bitcast i8* %add.ptr588 to <2 x i64>*
  store <2 x i64>* %1025, <2 x i64>** %__p.addr.i2201, align 8
  %1026 = load <2 x i64>*, <2 x i64>** %__p.addr.i2201, align 8
  %1027 = bitcast <2 x i64>* %1026 to %struct.__loadu_si128*
  %__v.i2202 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1027, i32 0, i32 0
  %1028 = load <2 x i64>, <2 x i64>* %__v.i2202, align 1
  store <2 x i64> %1028, <2 x i64>* %xmm1, align 16
  %1029 = load i8*, i8** %src.addr, align 8
  %add.ptr590 = getelementptr inbounds i8, i8* %1029, i64 -5
  %add.ptr591 = getelementptr inbounds i8, i8* %add.ptr590, i64 32
  %1030 = bitcast i8* %add.ptr591 to <2 x i64>*
  store <2 x i64>* %1030, <2 x i64>** %__p.addr.i2199, align 8
  %1031 = load <2 x i64>*, <2 x i64>** %__p.addr.i2199, align 8
  %1032 = bitcast <2 x i64>* %1031 to %struct.__loadu_si128*
  %__v.i2200 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1032, i32 0, i32 0
  %1033 = load <2 x i64>, <2 x i64>* %__v.i2200, align 1
  store <2 x i64> %1033, <2 x i64>* %xmm2, align 16
  %1034 = load i8*, i8** %src.addr, align 8
  %add.ptr593 = getelementptr inbounds i8, i8* %1034, i64 32
  store i8* %add.ptr593, i8** %src.addr, align 8
  %1035 = load i8*, i8** %dst.addr, align 8
  %add.ptr594 = getelementptr inbounds i8, i8* %1035, i64 0
  %1036 = bitcast i8* %add.ptr594 to <2 x i64>*
  %1037 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1038 = bitcast <2 x i64> %1037 to <16 x i8>
  %1039 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1040 = bitcast <2 x i64> %1039 to <16 x i8>
  %palignr595 = shufflevector <16 x i8> %1040, <16 x i8> %1038, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %1041 = bitcast <16 x i8> %palignr595 to <2 x i64>
  store <2 x i64>* %1036, <2 x i64>** %__p.addr.i2196, align 8
  store <2 x i64> %1041, <2 x i64>* %__b.addr.i2197, align 16
  %1042 = load <2 x i64>, <2 x i64>* %__b.addr.i2197, align 16
  %1043 = load <2 x i64>*, <2 x i64>** %__p.addr.i2196, align 8
  %1044 = bitcast <2 x i64>* %1043 to %struct.__storeu_si128*
  %__v.i2198 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1044, i32 0, i32 0
  store <2 x i64> %1042, <2 x i64>* %__v.i2198, align 1
  %1045 = load i8*, i8** %dst.addr, align 8
  %add.ptr596 = getelementptr inbounds i8, i8* %1045, i64 16
  %1046 = bitcast i8* %add.ptr596 to <2 x i64>*
  %1047 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1048 = bitcast <2 x i64> %1047 to <16 x i8>
  %1049 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1050 = bitcast <2 x i64> %1049 to <16 x i8>
  %palignr597 = shufflevector <16 x i8> %1050, <16 x i8> %1048, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %1051 = bitcast <16 x i8> %palignr597 to <2 x i64>
  store <2 x i64>* %1046, <2 x i64>** %__p.addr.i2193, align 8
  store <2 x i64> %1051, <2 x i64>* %__b.addr.i2194, align 16
  %1052 = load <2 x i64>, <2 x i64>* %__b.addr.i2194, align 16
  %1053 = load <2 x i64>*, <2 x i64>** %__p.addr.i2193, align 8
  %1054 = bitcast <2 x i64>* %1053 to %struct.__storeu_si128*
  %__v.i2195 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1054, i32 0, i32 0
  store <2 x i64> %1052, <2 x i64>* %__v.i2195, align 1
  %1055 = load i8*, i8** %dst.addr, align 8
  %add.ptr598 = getelementptr inbounds i8, i8* %1055, i64 32
  store i8* %add.ptr598, i8** %dst.addr, align 8
  br label %while.cond579

while.end599:                                     ; preds = %while.cond579
  %1056 = load i64, i64* %n.addr, align 8
  %conv600 = trunc i64 %1056 to i32
  store i32 %conv600, i32* %tmp511, align 4
  %1057 = load i64, i64* %n.addr, align 8
  %sub601 = sub i64 %1057, 16
  %add602 = add i64 %sub601, 5
  %and603 = and i64 %add602, 31
  %add604 = add i64 %and603, 16
  %sub605 = sub i64 %add604, 5
  store i64 %sub605, i64* %n.addr, align 8
  %1058 = load i64, i64* %n.addr, align 8
  %1059 = load i32, i32* %tmp511, align 4
  %conv606 = sext i32 %1059 to i64
  %sub607 = sub i64 %conv606, %1058
  %conv608 = trunc i64 %sub607 to i32
  store i32 %conv608, i32* %tmp511, align 4
  %1060 = load i8*, i8** %src.addr, align 8
  %1061 = load i32, i32* %tmp511, align 4
  %idx.ext609 = sext i32 %1061 to i64
  %add.ptr610 = getelementptr inbounds i8, i8* %1060, i64 %idx.ext609
  store i8* %add.ptr610, i8** %src.addr, align 8
  %1062 = load i8*, i8** %dst.addr, align 8
  %1063 = load i32, i32* %tmp511, align 4
  %idx.ext611 = sext i32 %1063 to i64
  %add.ptr612 = getelementptr inbounds i8, i8* %1062, i64 %idx.ext611
  store i8* %add.ptr612, i8** %dst.addr, align 8
  br label %if.end613

if.end613:                                        ; preds = %while.end599, %while.end562
  br label %sw.epilog

sw.bb614:                                         ; preds = %if.end103
  br label %while.cond616

while.cond616:                                    ; preds = %while.body619, %sw.bb614
  %1064 = load i64, i64* %n.addr, align 8
  %cmp617 = icmp uge i64 %1064, 138
  br i1 %cmp617, label %while.body619, label %while.end666

while.body619:                                    ; preds = %while.cond616
  %1065 = load i8*, i8** %src.addr, align 8
  %add.ptr620 = getelementptr inbounds i8, i8* %1065, i64 -6
  %add.ptr621 = getelementptr inbounds i8, i8* %add.ptr620, i64 0
  %1066 = bitcast i8* %add.ptr621 to <2 x i64>*
  store <2 x i64>* %1066, <2 x i64>** %__p.addr.i2191, align 8
  %1067 = load <2 x i64>*, <2 x i64>** %__p.addr.i2191, align 8
  %1068 = bitcast <2 x i64>* %1067 to %struct.__loadu_si128*
  %__v.i2192 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1068, i32 0, i32 0
  %1069 = load <2 x i64>, <2 x i64>* %__v.i2192, align 1
  store <2 x i64> %1069, <2 x i64>* %xmm0, align 16
  %1070 = load i64, i64* %n.addr, align 8
  %sub623 = sub i64 %1070, 128
  store i64 %sub623, i64* %n.addr, align 8
  %1071 = load i8*, i8** %src.addr, align 8
  %add.ptr624 = getelementptr inbounds i8, i8* %1071, i64 -6
  %add.ptr625 = getelementptr inbounds i8, i8* %add.ptr624, i64 16
  %1072 = bitcast i8* %add.ptr625 to <2 x i64>*
  store <2 x i64>* %1072, <2 x i64>** %__p.addr.i2189, align 8
  %1073 = load <2 x i64>*, <2 x i64>** %__p.addr.i2189, align 8
  %1074 = bitcast <2 x i64>* %1073 to %struct.__loadu_si128*
  %__v.i2190 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1074, i32 0, i32 0
  %1075 = load <2 x i64>, <2 x i64>* %__v.i2190, align 1
  store <2 x i64> %1075, <2 x i64>* %xmm1, align 16
  %1076 = load i8*, i8** %src.addr, align 8
  %add.ptr627 = getelementptr inbounds i8, i8* %1076, i64 -6
  %add.ptr628 = getelementptr inbounds i8, i8* %add.ptr627, i64 32
  %1077 = bitcast i8* %add.ptr628 to <2 x i64>*
  store <2 x i64>* %1077, <2 x i64>** %__p.addr.i2187, align 8
  %1078 = load <2 x i64>*, <2 x i64>** %__p.addr.i2187, align 8
  %1079 = bitcast <2 x i64>* %1078 to %struct.__loadu_si128*
  %__v.i2188 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1079, i32 0, i32 0
  %1080 = load <2 x i64>, <2 x i64>* %__v.i2188, align 1
  store <2 x i64> %1080, <2 x i64>* %xmm2, align 16
  %1081 = load i8*, i8** %src.addr, align 8
  %add.ptr630 = getelementptr inbounds i8, i8* %1081, i64 -6
  %add.ptr631 = getelementptr inbounds i8, i8* %add.ptr630, i64 48
  %1082 = bitcast i8* %add.ptr631 to <2 x i64>*
  store <2 x i64>* %1082, <2 x i64>** %__p.addr.i2185, align 8
  %1083 = load <2 x i64>*, <2 x i64>** %__p.addr.i2185, align 8
  %1084 = bitcast <2 x i64>* %1083 to %struct.__loadu_si128*
  %__v.i2186 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1084, i32 0, i32 0
  %1085 = load <2 x i64>, <2 x i64>* %__v.i2186, align 1
  store <2 x i64> %1085, <2 x i64>* %xmm3, align 16
  %1086 = load i8*, i8** %src.addr, align 8
  %add.ptr633 = getelementptr inbounds i8, i8* %1086, i64 -6
  %add.ptr634 = getelementptr inbounds i8, i8* %add.ptr633, i64 64
  %1087 = bitcast i8* %add.ptr634 to <2 x i64>*
  store <2 x i64>* %1087, <2 x i64>** %__p.addr.i2183, align 8
  %1088 = load <2 x i64>*, <2 x i64>** %__p.addr.i2183, align 8
  %1089 = bitcast <2 x i64>* %1088 to %struct.__loadu_si128*
  %__v.i2184 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1089, i32 0, i32 0
  %1090 = load <2 x i64>, <2 x i64>* %__v.i2184, align 1
  store <2 x i64> %1090, <2 x i64>* %xmm4, align 16
  %1091 = load i8*, i8** %src.addr, align 8
  %add.ptr636 = getelementptr inbounds i8, i8* %1091, i64 -6
  %add.ptr637 = getelementptr inbounds i8, i8* %add.ptr636, i64 80
  %1092 = bitcast i8* %add.ptr637 to <2 x i64>*
  store <2 x i64>* %1092, <2 x i64>** %__p.addr.i2181, align 8
  %1093 = load <2 x i64>*, <2 x i64>** %__p.addr.i2181, align 8
  %1094 = bitcast <2 x i64>* %1093 to %struct.__loadu_si128*
  %__v.i2182 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1094, i32 0, i32 0
  %1095 = load <2 x i64>, <2 x i64>* %__v.i2182, align 1
  store <2 x i64> %1095, <2 x i64>* %xmm5, align 16
  %1096 = load i8*, i8** %src.addr, align 8
  %add.ptr639 = getelementptr inbounds i8, i8* %1096, i64 -6
  %add.ptr640 = getelementptr inbounds i8, i8* %add.ptr639, i64 96
  %1097 = bitcast i8* %add.ptr640 to <2 x i64>*
  store <2 x i64>* %1097, <2 x i64>** %__p.addr.i2179, align 8
  %1098 = load <2 x i64>*, <2 x i64>** %__p.addr.i2179, align 8
  %1099 = bitcast <2 x i64>* %1098 to %struct.__loadu_si128*
  %__v.i2180 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1099, i32 0, i32 0
  %1100 = load <2 x i64>, <2 x i64>* %__v.i2180, align 1
  store <2 x i64> %1100, <2 x i64>* %xmm6, align 16
  %1101 = load i8*, i8** %src.addr, align 8
  %add.ptr642 = getelementptr inbounds i8, i8* %1101, i64 -6
  %add.ptr643 = getelementptr inbounds i8, i8* %add.ptr642, i64 112
  %1102 = bitcast i8* %add.ptr643 to <2 x i64>*
  store <2 x i64>* %1102, <2 x i64>** %__p.addr.i2177, align 8
  %1103 = load <2 x i64>*, <2 x i64>** %__p.addr.i2177, align 8
  %1104 = bitcast <2 x i64>* %1103 to %struct.__loadu_si128*
  %__v.i2178 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1104, i32 0, i32 0
  %1105 = load <2 x i64>, <2 x i64>* %__v.i2178, align 1
  store <2 x i64> %1105, <2 x i64>* %xmm7, align 16
  %1106 = load i8*, i8** %src.addr, align 8
  %add.ptr645 = getelementptr inbounds i8, i8* %1106, i64 -6
  %add.ptr646 = getelementptr inbounds i8, i8* %add.ptr645, i64 128
  %1107 = bitcast i8* %add.ptr646 to <2 x i64>*
  store <2 x i64>* %1107, <2 x i64>** %__p.addr.i2175, align 8
  %1108 = load <2 x i64>*, <2 x i64>** %__p.addr.i2175, align 8
  %1109 = bitcast <2 x i64>* %1108 to %struct.__loadu_si128*
  %__v.i2176 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1109, i32 0, i32 0
  %1110 = load <2 x i64>, <2 x i64>* %__v.i2176, align 1
  store <2 x i64> %1110, <2 x i64>* %xmm8, align 16
  %1111 = load i8*, i8** %src.addr, align 8
  %add.ptr648 = getelementptr inbounds i8, i8* %1111, i64 128
  store i8* %add.ptr648, i8** %src.addr, align 8
  %1112 = load i8*, i8** %dst.addr, align 8
  %add.ptr649 = getelementptr inbounds i8, i8* %1112, i64 0
  %1113 = bitcast i8* %add.ptr649 to <2 x i64>*
  %1114 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1115 = bitcast <2 x i64> %1114 to <16 x i8>
  %1116 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1117 = bitcast <2 x i64> %1116 to <16 x i8>
  %palignr650 = shufflevector <16 x i8> %1117, <16 x i8> %1115, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1118 = bitcast <16 x i8> %palignr650 to <2 x i64>
  store <2 x i64>* %1113, <2 x i64>** %__p.addr.i2172, align 8
  store <2 x i64> %1118, <2 x i64>* %__b.addr.i2173, align 16
  %1119 = load <2 x i64>, <2 x i64>* %__b.addr.i2173, align 16
  %1120 = load <2 x i64>*, <2 x i64>** %__p.addr.i2172, align 8
  %1121 = bitcast <2 x i64>* %1120 to %struct.__storeu_si128*
  %__v.i2174 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1121, i32 0, i32 0
  store <2 x i64> %1119, <2 x i64>* %__v.i2174, align 1
  %1122 = load i8*, i8** %dst.addr, align 8
  %add.ptr651 = getelementptr inbounds i8, i8* %1122, i64 16
  %1123 = bitcast i8* %add.ptr651 to <2 x i64>*
  %1124 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1125 = bitcast <2 x i64> %1124 to <16 x i8>
  %1126 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1127 = bitcast <2 x i64> %1126 to <16 x i8>
  %palignr652 = shufflevector <16 x i8> %1127, <16 x i8> %1125, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1128 = bitcast <16 x i8> %palignr652 to <2 x i64>
  store <2 x i64>* %1123, <2 x i64>** %__p.addr.i2169, align 8
  store <2 x i64> %1128, <2 x i64>* %__b.addr.i2170, align 16
  %1129 = load <2 x i64>, <2 x i64>* %__b.addr.i2170, align 16
  %1130 = load <2 x i64>*, <2 x i64>** %__p.addr.i2169, align 8
  %1131 = bitcast <2 x i64>* %1130 to %struct.__storeu_si128*
  %__v.i2171 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1131, i32 0, i32 0
  store <2 x i64> %1129, <2 x i64>* %__v.i2171, align 1
  %1132 = load i8*, i8** %dst.addr, align 8
  %add.ptr653 = getelementptr inbounds i8, i8* %1132, i64 32
  %1133 = bitcast i8* %add.ptr653 to <2 x i64>*
  %1134 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1135 = bitcast <2 x i64> %1134 to <16 x i8>
  %1136 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1137 = bitcast <2 x i64> %1136 to <16 x i8>
  %palignr654 = shufflevector <16 x i8> %1137, <16 x i8> %1135, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1138 = bitcast <16 x i8> %palignr654 to <2 x i64>
  store <2 x i64>* %1133, <2 x i64>** %__p.addr.i2166, align 8
  store <2 x i64> %1138, <2 x i64>* %__b.addr.i2167, align 16
  %1139 = load <2 x i64>, <2 x i64>* %__b.addr.i2167, align 16
  %1140 = load <2 x i64>*, <2 x i64>** %__p.addr.i2166, align 8
  %1141 = bitcast <2 x i64>* %1140 to %struct.__storeu_si128*
  %__v.i2168 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1141, i32 0, i32 0
  store <2 x i64> %1139, <2 x i64>* %__v.i2168, align 1
  %1142 = load i8*, i8** %dst.addr, align 8
  %add.ptr655 = getelementptr inbounds i8, i8* %1142, i64 48
  %1143 = bitcast i8* %add.ptr655 to <2 x i64>*
  %1144 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1145 = bitcast <2 x i64> %1144 to <16 x i8>
  %1146 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1147 = bitcast <2 x i64> %1146 to <16 x i8>
  %palignr656 = shufflevector <16 x i8> %1147, <16 x i8> %1145, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1148 = bitcast <16 x i8> %palignr656 to <2 x i64>
  store <2 x i64>* %1143, <2 x i64>** %__p.addr.i2163, align 8
  store <2 x i64> %1148, <2 x i64>* %__b.addr.i2164, align 16
  %1149 = load <2 x i64>, <2 x i64>* %__b.addr.i2164, align 16
  %1150 = load <2 x i64>*, <2 x i64>** %__p.addr.i2163, align 8
  %1151 = bitcast <2 x i64>* %1150 to %struct.__storeu_si128*
  %__v.i2165 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1151, i32 0, i32 0
  store <2 x i64> %1149, <2 x i64>* %__v.i2165, align 1
  %1152 = load i8*, i8** %dst.addr, align 8
  %add.ptr657 = getelementptr inbounds i8, i8* %1152, i64 64
  %1153 = bitcast i8* %add.ptr657 to <2 x i64>*
  %1154 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1155 = bitcast <2 x i64> %1154 to <16 x i8>
  %1156 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1157 = bitcast <2 x i64> %1156 to <16 x i8>
  %palignr658 = shufflevector <16 x i8> %1157, <16 x i8> %1155, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1158 = bitcast <16 x i8> %palignr658 to <2 x i64>
  store <2 x i64>* %1153, <2 x i64>** %__p.addr.i2160, align 8
  store <2 x i64> %1158, <2 x i64>* %__b.addr.i2161, align 16
  %1159 = load <2 x i64>, <2 x i64>* %__b.addr.i2161, align 16
  %1160 = load <2 x i64>*, <2 x i64>** %__p.addr.i2160, align 8
  %1161 = bitcast <2 x i64>* %1160 to %struct.__storeu_si128*
  %__v.i2162 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1161, i32 0, i32 0
  store <2 x i64> %1159, <2 x i64>* %__v.i2162, align 1
  %1162 = load i8*, i8** %dst.addr, align 8
  %add.ptr659 = getelementptr inbounds i8, i8* %1162, i64 80
  %1163 = bitcast i8* %add.ptr659 to <2 x i64>*
  %1164 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1165 = bitcast <2 x i64> %1164 to <16 x i8>
  %1166 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1167 = bitcast <2 x i64> %1166 to <16 x i8>
  %palignr660 = shufflevector <16 x i8> %1167, <16 x i8> %1165, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1168 = bitcast <16 x i8> %palignr660 to <2 x i64>
  store <2 x i64>* %1163, <2 x i64>** %__p.addr.i2157, align 8
  store <2 x i64> %1168, <2 x i64>* %__b.addr.i2158, align 16
  %1169 = load <2 x i64>, <2 x i64>* %__b.addr.i2158, align 16
  %1170 = load <2 x i64>*, <2 x i64>** %__p.addr.i2157, align 8
  %1171 = bitcast <2 x i64>* %1170 to %struct.__storeu_si128*
  %__v.i2159 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1171, i32 0, i32 0
  store <2 x i64> %1169, <2 x i64>* %__v.i2159, align 1
  %1172 = load i8*, i8** %dst.addr, align 8
  %add.ptr661 = getelementptr inbounds i8, i8* %1172, i64 96
  %1173 = bitcast i8* %add.ptr661 to <2 x i64>*
  %1174 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1175 = bitcast <2 x i64> %1174 to <16 x i8>
  %1176 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1177 = bitcast <2 x i64> %1176 to <16 x i8>
  %palignr662 = shufflevector <16 x i8> %1177, <16 x i8> %1175, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1178 = bitcast <16 x i8> %palignr662 to <2 x i64>
  store <2 x i64>* %1173, <2 x i64>** %__p.addr.i2154, align 8
  store <2 x i64> %1178, <2 x i64>* %__b.addr.i2155, align 16
  %1179 = load <2 x i64>, <2 x i64>* %__b.addr.i2155, align 16
  %1180 = load <2 x i64>*, <2 x i64>** %__p.addr.i2154, align 8
  %1181 = bitcast <2 x i64>* %1180 to %struct.__storeu_si128*
  %__v.i2156 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1181, i32 0, i32 0
  store <2 x i64> %1179, <2 x i64>* %__v.i2156, align 1
  %1182 = load i8*, i8** %dst.addr, align 8
  %add.ptr663 = getelementptr inbounds i8, i8* %1182, i64 112
  %1183 = bitcast i8* %add.ptr663 to <2 x i64>*
  %1184 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1185 = bitcast <2 x i64> %1184 to <16 x i8>
  %1186 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1187 = bitcast <2 x i64> %1186 to <16 x i8>
  %palignr664 = shufflevector <16 x i8> %1187, <16 x i8> %1185, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1188 = bitcast <16 x i8> %palignr664 to <2 x i64>
  store <2 x i64>* %1183, <2 x i64>** %__p.addr.i2151, align 8
  store <2 x i64> %1188, <2 x i64>* %__b.addr.i2152, align 16
  %1189 = load <2 x i64>, <2 x i64>* %__b.addr.i2152, align 16
  %1190 = load <2 x i64>*, <2 x i64>** %__p.addr.i2151, align 8
  %1191 = bitcast <2 x i64>* %1190 to %struct.__storeu_si128*
  %__v.i2153 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1191, i32 0, i32 0
  store <2 x i64> %1189, <2 x i64>* %__v.i2153, align 1
  %1192 = load i8*, i8** %dst.addr, align 8
  %add.ptr665 = getelementptr inbounds i8, i8* %1192, i64 128
  store i8* %add.ptr665, i8** %dst.addr, align 8
  br label %while.cond616

while.end666:                                     ; preds = %while.cond616
  %1193 = load i64, i64* %n.addr, align 8
  %conv667 = trunc i64 %1193 to i32
  store i32 %conv667, i32* %tmp615, align 4
  %1194 = load i64, i64* %n.addr, align 8
  %sub668 = sub i64 %1194, 16
  %add669 = add i64 %sub668, 6
  %and670 = and i64 %add669, 127
  %add671 = add i64 %and670, 16
  %sub672 = sub i64 %add671, 6
  store i64 %sub672, i64* %n.addr, align 8
  %1195 = load i64, i64* %n.addr, align 8
  %1196 = load i32, i32* %tmp615, align 4
  %conv673 = sext i32 %1196 to i64
  %sub674 = sub i64 %conv673, %1195
  %conv675 = trunc i64 %sub674 to i32
  store i32 %conv675, i32* %tmp615, align 4
  %1197 = load i8*, i8** %src.addr, align 8
  %1198 = load i32, i32* %tmp615, align 4
  %idx.ext676 = sext i32 %1198 to i64
  %add.ptr677 = getelementptr inbounds i8, i8* %1197, i64 %idx.ext676
  store i8* %add.ptr677, i8** %src.addr, align 8
  %1199 = load i8*, i8** %dst.addr, align 8
  %1200 = load i32, i32* %tmp615, align 4
  %idx.ext678 = sext i32 %1200 to i64
  %add.ptr679 = getelementptr inbounds i8, i8* %1199, i64 %idx.ext678
  store i8* %add.ptr679, i8** %dst.addr, align 8
  %1201 = load i64, i64* %n.addr, align 8
  %cmp680 = icmp uge i64 %1201, 42
  br i1 %cmp680, label %if.then682, label %if.end717

if.then682:                                       ; preds = %while.end666
  br label %while.cond683

while.cond683:                                    ; preds = %while.body686, %if.then682
  %1202 = load i64, i64* %n.addr, align 8
  %cmp684 = icmp uge i64 %1202, 42
  br i1 %cmp684, label %while.body686, label %while.end703

while.body686:                                    ; preds = %while.cond683
  %1203 = load i8*, i8** %src.addr, align 8
  %add.ptr687 = getelementptr inbounds i8, i8* %1203, i64 -6
  %add.ptr688 = getelementptr inbounds i8, i8* %add.ptr687, i64 0
  %1204 = bitcast i8* %add.ptr688 to <2 x i64>*
  store <2 x i64>* %1204, <2 x i64>** %__p.addr.i2149, align 8
  %1205 = load <2 x i64>*, <2 x i64>** %__p.addr.i2149, align 8
  %1206 = bitcast <2 x i64>* %1205 to %struct.__loadu_si128*
  %__v.i2150 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1206, i32 0, i32 0
  %1207 = load <2 x i64>, <2 x i64>* %__v.i2150, align 1
  store <2 x i64> %1207, <2 x i64>* %xmm0, align 16
  %1208 = load i64, i64* %n.addr, align 8
  %sub690 = sub i64 %1208, 32
  store i64 %sub690, i64* %n.addr, align 8
  %1209 = load i8*, i8** %src.addr, align 8
  %add.ptr691 = getelementptr inbounds i8, i8* %1209, i64 -6
  %add.ptr692 = getelementptr inbounds i8, i8* %add.ptr691, i64 16
  %1210 = bitcast i8* %add.ptr692 to <2 x i64>*
  store <2 x i64>* %1210, <2 x i64>** %__p.addr.i2147, align 8
  %1211 = load <2 x i64>*, <2 x i64>** %__p.addr.i2147, align 8
  %1212 = bitcast <2 x i64>* %1211 to %struct.__loadu_si128*
  %__v.i2148 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1212, i32 0, i32 0
  %1213 = load <2 x i64>, <2 x i64>* %__v.i2148, align 1
  store <2 x i64> %1213, <2 x i64>* %xmm1, align 16
  %1214 = load i8*, i8** %src.addr, align 8
  %add.ptr694 = getelementptr inbounds i8, i8* %1214, i64 -6
  %add.ptr695 = getelementptr inbounds i8, i8* %add.ptr694, i64 32
  %1215 = bitcast i8* %add.ptr695 to <2 x i64>*
  store <2 x i64>* %1215, <2 x i64>** %__p.addr.i2145, align 8
  %1216 = load <2 x i64>*, <2 x i64>** %__p.addr.i2145, align 8
  %1217 = bitcast <2 x i64>* %1216 to %struct.__loadu_si128*
  %__v.i2146 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1217, i32 0, i32 0
  %1218 = load <2 x i64>, <2 x i64>* %__v.i2146, align 1
  store <2 x i64> %1218, <2 x i64>* %xmm2, align 16
  %1219 = load i8*, i8** %src.addr, align 8
  %add.ptr697 = getelementptr inbounds i8, i8* %1219, i64 32
  store i8* %add.ptr697, i8** %src.addr, align 8
  %1220 = load i8*, i8** %dst.addr, align 8
  %add.ptr698 = getelementptr inbounds i8, i8* %1220, i64 0
  %1221 = bitcast i8* %add.ptr698 to <2 x i64>*
  %1222 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1223 = bitcast <2 x i64> %1222 to <16 x i8>
  %1224 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1225 = bitcast <2 x i64> %1224 to <16 x i8>
  %palignr699 = shufflevector <16 x i8> %1225, <16 x i8> %1223, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1226 = bitcast <16 x i8> %palignr699 to <2 x i64>
  store <2 x i64>* %1221, <2 x i64>** %__p.addr.i2142, align 8
  store <2 x i64> %1226, <2 x i64>* %__b.addr.i2143, align 16
  %1227 = load <2 x i64>, <2 x i64>* %__b.addr.i2143, align 16
  %1228 = load <2 x i64>*, <2 x i64>** %__p.addr.i2142, align 8
  %1229 = bitcast <2 x i64>* %1228 to %struct.__storeu_si128*
  %__v.i2144 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1229, i32 0, i32 0
  store <2 x i64> %1227, <2 x i64>* %__v.i2144, align 1
  %1230 = load i8*, i8** %dst.addr, align 8
  %add.ptr700 = getelementptr inbounds i8, i8* %1230, i64 16
  %1231 = bitcast i8* %add.ptr700 to <2 x i64>*
  %1232 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1233 = bitcast <2 x i64> %1232 to <16 x i8>
  %1234 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1235 = bitcast <2 x i64> %1234 to <16 x i8>
  %palignr701 = shufflevector <16 x i8> %1235, <16 x i8> %1233, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %1236 = bitcast <16 x i8> %palignr701 to <2 x i64>
  store <2 x i64>* %1231, <2 x i64>** %__p.addr.i2139, align 8
  store <2 x i64> %1236, <2 x i64>* %__b.addr.i2140, align 16
  %1237 = load <2 x i64>, <2 x i64>* %__b.addr.i2140, align 16
  %1238 = load <2 x i64>*, <2 x i64>** %__p.addr.i2139, align 8
  %1239 = bitcast <2 x i64>* %1238 to %struct.__storeu_si128*
  %__v.i2141 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1239, i32 0, i32 0
  store <2 x i64> %1237, <2 x i64>* %__v.i2141, align 1
  %1240 = load i8*, i8** %dst.addr, align 8
  %add.ptr702 = getelementptr inbounds i8, i8* %1240, i64 32
  store i8* %add.ptr702, i8** %dst.addr, align 8
  br label %while.cond683

while.end703:                                     ; preds = %while.cond683
  %1241 = load i64, i64* %n.addr, align 8
  %conv704 = trunc i64 %1241 to i32
  store i32 %conv704, i32* %tmp615, align 4
  %1242 = load i64, i64* %n.addr, align 8
  %sub705 = sub i64 %1242, 16
  %add706 = add i64 %sub705, 6
  %and707 = and i64 %add706, 31
  %add708 = add i64 %and707, 16
  %sub709 = sub i64 %add708, 6
  store i64 %sub709, i64* %n.addr, align 8
  %1243 = load i64, i64* %n.addr, align 8
  %1244 = load i32, i32* %tmp615, align 4
  %conv710 = sext i32 %1244 to i64
  %sub711 = sub i64 %conv710, %1243
  %conv712 = trunc i64 %sub711 to i32
  store i32 %conv712, i32* %tmp615, align 4
  %1245 = load i8*, i8** %src.addr, align 8
  %1246 = load i32, i32* %tmp615, align 4
  %idx.ext713 = sext i32 %1246 to i64
  %add.ptr714 = getelementptr inbounds i8, i8* %1245, i64 %idx.ext713
  store i8* %add.ptr714, i8** %src.addr, align 8
  %1247 = load i8*, i8** %dst.addr, align 8
  %1248 = load i32, i32* %tmp615, align 4
  %idx.ext715 = sext i32 %1248 to i64
  %add.ptr716 = getelementptr inbounds i8, i8* %1247, i64 %idx.ext715
  store i8* %add.ptr716, i8** %dst.addr, align 8
  br label %if.end717

if.end717:                                        ; preds = %while.end703, %while.end666
  br label %sw.epilog

sw.bb718:                                         ; preds = %if.end103
  br label %while.cond720

while.cond720:                                    ; preds = %while.body723, %sw.bb718
  %1249 = load i64, i64* %n.addr, align 8
  %cmp721 = icmp uge i64 %1249, 137
  br i1 %cmp721, label %while.body723, label %while.end770

while.body723:                                    ; preds = %while.cond720
  %1250 = load i8*, i8** %src.addr, align 8
  %add.ptr724 = getelementptr inbounds i8, i8* %1250, i64 -7
  %add.ptr725 = getelementptr inbounds i8, i8* %add.ptr724, i64 0
  %1251 = bitcast i8* %add.ptr725 to <2 x i64>*
  store <2 x i64>* %1251, <2 x i64>** %__p.addr.i2137, align 8
  %1252 = load <2 x i64>*, <2 x i64>** %__p.addr.i2137, align 8
  %1253 = bitcast <2 x i64>* %1252 to %struct.__loadu_si128*
  %__v.i2138 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1253, i32 0, i32 0
  %1254 = load <2 x i64>, <2 x i64>* %__v.i2138, align 1
  store <2 x i64> %1254, <2 x i64>* %xmm0, align 16
  %1255 = load i64, i64* %n.addr, align 8
  %sub727 = sub i64 %1255, 128
  store i64 %sub727, i64* %n.addr, align 8
  %1256 = load i8*, i8** %src.addr, align 8
  %add.ptr728 = getelementptr inbounds i8, i8* %1256, i64 -7
  %add.ptr729 = getelementptr inbounds i8, i8* %add.ptr728, i64 16
  %1257 = bitcast i8* %add.ptr729 to <2 x i64>*
  store <2 x i64>* %1257, <2 x i64>** %__p.addr.i2135, align 8
  %1258 = load <2 x i64>*, <2 x i64>** %__p.addr.i2135, align 8
  %1259 = bitcast <2 x i64>* %1258 to %struct.__loadu_si128*
  %__v.i2136 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1259, i32 0, i32 0
  %1260 = load <2 x i64>, <2 x i64>* %__v.i2136, align 1
  store <2 x i64> %1260, <2 x i64>* %xmm1, align 16
  %1261 = load i8*, i8** %src.addr, align 8
  %add.ptr731 = getelementptr inbounds i8, i8* %1261, i64 -7
  %add.ptr732 = getelementptr inbounds i8, i8* %add.ptr731, i64 32
  %1262 = bitcast i8* %add.ptr732 to <2 x i64>*
  store <2 x i64>* %1262, <2 x i64>** %__p.addr.i2133, align 8
  %1263 = load <2 x i64>*, <2 x i64>** %__p.addr.i2133, align 8
  %1264 = bitcast <2 x i64>* %1263 to %struct.__loadu_si128*
  %__v.i2134 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1264, i32 0, i32 0
  %1265 = load <2 x i64>, <2 x i64>* %__v.i2134, align 1
  store <2 x i64> %1265, <2 x i64>* %xmm2, align 16
  %1266 = load i8*, i8** %src.addr, align 8
  %add.ptr734 = getelementptr inbounds i8, i8* %1266, i64 -7
  %add.ptr735 = getelementptr inbounds i8, i8* %add.ptr734, i64 48
  %1267 = bitcast i8* %add.ptr735 to <2 x i64>*
  store <2 x i64>* %1267, <2 x i64>** %__p.addr.i2131, align 8
  %1268 = load <2 x i64>*, <2 x i64>** %__p.addr.i2131, align 8
  %1269 = bitcast <2 x i64>* %1268 to %struct.__loadu_si128*
  %__v.i2132 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1269, i32 0, i32 0
  %1270 = load <2 x i64>, <2 x i64>* %__v.i2132, align 1
  store <2 x i64> %1270, <2 x i64>* %xmm3, align 16
  %1271 = load i8*, i8** %src.addr, align 8
  %add.ptr737 = getelementptr inbounds i8, i8* %1271, i64 -7
  %add.ptr738 = getelementptr inbounds i8, i8* %add.ptr737, i64 64
  %1272 = bitcast i8* %add.ptr738 to <2 x i64>*
  store <2 x i64>* %1272, <2 x i64>** %__p.addr.i2129, align 8
  %1273 = load <2 x i64>*, <2 x i64>** %__p.addr.i2129, align 8
  %1274 = bitcast <2 x i64>* %1273 to %struct.__loadu_si128*
  %__v.i2130 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1274, i32 0, i32 0
  %1275 = load <2 x i64>, <2 x i64>* %__v.i2130, align 1
  store <2 x i64> %1275, <2 x i64>* %xmm4, align 16
  %1276 = load i8*, i8** %src.addr, align 8
  %add.ptr740 = getelementptr inbounds i8, i8* %1276, i64 -7
  %add.ptr741 = getelementptr inbounds i8, i8* %add.ptr740, i64 80
  %1277 = bitcast i8* %add.ptr741 to <2 x i64>*
  store <2 x i64>* %1277, <2 x i64>** %__p.addr.i2127, align 8
  %1278 = load <2 x i64>*, <2 x i64>** %__p.addr.i2127, align 8
  %1279 = bitcast <2 x i64>* %1278 to %struct.__loadu_si128*
  %__v.i2128 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1279, i32 0, i32 0
  %1280 = load <2 x i64>, <2 x i64>* %__v.i2128, align 1
  store <2 x i64> %1280, <2 x i64>* %xmm5, align 16
  %1281 = load i8*, i8** %src.addr, align 8
  %add.ptr743 = getelementptr inbounds i8, i8* %1281, i64 -7
  %add.ptr744 = getelementptr inbounds i8, i8* %add.ptr743, i64 96
  %1282 = bitcast i8* %add.ptr744 to <2 x i64>*
  store <2 x i64>* %1282, <2 x i64>** %__p.addr.i2125, align 8
  %1283 = load <2 x i64>*, <2 x i64>** %__p.addr.i2125, align 8
  %1284 = bitcast <2 x i64>* %1283 to %struct.__loadu_si128*
  %__v.i2126 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1284, i32 0, i32 0
  %1285 = load <2 x i64>, <2 x i64>* %__v.i2126, align 1
  store <2 x i64> %1285, <2 x i64>* %xmm6, align 16
  %1286 = load i8*, i8** %src.addr, align 8
  %add.ptr746 = getelementptr inbounds i8, i8* %1286, i64 -7
  %add.ptr747 = getelementptr inbounds i8, i8* %add.ptr746, i64 112
  %1287 = bitcast i8* %add.ptr747 to <2 x i64>*
  store <2 x i64>* %1287, <2 x i64>** %__p.addr.i2123, align 8
  %1288 = load <2 x i64>*, <2 x i64>** %__p.addr.i2123, align 8
  %1289 = bitcast <2 x i64>* %1288 to %struct.__loadu_si128*
  %__v.i2124 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1289, i32 0, i32 0
  %1290 = load <2 x i64>, <2 x i64>* %__v.i2124, align 1
  store <2 x i64> %1290, <2 x i64>* %xmm7, align 16
  %1291 = load i8*, i8** %src.addr, align 8
  %add.ptr749 = getelementptr inbounds i8, i8* %1291, i64 -7
  %add.ptr750 = getelementptr inbounds i8, i8* %add.ptr749, i64 128
  %1292 = bitcast i8* %add.ptr750 to <2 x i64>*
  store <2 x i64>* %1292, <2 x i64>** %__p.addr.i2121, align 8
  %1293 = load <2 x i64>*, <2 x i64>** %__p.addr.i2121, align 8
  %1294 = bitcast <2 x i64>* %1293 to %struct.__loadu_si128*
  %__v.i2122 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1294, i32 0, i32 0
  %1295 = load <2 x i64>, <2 x i64>* %__v.i2122, align 1
  store <2 x i64> %1295, <2 x i64>* %xmm8, align 16
  %1296 = load i8*, i8** %src.addr, align 8
  %add.ptr752 = getelementptr inbounds i8, i8* %1296, i64 128
  store i8* %add.ptr752, i8** %src.addr, align 8
  %1297 = load i8*, i8** %dst.addr, align 8
  %add.ptr753 = getelementptr inbounds i8, i8* %1297, i64 0
  %1298 = bitcast i8* %add.ptr753 to <2 x i64>*
  %1299 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1300 = bitcast <2 x i64> %1299 to <16 x i8>
  %1301 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1302 = bitcast <2 x i64> %1301 to <16 x i8>
  %palignr754 = shufflevector <16 x i8> %1302, <16 x i8> %1300, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1303 = bitcast <16 x i8> %palignr754 to <2 x i64>
  store <2 x i64>* %1298, <2 x i64>** %__p.addr.i2118, align 8
  store <2 x i64> %1303, <2 x i64>* %__b.addr.i2119, align 16
  %1304 = load <2 x i64>, <2 x i64>* %__b.addr.i2119, align 16
  %1305 = load <2 x i64>*, <2 x i64>** %__p.addr.i2118, align 8
  %1306 = bitcast <2 x i64>* %1305 to %struct.__storeu_si128*
  %__v.i2120 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1306, i32 0, i32 0
  store <2 x i64> %1304, <2 x i64>* %__v.i2120, align 1
  %1307 = load i8*, i8** %dst.addr, align 8
  %add.ptr755 = getelementptr inbounds i8, i8* %1307, i64 16
  %1308 = bitcast i8* %add.ptr755 to <2 x i64>*
  %1309 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1310 = bitcast <2 x i64> %1309 to <16 x i8>
  %1311 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1312 = bitcast <2 x i64> %1311 to <16 x i8>
  %palignr756 = shufflevector <16 x i8> %1312, <16 x i8> %1310, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1313 = bitcast <16 x i8> %palignr756 to <2 x i64>
  store <2 x i64>* %1308, <2 x i64>** %__p.addr.i2115, align 8
  store <2 x i64> %1313, <2 x i64>* %__b.addr.i2116, align 16
  %1314 = load <2 x i64>, <2 x i64>* %__b.addr.i2116, align 16
  %1315 = load <2 x i64>*, <2 x i64>** %__p.addr.i2115, align 8
  %1316 = bitcast <2 x i64>* %1315 to %struct.__storeu_si128*
  %__v.i2117 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1316, i32 0, i32 0
  store <2 x i64> %1314, <2 x i64>* %__v.i2117, align 1
  %1317 = load i8*, i8** %dst.addr, align 8
  %add.ptr757 = getelementptr inbounds i8, i8* %1317, i64 32
  %1318 = bitcast i8* %add.ptr757 to <2 x i64>*
  %1319 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1320 = bitcast <2 x i64> %1319 to <16 x i8>
  %1321 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1322 = bitcast <2 x i64> %1321 to <16 x i8>
  %palignr758 = shufflevector <16 x i8> %1322, <16 x i8> %1320, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1323 = bitcast <16 x i8> %palignr758 to <2 x i64>
  store <2 x i64>* %1318, <2 x i64>** %__p.addr.i2112, align 8
  store <2 x i64> %1323, <2 x i64>* %__b.addr.i2113, align 16
  %1324 = load <2 x i64>, <2 x i64>* %__b.addr.i2113, align 16
  %1325 = load <2 x i64>*, <2 x i64>** %__p.addr.i2112, align 8
  %1326 = bitcast <2 x i64>* %1325 to %struct.__storeu_si128*
  %__v.i2114 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1326, i32 0, i32 0
  store <2 x i64> %1324, <2 x i64>* %__v.i2114, align 1
  %1327 = load i8*, i8** %dst.addr, align 8
  %add.ptr759 = getelementptr inbounds i8, i8* %1327, i64 48
  %1328 = bitcast i8* %add.ptr759 to <2 x i64>*
  %1329 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1330 = bitcast <2 x i64> %1329 to <16 x i8>
  %1331 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1332 = bitcast <2 x i64> %1331 to <16 x i8>
  %palignr760 = shufflevector <16 x i8> %1332, <16 x i8> %1330, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1333 = bitcast <16 x i8> %palignr760 to <2 x i64>
  store <2 x i64>* %1328, <2 x i64>** %__p.addr.i2109, align 8
  store <2 x i64> %1333, <2 x i64>* %__b.addr.i2110, align 16
  %1334 = load <2 x i64>, <2 x i64>* %__b.addr.i2110, align 16
  %1335 = load <2 x i64>*, <2 x i64>** %__p.addr.i2109, align 8
  %1336 = bitcast <2 x i64>* %1335 to %struct.__storeu_si128*
  %__v.i2111 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1336, i32 0, i32 0
  store <2 x i64> %1334, <2 x i64>* %__v.i2111, align 1
  %1337 = load i8*, i8** %dst.addr, align 8
  %add.ptr761 = getelementptr inbounds i8, i8* %1337, i64 64
  %1338 = bitcast i8* %add.ptr761 to <2 x i64>*
  %1339 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1340 = bitcast <2 x i64> %1339 to <16 x i8>
  %1341 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1342 = bitcast <2 x i64> %1341 to <16 x i8>
  %palignr762 = shufflevector <16 x i8> %1342, <16 x i8> %1340, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1343 = bitcast <16 x i8> %palignr762 to <2 x i64>
  store <2 x i64>* %1338, <2 x i64>** %__p.addr.i2106, align 8
  store <2 x i64> %1343, <2 x i64>* %__b.addr.i2107, align 16
  %1344 = load <2 x i64>, <2 x i64>* %__b.addr.i2107, align 16
  %1345 = load <2 x i64>*, <2 x i64>** %__p.addr.i2106, align 8
  %1346 = bitcast <2 x i64>* %1345 to %struct.__storeu_si128*
  %__v.i2108 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1346, i32 0, i32 0
  store <2 x i64> %1344, <2 x i64>* %__v.i2108, align 1
  %1347 = load i8*, i8** %dst.addr, align 8
  %add.ptr763 = getelementptr inbounds i8, i8* %1347, i64 80
  %1348 = bitcast i8* %add.ptr763 to <2 x i64>*
  %1349 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1350 = bitcast <2 x i64> %1349 to <16 x i8>
  %1351 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1352 = bitcast <2 x i64> %1351 to <16 x i8>
  %palignr764 = shufflevector <16 x i8> %1352, <16 x i8> %1350, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1353 = bitcast <16 x i8> %palignr764 to <2 x i64>
  store <2 x i64>* %1348, <2 x i64>** %__p.addr.i2103, align 8
  store <2 x i64> %1353, <2 x i64>* %__b.addr.i2104, align 16
  %1354 = load <2 x i64>, <2 x i64>* %__b.addr.i2104, align 16
  %1355 = load <2 x i64>*, <2 x i64>** %__p.addr.i2103, align 8
  %1356 = bitcast <2 x i64>* %1355 to %struct.__storeu_si128*
  %__v.i2105 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1356, i32 0, i32 0
  store <2 x i64> %1354, <2 x i64>* %__v.i2105, align 1
  %1357 = load i8*, i8** %dst.addr, align 8
  %add.ptr765 = getelementptr inbounds i8, i8* %1357, i64 96
  %1358 = bitcast i8* %add.ptr765 to <2 x i64>*
  %1359 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1360 = bitcast <2 x i64> %1359 to <16 x i8>
  %1361 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1362 = bitcast <2 x i64> %1361 to <16 x i8>
  %palignr766 = shufflevector <16 x i8> %1362, <16 x i8> %1360, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1363 = bitcast <16 x i8> %palignr766 to <2 x i64>
  store <2 x i64>* %1358, <2 x i64>** %__p.addr.i2100, align 8
  store <2 x i64> %1363, <2 x i64>* %__b.addr.i2101, align 16
  %1364 = load <2 x i64>, <2 x i64>* %__b.addr.i2101, align 16
  %1365 = load <2 x i64>*, <2 x i64>** %__p.addr.i2100, align 8
  %1366 = bitcast <2 x i64>* %1365 to %struct.__storeu_si128*
  %__v.i2102 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1366, i32 0, i32 0
  store <2 x i64> %1364, <2 x i64>* %__v.i2102, align 1
  %1367 = load i8*, i8** %dst.addr, align 8
  %add.ptr767 = getelementptr inbounds i8, i8* %1367, i64 112
  %1368 = bitcast i8* %add.ptr767 to <2 x i64>*
  %1369 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1370 = bitcast <2 x i64> %1369 to <16 x i8>
  %1371 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1372 = bitcast <2 x i64> %1371 to <16 x i8>
  %palignr768 = shufflevector <16 x i8> %1372, <16 x i8> %1370, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1373 = bitcast <16 x i8> %palignr768 to <2 x i64>
  store <2 x i64>* %1368, <2 x i64>** %__p.addr.i2097, align 8
  store <2 x i64> %1373, <2 x i64>* %__b.addr.i2098, align 16
  %1374 = load <2 x i64>, <2 x i64>* %__b.addr.i2098, align 16
  %1375 = load <2 x i64>*, <2 x i64>** %__p.addr.i2097, align 8
  %1376 = bitcast <2 x i64>* %1375 to %struct.__storeu_si128*
  %__v.i2099 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1376, i32 0, i32 0
  store <2 x i64> %1374, <2 x i64>* %__v.i2099, align 1
  %1377 = load i8*, i8** %dst.addr, align 8
  %add.ptr769 = getelementptr inbounds i8, i8* %1377, i64 128
  store i8* %add.ptr769, i8** %dst.addr, align 8
  br label %while.cond720

while.end770:                                     ; preds = %while.cond720
  %1378 = load i64, i64* %n.addr, align 8
  %conv771 = trunc i64 %1378 to i32
  store i32 %conv771, i32* %tmp719, align 4
  %1379 = load i64, i64* %n.addr, align 8
  %sub772 = sub i64 %1379, 16
  %add773 = add i64 %sub772, 7
  %and774 = and i64 %add773, 127
  %add775 = add i64 %and774, 16
  %sub776 = sub i64 %add775, 7
  store i64 %sub776, i64* %n.addr, align 8
  %1380 = load i64, i64* %n.addr, align 8
  %1381 = load i32, i32* %tmp719, align 4
  %conv777 = sext i32 %1381 to i64
  %sub778 = sub i64 %conv777, %1380
  %conv779 = trunc i64 %sub778 to i32
  store i32 %conv779, i32* %tmp719, align 4
  %1382 = load i8*, i8** %src.addr, align 8
  %1383 = load i32, i32* %tmp719, align 4
  %idx.ext780 = sext i32 %1383 to i64
  %add.ptr781 = getelementptr inbounds i8, i8* %1382, i64 %idx.ext780
  store i8* %add.ptr781, i8** %src.addr, align 8
  %1384 = load i8*, i8** %dst.addr, align 8
  %1385 = load i32, i32* %tmp719, align 4
  %idx.ext782 = sext i32 %1385 to i64
  %add.ptr783 = getelementptr inbounds i8, i8* %1384, i64 %idx.ext782
  store i8* %add.ptr783, i8** %dst.addr, align 8
  %1386 = load i64, i64* %n.addr, align 8
  %cmp784 = icmp uge i64 %1386, 41
  br i1 %cmp784, label %if.then786, label %if.end821

if.then786:                                       ; preds = %while.end770
  br label %while.cond787

while.cond787:                                    ; preds = %while.body790, %if.then786
  %1387 = load i64, i64* %n.addr, align 8
  %cmp788 = icmp uge i64 %1387, 41
  br i1 %cmp788, label %while.body790, label %while.end807

while.body790:                                    ; preds = %while.cond787
  %1388 = load i8*, i8** %src.addr, align 8
  %add.ptr791 = getelementptr inbounds i8, i8* %1388, i64 -7
  %add.ptr792 = getelementptr inbounds i8, i8* %add.ptr791, i64 0
  %1389 = bitcast i8* %add.ptr792 to <2 x i64>*
  store <2 x i64>* %1389, <2 x i64>** %__p.addr.i2095, align 8
  %1390 = load <2 x i64>*, <2 x i64>** %__p.addr.i2095, align 8
  %1391 = bitcast <2 x i64>* %1390 to %struct.__loadu_si128*
  %__v.i2096 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1391, i32 0, i32 0
  %1392 = load <2 x i64>, <2 x i64>* %__v.i2096, align 1
  store <2 x i64> %1392, <2 x i64>* %xmm0, align 16
  %1393 = load i64, i64* %n.addr, align 8
  %sub794 = sub i64 %1393, 32
  store i64 %sub794, i64* %n.addr, align 8
  %1394 = load i8*, i8** %src.addr, align 8
  %add.ptr795 = getelementptr inbounds i8, i8* %1394, i64 -7
  %add.ptr796 = getelementptr inbounds i8, i8* %add.ptr795, i64 16
  %1395 = bitcast i8* %add.ptr796 to <2 x i64>*
  store <2 x i64>* %1395, <2 x i64>** %__p.addr.i2093, align 8
  %1396 = load <2 x i64>*, <2 x i64>** %__p.addr.i2093, align 8
  %1397 = bitcast <2 x i64>* %1396 to %struct.__loadu_si128*
  %__v.i2094 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1397, i32 0, i32 0
  %1398 = load <2 x i64>, <2 x i64>* %__v.i2094, align 1
  store <2 x i64> %1398, <2 x i64>* %xmm1, align 16
  %1399 = load i8*, i8** %src.addr, align 8
  %add.ptr798 = getelementptr inbounds i8, i8* %1399, i64 -7
  %add.ptr799 = getelementptr inbounds i8, i8* %add.ptr798, i64 32
  %1400 = bitcast i8* %add.ptr799 to <2 x i64>*
  store <2 x i64>* %1400, <2 x i64>** %__p.addr.i2091, align 8
  %1401 = load <2 x i64>*, <2 x i64>** %__p.addr.i2091, align 8
  %1402 = bitcast <2 x i64>* %1401 to %struct.__loadu_si128*
  %__v.i2092 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1402, i32 0, i32 0
  %1403 = load <2 x i64>, <2 x i64>* %__v.i2092, align 1
  store <2 x i64> %1403, <2 x i64>* %xmm2, align 16
  %1404 = load i8*, i8** %src.addr, align 8
  %add.ptr801 = getelementptr inbounds i8, i8* %1404, i64 32
  store i8* %add.ptr801, i8** %src.addr, align 8
  %1405 = load i8*, i8** %dst.addr, align 8
  %add.ptr802 = getelementptr inbounds i8, i8* %1405, i64 0
  %1406 = bitcast i8* %add.ptr802 to <2 x i64>*
  %1407 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1408 = bitcast <2 x i64> %1407 to <16 x i8>
  %1409 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1410 = bitcast <2 x i64> %1409 to <16 x i8>
  %palignr803 = shufflevector <16 x i8> %1410, <16 x i8> %1408, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1411 = bitcast <16 x i8> %palignr803 to <2 x i64>
  store <2 x i64>* %1406, <2 x i64>** %__p.addr.i2088, align 8
  store <2 x i64> %1411, <2 x i64>* %__b.addr.i2089, align 16
  %1412 = load <2 x i64>, <2 x i64>* %__b.addr.i2089, align 16
  %1413 = load <2 x i64>*, <2 x i64>** %__p.addr.i2088, align 8
  %1414 = bitcast <2 x i64>* %1413 to %struct.__storeu_si128*
  %__v.i2090 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1414, i32 0, i32 0
  store <2 x i64> %1412, <2 x i64>* %__v.i2090, align 1
  %1415 = load i8*, i8** %dst.addr, align 8
  %add.ptr804 = getelementptr inbounds i8, i8* %1415, i64 16
  %1416 = bitcast i8* %add.ptr804 to <2 x i64>*
  %1417 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1418 = bitcast <2 x i64> %1417 to <16 x i8>
  %1419 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1420 = bitcast <2 x i64> %1419 to <16 x i8>
  %palignr805 = shufflevector <16 x i8> %1420, <16 x i8> %1418, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %1421 = bitcast <16 x i8> %palignr805 to <2 x i64>
  store <2 x i64>* %1416, <2 x i64>** %__p.addr.i2085, align 8
  store <2 x i64> %1421, <2 x i64>* %__b.addr.i2086, align 16
  %1422 = load <2 x i64>, <2 x i64>* %__b.addr.i2086, align 16
  %1423 = load <2 x i64>*, <2 x i64>** %__p.addr.i2085, align 8
  %1424 = bitcast <2 x i64>* %1423 to %struct.__storeu_si128*
  %__v.i2087 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1424, i32 0, i32 0
  store <2 x i64> %1422, <2 x i64>* %__v.i2087, align 1
  %1425 = load i8*, i8** %dst.addr, align 8
  %add.ptr806 = getelementptr inbounds i8, i8* %1425, i64 32
  store i8* %add.ptr806, i8** %dst.addr, align 8
  br label %while.cond787

while.end807:                                     ; preds = %while.cond787
  %1426 = load i64, i64* %n.addr, align 8
  %conv808 = trunc i64 %1426 to i32
  store i32 %conv808, i32* %tmp719, align 4
  %1427 = load i64, i64* %n.addr, align 8
  %sub809 = sub i64 %1427, 16
  %add810 = add i64 %sub809, 7
  %and811 = and i64 %add810, 31
  %add812 = add i64 %and811, 16
  %sub813 = sub i64 %add812, 7
  store i64 %sub813, i64* %n.addr, align 8
  %1428 = load i64, i64* %n.addr, align 8
  %1429 = load i32, i32* %tmp719, align 4
  %conv814 = sext i32 %1429 to i64
  %sub815 = sub i64 %conv814, %1428
  %conv816 = trunc i64 %sub815 to i32
  store i32 %conv816, i32* %tmp719, align 4
  %1430 = load i8*, i8** %src.addr, align 8
  %1431 = load i32, i32* %tmp719, align 4
  %idx.ext817 = sext i32 %1431 to i64
  %add.ptr818 = getelementptr inbounds i8, i8* %1430, i64 %idx.ext817
  store i8* %add.ptr818, i8** %src.addr, align 8
  %1432 = load i8*, i8** %dst.addr, align 8
  %1433 = load i32, i32* %tmp719, align 4
  %idx.ext819 = sext i32 %1433 to i64
  %add.ptr820 = getelementptr inbounds i8, i8* %1432, i64 %idx.ext819
  store i8* %add.ptr820, i8** %dst.addr, align 8
  br label %if.end821

if.end821:                                        ; preds = %while.end807, %while.end770
  br label %sw.epilog

sw.bb822:                                         ; preds = %if.end103
  br label %while.cond824

while.cond824:                                    ; preds = %while.body827, %sw.bb822
  %1434 = load i64, i64* %n.addr, align 8
  %cmp825 = icmp uge i64 %1434, 136
  br i1 %cmp825, label %while.body827, label %while.end874

while.body827:                                    ; preds = %while.cond824
  %1435 = load i8*, i8** %src.addr, align 8
  %add.ptr828 = getelementptr inbounds i8, i8* %1435, i64 -8
  %add.ptr829 = getelementptr inbounds i8, i8* %add.ptr828, i64 0
  %1436 = bitcast i8* %add.ptr829 to <2 x i64>*
  store <2 x i64>* %1436, <2 x i64>** %__p.addr.i2083, align 8
  %1437 = load <2 x i64>*, <2 x i64>** %__p.addr.i2083, align 8
  %1438 = bitcast <2 x i64>* %1437 to %struct.__loadu_si128*
  %__v.i2084 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1438, i32 0, i32 0
  %1439 = load <2 x i64>, <2 x i64>* %__v.i2084, align 1
  store <2 x i64> %1439, <2 x i64>* %xmm0, align 16
  %1440 = load i64, i64* %n.addr, align 8
  %sub831 = sub i64 %1440, 128
  store i64 %sub831, i64* %n.addr, align 8
  %1441 = load i8*, i8** %src.addr, align 8
  %add.ptr832 = getelementptr inbounds i8, i8* %1441, i64 -8
  %add.ptr833 = getelementptr inbounds i8, i8* %add.ptr832, i64 16
  %1442 = bitcast i8* %add.ptr833 to <2 x i64>*
  store <2 x i64>* %1442, <2 x i64>** %__p.addr.i2081, align 8
  %1443 = load <2 x i64>*, <2 x i64>** %__p.addr.i2081, align 8
  %1444 = bitcast <2 x i64>* %1443 to %struct.__loadu_si128*
  %__v.i2082 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1444, i32 0, i32 0
  %1445 = load <2 x i64>, <2 x i64>* %__v.i2082, align 1
  store <2 x i64> %1445, <2 x i64>* %xmm1, align 16
  %1446 = load i8*, i8** %src.addr, align 8
  %add.ptr835 = getelementptr inbounds i8, i8* %1446, i64 -8
  %add.ptr836 = getelementptr inbounds i8, i8* %add.ptr835, i64 32
  %1447 = bitcast i8* %add.ptr836 to <2 x i64>*
  store <2 x i64>* %1447, <2 x i64>** %__p.addr.i2079, align 8
  %1448 = load <2 x i64>*, <2 x i64>** %__p.addr.i2079, align 8
  %1449 = bitcast <2 x i64>* %1448 to %struct.__loadu_si128*
  %__v.i2080 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1449, i32 0, i32 0
  %1450 = load <2 x i64>, <2 x i64>* %__v.i2080, align 1
  store <2 x i64> %1450, <2 x i64>* %xmm2, align 16
  %1451 = load i8*, i8** %src.addr, align 8
  %add.ptr838 = getelementptr inbounds i8, i8* %1451, i64 -8
  %add.ptr839 = getelementptr inbounds i8, i8* %add.ptr838, i64 48
  %1452 = bitcast i8* %add.ptr839 to <2 x i64>*
  store <2 x i64>* %1452, <2 x i64>** %__p.addr.i2077, align 8
  %1453 = load <2 x i64>*, <2 x i64>** %__p.addr.i2077, align 8
  %1454 = bitcast <2 x i64>* %1453 to %struct.__loadu_si128*
  %__v.i2078 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1454, i32 0, i32 0
  %1455 = load <2 x i64>, <2 x i64>* %__v.i2078, align 1
  store <2 x i64> %1455, <2 x i64>* %xmm3, align 16
  %1456 = load i8*, i8** %src.addr, align 8
  %add.ptr841 = getelementptr inbounds i8, i8* %1456, i64 -8
  %add.ptr842 = getelementptr inbounds i8, i8* %add.ptr841, i64 64
  %1457 = bitcast i8* %add.ptr842 to <2 x i64>*
  store <2 x i64>* %1457, <2 x i64>** %__p.addr.i2075, align 8
  %1458 = load <2 x i64>*, <2 x i64>** %__p.addr.i2075, align 8
  %1459 = bitcast <2 x i64>* %1458 to %struct.__loadu_si128*
  %__v.i2076 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1459, i32 0, i32 0
  %1460 = load <2 x i64>, <2 x i64>* %__v.i2076, align 1
  store <2 x i64> %1460, <2 x i64>* %xmm4, align 16
  %1461 = load i8*, i8** %src.addr, align 8
  %add.ptr844 = getelementptr inbounds i8, i8* %1461, i64 -8
  %add.ptr845 = getelementptr inbounds i8, i8* %add.ptr844, i64 80
  %1462 = bitcast i8* %add.ptr845 to <2 x i64>*
  store <2 x i64>* %1462, <2 x i64>** %__p.addr.i2073, align 8
  %1463 = load <2 x i64>*, <2 x i64>** %__p.addr.i2073, align 8
  %1464 = bitcast <2 x i64>* %1463 to %struct.__loadu_si128*
  %__v.i2074 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1464, i32 0, i32 0
  %1465 = load <2 x i64>, <2 x i64>* %__v.i2074, align 1
  store <2 x i64> %1465, <2 x i64>* %xmm5, align 16
  %1466 = load i8*, i8** %src.addr, align 8
  %add.ptr847 = getelementptr inbounds i8, i8* %1466, i64 -8
  %add.ptr848 = getelementptr inbounds i8, i8* %add.ptr847, i64 96
  %1467 = bitcast i8* %add.ptr848 to <2 x i64>*
  store <2 x i64>* %1467, <2 x i64>** %__p.addr.i2071, align 8
  %1468 = load <2 x i64>*, <2 x i64>** %__p.addr.i2071, align 8
  %1469 = bitcast <2 x i64>* %1468 to %struct.__loadu_si128*
  %__v.i2072 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1469, i32 0, i32 0
  %1470 = load <2 x i64>, <2 x i64>* %__v.i2072, align 1
  store <2 x i64> %1470, <2 x i64>* %xmm6, align 16
  %1471 = load i8*, i8** %src.addr, align 8
  %add.ptr850 = getelementptr inbounds i8, i8* %1471, i64 -8
  %add.ptr851 = getelementptr inbounds i8, i8* %add.ptr850, i64 112
  %1472 = bitcast i8* %add.ptr851 to <2 x i64>*
  store <2 x i64>* %1472, <2 x i64>** %__p.addr.i2069, align 8
  %1473 = load <2 x i64>*, <2 x i64>** %__p.addr.i2069, align 8
  %1474 = bitcast <2 x i64>* %1473 to %struct.__loadu_si128*
  %__v.i2070 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1474, i32 0, i32 0
  %1475 = load <2 x i64>, <2 x i64>* %__v.i2070, align 1
  store <2 x i64> %1475, <2 x i64>* %xmm7, align 16
  %1476 = load i8*, i8** %src.addr, align 8
  %add.ptr853 = getelementptr inbounds i8, i8* %1476, i64 -8
  %add.ptr854 = getelementptr inbounds i8, i8* %add.ptr853, i64 128
  %1477 = bitcast i8* %add.ptr854 to <2 x i64>*
  store <2 x i64>* %1477, <2 x i64>** %__p.addr.i2067, align 8
  %1478 = load <2 x i64>*, <2 x i64>** %__p.addr.i2067, align 8
  %1479 = bitcast <2 x i64>* %1478 to %struct.__loadu_si128*
  %__v.i2068 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1479, i32 0, i32 0
  %1480 = load <2 x i64>, <2 x i64>* %__v.i2068, align 1
  store <2 x i64> %1480, <2 x i64>* %xmm8, align 16
  %1481 = load i8*, i8** %src.addr, align 8
  %add.ptr856 = getelementptr inbounds i8, i8* %1481, i64 128
  store i8* %add.ptr856, i8** %src.addr, align 8
  %1482 = load i8*, i8** %dst.addr, align 8
  %add.ptr857 = getelementptr inbounds i8, i8* %1482, i64 0
  %1483 = bitcast i8* %add.ptr857 to <2 x i64>*
  %1484 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1485 = bitcast <2 x i64> %1484 to <16 x i8>
  %1486 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1487 = bitcast <2 x i64> %1486 to <16 x i8>
  %palignr858 = shufflevector <16 x i8> %1487, <16 x i8> %1485, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1488 = bitcast <16 x i8> %palignr858 to <2 x i64>
  store <2 x i64>* %1483, <2 x i64>** %__p.addr.i2064, align 8
  store <2 x i64> %1488, <2 x i64>* %__b.addr.i2065, align 16
  %1489 = load <2 x i64>, <2 x i64>* %__b.addr.i2065, align 16
  %1490 = load <2 x i64>*, <2 x i64>** %__p.addr.i2064, align 8
  %1491 = bitcast <2 x i64>* %1490 to %struct.__storeu_si128*
  %__v.i2066 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1491, i32 0, i32 0
  store <2 x i64> %1489, <2 x i64>* %__v.i2066, align 1
  %1492 = load i8*, i8** %dst.addr, align 8
  %add.ptr859 = getelementptr inbounds i8, i8* %1492, i64 16
  %1493 = bitcast i8* %add.ptr859 to <2 x i64>*
  %1494 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1495 = bitcast <2 x i64> %1494 to <16 x i8>
  %1496 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1497 = bitcast <2 x i64> %1496 to <16 x i8>
  %palignr860 = shufflevector <16 x i8> %1497, <16 x i8> %1495, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1498 = bitcast <16 x i8> %palignr860 to <2 x i64>
  store <2 x i64>* %1493, <2 x i64>** %__p.addr.i2061, align 8
  store <2 x i64> %1498, <2 x i64>* %__b.addr.i2062, align 16
  %1499 = load <2 x i64>, <2 x i64>* %__b.addr.i2062, align 16
  %1500 = load <2 x i64>*, <2 x i64>** %__p.addr.i2061, align 8
  %1501 = bitcast <2 x i64>* %1500 to %struct.__storeu_si128*
  %__v.i2063 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1501, i32 0, i32 0
  store <2 x i64> %1499, <2 x i64>* %__v.i2063, align 1
  %1502 = load i8*, i8** %dst.addr, align 8
  %add.ptr861 = getelementptr inbounds i8, i8* %1502, i64 32
  %1503 = bitcast i8* %add.ptr861 to <2 x i64>*
  %1504 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1505 = bitcast <2 x i64> %1504 to <16 x i8>
  %1506 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1507 = bitcast <2 x i64> %1506 to <16 x i8>
  %palignr862 = shufflevector <16 x i8> %1507, <16 x i8> %1505, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1508 = bitcast <16 x i8> %palignr862 to <2 x i64>
  store <2 x i64>* %1503, <2 x i64>** %__p.addr.i2058, align 8
  store <2 x i64> %1508, <2 x i64>* %__b.addr.i2059, align 16
  %1509 = load <2 x i64>, <2 x i64>* %__b.addr.i2059, align 16
  %1510 = load <2 x i64>*, <2 x i64>** %__p.addr.i2058, align 8
  %1511 = bitcast <2 x i64>* %1510 to %struct.__storeu_si128*
  %__v.i2060 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1511, i32 0, i32 0
  store <2 x i64> %1509, <2 x i64>* %__v.i2060, align 1
  %1512 = load i8*, i8** %dst.addr, align 8
  %add.ptr863 = getelementptr inbounds i8, i8* %1512, i64 48
  %1513 = bitcast i8* %add.ptr863 to <2 x i64>*
  %1514 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1515 = bitcast <2 x i64> %1514 to <16 x i8>
  %1516 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1517 = bitcast <2 x i64> %1516 to <16 x i8>
  %palignr864 = shufflevector <16 x i8> %1517, <16 x i8> %1515, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1518 = bitcast <16 x i8> %palignr864 to <2 x i64>
  store <2 x i64>* %1513, <2 x i64>** %__p.addr.i2055, align 8
  store <2 x i64> %1518, <2 x i64>* %__b.addr.i2056, align 16
  %1519 = load <2 x i64>, <2 x i64>* %__b.addr.i2056, align 16
  %1520 = load <2 x i64>*, <2 x i64>** %__p.addr.i2055, align 8
  %1521 = bitcast <2 x i64>* %1520 to %struct.__storeu_si128*
  %__v.i2057 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1521, i32 0, i32 0
  store <2 x i64> %1519, <2 x i64>* %__v.i2057, align 1
  %1522 = load i8*, i8** %dst.addr, align 8
  %add.ptr865 = getelementptr inbounds i8, i8* %1522, i64 64
  %1523 = bitcast i8* %add.ptr865 to <2 x i64>*
  %1524 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1525 = bitcast <2 x i64> %1524 to <16 x i8>
  %1526 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1527 = bitcast <2 x i64> %1526 to <16 x i8>
  %palignr866 = shufflevector <16 x i8> %1527, <16 x i8> %1525, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1528 = bitcast <16 x i8> %palignr866 to <2 x i64>
  store <2 x i64>* %1523, <2 x i64>** %__p.addr.i2052, align 8
  store <2 x i64> %1528, <2 x i64>* %__b.addr.i2053, align 16
  %1529 = load <2 x i64>, <2 x i64>* %__b.addr.i2053, align 16
  %1530 = load <2 x i64>*, <2 x i64>** %__p.addr.i2052, align 8
  %1531 = bitcast <2 x i64>* %1530 to %struct.__storeu_si128*
  %__v.i2054 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1531, i32 0, i32 0
  store <2 x i64> %1529, <2 x i64>* %__v.i2054, align 1
  %1532 = load i8*, i8** %dst.addr, align 8
  %add.ptr867 = getelementptr inbounds i8, i8* %1532, i64 80
  %1533 = bitcast i8* %add.ptr867 to <2 x i64>*
  %1534 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1535 = bitcast <2 x i64> %1534 to <16 x i8>
  %1536 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1537 = bitcast <2 x i64> %1536 to <16 x i8>
  %palignr868 = shufflevector <16 x i8> %1537, <16 x i8> %1535, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1538 = bitcast <16 x i8> %palignr868 to <2 x i64>
  store <2 x i64>* %1533, <2 x i64>** %__p.addr.i2049, align 8
  store <2 x i64> %1538, <2 x i64>* %__b.addr.i2050, align 16
  %1539 = load <2 x i64>, <2 x i64>* %__b.addr.i2050, align 16
  %1540 = load <2 x i64>*, <2 x i64>** %__p.addr.i2049, align 8
  %1541 = bitcast <2 x i64>* %1540 to %struct.__storeu_si128*
  %__v.i2051 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1541, i32 0, i32 0
  store <2 x i64> %1539, <2 x i64>* %__v.i2051, align 1
  %1542 = load i8*, i8** %dst.addr, align 8
  %add.ptr869 = getelementptr inbounds i8, i8* %1542, i64 96
  %1543 = bitcast i8* %add.ptr869 to <2 x i64>*
  %1544 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1545 = bitcast <2 x i64> %1544 to <16 x i8>
  %1546 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1547 = bitcast <2 x i64> %1546 to <16 x i8>
  %palignr870 = shufflevector <16 x i8> %1547, <16 x i8> %1545, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1548 = bitcast <16 x i8> %palignr870 to <2 x i64>
  store <2 x i64>* %1543, <2 x i64>** %__p.addr.i2046, align 8
  store <2 x i64> %1548, <2 x i64>* %__b.addr.i2047, align 16
  %1549 = load <2 x i64>, <2 x i64>* %__b.addr.i2047, align 16
  %1550 = load <2 x i64>*, <2 x i64>** %__p.addr.i2046, align 8
  %1551 = bitcast <2 x i64>* %1550 to %struct.__storeu_si128*
  %__v.i2048 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1551, i32 0, i32 0
  store <2 x i64> %1549, <2 x i64>* %__v.i2048, align 1
  %1552 = load i8*, i8** %dst.addr, align 8
  %add.ptr871 = getelementptr inbounds i8, i8* %1552, i64 112
  %1553 = bitcast i8* %add.ptr871 to <2 x i64>*
  %1554 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1555 = bitcast <2 x i64> %1554 to <16 x i8>
  %1556 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1557 = bitcast <2 x i64> %1556 to <16 x i8>
  %palignr872 = shufflevector <16 x i8> %1557, <16 x i8> %1555, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1558 = bitcast <16 x i8> %palignr872 to <2 x i64>
  store <2 x i64>* %1553, <2 x i64>** %__p.addr.i2043, align 8
  store <2 x i64> %1558, <2 x i64>* %__b.addr.i2044, align 16
  %1559 = load <2 x i64>, <2 x i64>* %__b.addr.i2044, align 16
  %1560 = load <2 x i64>*, <2 x i64>** %__p.addr.i2043, align 8
  %1561 = bitcast <2 x i64>* %1560 to %struct.__storeu_si128*
  %__v.i2045 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1561, i32 0, i32 0
  store <2 x i64> %1559, <2 x i64>* %__v.i2045, align 1
  %1562 = load i8*, i8** %dst.addr, align 8
  %add.ptr873 = getelementptr inbounds i8, i8* %1562, i64 128
  store i8* %add.ptr873, i8** %dst.addr, align 8
  br label %while.cond824

while.end874:                                     ; preds = %while.cond824
  %1563 = load i64, i64* %n.addr, align 8
  %conv875 = trunc i64 %1563 to i32
  store i32 %conv875, i32* %tmp823, align 4
  %1564 = load i64, i64* %n.addr, align 8
  %sub876 = sub i64 %1564, 16
  %add877 = add i64 %sub876, 8
  %and878 = and i64 %add877, 127
  %add879 = add i64 %and878, 16
  %sub880 = sub i64 %add879, 8
  store i64 %sub880, i64* %n.addr, align 8
  %1565 = load i64, i64* %n.addr, align 8
  %1566 = load i32, i32* %tmp823, align 4
  %conv881 = sext i32 %1566 to i64
  %sub882 = sub i64 %conv881, %1565
  %conv883 = trunc i64 %sub882 to i32
  store i32 %conv883, i32* %tmp823, align 4
  %1567 = load i8*, i8** %src.addr, align 8
  %1568 = load i32, i32* %tmp823, align 4
  %idx.ext884 = sext i32 %1568 to i64
  %add.ptr885 = getelementptr inbounds i8, i8* %1567, i64 %idx.ext884
  store i8* %add.ptr885, i8** %src.addr, align 8
  %1569 = load i8*, i8** %dst.addr, align 8
  %1570 = load i32, i32* %tmp823, align 4
  %idx.ext886 = sext i32 %1570 to i64
  %add.ptr887 = getelementptr inbounds i8, i8* %1569, i64 %idx.ext886
  store i8* %add.ptr887, i8** %dst.addr, align 8
  %1571 = load i64, i64* %n.addr, align 8
  %cmp888 = icmp uge i64 %1571, 40
  br i1 %cmp888, label %if.then890, label %if.end925

if.then890:                                       ; preds = %while.end874
  br label %while.cond891

while.cond891:                                    ; preds = %while.body894, %if.then890
  %1572 = load i64, i64* %n.addr, align 8
  %cmp892 = icmp uge i64 %1572, 40
  br i1 %cmp892, label %while.body894, label %while.end911

while.body894:                                    ; preds = %while.cond891
  %1573 = load i8*, i8** %src.addr, align 8
  %add.ptr895 = getelementptr inbounds i8, i8* %1573, i64 -8
  %add.ptr896 = getelementptr inbounds i8, i8* %add.ptr895, i64 0
  %1574 = bitcast i8* %add.ptr896 to <2 x i64>*
  store <2 x i64>* %1574, <2 x i64>** %__p.addr.i2041, align 8
  %1575 = load <2 x i64>*, <2 x i64>** %__p.addr.i2041, align 8
  %1576 = bitcast <2 x i64>* %1575 to %struct.__loadu_si128*
  %__v.i2042 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1576, i32 0, i32 0
  %1577 = load <2 x i64>, <2 x i64>* %__v.i2042, align 1
  store <2 x i64> %1577, <2 x i64>* %xmm0, align 16
  %1578 = load i64, i64* %n.addr, align 8
  %sub898 = sub i64 %1578, 32
  store i64 %sub898, i64* %n.addr, align 8
  %1579 = load i8*, i8** %src.addr, align 8
  %add.ptr899 = getelementptr inbounds i8, i8* %1579, i64 -8
  %add.ptr900 = getelementptr inbounds i8, i8* %add.ptr899, i64 16
  %1580 = bitcast i8* %add.ptr900 to <2 x i64>*
  store <2 x i64>* %1580, <2 x i64>** %__p.addr.i2039, align 8
  %1581 = load <2 x i64>*, <2 x i64>** %__p.addr.i2039, align 8
  %1582 = bitcast <2 x i64>* %1581 to %struct.__loadu_si128*
  %__v.i2040 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1582, i32 0, i32 0
  %1583 = load <2 x i64>, <2 x i64>* %__v.i2040, align 1
  store <2 x i64> %1583, <2 x i64>* %xmm1, align 16
  %1584 = load i8*, i8** %src.addr, align 8
  %add.ptr902 = getelementptr inbounds i8, i8* %1584, i64 -8
  %add.ptr903 = getelementptr inbounds i8, i8* %add.ptr902, i64 32
  %1585 = bitcast i8* %add.ptr903 to <2 x i64>*
  store <2 x i64>* %1585, <2 x i64>** %__p.addr.i2037, align 8
  %1586 = load <2 x i64>*, <2 x i64>** %__p.addr.i2037, align 8
  %1587 = bitcast <2 x i64>* %1586 to %struct.__loadu_si128*
  %__v.i2038 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1587, i32 0, i32 0
  %1588 = load <2 x i64>, <2 x i64>* %__v.i2038, align 1
  store <2 x i64> %1588, <2 x i64>* %xmm2, align 16
  %1589 = load i8*, i8** %src.addr, align 8
  %add.ptr905 = getelementptr inbounds i8, i8* %1589, i64 32
  store i8* %add.ptr905, i8** %src.addr, align 8
  %1590 = load i8*, i8** %dst.addr, align 8
  %add.ptr906 = getelementptr inbounds i8, i8* %1590, i64 0
  %1591 = bitcast i8* %add.ptr906 to <2 x i64>*
  %1592 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1593 = bitcast <2 x i64> %1592 to <16 x i8>
  %1594 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1595 = bitcast <2 x i64> %1594 to <16 x i8>
  %palignr907 = shufflevector <16 x i8> %1595, <16 x i8> %1593, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1596 = bitcast <16 x i8> %palignr907 to <2 x i64>
  store <2 x i64>* %1591, <2 x i64>** %__p.addr.i2034, align 8
  store <2 x i64> %1596, <2 x i64>* %__b.addr.i2035, align 16
  %1597 = load <2 x i64>, <2 x i64>* %__b.addr.i2035, align 16
  %1598 = load <2 x i64>*, <2 x i64>** %__p.addr.i2034, align 8
  %1599 = bitcast <2 x i64>* %1598 to %struct.__storeu_si128*
  %__v.i2036 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1599, i32 0, i32 0
  store <2 x i64> %1597, <2 x i64>* %__v.i2036, align 1
  %1600 = load i8*, i8** %dst.addr, align 8
  %add.ptr908 = getelementptr inbounds i8, i8* %1600, i64 16
  %1601 = bitcast i8* %add.ptr908 to <2 x i64>*
  %1602 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1603 = bitcast <2 x i64> %1602 to <16 x i8>
  %1604 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1605 = bitcast <2 x i64> %1604 to <16 x i8>
  %palignr909 = shufflevector <16 x i8> %1605, <16 x i8> %1603, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1606 = bitcast <16 x i8> %palignr909 to <2 x i64>
  store <2 x i64>* %1601, <2 x i64>** %__p.addr.i2031, align 8
  store <2 x i64> %1606, <2 x i64>* %__b.addr.i2032, align 16
  %1607 = load <2 x i64>, <2 x i64>* %__b.addr.i2032, align 16
  %1608 = load <2 x i64>*, <2 x i64>** %__p.addr.i2031, align 8
  %1609 = bitcast <2 x i64>* %1608 to %struct.__storeu_si128*
  %__v.i2033 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1609, i32 0, i32 0
  store <2 x i64> %1607, <2 x i64>* %__v.i2033, align 1
  %1610 = load i8*, i8** %dst.addr, align 8
  %add.ptr910 = getelementptr inbounds i8, i8* %1610, i64 32
  store i8* %add.ptr910, i8** %dst.addr, align 8
  br label %while.cond891

while.end911:                                     ; preds = %while.cond891
  %1611 = load i64, i64* %n.addr, align 8
  %conv912 = trunc i64 %1611 to i32
  store i32 %conv912, i32* %tmp823, align 4
  %1612 = load i64, i64* %n.addr, align 8
  %sub913 = sub i64 %1612, 16
  %add914 = add i64 %sub913, 8
  %and915 = and i64 %add914, 31
  %add916 = add i64 %and915, 16
  %sub917 = sub i64 %add916, 8
  store i64 %sub917, i64* %n.addr, align 8
  %1613 = load i64, i64* %n.addr, align 8
  %1614 = load i32, i32* %tmp823, align 4
  %conv918 = sext i32 %1614 to i64
  %sub919 = sub i64 %conv918, %1613
  %conv920 = trunc i64 %sub919 to i32
  store i32 %conv920, i32* %tmp823, align 4
  %1615 = load i8*, i8** %src.addr, align 8
  %1616 = load i32, i32* %tmp823, align 4
  %idx.ext921 = sext i32 %1616 to i64
  %add.ptr922 = getelementptr inbounds i8, i8* %1615, i64 %idx.ext921
  store i8* %add.ptr922, i8** %src.addr, align 8
  %1617 = load i8*, i8** %dst.addr, align 8
  %1618 = load i32, i32* %tmp823, align 4
  %idx.ext923 = sext i32 %1618 to i64
  %add.ptr924 = getelementptr inbounds i8, i8* %1617, i64 %idx.ext923
  store i8* %add.ptr924, i8** %dst.addr, align 8
  br label %if.end925

if.end925:                                        ; preds = %while.end911, %while.end874
  br label %sw.epilog

sw.bb926:                                         ; preds = %if.end103
  br label %while.cond928

while.cond928:                                    ; preds = %while.body931, %sw.bb926
  %1619 = load i64, i64* %n.addr, align 8
  %cmp929 = icmp uge i64 %1619, 135
  br i1 %cmp929, label %while.body931, label %while.end978

while.body931:                                    ; preds = %while.cond928
  %1620 = load i8*, i8** %src.addr, align 8
  %add.ptr932 = getelementptr inbounds i8, i8* %1620, i64 -9
  %add.ptr933 = getelementptr inbounds i8, i8* %add.ptr932, i64 0
  %1621 = bitcast i8* %add.ptr933 to <2 x i64>*
  store <2 x i64>* %1621, <2 x i64>** %__p.addr.i2029, align 8
  %1622 = load <2 x i64>*, <2 x i64>** %__p.addr.i2029, align 8
  %1623 = bitcast <2 x i64>* %1622 to %struct.__loadu_si128*
  %__v.i2030 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1623, i32 0, i32 0
  %1624 = load <2 x i64>, <2 x i64>* %__v.i2030, align 1
  store <2 x i64> %1624, <2 x i64>* %xmm0, align 16
  %1625 = load i64, i64* %n.addr, align 8
  %sub935 = sub i64 %1625, 128
  store i64 %sub935, i64* %n.addr, align 8
  %1626 = load i8*, i8** %src.addr, align 8
  %add.ptr936 = getelementptr inbounds i8, i8* %1626, i64 -9
  %add.ptr937 = getelementptr inbounds i8, i8* %add.ptr936, i64 16
  %1627 = bitcast i8* %add.ptr937 to <2 x i64>*
  store <2 x i64>* %1627, <2 x i64>** %__p.addr.i2027, align 8
  %1628 = load <2 x i64>*, <2 x i64>** %__p.addr.i2027, align 8
  %1629 = bitcast <2 x i64>* %1628 to %struct.__loadu_si128*
  %__v.i2028 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1629, i32 0, i32 0
  %1630 = load <2 x i64>, <2 x i64>* %__v.i2028, align 1
  store <2 x i64> %1630, <2 x i64>* %xmm1, align 16
  %1631 = load i8*, i8** %src.addr, align 8
  %add.ptr939 = getelementptr inbounds i8, i8* %1631, i64 -9
  %add.ptr940 = getelementptr inbounds i8, i8* %add.ptr939, i64 32
  %1632 = bitcast i8* %add.ptr940 to <2 x i64>*
  store <2 x i64>* %1632, <2 x i64>** %__p.addr.i2025, align 8
  %1633 = load <2 x i64>*, <2 x i64>** %__p.addr.i2025, align 8
  %1634 = bitcast <2 x i64>* %1633 to %struct.__loadu_si128*
  %__v.i2026 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1634, i32 0, i32 0
  %1635 = load <2 x i64>, <2 x i64>* %__v.i2026, align 1
  store <2 x i64> %1635, <2 x i64>* %xmm2, align 16
  %1636 = load i8*, i8** %src.addr, align 8
  %add.ptr942 = getelementptr inbounds i8, i8* %1636, i64 -9
  %add.ptr943 = getelementptr inbounds i8, i8* %add.ptr942, i64 48
  %1637 = bitcast i8* %add.ptr943 to <2 x i64>*
  store <2 x i64>* %1637, <2 x i64>** %__p.addr.i2023, align 8
  %1638 = load <2 x i64>*, <2 x i64>** %__p.addr.i2023, align 8
  %1639 = bitcast <2 x i64>* %1638 to %struct.__loadu_si128*
  %__v.i2024 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1639, i32 0, i32 0
  %1640 = load <2 x i64>, <2 x i64>* %__v.i2024, align 1
  store <2 x i64> %1640, <2 x i64>* %xmm3, align 16
  %1641 = load i8*, i8** %src.addr, align 8
  %add.ptr945 = getelementptr inbounds i8, i8* %1641, i64 -9
  %add.ptr946 = getelementptr inbounds i8, i8* %add.ptr945, i64 64
  %1642 = bitcast i8* %add.ptr946 to <2 x i64>*
  store <2 x i64>* %1642, <2 x i64>** %__p.addr.i2021, align 8
  %1643 = load <2 x i64>*, <2 x i64>** %__p.addr.i2021, align 8
  %1644 = bitcast <2 x i64>* %1643 to %struct.__loadu_si128*
  %__v.i2022 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1644, i32 0, i32 0
  %1645 = load <2 x i64>, <2 x i64>* %__v.i2022, align 1
  store <2 x i64> %1645, <2 x i64>* %xmm4, align 16
  %1646 = load i8*, i8** %src.addr, align 8
  %add.ptr948 = getelementptr inbounds i8, i8* %1646, i64 -9
  %add.ptr949 = getelementptr inbounds i8, i8* %add.ptr948, i64 80
  %1647 = bitcast i8* %add.ptr949 to <2 x i64>*
  store <2 x i64>* %1647, <2 x i64>** %__p.addr.i2019, align 8
  %1648 = load <2 x i64>*, <2 x i64>** %__p.addr.i2019, align 8
  %1649 = bitcast <2 x i64>* %1648 to %struct.__loadu_si128*
  %__v.i2020 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1649, i32 0, i32 0
  %1650 = load <2 x i64>, <2 x i64>* %__v.i2020, align 1
  store <2 x i64> %1650, <2 x i64>* %xmm5, align 16
  %1651 = load i8*, i8** %src.addr, align 8
  %add.ptr951 = getelementptr inbounds i8, i8* %1651, i64 -9
  %add.ptr952 = getelementptr inbounds i8, i8* %add.ptr951, i64 96
  %1652 = bitcast i8* %add.ptr952 to <2 x i64>*
  store <2 x i64>* %1652, <2 x i64>** %__p.addr.i2017, align 8
  %1653 = load <2 x i64>*, <2 x i64>** %__p.addr.i2017, align 8
  %1654 = bitcast <2 x i64>* %1653 to %struct.__loadu_si128*
  %__v.i2018 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1654, i32 0, i32 0
  %1655 = load <2 x i64>, <2 x i64>* %__v.i2018, align 1
  store <2 x i64> %1655, <2 x i64>* %xmm6, align 16
  %1656 = load i8*, i8** %src.addr, align 8
  %add.ptr954 = getelementptr inbounds i8, i8* %1656, i64 -9
  %add.ptr955 = getelementptr inbounds i8, i8* %add.ptr954, i64 112
  %1657 = bitcast i8* %add.ptr955 to <2 x i64>*
  store <2 x i64>* %1657, <2 x i64>** %__p.addr.i2015, align 8
  %1658 = load <2 x i64>*, <2 x i64>** %__p.addr.i2015, align 8
  %1659 = bitcast <2 x i64>* %1658 to %struct.__loadu_si128*
  %__v.i2016 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1659, i32 0, i32 0
  %1660 = load <2 x i64>, <2 x i64>* %__v.i2016, align 1
  store <2 x i64> %1660, <2 x i64>* %xmm7, align 16
  %1661 = load i8*, i8** %src.addr, align 8
  %add.ptr957 = getelementptr inbounds i8, i8* %1661, i64 -9
  %add.ptr958 = getelementptr inbounds i8, i8* %add.ptr957, i64 128
  %1662 = bitcast i8* %add.ptr958 to <2 x i64>*
  store <2 x i64>* %1662, <2 x i64>** %__p.addr.i2013, align 8
  %1663 = load <2 x i64>*, <2 x i64>** %__p.addr.i2013, align 8
  %1664 = bitcast <2 x i64>* %1663 to %struct.__loadu_si128*
  %__v.i2014 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1664, i32 0, i32 0
  %1665 = load <2 x i64>, <2 x i64>* %__v.i2014, align 1
  store <2 x i64> %1665, <2 x i64>* %xmm8, align 16
  %1666 = load i8*, i8** %src.addr, align 8
  %add.ptr960 = getelementptr inbounds i8, i8* %1666, i64 128
  store i8* %add.ptr960, i8** %src.addr, align 8
  %1667 = load i8*, i8** %dst.addr, align 8
  %add.ptr961 = getelementptr inbounds i8, i8* %1667, i64 0
  %1668 = bitcast i8* %add.ptr961 to <2 x i64>*
  %1669 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1670 = bitcast <2 x i64> %1669 to <16 x i8>
  %1671 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1672 = bitcast <2 x i64> %1671 to <16 x i8>
  %palignr962 = shufflevector <16 x i8> %1672, <16 x i8> %1670, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1673 = bitcast <16 x i8> %palignr962 to <2 x i64>
  store <2 x i64>* %1668, <2 x i64>** %__p.addr.i2010, align 8
  store <2 x i64> %1673, <2 x i64>* %__b.addr.i2011, align 16
  %1674 = load <2 x i64>, <2 x i64>* %__b.addr.i2011, align 16
  %1675 = load <2 x i64>*, <2 x i64>** %__p.addr.i2010, align 8
  %1676 = bitcast <2 x i64>* %1675 to %struct.__storeu_si128*
  %__v.i2012 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1676, i32 0, i32 0
  store <2 x i64> %1674, <2 x i64>* %__v.i2012, align 1
  %1677 = load i8*, i8** %dst.addr, align 8
  %add.ptr963 = getelementptr inbounds i8, i8* %1677, i64 16
  %1678 = bitcast i8* %add.ptr963 to <2 x i64>*
  %1679 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1680 = bitcast <2 x i64> %1679 to <16 x i8>
  %1681 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1682 = bitcast <2 x i64> %1681 to <16 x i8>
  %palignr964 = shufflevector <16 x i8> %1682, <16 x i8> %1680, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1683 = bitcast <16 x i8> %palignr964 to <2 x i64>
  store <2 x i64>* %1678, <2 x i64>** %__p.addr.i2007, align 8
  store <2 x i64> %1683, <2 x i64>* %__b.addr.i2008, align 16
  %1684 = load <2 x i64>, <2 x i64>* %__b.addr.i2008, align 16
  %1685 = load <2 x i64>*, <2 x i64>** %__p.addr.i2007, align 8
  %1686 = bitcast <2 x i64>* %1685 to %struct.__storeu_si128*
  %__v.i2009 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1686, i32 0, i32 0
  store <2 x i64> %1684, <2 x i64>* %__v.i2009, align 1
  %1687 = load i8*, i8** %dst.addr, align 8
  %add.ptr965 = getelementptr inbounds i8, i8* %1687, i64 32
  %1688 = bitcast i8* %add.ptr965 to <2 x i64>*
  %1689 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1690 = bitcast <2 x i64> %1689 to <16 x i8>
  %1691 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1692 = bitcast <2 x i64> %1691 to <16 x i8>
  %palignr966 = shufflevector <16 x i8> %1692, <16 x i8> %1690, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1693 = bitcast <16 x i8> %palignr966 to <2 x i64>
  store <2 x i64>* %1688, <2 x i64>** %__p.addr.i2004, align 8
  store <2 x i64> %1693, <2 x i64>* %__b.addr.i2005, align 16
  %1694 = load <2 x i64>, <2 x i64>* %__b.addr.i2005, align 16
  %1695 = load <2 x i64>*, <2 x i64>** %__p.addr.i2004, align 8
  %1696 = bitcast <2 x i64>* %1695 to %struct.__storeu_si128*
  %__v.i2006 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1696, i32 0, i32 0
  store <2 x i64> %1694, <2 x i64>* %__v.i2006, align 1
  %1697 = load i8*, i8** %dst.addr, align 8
  %add.ptr967 = getelementptr inbounds i8, i8* %1697, i64 48
  %1698 = bitcast i8* %add.ptr967 to <2 x i64>*
  %1699 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1700 = bitcast <2 x i64> %1699 to <16 x i8>
  %1701 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1702 = bitcast <2 x i64> %1701 to <16 x i8>
  %palignr968 = shufflevector <16 x i8> %1702, <16 x i8> %1700, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1703 = bitcast <16 x i8> %palignr968 to <2 x i64>
  store <2 x i64>* %1698, <2 x i64>** %__p.addr.i2001, align 8
  store <2 x i64> %1703, <2 x i64>* %__b.addr.i2002, align 16
  %1704 = load <2 x i64>, <2 x i64>* %__b.addr.i2002, align 16
  %1705 = load <2 x i64>*, <2 x i64>** %__p.addr.i2001, align 8
  %1706 = bitcast <2 x i64>* %1705 to %struct.__storeu_si128*
  %__v.i2003 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1706, i32 0, i32 0
  store <2 x i64> %1704, <2 x i64>* %__v.i2003, align 1
  %1707 = load i8*, i8** %dst.addr, align 8
  %add.ptr969 = getelementptr inbounds i8, i8* %1707, i64 64
  %1708 = bitcast i8* %add.ptr969 to <2 x i64>*
  %1709 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1710 = bitcast <2 x i64> %1709 to <16 x i8>
  %1711 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1712 = bitcast <2 x i64> %1711 to <16 x i8>
  %palignr970 = shufflevector <16 x i8> %1712, <16 x i8> %1710, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1713 = bitcast <16 x i8> %palignr970 to <2 x i64>
  store <2 x i64>* %1708, <2 x i64>** %__p.addr.i1998, align 8
  store <2 x i64> %1713, <2 x i64>* %__b.addr.i1999, align 16
  %1714 = load <2 x i64>, <2 x i64>* %__b.addr.i1999, align 16
  %1715 = load <2 x i64>*, <2 x i64>** %__p.addr.i1998, align 8
  %1716 = bitcast <2 x i64>* %1715 to %struct.__storeu_si128*
  %__v.i2000 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1716, i32 0, i32 0
  store <2 x i64> %1714, <2 x i64>* %__v.i2000, align 1
  %1717 = load i8*, i8** %dst.addr, align 8
  %add.ptr971 = getelementptr inbounds i8, i8* %1717, i64 80
  %1718 = bitcast i8* %add.ptr971 to <2 x i64>*
  %1719 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1720 = bitcast <2 x i64> %1719 to <16 x i8>
  %1721 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1722 = bitcast <2 x i64> %1721 to <16 x i8>
  %palignr972 = shufflevector <16 x i8> %1722, <16 x i8> %1720, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1723 = bitcast <16 x i8> %palignr972 to <2 x i64>
  store <2 x i64>* %1718, <2 x i64>** %__p.addr.i1995, align 8
  store <2 x i64> %1723, <2 x i64>* %__b.addr.i1996, align 16
  %1724 = load <2 x i64>, <2 x i64>* %__b.addr.i1996, align 16
  %1725 = load <2 x i64>*, <2 x i64>** %__p.addr.i1995, align 8
  %1726 = bitcast <2 x i64>* %1725 to %struct.__storeu_si128*
  %__v.i1997 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1726, i32 0, i32 0
  store <2 x i64> %1724, <2 x i64>* %__v.i1997, align 1
  %1727 = load i8*, i8** %dst.addr, align 8
  %add.ptr973 = getelementptr inbounds i8, i8* %1727, i64 96
  %1728 = bitcast i8* %add.ptr973 to <2 x i64>*
  %1729 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1730 = bitcast <2 x i64> %1729 to <16 x i8>
  %1731 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1732 = bitcast <2 x i64> %1731 to <16 x i8>
  %palignr974 = shufflevector <16 x i8> %1732, <16 x i8> %1730, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1733 = bitcast <16 x i8> %palignr974 to <2 x i64>
  store <2 x i64>* %1728, <2 x i64>** %__p.addr.i1992, align 8
  store <2 x i64> %1733, <2 x i64>* %__b.addr.i1993, align 16
  %1734 = load <2 x i64>, <2 x i64>* %__b.addr.i1993, align 16
  %1735 = load <2 x i64>*, <2 x i64>** %__p.addr.i1992, align 8
  %1736 = bitcast <2 x i64>* %1735 to %struct.__storeu_si128*
  %__v.i1994 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1736, i32 0, i32 0
  store <2 x i64> %1734, <2 x i64>* %__v.i1994, align 1
  %1737 = load i8*, i8** %dst.addr, align 8
  %add.ptr975 = getelementptr inbounds i8, i8* %1737, i64 112
  %1738 = bitcast i8* %add.ptr975 to <2 x i64>*
  %1739 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1740 = bitcast <2 x i64> %1739 to <16 x i8>
  %1741 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1742 = bitcast <2 x i64> %1741 to <16 x i8>
  %palignr976 = shufflevector <16 x i8> %1742, <16 x i8> %1740, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1743 = bitcast <16 x i8> %palignr976 to <2 x i64>
  store <2 x i64>* %1738, <2 x i64>** %__p.addr.i1989, align 8
  store <2 x i64> %1743, <2 x i64>* %__b.addr.i1990, align 16
  %1744 = load <2 x i64>, <2 x i64>* %__b.addr.i1990, align 16
  %1745 = load <2 x i64>*, <2 x i64>** %__p.addr.i1989, align 8
  %1746 = bitcast <2 x i64>* %1745 to %struct.__storeu_si128*
  %__v.i1991 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1746, i32 0, i32 0
  store <2 x i64> %1744, <2 x i64>* %__v.i1991, align 1
  %1747 = load i8*, i8** %dst.addr, align 8
  %add.ptr977 = getelementptr inbounds i8, i8* %1747, i64 128
  store i8* %add.ptr977, i8** %dst.addr, align 8
  br label %while.cond928

while.end978:                                     ; preds = %while.cond928
  %1748 = load i64, i64* %n.addr, align 8
  %conv979 = trunc i64 %1748 to i32
  store i32 %conv979, i32* %tmp927, align 4
  %1749 = load i64, i64* %n.addr, align 8
  %sub980 = sub i64 %1749, 16
  %add981 = add i64 %sub980, 9
  %and982 = and i64 %add981, 127
  %add983 = add i64 %and982, 16
  %sub984 = sub i64 %add983, 9
  store i64 %sub984, i64* %n.addr, align 8
  %1750 = load i64, i64* %n.addr, align 8
  %1751 = load i32, i32* %tmp927, align 4
  %conv985 = sext i32 %1751 to i64
  %sub986 = sub i64 %conv985, %1750
  %conv987 = trunc i64 %sub986 to i32
  store i32 %conv987, i32* %tmp927, align 4
  %1752 = load i8*, i8** %src.addr, align 8
  %1753 = load i32, i32* %tmp927, align 4
  %idx.ext988 = sext i32 %1753 to i64
  %add.ptr989 = getelementptr inbounds i8, i8* %1752, i64 %idx.ext988
  store i8* %add.ptr989, i8** %src.addr, align 8
  %1754 = load i8*, i8** %dst.addr, align 8
  %1755 = load i32, i32* %tmp927, align 4
  %idx.ext990 = sext i32 %1755 to i64
  %add.ptr991 = getelementptr inbounds i8, i8* %1754, i64 %idx.ext990
  store i8* %add.ptr991, i8** %dst.addr, align 8
  %1756 = load i64, i64* %n.addr, align 8
  %cmp992 = icmp uge i64 %1756, 39
  br i1 %cmp992, label %if.then994, label %if.end1029

if.then994:                                       ; preds = %while.end978
  br label %while.cond995

while.cond995:                                    ; preds = %while.body998, %if.then994
  %1757 = load i64, i64* %n.addr, align 8
  %cmp996 = icmp uge i64 %1757, 39
  br i1 %cmp996, label %while.body998, label %while.end1015

while.body998:                                    ; preds = %while.cond995
  %1758 = load i8*, i8** %src.addr, align 8
  %add.ptr999 = getelementptr inbounds i8, i8* %1758, i64 -9
  %add.ptr1000 = getelementptr inbounds i8, i8* %add.ptr999, i64 0
  %1759 = bitcast i8* %add.ptr1000 to <2 x i64>*
  store <2 x i64>* %1759, <2 x i64>** %__p.addr.i1987, align 8
  %1760 = load <2 x i64>*, <2 x i64>** %__p.addr.i1987, align 8
  %1761 = bitcast <2 x i64>* %1760 to %struct.__loadu_si128*
  %__v.i1988 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1761, i32 0, i32 0
  %1762 = load <2 x i64>, <2 x i64>* %__v.i1988, align 1
  store <2 x i64> %1762, <2 x i64>* %xmm0, align 16
  %1763 = load i64, i64* %n.addr, align 8
  %sub1002 = sub i64 %1763, 32
  store i64 %sub1002, i64* %n.addr, align 8
  %1764 = load i8*, i8** %src.addr, align 8
  %add.ptr1003 = getelementptr inbounds i8, i8* %1764, i64 -9
  %add.ptr1004 = getelementptr inbounds i8, i8* %add.ptr1003, i64 16
  %1765 = bitcast i8* %add.ptr1004 to <2 x i64>*
  store <2 x i64>* %1765, <2 x i64>** %__p.addr.i1985, align 8
  %1766 = load <2 x i64>*, <2 x i64>** %__p.addr.i1985, align 8
  %1767 = bitcast <2 x i64>* %1766 to %struct.__loadu_si128*
  %__v.i1986 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1767, i32 0, i32 0
  %1768 = load <2 x i64>, <2 x i64>* %__v.i1986, align 1
  store <2 x i64> %1768, <2 x i64>* %xmm1, align 16
  %1769 = load i8*, i8** %src.addr, align 8
  %add.ptr1006 = getelementptr inbounds i8, i8* %1769, i64 -9
  %add.ptr1007 = getelementptr inbounds i8, i8* %add.ptr1006, i64 32
  %1770 = bitcast i8* %add.ptr1007 to <2 x i64>*
  store <2 x i64>* %1770, <2 x i64>** %__p.addr.i1983, align 8
  %1771 = load <2 x i64>*, <2 x i64>** %__p.addr.i1983, align 8
  %1772 = bitcast <2 x i64>* %1771 to %struct.__loadu_si128*
  %__v.i1984 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1772, i32 0, i32 0
  %1773 = load <2 x i64>, <2 x i64>* %__v.i1984, align 1
  store <2 x i64> %1773, <2 x i64>* %xmm2, align 16
  %1774 = load i8*, i8** %src.addr, align 8
  %add.ptr1009 = getelementptr inbounds i8, i8* %1774, i64 32
  store i8* %add.ptr1009, i8** %src.addr, align 8
  %1775 = load i8*, i8** %dst.addr, align 8
  %add.ptr1010 = getelementptr inbounds i8, i8* %1775, i64 0
  %1776 = bitcast i8* %add.ptr1010 to <2 x i64>*
  %1777 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1778 = bitcast <2 x i64> %1777 to <16 x i8>
  %1779 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1780 = bitcast <2 x i64> %1779 to <16 x i8>
  %palignr1011 = shufflevector <16 x i8> %1780, <16 x i8> %1778, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1781 = bitcast <16 x i8> %palignr1011 to <2 x i64>
  store <2 x i64>* %1776, <2 x i64>** %__p.addr.i1980, align 8
  store <2 x i64> %1781, <2 x i64>* %__b.addr.i1981, align 16
  %1782 = load <2 x i64>, <2 x i64>* %__b.addr.i1981, align 16
  %1783 = load <2 x i64>*, <2 x i64>** %__p.addr.i1980, align 8
  %1784 = bitcast <2 x i64>* %1783 to %struct.__storeu_si128*
  %__v.i1982 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1784, i32 0, i32 0
  store <2 x i64> %1782, <2 x i64>* %__v.i1982, align 1
  %1785 = load i8*, i8** %dst.addr, align 8
  %add.ptr1012 = getelementptr inbounds i8, i8* %1785, i64 16
  %1786 = bitcast i8* %add.ptr1012 to <2 x i64>*
  %1787 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1788 = bitcast <2 x i64> %1787 to <16 x i8>
  %1789 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1790 = bitcast <2 x i64> %1789 to <16 x i8>
  %palignr1013 = shufflevector <16 x i8> %1790, <16 x i8> %1788, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1791 = bitcast <16 x i8> %palignr1013 to <2 x i64>
  store <2 x i64>* %1786, <2 x i64>** %__p.addr.i1977, align 8
  store <2 x i64> %1791, <2 x i64>* %__b.addr.i1978, align 16
  %1792 = load <2 x i64>, <2 x i64>* %__b.addr.i1978, align 16
  %1793 = load <2 x i64>*, <2 x i64>** %__p.addr.i1977, align 8
  %1794 = bitcast <2 x i64>* %1793 to %struct.__storeu_si128*
  %__v.i1979 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1794, i32 0, i32 0
  store <2 x i64> %1792, <2 x i64>* %__v.i1979, align 1
  %1795 = load i8*, i8** %dst.addr, align 8
  %add.ptr1014 = getelementptr inbounds i8, i8* %1795, i64 32
  store i8* %add.ptr1014, i8** %dst.addr, align 8
  br label %while.cond995

while.end1015:                                    ; preds = %while.cond995
  %1796 = load i64, i64* %n.addr, align 8
  %conv1016 = trunc i64 %1796 to i32
  store i32 %conv1016, i32* %tmp927, align 4
  %1797 = load i64, i64* %n.addr, align 8
  %sub1017 = sub i64 %1797, 16
  %add1018 = add i64 %sub1017, 9
  %and1019 = and i64 %add1018, 31
  %add1020 = add i64 %and1019, 16
  %sub1021 = sub i64 %add1020, 9
  store i64 %sub1021, i64* %n.addr, align 8
  %1798 = load i64, i64* %n.addr, align 8
  %1799 = load i32, i32* %tmp927, align 4
  %conv1022 = sext i32 %1799 to i64
  %sub1023 = sub i64 %conv1022, %1798
  %conv1024 = trunc i64 %sub1023 to i32
  store i32 %conv1024, i32* %tmp927, align 4
  %1800 = load i8*, i8** %src.addr, align 8
  %1801 = load i32, i32* %tmp927, align 4
  %idx.ext1025 = sext i32 %1801 to i64
  %add.ptr1026 = getelementptr inbounds i8, i8* %1800, i64 %idx.ext1025
  store i8* %add.ptr1026, i8** %src.addr, align 8
  %1802 = load i8*, i8** %dst.addr, align 8
  %1803 = load i32, i32* %tmp927, align 4
  %idx.ext1027 = sext i32 %1803 to i64
  %add.ptr1028 = getelementptr inbounds i8, i8* %1802, i64 %idx.ext1027
  store i8* %add.ptr1028, i8** %dst.addr, align 8
  br label %if.end1029

if.end1029:                                       ; preds = %while.end1015, %while.end978
  br label %sw.epilog

sw.bb1030:                                        ; preds = %if.end103
  br label %while.cond1032

while.cond1032:                                   ; preds = %while.body1035, %sw.bb1030
  %1804 = load i64, i64* %n.addr, align 8
  %cmp1033 = icmp uge i64 %1804, 134
  br i1 %cmp1033, label %while.body1035, label %while.end1082

while.body1035:                                   ; preds = %while.cond1032
  %1805 = load i8*, i8** %src.addr, align 8
  %add.ptr1036 = getelementptr inbounds i8, i8* %1805, i64 -10
  %add.ptr1037 = getelementptr inbounds i8, i8* %add.ptr1036, i64 0
  %1806 = bitcast i8* %add.ptr1037 to <2 x i64>*
  store <2 x i64>* %1806, <2 x i64>** %__p.addr.i1975, align 8
  %1807 = load <2 x i64>*, <2 x i64>** %__p.addr.i1975, align 8
  %1808 = bitcast <2 x i64>* %1807 to %struct.__loadu_si128*
  %__v.i1976 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1808, i32 0, i32 0
  %1809 = load <2 x i64>, <2 x i64>* %__v.i1976, align 1
  store <2 x i64> %1809, <2 x i64>* %xmm0, align 16
  %1810 = load i64, i64* %n.addr, align 8
  %sub1039 = sub i64 %1810, 128
  store i64 %sub1039, i64* %n.addr, align 8
  %1811 = load i8*, i8** %src.addr, align 8
  %add.ptr1040 = getelementptr inbounds i8, i8* %1811, i64 -10
  %add.ptr1041 = getelementptr inbounds i8, i8* %add.ptr1040, i64 16
  %1812 = bitcast i8* %add.ptr1041 to <2 x i64>*
  store <2 x i64>* %1812, <2 x i64>** %__p.addr.i1973, align 8
  %1813 = load <2 x i64>*, <2 x i64>** %__p.addr.i1973, align 8
  %1814 = bitcast <2 x i64>* %1813 to %struct.__loadu_si128*
  %__v.i1974 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1814, i32 0, i32 0
  %1815 = load <2 x i64>, <2 x i64>* %__v.i1974, align 1
  store <2 x i64> %1815, <2 x i64>* %xmm1, align 16
  %1816 = load i8*, i8** %src.addr, align 8
  %add.ptr1043 = getelementptr inbounds i8, i8* %1816, i64 -10
  %add.ptr1044 = getelementptr inbounds i8, i8* %add.ptr1043, i64 32
  %1817 = bitcast i8* %add.ptr1044 to <2 x i64>*
  store <2 x i64>* %1817, <2 x i64>** %__p.addr.i1971, align 8
  %1818 = load <2 x i64>*, <2 x i64>** %__p.addr.i1971, align 8
  %1819 = bitcast <2 x i64>* %1818 to %struct.__loadu_si128*
  %__v.i1972 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1819, i32 0, i32 0
  %1820 = load <2 x i64>, <2 x i64>* %__v.i1972, align 1
  store <2 x i64> %1820, <2 x i64>* %xmm2, align 16
  %1821 = load i8*, i8** %src.addr, align 8
  %add.ptr1046 = getelementptr inbounds i8, i8* %1821, i64 -10
  %add.ptr1047 = getelementptr inbounds i8, i8* %add.ptr1046, i64 48
  %1822 = bitcast i8* %add.ptr1047 to <2 x i64>*
  store <2 x i64>* %1822, <2 x i64>** %__p.addr.i1969, align 8
  %1823 = load <2 x i64>*, <2 x i64>** %__p.addr.i1969, align 8
  %1824 = bitcast <2 x i64>* %1823 to %struct.__loadu_si128*
  %__v.i1970 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1824, i32 0, i32 0
  %1825 = load <2 x i64>, <2 x i64>* %__v.i1970, align 1
  store <2 x i64> %1825, <2 x i64>* %xmm3, align 16
  %1826 = load i8*, i8** %src.addr, align 8
  %add.ptr1049 = getelementptr inbounds i8, i8* %1826, i64 -10
  %add.ptr1050 = getelementptr inbounds i8, i8* %add.ptr1049, i64 64
  %1827 = bitcast i8* %add.ptr1050 to <2 x i64>*
  store <2 x i64>* %1827, <2 x i64>** %__p.addr.i1967, align 8
  %1828 = load <2 x i64>*, <2 x i64>** %__p.addr.i1967, align 8
  %1829 = bitcast <2 x i64>* %1828 to %struct.__loadu_si128*
  %__v.i1968 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1829, i32 0, i32 0
  %1830 = load <2 x i64>, <2 x i64>* %__v.i1968, align 1
  store <2 x i64> %1830, <2 x i64>* %xmm4, align 16
  %1831 = load i8*, i8** %src.addr, align 8
  %add.ptr1052 = getelementptr inbounds i8, i8* %1831, i64 -10
  %add.ptr1053 = getelementptr inbounds i8, i8* %add.ptr1052, i64 80
  %1832 = bitcast i8* %add.ptr1053 to <2 x i64>*
  store <2 x i64>* %1832, <2 x i64>** %__p.addr.i1965, align 8
  %1833 = load <2 x i64>*, <2 x i64>** %__p.addr.i1965, align 8
  %1834 = bitcast <2 x i64>* %1833 to %struct.__loadu_si128*
  %__v.i1966 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1834, i32 0, i32 0
  %1835 = load <2 x i64>, <2 x i64>* %__v.i1966, align 1
  store <2 x i64> %1835, <2 x i64>* %xmm5, align 16
  %1836 = load i8*, i8** %src.addr, align 8
  %add.ptr1055 = getelementptr inbounds i8, i8* %1836, i64 -10
  %add.ptr1056 = getelementptr inbounds i8, i8* %add.ptr1055, i64 96
  %1837 = bitcast i8* %add.ptr1056 to <2 x i64>*
  store <2 x i64>* %1837, <2 x i64>** %__p.addr.i1963, align 8
  %1838 = load <2 x i64>*, <2 x i64>** %__p.addr.i1963, align 8
  %1839 = bitcast <2 x i64>* %1838 to %struct.__loadu_si128*
  %__v.i1964 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1839, i32 0, i32 0
  %1840 = load <2 x i64>, <2 x i64>* %__v.i1964, align 1
  store <2 x i64> %1840, <2 x i64>* %xmm6, align 16
  %1841 = load i8*, i8** %src.addr, align 8
  %add.ptr1058 = getelementptr inbounds i8, i8* %1841, i64 -10
  %add.ptr1059 = getelementptr inbounds i8, i8* %add.ptr1058, i64 112
  %1842 = bitcast i8* %add.ptr1059 to <2 x i64>*
  store <2 x i64>* %1842, <2 x i64>** %__p.addr.i1961, align 8
  %1843 = load <2 x i64>*, <2 x i64>** %__p.addr.i1961, align 8
  %1844 = bitcast <2 x i64>* %1843 to %struct.__loadu_si128*
  %__v.i1962 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1844, i32 0, i32 0
  %1845 = load <2 x i64>, <2 x i64>* %__v.i1962, align 1
  store <2 x i64> %1845, <2 x i64>* %xmm7, align 16
  %1846 = load i8*, i8** %src.addr, align 8
  %add.ptr1061 = getelementptr inbounds i8, i8* %1846, i64 -10
  %add.ptr1062 = getelementptr inbounds i8, i8* %add.ptr1061, i64 128
  %1847 = bitcast i8* %add.ptr1062 to <2 x i64>*
  store <2 x i64>* %1847, <2 x i64>** %__p.addr.i1959, align 8
  %1848 = load <2 x i64>*, <2 x i64>** %__p.addr.i1959, align 8
  %1849 = bitcast <2 x i64>* %1848 to %struct.__loadu_si128*
  %__v.i1960 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1849, i32 0, i32 0
  %1850 = load <2 x i64>, <2 x i64>* %__v.i1960, align 1
  store <2 x i64> %1850, <2 x i64>* %xmm8, align 16
  %1851 = load i8*, i8** %src.addr, align 8
  %add.ptr1064 = getelementptr inbounds i8, i8* %1851, i64 128
  store i8* %add.ptr1064, i8** %src.addr, align 8
  %1852 = load i8*, i8** %dst.addr, align 8
  %add.ptr1065 = getelementptr inbounds i8, i8* %1852, i64 0
  %1853 = bitcast i8* %add.ptr1065 to <2 x i64>*
  %1854 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1855 = bitcast <2 x i64> %1854 to <16 x i8>
  %1856 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1857 = bitcast <2 x i64> %1856 to <16 x i8>
  %palignr1066 = shufflevector <16 x i8> %1857, <16 x i8> %1855, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1858 = bitcast <16 x i8> %palignr1066 to <2 x i64>
  store <2 x i64>* %1853, <2 x i64>** %__p.addr.i1956, align 8
  store <2 x i64> %1858, <2 x i64>* %__b.addr.i1957, align 16
  %1859 = load <2 x i64>, <2 x i64>* %__b.addr.i1957, align 16
  %1860 = load <2 x i64>*, <2 x i64>** %__p.addr.i1956, align 8
  %1861 = bitcast <2 x i64>* %1860 to %struct.__storeu_si128*
  %__v.i1958 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1861, i32 0, i32 0
  store <2 x i64> %1859, <2 x i64>* %__v.i1958, align 1
  %1862 = load i8*, i8** %dst.addr, align 8
  %add.ptr1067 = getelementptr inbounds i8, i8* %1862, i64 16
  %1863 = bitcast i8* %add.ptr1067 to <2 x i64>*
  %1864 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1865 = bitcast <2 x i64> %1864 to <16 x i8>
  %1866 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1867 = bitcast <2 x i64> %1866 to <16 x i8>
  %palignr1068 = shufflevector <16 x i8> %1867, <16 x i8> %1865, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1868 = bitcast <16 x i8> %palignr1068 to <2 x i64>
  store <2 x i64>* %1863, <2 x i64>** %__p.addr.i1953, align 8
  store <2 x i64> %1868, <2 x i64>* %__b.addr.i1954, align 16
  %1869 = load <2 x i64>, <2 x i64>* %__b.addr.i1954, align 16
  %1870 = load <2 x i64>*, <2 x i64>** %__p.addr.i1953, align 8
  %1871 = bitcast <2 x i64>* %1870 to %struct.__storeu_si128*
  %__v.i1955 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1871, i32 0, i32 0
  store <2 x i64> %1869, <2 x i64>* %__v.i1955, align 1
  %1872 = load i8*, i8** %dst.addr, align 8
  %add.ptr1069 = getelementptr inbounds i8, i8* %1872, i64 32
  %1873 = bitcast i8* %add.ptr1069 to <2 x i64>*
  %1874 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1875 = bitcast <2 x i64> %1874 to <16 x i8>
  %1876 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1877 = bitcast <2 x i64> %1876 to <16 x i8>
  %palignr1070 = shufflevector <16 x i8> %1877, <16 x i8> %1875, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1878 = bitcast <16 x i8> %palignr1070 to <2 x i64>
  store <2 x i64>* %1873, <2 x i64>** %__p.addr.i1950, align 8
  store <2 x i64> %1878, <2 x i64>* %__b.addr.i1951, align 16
  %1879 = load <2 x i64>, <2 x i64>* %__b.addr.i1951, align 16
  %1880 = load <2 x i64>*, <2 x i64>** %__p.addr.i1950, align 8
  %1881 = bitcast <2 x i64>* %1880 to %struct.__storeu_si128*
  %__v.i1952 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1881, i32 0, i32 0
  store <2 x i64> %1879, <2 x i64>* %__v.i1952, align 1
  %1882 = load i8*, i8** %dst.addr, align 8
  %add.ptr1071 = getelementptr inbounds i8, i8* %1882, i64 48
  %1883 = bitcast i8* %add.ptr1071 to <2 x i64>*
  %1884 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1885 = bitcast <2 x i64> %1884 to <16 x i8>
  %1886 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %1887 = bitcast <2 x i64> %1886 to <16 x i8>
  %palignr1072 = shufflevector <16 x i8> %1887, <16 x i8> %1885, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1888 = bitcast <16 x i8> %palignr1072 to <2 x i64>
  store <2 x i64>* %1883, <2 x i64>** %__p.addr.i1947, align 8
  store <2 x i64> %1888, <2 x i64>* %__b.addr.i1948, align 16
  %1889 = load <2 x i64>, <2 x i64>* %__b.addr.i1948, align 16
  %1890 = load <2 x i64>*, <2 x i64>** %__p.addr.i1947, align 8
  %1891 = bitcast <2 x i64>* %1890 to %struct.__storeu_si128*
  %__v.i1949 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1891, i32 0, i32 0
  store <2 x i64> %1889, <2 x i64>* %__v.i1949, align 1
  %1892 = load i8*, i8** %dst.addr, align 8
  %add.ptr1073 = getelementptr inbounds i8, i8* %1892, i64 64
  %1893 = bitcast i8* %add.ptr1073 to <2 x i64>*
  %1894 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1895 = bitcast <2 x i64> %1894 to <16 x i8>
  %1896 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %1897 = bitcast <2 x i64> %1896 to <16 x i8>
  %palignr1074 = shufflevector <16 x i8> %1897, <16 x i8> %1895, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1898 = bitcast <16 x i8> %palignr1074 to <2 x i64>
  store <2 x i64>* %1893, <2 x i64>** %__p.addr.i1944, align 8
  store <2 x i64> %1898, <2 x i64>* %__b.addr.i1945, align 16
  %1899 = load <2 x i64>, <2 x i64>* %__b.addr.i1945, align 16
  %1900 = load <2 x i64>*, <2 x i64>** %__p.addr.i1944, align 8
  %1901 = bitcast <2 x i64>* %1900 to %struct.__storeu_si128*
  %__v.i1946 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1901, i32 0, i32 0
  store <2 x i64> %1899, <2 x i64>* %__v.i1946, align 1
  %1902 = load i8*, i8** %dst.addr, align 8
  %add.ptr1075 = getelementptr inbounds i8, i8* %1902, i64 80
  %1903 = bitcast i8* %add.ptr1075 to <2 x i64>*
  %1904 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1905 = bitcast <2 x i64> %1904 to <16 x i8>
  %1906 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %1907 = bitcast <2 x i64> %1906 to <16 x i8>
  %palignr1076 = shufflevector <16 x i8> %1907, <16 x i8> %1905, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1908 = bitcast <16 x i8> %palignr1076 to <2 x i64>
  store <2 x i64>* %1903, <2 x i64>** %__p.addr.i1941, align 8
  store <2 x i64> %1908, <2 x i64>* %__b.addr.i1942, align 16
  %1909 = load <2 x i64>, <2 x i64>* %__b.addr.i1942, align 16
  %1910 = load <2 x i64>*, <2 x i64>** %__p.addr.i1941, align 8
  %1911 = bitcast <2 x i64>* %1910 to %struct.__storeu_si128*
  %__v.i1943 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1911, i32 0, i32 0
  store <2 x i64> %1909, <2 x i64>* %__v.i1943, align 1
  %1912 = load i8*, i8** %dst.addr, align 8
  %add.ptr1077 = getelementptr inbounds i8, i8* %1912, i64 96
  %1913 = bitcast i8* %add.ptr1077 to <2 x i64>*
  %1914 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1915 = bitcast <2 x i64> %1914 to <16 x i8>
  %1916 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %1917 = bitcast <2 x i64> %1916 to <16 x i8>
  %palignr1078 = shufflevector <16 x i8> %1917, <16 x i8> %1915, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1918 = bitcast <16 x i8> %palignr1078 to <2 x i64>
  store <2 x i64>* %1913, <2 x i64>** %__p.addr.i1938, align 8
  store <2 x i64> %1918, <2 x i64>* %__b.addr.i1939, align 16
  %1919 = load <2 x i64>, <2 x i64>* %__b.addr.i1939, align 16
  %1920 = load <2 x i64>*, <2 x i64>** %__p.addr.i1938, align 8
  %1921 = bitcast <2 x i64>* %1920 to %struct.__storeu_si128*
  %__v.i1940 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1921, i32 0, i32 0
  store <2 x i64> %1919, <2 x i64>* %__v.i1940, align 1
  %1922 = load i8*, i8** %dst.addr, align 8
  %add.ptr1079 = getelementptr inbounds i8, i8* %1922, i64 112
  %1923 = bitcast i8* %add.ptr1079 to <2 x i64>*
  %1924 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %1925 = bitcast <2 x i64> %1924 to <16 x i8>
  %1926 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %1927 = bitcast <2 x i64> %1926 to <16 x i8>
  %palignr1080 = shufflevector <16 x i8> %1927, <16 x i8> %1925, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1928 = bitcast <16 x i8> %palignr1080 to <2 x i64>
  store <2 x i64>* %1923, <2 x i64>** %__p.addr.i1935, align 8
  store <2 x i64> %1928, <2 x i64>* %__b.addr.i1936, align 16
  %1929 = load <2 x i64>, <2 x i64>* %__b.addr.i1936, align 16
  %1930 = load <2 x i64>*, <2 x i64>** %__p.addr.i1935, align 8
  %1931 = bitcast <2 x i64>* %1930 to %struct.__storeu_si128*
  %__v.i1937 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1931, i32 0, i32 0
  store <2 x i64> %1929, <2 x i64>* %__v.i1937, align 1
  %1932 = load i8*, i8** %dst.addr, align 8
  %add.ptr1081 = getelementptr inbounds i8, i8* %1932, i64 128
  store i8* %add.ptr1081, i8** %dst.addr, align 8
  br label %while.cond1032

while.end1082:                                    ; preds = %while.cond1032
  %1933 = load i64, i64* %n.addr, align 8
  %conv1083 = trunc i64 %1933 to i32
  store i32 %conv1083, i32* %tmp1031, align 4
  %1934 = load i64, i64* %n.addr, align 8
  %sub1084 = sub i64 %1934, 16
  %add1085 = add i64 %sub1084, 10
  %and1086 = and i64 %add1085, 127
  %add1087 = add i64 %and1086, 16
  %sub1088 = sub i64 %add1087, 10
  store i64 %sub1088, i64* %n.addr, align 8
  %1935 = load i64, i64* %n.addr, align 8
  %1936 = load i32, i32* %tmp1031, align 4
  %conv1089 = sext i32 %1936 to i64
  %sub1090 = sub i64 %conv1089, %1935
  %conv1091 = trunc i64 %sub1090 to i32
  store i32 %conv1091, i32* %tmp1031, align 4
  %1937 = load i8*, i8** %src.addr, align 8
  %1938 = load i32, i32* %tmp1031, align 4
  %idx.ext1092 = sext i32 %1938 to i64
  %add.ptr1093 = getelementptr inbounds i8, i8* %1937, i64 %idx.ext1092
  store i8* %add.ptr1093, i8** %src.addr, align 8
  %1939 = load i8*, i8** %dst.addr, align 8
  %1940 = load i32, i32* %tmp1031, align 4
  %idx.ext1094 = sext i32 %1940 to i64
  %add.ptr1095 = getelementptr inbounds i8, i8* %1939, i64 %idx.ext1094
  store i8* %add.ptr1095, i8** %dst.addr, align 8
  %1941 = load i64, i64* %n.addr, align 8
  %cmp1096 = icmp uge i64 %1941, 38
  br i1 %cmp1096, label %if.then1098, label %if.end1133

if.then1098:                                      ; preds = %while.end1082
  br label %while.cond1099

while.cond1099:                                   ; preds = %while.body1102, %if.then1098
  %1942 = load i64, i64* %n.addr, align 8
  %cmp1100 = icmp uge i64 %1942, 38
  br i1 %cmp1100, label %while.body1102, label %while.end1119

while.body1102:                                   ; preds = %while.cond1099
  %1943 = load i8*, i8** %src.addr, align 8
  %add.ptr1103 = getelementptr inbounds i8, i8* %1943, i64 -10
  %add.ptr1104 = getelementptr inbounds i8, i8* %add.ptr1103, i64 0
  %1944 = bitcast i8* %add.ptr1104 to <2 x i64>*
  store <2 x i64>* %1944, <2 x i64>** %__p.addr.i1933, align 8
  %1945 = load <2 x i64>*, <2 x i64>** %__p.addr.i1933, align 8
  %1946 = bitcast <2 x i64>* %1945 to %struct.__loadu_si128*
  %__v.i1934 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1946, i32 0, i32 0
  %1947 = load <2 x i64>, <2 x i64>* %__v.i1934, align 1
  store <2 x i64> %1947, <2 x i64>* %xmm0, align 16
  %1948 = load i64, i64* %n.addr, align 8
  %sub1106 = sub i64 %1948, 32
  store i64 %sub1106, i64* %n.addr, align 8
  %1949 = load i8*, i8** %src.addr, align 8
  %add.ptr1107 = getelementptr inbounds i8, i8* %1949, i64 -10
  %add.ptr1108 = getelementptr inbounds i8, i8* %add.ptr1107, i64 16
  %1950 = bitcast i8* %add.ptr1108 to <2 x i64>*
  store <2 x i64>* %1950, <2 x i64>** %__p.addr.i1931, align 8
  %1951 = load <2 x i64>*, <2 x i64>** %__p.addr.i1931, align 8
  %1952 = bitcast <2 x i64>* %1951 to %struct.__loadu_si128*
  %__v.i1932 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1952, i32 0, i32 0
  %1953 = load <2 x i64>, <2 x i64>* %__v.i1932, align 1
  store <2 x i64> %1953, <2 x i64>* %xmm1, align 16
  %1954 = load i8*, i8** %src.addr, align 8
  %add.ptr1110 = getelementptr inbounds i8, i8* %1954, i64 -10
  %add.ptr1111 = getelementptr inbounds i8, i8* %add.ptr1110, i64 32
  %1955 = bitcast i8* %add.ptr1111 to <2 x i64>*
  store <2 x i64>* %1955, <2 x i64>** %__p.addr.i1929, align 8
  %1956 = load <2 x i64>*, <2 x i64>** %__p.addr.i1929, align 8
  %1957 = bitcast <2 x i64>* %1956 to %struct.__loadu_si128*
  %__v.i1930 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1957, i32 0, i32 0
  %1958 = load <2 x i64>, <2 x i64>* %__v.i1930, align 1
  store <2 x i64> %1958, <2 x i64>* %xmm2, align 16
  %1959 = load i8*, i8** %src.addr, align 8
  %add.ptr1113 = getelementptr inbounds i8, i8* %1959, i64 32
  store i8* %add.ptr1113, i8** %src.addr, align 8
  %1960 = load i8*, i8** %dst.addr, align 8
  %add.ptr1114 = getelementptr inbounds i8, i8* %1960, i64 0
  %1961 = bitcast i8* %add.ptr1114 to <2 x i64>*
  %1962 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1963 = bitcast <2 x i64> %1962 to <16 x i8>
  %1964 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %1965 = bitcast <2 x i64> %1964 to <16 x i8>
  %palignr1115 = shufflevector <16 x i8> %1965, <16 x i8> %1963, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1966 = bitcast <16 x i8> %palignr1115 to <2 x i64>
  store <2 x i64>* %1961, <2 x i64>** %__p.addr.i1926, align 8
  store <2 x i64> %1966, <2 x i64>* %__b.addr.i1927, align 16
  %1967 = load <2 x i64>, <2 x i64>* %__b.addr.i1927, align 16
  %1968 = load <2 x i64>*, <2 x i64>** %__p.addr.i1926, align 8
  %1969 = bitcast <2 x i64>* %1968 to %struct.__storeu_si128*
  %__v.i1928 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1969, i32 0, i32 0
  store <2 x i64> %1967, <2 x i64>* %__v.i1928, align 1
  %1970 = load i8*, i8** %dst.addr, align 8
  %add.ptr1116 = getelementptr inbounds i8, i8* %1970, i64 16
  %1971 = bitcast i8* %add.ptr1116 to <2 x i64>*
  %1972 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %1973 = bitcast <2 x i64> %1972 to <16 x i8>
  %1974 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %1975 = bitcast <2 x i64> %1974 to <16 x i8>
  %palignr1117 = shufflevector <16 x i8> %1975, <16 x i8> %1973, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1976 = bitcast <16 x i8> %palignr1117 to <2 x i64>
  store <2 x i64>* %1971, <2 x i64>** %__p.addr.i1923, align 8
  store <2 x i64> %1976, <2 x i64>* %__b.addr.i1924, align 16
  %1977 = load <2 x i64>, <2 x i64>* %__b.addr.i1924, align 16
  %1978 = load <2 x i64>*, <2 x i64>** %__p.addr.i1923, align 8
  %1979 = bitcast <2 x i64>* %1978 to %struct.__storeu_si128*
  %__v.i1925 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %1979, i32 0, i32 0
  store <2 x i64> %1977, <2 x i64>* %__v.i1925, align 1
  %1980 = load i8*, i8** %dst.addr, align 8
  %add.ptr1118 = getelementptr inbounds i8, i8* %1980, i64 32
  store i8* %add.ptr1118, i8** %dst.addr, align 8
  br label %while.cond1099

while.end1119:                                    ; preds = %while.cond1099
  %1981 = load i64, i64* %n.addr, align 8
  %conv1120 = trunc i64 %1981 to i32
  store i32 %conv1120, i32* %tmp1031, align 4
  %1982 = load i64, i64* %n.addr, align 8
  %sub1121 = sub i64 %1982, 16
  %add1122 = add i64 %sub1121, 10
  %and1123 = and i64 %add1122, 31
  %add1124 = add i64 %and1123, 16
  %sub1125 = sub i64 %add1124, 10
  store i64 %sub1125, i64* %n.addr, align 8
  %1983 = load i64, i64* %n.addr, align 8
  %1984 = load i32, i32* %tmp1031, align 4
  %conv1126 = sext i32 %1984 to i64
  %sub1127 = sub i64 %conv1126, %1983
  %conv1128 = trunc i64 %sub1127 to i32
  store i32 %conv1128, i32* %tmp1031, align 4
  %1985 = load i8*, i8** %src.addr, align 8
  %1986 = load i32, i32* %tmp1031, align 4
  %idx.ext1129 = sext i32 %1986 to i64
  %add.ptr1130 = getelementptr inbounds i8, i8* %1985, i64 %idx.ext1129
  store i8* %add.ptr1130, i8** %src.addr, align 8
  %1987 = load i8*, i8** %dst.addr, align 8
  %1988 = load i32, i32* %tmp1031, align 4
  %idx.ext1131 = sext i32 %1988 to i64
  %add.ptr1132 = getelementptr inbounds i8, i8* %1987, i64 %idx.ext1131
  store i8* %add.ptr1132, i8** %dst.addr, align 8
  br label %if.end1133

if.end1133:                                       ; preds = %while.end1119, %while.end1082
  br label %sw.epilog

sw.bb1134:                                        ; preds = %if.end103
  br label %while.cond1136

while.cond1136:                                   ; preds = %while.body1139, %sw.bb1134
  %1989 = load i64, i64* %n.addr, align 8
  %cmp1137 = icmp uge i64 %1989, 133
  br i1 %cmp1137, label %while.body1139, label %while.end1186

while.body1139:                                   ; preds = %while.cond1136
  %1990 = load i8*, i8** %src.addr, align 8
  %add.ptr1140 = getelementptr inbounds i8, i8* %1990, i64 -11
  %add.ptr1141 = getelementptr inbounds i8, i8* %add.ptr1140, i64 0
  %1991 = bitcast i8* %add.ptr1141 to <2 x i64>*
  store <2 x i64>* %1991, <2 x i64>** %__p.addr.i1921, align 8
  %1992 = load <2 x i64>*, <2 x i64>** %__p.addr.i1921, align 8
  %1993 = bitcast <2 x i64>* %1992 to %struct.__loadu_si128*
  %__v.i1922 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1993, i32 0, i32 0
  %1994 = load <2 x i64>, <2 x i64>* %__v.i1922, align 1
  store <2 x i64> %1994, <2 x i64>* %xmm0, align 16
  %1995 = load i64, i64* %n.addr, align 8
  %sub1143 = sub i64 %1995, 128
  store i64 %sub1143, i64* %n.addr, align 8
  %1996 = load i8*, i8** %src.addr, align 8
  %add.ptr1144 = getelementptr inbounds i8, i8* %1996, i64 -11
  %add.ptr1145 = getelementptr inbounds i8, i8* %add.ptr1144, i64 16
  %1997 = bitcast i8* %add.ptr1145 to <2 x i64>*
  store <2 x i64>* %1997, <2 x i64>** %__p.addr.i1919, align 8
  %1998 = load <2 x i64>*, <2 x i64>** %__p.addr.i1919, align 8
  %1999 = bitcast <2 x i64>* %1998 to %struct.__loadu_si128*
  %__v.i1920 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1999, i32 0, i32 0
  %2000 = load <2 x i64>, <2 x i64>* %__v.i1920, align 1
  store <2 x i64> %2000, <2 x i64>* %xmm1, align 16
  %2001 = load i8*, i8** %src.addr, align 8
  %add.ptr1147 = getelementptr inbounds i8, i8* %2001, i64 -11
  %add.ptr1148 = getelementptr inbounds i8, i8* %add.ptr1147, i64 32
  %2002 = bitcast i8* %add.ptr1148 to <2 x i64>*
  store <2 x i64>* %2002, <2 x i64>** %__p.addr.i1917, align 8
  %2003 = load <2 x i64>*, <2 x i64>** %__p.addr.i1917, align 8
  %2004 = bitcast <2 x i64>* %2003 to %struct.__loadu_si128*
  %__v.i1918 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2004, i32 0, i32 0
  %2005 = load <2 x i64>, <2 x i64>* %__v.i1918, align 1
  store <2 x i64> %2005, <2 x i64>* %xmm2, align 16
  %2006 = load i8*, i8** %src.addr, align 8
  %add.ptr1150 = getelementptr inbounds i8, i8* %2006, i64 -11
  %add.ptr1151 = getelementptr inbounds i8, i8* %add.ptr1150, i64 48
  %2007 = bitcast i8* %add.ptr1151 to <2 x i64>*
  store <2 x i64>* %2007, <2 x i64>** %__p.addr.i1915, align 8
  %2008 = load <2 x i64>*, <2 x i64>** %__p.addr.i1915, align 8
  %2009 = bitcast <2 x i64>* %2008 to %struct.__loadu_si128*
  %__v.i1916 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2009, i32 0, i32 0
  %2010 = load <2 x i64>, <2 x i64>* %__v.i1916, align 1
  store <2 x i64> %2010, <2 x i64>* %xmm3, align 16
  %2011 = load i8*, i8** %src.addr, align 8
  %add.ptr1153 = getelementptr inbounds i8, i8* %2011, i64 -11
  %add.ptr1154 = getelementptr inbounds i8, i8* %add.ptr1153, i64 64
  %2012 = bitcast i8* %add.ptr1154 to <2 x i64>*
  store <2 x i64>* %2012, <2 x i64>** %__p.addr.i1913, align 8
  %2013 = load <2 x i64>*, <2 x i64>** %__p.addr.i1913, align 8
  %2014 = bitcast <2 x i64>* %2013 to %struct.__loadu_si128*
  %__v.i1914 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2014, i32 0, i32 0
  %2015 = load <2 x i64>, <2 x i64>* %__v.i1914, align 1
  store <2 x i64> %2015, <2 x i64>* %xmm4, align 16
  %2016 = load i8*, i8** %src.addr, align 8
  %add.ptr1156 = getelementptr inbounds i8, i8* %2016, i64 -11
  %add.ptr1157 = getelementptr inbounds i8, i8* %add.ptr1156, i64 80
  %2017 = bitcast i8* %add.ptr1157 to <2 x i64>*
  store <2 x i64>* %2017, <2 x i64>** %__p.addr.i1911, align 8
  %2018 = load <2 x i64>*, <2 x i64>** %__p.addr.i1911, align 8
  %2019 = bitcast <2 x i64>* %2018 to %struct.__loadu_si128*
  %__v.i1912 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2019, i32 0, i32 0
  %2020 = load <2 x i64>, <2 x i64>* %__v.i1912, align 1
  store <2 x i64> %2020, <2 x i64>* %xmm5, align 16
  %2021 = load i8*, i8** %src.addr, align 8
  %add.ptr1159 = getelementptr inbounds i8, i8* %2021, i64 -11
  %add.ptr1160 = getelementptr inbounds i8, i8* %add.ptr1159, i64 96
  %2022 = bitcast i8* %add.ptr1160 to <2 x i64>*
  store <2 x i64>* %2022, <2 x i64>** %__p.addr.i1909, align 8
  %2023 = load <2 x i64>*, <2 x i64>** %__p.addr.i1909, align 8
  %2024 = bitcast <2 x i64>* %2023 to %struct.__loadu_si128*
  %__v.i1910 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2024, i32 0, i32 0
  %2025 = load <2 x i64>, <2 x i64>* %__v.i1910, align 1
  store <2 x i64> %2025, <2 x i64>* %xmm6, align 16
  %2026 = load i8*, i8** %src.addr, align 8
  %add.ptr1162 = getelementptr inbounds i8, i8* %2026, i64 -11
  %add.ptr1163 = getelementptr inbounds i8, i8* %add.ptr1162, i64 112
  %2027 = bitcast i8* %add.ptr1163 to <2 x i64>*
  store <2 x i64>* %2027, <2 x i64>** %__p.addr.i1907, align 8
  %2028 = load <2 x i64>*, <2 x i64>** %__p.addr.i1907, align 8
  %2029 = bitcast <2 x i64>* %2028 to %struct.__loadu_si128*
  %__v.i1908 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2029, i32 0, i32 0
  %2030 = load <2 x i64>, <2 x i64>* %__v.i1908, align 1
  store <2 x i64> %2030, <2 x i64>* %xmm7, align 16
  %2031 = load i8*, i8** %src.addr, align 8
  %add.ptr1165 = getelementptr inbounds i8, i8* %2031, i64 -11
  %add.ptr1166 = getelementptr inbounds i8, i8* %add.ptr1165, i64 128
  %2032 = bitcast i8* %add.ptr1166 to <2 x i64>*
  store <2 x i64>* %2032, <2 x i64>** %__p.addr.i1905, align 8
  %2033 = load <2 x i64>*, <2 x i64>** %__p.addr.i1905, align 8
  %2034 = bitcast <2 x i64>* %2033 to %struct.__loadu_si128*
  %__v.i1906 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2034, i32 0, i32 0
  %2035 = load <2 x i64>, <2 x i64>* %__v.i1906, align 1
  store <2 x i64> %2035, <2 x i64>* %xmm8, align 16
  %2036 = load i8*, i8** %src.addr, align 8
  %add.ptr1168 = getelementptr inbounds i8, i8* %2036, i64 128
  store i8* %add.ptr1168, i8** %src.addr, align 8
  %2037 = load i8*, i8** %dst.addr, align 8
  %add.ptr1169 = getelementptr inbounds i8, i8* %2037, i64 0
  %2038 = bitcast i8* %add.ptr1169 to <2 x i64>*
  %2039 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2040 = bitcast <2 x i64> %2039 to <16 x i8>
  %2041 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2042 = bitcast <2 x i64> %2041 to <16 x i8>
  %palignr1170 = shufflevector <16 x i8> %2042, <16 x i8> %2040, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2043 = bitcast <16 x i8> %palignr1170 to <2 x i64>
  store <2 x i64>* %2038, <2 x i64>** %__p.addr.i1902, align 8
  store <2 x i64> %2043, <2 x i64>* %__b.addr.i1903, align 16
  %2044 = load <2 x i64>, <2 x i64>* %__b.addr.i1903, align 16
  %2045 = load <2 x i64>*, <2 x i64>** %__p.addr.i1902, align 8
  %2046 = bitcast <2 x i64>* %2045 to %struct.__storeu_si128*
  %__v.i1904 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2046, i32 0, i32 0
  store <2 x i64> %2044, <2 x i64>* %__v.i1904, align 1
  %2047 = load i8*, i8** %dst.addr, align 8
  %add.ptr1171 = getelementptr inbounds i8, i8* %2047, i64 16
  %2048 = bitcast i8* %add.ptr1171 to <2 x i64>*
  %2049 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2050 = bitcast <2 x i64> %2049 to <16 x i8>
  %2051 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2052 = bitcast <2 x i64> %2051 to <16 x i8>
  %palignr1172 = shufflevector <16 x i8> %2052, <16 x i8> %2050, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2053 = bitcast <16 x i8> %palignr1172 to <2 x i64>
  store <2 x i64>* %2048, <2 x i64>** %__p.addr.i1899, align 8
  store <2 x i64> %2053, <2 x i64>* %__b.addr.i1900, align 16
  %2054 = load <2 x i64>, <2 x i64>* %__b.addr.i1900, align 16
  %2055 = load <2 x i64>*, <2 x i64>** %__p.addr.i1899, align 8
  %2056 = bitcast <2 x i64>* %2055 to %struct.__storeu_si128*
  %__v.i1901 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2056, i32 0, i32 0
  store <2 x i64> %2054, <2 x i64>* %__v.i1901, align 1
  %2057 = load i8*, i8** %dst.addr, align 8
  %add.ptr1173 = getelementptr inbounds i8, i8* %2057, i64 32
  %2058 = bitcast i8* %add.ptr1173 to <2 x i64>*
  %2059 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2060 = bitcast <2 x i64> %2059 to <16 x i8>
  %2061 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2062 = bitcast <2 x i64> %2061 to <16 x i8>
  %palignr1174 = shufflevector <16 x i8> %2062, <16 x i8> %2060, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2063 = bitcast <16 x i8> %palignr1174 to <2 x i64>
  store <2 x i64>* %2058, <2 x i64>** %__p.addr.i1896, align 8
  store <2 x i64> %2063, <2 x i64>* %__b.addr.i1897, align 16
  %2064 = load <2 x i64>, <2 x i64>* %__b.addr.i1897, align 16
  %2065 = load <2 x i64>*, <2 x i64>** %__p.addr.i1896, align 8
  %2066 = bitcast <2 x i64>* %2065 to %struct.__storeu_si128*
  %__v.i1898 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2066, i32 0, i32 0
  store <2 x i64> %2064, <2 x i64>* %__v.i1898, align 1
  %2067 = load i8*, i8** %dst.addr, align 8
  %add.ptr1175 = getelementptr inbounds i8, i8* %2067, i64 48
  %2068 = bitcast i8* %add.ptr1175 to <2 x i64>*
  %2069 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2070 = bitcast <2 x i64> %2069 to <16 x i8>
  %2071 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2072 = bitcast <2 x i64> %2071 to <16 x i8>
  %palignr1176 = shufflevector <16 x i8> %2072, <16 x i8> %2070, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2073 = bitcast <16 x i8> %palignr1176 to <2 x i64>
  store <2 x i64>* %2068, <2 x i64>** %__p.addr.i1893, align 8
  store <2 x i64> %2073, <2 x i64>* %__b.addr.i1894, align 16
  %2074 = load <2 x i64>, <2 x i64>* %__b.addr.i1894, align 16
  %2075 = load <2 x i64>*, <2 x i64>** %__p.addr.i1893, align 8
  %2076 = bitcast <2 x i64>* %2075 to %struct.__storeu_si128*
  %__v.i1895 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2076, i32 0, i32 0
  store <2 x i64> %2074, <2 x i64>* %__v.i1895, align 1
  %2077 = load i8*, i8** %dst.addr, align 8
  %add.ptr1177 = getelementptr inbounds i8, i8* %2077, i64 64
  %2078 = bitcast i8* %add.ptr1177 to <2 x i64>*
  %2079 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2080 = bitcast <2 x i64> %2079 to <16 x i8>
  %2081 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2082 = bitcast <2 x i64> %2081 to <16 x i8>
  %palignr1178 = shufflevector <16 x i8> %2082, <16 x i8> %2080, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2083 = bitcast <16 x i8> %palignr1178 to <2 x i64>
  store <2 x i64>* %2078, <2 x i64>** %__p.addr.i1890, align 8
  store <2 x i64> %2083, <2 x i64>* %__b.addr.i1891, align 16
  %2084 = load <2 x i64>, <2 x i64>* %__b.addr.i1891, align 16
  %2085 = load <2 x i64>*, <2 x i64>** %__p.addr.i1890, align 8
  %2086 = bitcast <2 x i64>* %2085 to %struct.__storeu_si128*
  %__v.i1892 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2086, i32 0, i32 0
  store <2 x i64> %2084, <2 x i64>* %__v.i1892, align 1
  %2087 = load i8*, i8** %dst.addr, align 8
  %add.ptr1179 = getelementptr inbounds i8, i8* %2087, i64 80
  %2088 = bitcast i8* %add.ptr1179 to <2 x i64>*
  %2089 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2090 = bitcast <2 x i64> %2089 to <16 x i8>
  %2091 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2092 = bitcast <2 x i64> %2091 to <16 x i8>
  %palignr1180 = shufflevector <16 x i8> %2092, <16 x i8> %2090, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2093 = bitcast <16 x i8> %palignr1180 to <2 x i64>
  store <2 x i64>* %2088, <2 x i64>** %__p.addr.i1887, align 8
  store <2 x i64> %2093, <2 x i64>* %__b.addr.i1888, align 16
  %2094 = load <2 x i64>, <2 x i64>* %__b.addr.i1888, align 16
  %2095 = load <2 x i64>*, <2 x i64>** %__p.addr.i1887, align 8
  %2096 = bitcast <2 x i64>* %2095 to %struct.__storeu_si128*
  %__v.i1889 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2096, i32 0, i32 0
  store <2 x i64> %2094, <2 x i64>* %__v.i1889, align 1
  %2097 = load i8*, i8** %dst.addr, align 8
  %add.ptr1181 = getelementptr inbounds i8, i8* %2097, i64 96
  %2098 = bitcast i8* %add.ptr1181 to <2 x i64>*
  %2099 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2100 = bitcast <2 x i64> %2099 to <16 x i8>
  %2101 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2102 = bitcast <2 x i64> %2101 to <16 x i8>
  %palignr1182 = shufflevector <16 x i8> %2102, <16 x i8> %2100, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2103 = bitcast <16 x i8> %palignr1182 to <2 x i64>
  store <2 x i64>* %2098, <2 x i64>** %__p.addr.i1884, align 8
  store <2 x i64> %2103, <2 x i64>* %__b.addr.i1885, align 16
  %2104 = load <2 x i64>, <2 x i64>* %__b.addr.i1885, align 16
  %2105 = load <2 x i64>*, <2 x i64>** %__p.addr.i1884, align 8
  %2106 = bitcast <2 x i64>* %2105 to %struct.__storeu_si128*
  %__v.i1886 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2106, i32 0, i32 0
  store <2 x i64> %2104, <2 x i64>* %__v.i1886, align 1
  %2107 = load i8*, i8** %dst.addr, align 8
  %add.ptr1183 = getelementptr inbounds i8, i8* %2107, i64 112
  %2108 = bitcast i8* %add.ptr1183 to <2 x i64>*
  %2109 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %2110 = bitcast <2 x i64> %2109 to <16 x i8>
  %2111 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2112 = bitcast <2 x i64> %2111 to <16 x i8>
  %palignr1184 = shufflevector <16 x i8> %2112, <16 x i8> %2110, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2113 = bitcast <16 x i8> %palignr1184 to <2 x i64>
  store <2 x i64>* %2108, <2 x i64>** %__p.addr.i1881, align 8
  store <2 x i64> %2113, <2 x i64>* %__b.addr.i1882, align 16
  %2114 = load <2 x i64>, <2 x i64>* %__b.addr.i1882, align 16
  %2115 = load <2 x i64>*, <2 x i64>** %__p.addr.i1881, align 8
  %2116 = bitcast <2 x i64>* %2115 to %struct.__storeu_si128*
  %__v.i1883 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2116, i32 0, i32 0
  store <2 x i64> %2114, <2 x i64>* %__v.i1883, align 1
  %2117 = load i8*, i8** %dst.addr, align 8
  %add.ptr1185 = getelementptr inbounds i8, i8* %2117, i64 128
  store i8* %add.ptr1185, i8** %dst.addr, align 8
  br label %while.cond1136

while.end1186:                                    ; preds = %while.cond1136
  %2118 = load i64, i64* %n.addr, align 8
  %conv1187 = trunc i64 %2118 to i32
  store i32 %conv1187, i32* %tmp1135, align 4
  %2119 = load i64, i64* %n.addr, align 8
  %sub1188 = sub i64 %2119, 16
  %add1189 = add i64 %sub1188, 11
  %and1190 = and i64 %add1189, 127
  %add1191 = add i64 %and1190, 16
  %sub1192 = sub i64 %add1191, 11
  store i64 %sub1192, i64* %n.addr, align 8
  %2120 = load i64, i64* %n.addr, align 8
  %2121 = load i32, i32* %tmp1135, align 4
  %conv1193 = sext i32 %2121 to i64
  %sub1194 = sub i64 %conv1193, %2120
  %conv1195 = trunc i64 %sub1194 to i32
  store i32 %conv1195, i32* %tmp1135, align 4
  %2122 = load i8*, i8** %src.addr, align 8
  %2123 = load i32, i32* %tmp1135, align 4
  %idx.ext1196 = sext i32 %2123 to i64
  %add.ptr1197 = getelementptr inbounds i8, i8* %2122, i64 %idx.ext1196
  store i8* %add.ptr1197, i8** %src.addr, align 8
  %2124 = load i8*, i8** %dst.addr, align 8
  %2125 = load i32, i32* %tmp1135, align 4
  %idx.ext1198 = sext i32 %2125 to i64
  %add.ptr1199 = getelementptr inbounds i8, i8* %2124, i64 %idx.ext1198
  store i8* %add.ptr1199, i8** %dst.addr, align 8
  %2126 = load i64, i64* %n.addr, align 8
  %cmp1200 = icmp uge i64 %2126, 37
  br i1 %cmp1200, label %if.then1202, label %if.end1237

if.then1202:                                      ; preds = %while.end1186
  br label %while.cond1203

while.cond1203:                                   ; preds = %while.body1206, %if.then1202
  %2127 = load i64, i64* %n.addr, align 8
  %cmp1204 = icmp uge i64 %2127, 37
  br i1 %cmp1204, label %while.body1206, label %while.end1223

while.body1206:                                   ; preds = %while.cond1203
  %2128 = load i8*, i8** %src.addr, align 8
  %add.ptr1207 = getelementptr inbounds i8, i8* %2128, i64 -11
  %add.ptr1208 = getelementptr inbounds i8, i8* %add.ptr1207, i64 0
  %2129 = bitcast i8* %add.ptr1208 to <2 x i64>*
  store <2 x i64>* %2129, <2 x i64>** %__p.addr.i1879, align 8
  %2130 = load <2 x i64>*, <2 x i64>** %__p.addr.i1879, align 8
  %2131 = bitcast <2 x i64>* %2130 to %struct.__loadu_si128*
  %__v.i1880 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2131, i32 0, i32 0
  %2132 = load <2 x i64>, <2 x i64>* %__v.i1880, align 1
  store <2 x i64> %2132, <2 x i64>* %xmm0, align 16
  %2133 = load i64, i64* %n.addr, align 8
  %sub1210 = sub i64 %2133, 32
  store i64 %sub1210, i64* %n.addr, align 8
  %2134 = load i8*, i8** %src.addr, align 8
  %add.ptr1211 = getelementptr inbounds i8, i8* %2134, i64 -11
  %add.ptr1212 = getelementptr inbounds i8, i8* %add.ptr1211, i64 16
  %2135 = bitcast i8* %add.ptr1212 to <2 x i64>*
  store <2 x i64>* %2135, <2 x i64>** %__p.addr.i1877, align 8
  %2136 = load <2 x i64>*, <2 x i64>** %__p.addr.i1877, align 8
  %2137 = bitcast <2 x i64>* %2136 to %struct.__loadu_si128*
  %__v.i1878 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2137, i32 0, i32 0
  %2138 = load <2 x i64>, <2 x i64>* %__v.i1878, align 1
  store <2 x i64> %2138, <2 x i64>* %xmm1, align 16
  %2139 = load i8*, i8** %src.addr, align 8
  %add.ptr1214 = getelementptr inbounds i8, i8* %2139, i64 -11
  %add.ptr1215 = getelementptr inbounds i8, i8* %add.ptr1214, i64 32
  %2140 = bitcast i8* %add.ptr1215 to <2 x i64>*
  store <2 x i64>* %2140, <2 x i64>** %__p.addr.i1875, align 8
  %2141 = load <2 x i64>*, <2 x i64>** %__p.addr.i1875, align 8
  %2142 = bitcast <2 x i64>* %2141 to %struct.__loadu_si128*
  %__v.i1876 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2142, i32 0, i32 0
  %2143 = load <2 x i64>, <2 x i64>* %__v.i1876, align 1
  store <2 x i64> %2143, <2 x i64>* %xmm2, align 16
  %2144 = load i8*, i8** %src.addr, align 8
  %add.ptr1217 = getelementptr inbounds i8, i8* %2144, i64 32
  store i8* %add.ptr1217, i8** %src.addr, align 8
  %2145 = load i8*, i8** %dst.addr, align 8
  %add.ptr1218 = getelementptr inbounds i8, i8* %2145, i64 0
  %2146 = bitcast i8* %add.ptr1218 to <2 x i64>*
  %2147 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2148 = bitcast <2 x i64> %2147 to <16 x i8>
  %2149 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2150 = bitcast <2 x i64> %2149 to <16 x i8>
  %palignr1219 = shufflevector <16 x i8> %2150, <16 x i8> %2148, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2151 = bitcast <16 x i8> %palignr1219 to <2 x i64>
  store <2 x i64>* %2146, <2 x i64>** %__p.addr.i1872, align 8
  store <2 x i64> %2151, <2 x i64>* %__b.addr.i1873, align 16
  %2152 = load <2 x i64>, <2 x i64>* %__b.addr.i1873, align 16
  %2153 = load <2 x i64>*, <2 x i64>** %__p.addr.i1872, align 8
  %2154 = bitcast <2 x i64>* %2153 to %struct.__storeu_si128*
  %__v.i1874 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2154, i32 0, i32 0
  store <2 x i64> %2152, <2 x i64>* %__v.i1874, align 1
  %2155 = load i8*, i8** %dst.addr, align 8
  %add.ptr1220 = getelementptr inbounds i8, i8* %2155, i64 16
  %2156 = bitcast i8* %add.ptr1220 to <2 x i64>*
  %2157 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2158 = bitcast <2 x i64> %2157 to <16 x i8>
  %2159 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2160 = bitcast <2 x i64> %2159 to <16 x i8>
  %palignr1221 = shufflevector <16 x i8> %2160, <16 x i8> %2158, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %2161 = bitcast <16 x i8> %palignr1221 to <2 x i64>
  store <2 x i64>* %2156, <2 x i64>** %__p.addr.i1869, align 8
  store <2 x i64> %2161, <2 x i64>* %__b.addr.i1870, align 16
  %2162 = load <2 x i64>, <2 x i64>* %__b.addr.i1870, align 16
  %2163 = load <2 x i64>*, <2 x i64>** %__p.addr.i1869, align 8
  %2164 = bitcast <2 x i64>* %2163 to %struct.__storeu_si128*
  %__v.i1871 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2164, i32 0, i32 0
  store <2 x i64> %2162, <2 x i64>* %__v.i1871, align 1
  %2165 = load i8*, i8** %dst.addr, align 8
  %add.ptr1222 = getelementptr inbounds i8, i8* %2165, i64 32
  store i8* %add.ptr1222, i8** %dst.addr, align 8
  br label %while.cond1203

while.end1223:                                    ; preds = %while.cond1203
  %2166 = load i64, i64* %n.addr, align 8
  %conv1224 = trunc i64 %2166 to i32
  store i32 %conv1224, i32* %tmp1135, align 4
  %2167 = load i64, i64* %n.addr, align 8
  %sub1225 = sub i64 %2167, 16
  %add1226 = add i64 %sub1225, 11
  %and1227 = and i64 %add1226, 31
  %add1228 = add i64 %and1227, 16
  %sub1229 = sub i64 %add1228, 11
  store i64 %sub1229, i64* %n.addr, align 8
  %2168 = load i64, i64* %n.addr, align 8
  %2169 = load i32, i32* %tmp1135, align 4
  %conv1230 = sext i32 %2169 to i64
  %sub1231 = sub i64 %conv1230, %2168
  %conv1232 = trunc i64 %sub1231 to i32
  store i32 %conv1232, i32* %tmp1135, align 4
  %2170 = load i8*, i8** %src.addr, align 8
  %2171 = load i32, i32* %tmp1135, align 4
  %idx.ext1233 = sext i32 %2171 to i64
  %add.ptr1234 = getelementptr inbounds i8, i8* %2170, i64 %idx.ext1233
  store i8* %add.ptr1234, i8** %src.addr, align 8
  %2172 = load i8*, i8** %dst.addr, align 8
  %2173 = load i32, i32* %tmp1135, align 4
  %idx.ext1235 = sext i32 %2173 to i64
  %add.ptr1236 = getelementptr inbounds i8, i8* %2172, i64 %idx.ext1235
  store i8* %add.ptr1236, i8** %dst.addr, align 8
  br label %if.end1237

if.end1237:                                       ; preds = %while.end1223, %while.end1186
  br label %sw.epilog

sw.bb1238:                                        ; preds = %if.end103
  br label %while.cond1240

while.cond1240:                                   ; preds = %while.body1243, %sw.bb1238
  %2174 = load i64, i64* %n.addr, align 8
  %cmp1241 = icmp uge i64 %2174, 132
  br i1 %cmp1241, label %while.body1243, label %while.end1290

while.body1243:                                   ; preds = %while.cond1240
  %2175 = load i8*, i8** %src.addr, align 8
  %add.ptr1244 = getelementptr inbounds i8, i8* %2175, i64 -12
  %add.ptr1245 = getelementptr inbounds i8, i8* %add.ptr1244, i64 0
  %2176 = bitcast i8* %add.ptr1245 to <2 x i64>*
  store <2 x i64>* %2176, <2 x i64>** %__p.addr.i1867, align 8
  %2177 = load <2 x i64>*, <2 x i64>** %__p.addr.i1867, align 8
  %2178 = bitcast <2 x i64>* %2177 to %struct.__loadu_si128*
  %__v.i1868 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2178, i32 0, i32 0
  %2179 = load <2 x i64>, <2 x i64>* %__v.i1868, align 1
  store <2 x i64> %2179, <2 x i64>* %xmm0, align 16
  %2180 = load i64, i64* %n.addr, align 8
  %sub1247 = sub i64 %2180, 128
  store i64 %sub1247, i64* %n.addr, align 8
  %2181 = load i8*, i8** %src.addr, align 8
  %add.ptr1248 = getelementptr inbounds i8, i8* %2181, i64 -12
  %add.ptr1249 = getelementptr inbounds i8, i8* %add.ptr1248, i64 16
  %2182 = bitcast i8* %add.ptr1249 to <2 x i64>*
  store <2 x i64>* %2182, <2 x i64>** %__p.addr.i1865, align 8
  %2183 = load <2 x i64>*, <2 x i64>** %__p.addr.i1865, align 8
  %2184 = bitcast <2 x i64>* %2183 to %struct.__loadu_si128*
  %__v.i1866 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2184, i32 0, i32 0
  %2185 = load <2 x i64>, <2 x i64>* %__v.i1866, align 1
  store <2 x i64> %2185, <2 x i64>* %xmm1, align 16
  %2186 = load i8*, i8** %src.addr, align 8
  %add.ptr1251 = getelementptr inbounds i8, i8* %2186, i64 -12
  %add.ptr1252 = getelementptr inbounds i8, i8* %add.ptr1251, i64 32
  %2187 = bitcast i8* %add.ptr1252 to <2 x i64>*
  store <2 x i64>* %2187, <2 x i64>** %__p.addr.i1863, align 8
  %2188 = load <2 x i64>*, <2 x i64>** %__p.addr.i1863, align 8
  %2189 = bitcast <2 x i64>* %2188 to %struct.__loadu_si128*
  %__v.i1864 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2189, i32 0, i32 0
  %2190 = load <2 x i64>, <2 x i64>* %__v.i1864, align 1
  store <2 x i64> %2190, <2 x i64>* %xmm2, align 16
  %2191 = load i8*, i8** %src.addr, align 8
  %add.ptr1254 = getelementptr inbounds i8, i8* %2191, i64 -12
  %add.ptr1255 = getelementptr inbounds i8, i8* %add.ptr1254, i64 48
  %2192 = bitcast i8* %add.ptr1255 to <2 x i64>*
  store <2 x i64>* %2192, <2 x i64>** %__p.addr.i1861, align 8
  %2193 = load <2 x i64>*, <2 x i64>** %__p.addr.i1861, align 8
  %2194 = bitcast <2 x i64>* %2193 to %struct.__loadu_si128*
  %__v.i1862 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2194, i32 0, i32 0
  %2195 = load <2 x i64>, <2 x i64>* %__v.i1862, align 1
  store <2 x i64> %2195, <2 x i64>* %xmm3, align 16
  %2196 = load i8*, i8** %src.addr, align 8
  %add.ptr1257 = getelementptr inbounds i8, i8* %2196, i64 -12
  %add.ptr1258 = getelementptr inbounds i8, i8* %add.ptr1257, i64 64
  %2197 = bitcast i8* %add.ptr1258 to <2 x i64>*
  store <2 x i64>* %2197, <2 x i64>** %__p.addr.i1859, align 8
  %2198 = load <2 x i64>*, <2 x i64>** %__p.addr.i1859, align 8
  %2199 = bitcast <2 x i64>* %2198 to %struct.__loadu_si128*
  %__v.i1860 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2199, i32 0, i32 0
  %2200 = load <2 x i64>, <2 x i64>* %__v.i1860, align 1
  store <2 x i64> %2200, <2 x i64>* %xmm4, align 16
  %2201 = load i8*, i8** %src.addr, align 8
  %add.ptr1260 = getelementptr inbounds i8, i8* %2201, i64 -12
  %add.ptr1261 = getelementptr inbounds i8, i8* %add.ptr1260, i64 80
  %2202 = bitcast i8* %add.ptr1261 to <2 x i64>*
  store <2 x i64>* %2202, <2 x i64>** %__p.addr.i1857, align 8
  %2203 = load <2 x i64>*, <2 x i64>** %__p.addr.i1857, align 8
  %2204 = bitcast <2 x i64>* %2203 to %struct.__loadu_si128*
  %__v.i1858 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2204, i32 0, i32 0
  %2205 = load <2 x i64>, <2 x i64>* %__v.i1858, align 1
  store <2 x i64> %2205, <2 x i64>* %xmm5, align 16
  %2206 = load i8*, i8** %src.addr, align 8
  %add.ptr1263 = getelementptr inbounds i8, i8* %2206, i64 -12
  %add.ptr1264 = getelementptr inbounds i8, i8* %add.ptr1263, i64 96
  %2207 = bitcast i8* %add.ptr1264 to <2 x i64>*
  store <2 x i64>* %2207, <2 x i64>** %__p.addr.i1855, align 8
  %2208 = load <2 x i64>*, <2 x i64>** %__p.addr.i1855, align 8
  %2209 = bitcast <2 x i64>* %2208 to %struct.__loadu_si128*
  %__v.i1856 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2209, i32 0, i32 0
  %2210 = load <2 x i64>, <2 x i64>* %__v.i1856, align 1
  store <2 x i64> %2210, <2 x i64>* %xmm6, align 16
  %2211 = load i8*, i8** %src.addr, align 8
  %add.ptr1266 = getelementptr inbounds i8, i8* %2211, i64 -12
  %add.ptr1267 = getelementptr inbounds i8, i8* %add.ptr1266, i64 112
  %2212 = bitcast i8* %add.ptr1267 to <2 x i64>*
  store <2 x i64>* %2212, <2 x i64>** %__p.addr.i1853, align 8
  %2213 = load <2 x i64>*, <2 x i64>** %__p.addr.i1853, align 8
  %2214 = bitcast <2 x i64>* %2213 to %struct.__loadu_si128*
  %__v.i1854 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2214, i32 0, i32 0
  %2215 = load <2 x i64>, <2 x i64>* %__v.i1854, align 1
  store <2 x i64> %2215, <2 x i64>* %xmm7, align 16
  %2216 = load i8*, i8** %src.addr, align 8
  %add.ptr1269 = getelementptr inbounds i8, i8* %2216, i64 -12
  %add.ptr1270 = getelementptr inbounds i8, i8* %add.ptr1269, i64 128
  %2217 = bitcast i8* %add.ptr1270 to <2 x i64>*
  store <2 x i64>* %2217, <2 x i64>** %__p.addr.i1851, align 8
  %2218 = load <2 x i64>*, <2 x i64>** %__p.addr.i1851, align 8
  %2219 = bitcast <2 x i64>* %2218 to %struct.__loadu_si128*
  %__v.i1852 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2219, i32 0, i32 0
  %2220 = load <2 x i64>, <2 x i64>* %__v.i1852, align 1
  store <2 x i64> %2220, <2 x i64>* %xmm8, align 16
  %2221 = load i8*, i8** %src.addr, align 8
  %add.ptr1272 = getelementptr inbounds i8, i8* %2221, i64 128
  store i8* %add.ptr1272, i8** %src.addr, align 8
  %2222 = load i8*, i8** %dst.addr, align 8
  %add.ptr1273 = getelementptr inbounds i8, i8* %2222, i64 0
  %2223 = bitcast i8* %add.ptr1273 to <2 x i64>*
  %2224 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2225 = bitcast <2 x i64> %2224 to <16 x i8>
  %2226 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2227 = bitcast <2 x i64> %2226 to <16 x i8>
  %palignr1274 = shufflevector <16 x i8> %2227, <16 x i8> %2225, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2228 = bitcast <16 x i8> %palignr1274 to <2 x i64>
  store <2 x i64>* %2223, <2 x i64>** %__p.addr.i1848, align 8
  store <2 x i64> %2228, <2 x i64>* %__b.addr.i1849, align 16
  %2229 = load <2 x i64>, <2 x i64>* %__b.addr.i1849, align 16
  %2230 = load <2 x i64>*, <2 x i64>** %__p.addr.i1848, align 8
  %2231 = bitcast <2 x i64>* %2230 to %struct.__storeu_si128*
  %__v.i1850 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2231, i32 0, i32 0
  store <2 x i64> %2229, <2 x i64>* %__v.i1850, align 1
  %2232 = load i8*, i8** %dst.addr, align 8
  %add.ptr1275 = getelementptr inbounds i8, i8* %2232, i64 16
  %2233 = bitcast i8* %add.ptr1275 to <2 x i64>*
  %2234 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2235 = bitcast <2 x i64> %2234 to <16 x i8>
  %2236 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2237 = bitcast <2 x i64> %2236 to <16 x i8>
  %palignr1276 = shufflevector <16 x i8> %2237, <16 x i8> %2235, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2238 = bitcast <16 x i8> %palignr1276 to <2 x i64>
  store <2 x i64>* %2233, <2 x i64>** %__p.addr.i1845, align 8
  store <2 x i64> %2238, <2 x i64>* %__b.addr.i1846, align 16
  %2239 = load <2 x i64>, <2 x i64>* %__b.addr.i1846, align 16
  %2240 = load <2 x i64>*, <2 x i64>** %__p.addr.i1845, align 8
  %2241 = bitcast <2 x i64>* %2240 to %struct.__storeu_si128*
  %__v.i1847 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2241, i32 0, i32 0
  store <2 x i64> %2239, <2 x i64>* %__v.i1847, align 1
  %2242 = load i8*, i8** %dst.addr, align 8
  %add.ptr1277 = getelementptr inbounds i8, i8* %2242, i64 32
  %2243 = bitcast i8* %add.ptr1277 to <2 x i64>*
  %2244 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2245 = bitcast <2 x i64> %2244 to <16 x i8>
  %2246 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2247 = bitcast <2 x i64> %2246 to <16 x i8>
  %palignr1278 = shufflevector <16 x i8> %2247, <16 x i8> %2245, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2248 = bitcast <16 x i8> %palignr1278 to <2 x i64>
  store <2 x i64>* %2243, <2 x i64>** %__p.addr.i1842, align 8
  store <2 x i64> %2248, <2 x i64>* %__b.addr.i1843, align 16
  %2249 = load <2 x i64>, <2 x i64>* %__b.addr.i1843, align 16
  %2250 = load <2 x i64>*, <2 x i64>** %__p.addr.i1842, align 8
  %2251 = bitcast <2 x i64>* %2250 to %struct.__storeu_si128*
  %__v.i1844 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2251, i32 0, i32 0
  store <2 x i64> %2249, <2 x i64>* %__v.i1844, align 1
  %2252 = load i8*, i8** %dst.addr, align 8
  %add.ptr1279 = getelementptr inbounds i8, i8* %2252, i64 48
  %2253 = bitcast i8* %add.ptr1279 to <2 x i64>*
  %2254 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2255 = bitcast <2 x i64> %2254 to <16 x i8>
  %2256 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2257 = bitcast <2 x i64> %2256 to <16 x i8>
  %palignr1280 = shufflevector <16 x i8> %2257, <16 x i8> %2255, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2258 = bitcast <16 x i8> %palignr1280 to <2 x i64>
  store <2 x i64>* %2253, <2 x i64>** %__p.addr.i1839, align 8
  store <2 x i64> %2258, <2 x i64>* %__b.addr.i1840, align 16
  %2259 = load <2 x i64>, <2 x i64>* %__b.addr.i1840, align 16
  %2260 = load <2 x i64>*, <2 x i64>** %__p.addr.i1839, align 8
  %2261 = bitcast <2 x i64>* %2260 to %struct.__storeu_si128*
  %__v.i1841 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2261, i32 0, i32 0
  store <2 x i64> %2259, <2 x i64>* %__v.i1841, align 1
  %2262 = load i8*, i8** %dst.addr, align 8
  %add.ptr1281 = getelementptr inbounds i8, i8* %2262, i64 64
  %2263 = bitcast i8* %add.ptr1281 to <2 x i64>*
  %2264 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2265 = bitcast <2 x i64> %2264 to <16 x i8>
  %2266 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2267 = bitcast <2 x i64> %2266 to <16 x i8>
  %palignr1282 = shufflevector <16 x i8> %2267, <16 x i8> %2265, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2268 = bitcast <16 x i8> %palignr1282 to <2 x i64>
  store <2 x i64>* %2263, <2 x i64>** %__p.addr.i1836, align 8
  store <2 x i64> %2268, <2 x i64>* %__b.addr.i1837, align 16
  %2269 = load <2 x i64>, <2 x i64>* %__b.addr.i1837, align 16
  %2270 = load <2 x i64>*, <2 x i64>** %__p.addr.i1836, align 8
  %2271 = bitcast <2 x i64>* %2270 to %struct.__storeu_si128*
  %__v.i1838 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2271, i32 0, i32 0
  store <2 x i64> %2269, <2 x i64>* %__v.i1838, align 1
  %2272 = load i8*, i8** %dst.addr, align 8
  %add.ptr1283 = getelementptr inbounds i8, i8* %2272, i64 80
  %2273 = bitcast i8* %add.ptr1283 to <2 x i64>*
  %2274 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2275 = bitcast <2 x i64> %2274 to <16 x i8>
  %2276 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2277 = bitcast <2 x i64> %2276 to <16 x i8>
  %palignr1284 = shufflevector <16 x i8> %2277, <16 x i8> %2275, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2278 = bitcast <16 x i8> %palignr1284 to <2 x i64>
  store <2 x i64>* %2273, <2 x i64>** %__p.addr.i1833, align 8
  store <2 x i64> %2278, <2 x i64>* %__b.addr.i1834, align 16
  %2279 = load <2 x i64>, <2 x i64>* %__b.addr.i1834, align 16
  %2280 = load <2 x i64>*, <2 x i64>** %__p.addr.i1833, align 8
  %2281 = bitcast <2 x i64>* %2280 to %struct.__storeu_si128*
  %__v.i1835 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2281, i32 0, i32 0
  store <2 x i64> %2279, <2 x i64>* %__v.i1835, align 1
  %2282 = load i8*, i8** %dst.addr, align 8
  %add.ptr1285 = getelementptr inbounds i8, i8* %2282, i64 96
  %2283 = bitcast i8* %add.ptr1285 to <2 x i64>*
  %2284 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2285 = bitcast <2 x i64> %2284 to <16 x i8>
  %2286 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2287 = bitcast <2 x i64> %2286 to <16 x i8>
  %palignr1286 = shufflevector <16 x i8> %2287, <16 x i8> %2285, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2288 = bitcast <16 x i8> %palignr1286 to <2 x i64>
  store <2 x i64>* %2283, <2 x i64>** %__p.addr.i1830, align 8
  store <2 x i64> %2288, <2 x i64>* %__b.addr.i1831, align 16
  %2289 = load <2 x i64>, <2 x i64>* %__b.addr.i1831, align 16
  %2290 = load <2 x i64>*, <2 x i64>** %__p.addr.i1830, align 8
  %2291 = bitcast <2 x i64>* %2290 to %struct.__storeu_si128*
  %__v.i1832 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2291, i32 0, i32 0
  store <2 x i64> %2289, <2 x i64>* %__v.i1832, align 1
  %2292 = load i8*, i8** %dst.addr, align 8
  %add.ptr1287 = getelementptr inbounds i8, i8* %2292, i64 112
  %2293 = bitcast i8* %add.ptr1287 to <2 x i64>*
  %2294 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %2295 = bitcast <2 x i64> %2294 to <16 x i8>
  %2296 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2297 = bitcast <2 x i64> %2296 to <16 x i8>
  %palignr1288 = shufflevector <16 x i8> %2297, <16 x i8> %2295, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2298 = bitcast <16 x i8> %palignr1288 to <2 x i64>
  store <2 x i64>* %2293, <2 x i64>** %__p.addr.i1827, align 8
  store <2 x i64> %2298, <2 x i64>* %__b.addr.i1828, align 16
  %2299 = load <2 x i64>, <2 x i64>* %__b.addr.i1828, align 16
  %2300 = load <2 x i64>*, <2 x i64>** %__p.addr.i1827, align 8
  %2301 = bitcast <2 x i64>* %2300 to %struct.__storeu_si128*
  %__v.i1829 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2301, i32 0, i32 0
  store <2 x i64> %2299, <2 x i64>* %__v.i1829, align 1
  %2302 = load i8*, i8** %dst.addr, align 8
  %add.ptr1289 = getelementptr inbounds i8, i8* %2302, i64 128
  store i8* %add.ptr1289, i8** %dst.addr, align 8
  br label %while.cond1240

while.end1290:                                    ; preds = %while.cond1240
  %2303 = load i64, i64* %n.addr, align 8
  %conv1291 = trunc i64 %2303 to i32
  store i32 %conv1291, i32* %tmp1239, align 4
  %2304 = load i64, i64* %n.addr, align 8
  %sub1292 = sub i64 %2304, 16
  %add1293 = add i64 %sub1292, 12
  %and1294 = and i64 %add1293, 127
  %add1295 = add i64 %and1294, 16
  %sub1296 = sub i64 %add1295, 12
  store i64 %sub1296, i64* %n.addr, align 8
  %2305 = load i64, i64* %n.addr, align 8
  %2306 = load i32, i32* %tmp1239, align 4
  %conv1297 = sext i32 %2306 to i64
  %sub1298 = sub i64 %conv1297, %2305
  %conv1299 = trunc i64 %sub1298 to i32
  store i32 %conv1299, i32* %tmp1239, align 4
  %2307 = load i8*, i8** %src.addr, align 8
  %2308 = load i32, i32* %tmp1239, align 4
  %idx.ext1300 = sext i32 %2308 to i64
  %add.ptr1301 = getelementptr inbounds i8, i8* %2307, i64 %idx.ext1300
  store i8* %add.ptr1301, i8** %src.addr, align 8
  %2309 = load i8*, i8** %dst.addr, align 8
  %2310 = load i32, i32* %tmp1239, align 4
  %idx.ext1302 = sext i32 %2310 to i64
  %add.ptr1303 = getelementptr inbounds i8, i8* %2309, i64 %idx.ext1302
  store i8* %add.ptr1303, i8** %dst.addr, align 8
  %2311 = load i64, i64* %n.addr, align 8
  %cmp1304 = icmp uge i64 %2311, 36
  br i1 %cmp1304, label %if.then1306, label %if.end1341

if.then1306:                                      ; preds = %while.end1290
  br label %while.cond1307

while.cond1307:                                   ; preds = %while.body1310, %if.then1306
  %2312 = load i64, i64* %n.addr, align 8
  %cmp1308 = icmp uge i64 %2312, 36
  br i1 %cmp1308, label %while.body1310, label %while.end1327

while.body1310:                                   ; preds = %while.cond1307
  %2313 = load i8*, i8** %src.addr, align 8
  %add.ptr1311 = getelementptr inbounds i8, i8* %2313, i64 -12
  %add.ptr1312 = getelementptr inbounds i8, i8* %add.ptr1311, i64 0
  %2314 = bitcast i8* %add.ptr1312 to <2 x i64>*
  store <2 x i64>* %2314, <2 x i64>** %__p.addr.i1825, align 8
  %2315 = load <2 x i64>*, <2 x i64>** %__p.addr.i1825, align 8
  %2316 = bitcast <2 x i64>* %2315 to %struct.__loadu_si128*
  %__v.i1826 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2316, i32 0, i32 0
  %2317 = load <2 x i64>, <2 x i64>* %__v.i1826, align 1
  store <2 x i64> %2317, <2 x i64>* %xmm0, align 16
  %2318 = load i64, i64* %n.addr, align 8
  %sub1314 = sub i64 %2318, 32
  store i64 %sub1314, i64* %n.addr, align 8
  %2319 = load i8*, i8** %src.addr, align 8
  %add.ptr1315 = getelementptr inbounds i8, i8* %2319, i64 -12
  %add.ptr1316 = getelementptr inbounds i8, i8* %add.ptr1315, i64 16
  %2320 = bitcast i8* %add.ptr1316 to <2 x i64>*
  store <2 x i64>* %2320, <2 x i64>** %__p.addr.i1823, align 8
  %2321 = load <2 x i64>*, <2 x i64>** %__p.addr.i1823, align 8
  %2322 = bitcast <2 x i64>* %2321 to %struct.__loadu_si128*
  %__v.i1824 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2322, i32 0, i32 0
  %2323 = load <2 x i64>, <2 x i64>* %__v.i1824, align 1
  store <2 x i64> %2323, <2 x i64>* %xmm1, align 16
  %2324 = load i8*, i8** %src.addr, align 8
  %add.ptr1318 = getelementptr inbounds i8, i8* %2324, i64 -12
  %add.ptr1319 = getelementptr inbounds i8, i8* %add.ptr1318, i64 32
  %2325 = bitcast i8* %add.ptr1319 to <2 x i64>*
  store <2 x i64>* %2325, <2 x i64>** %__p.addr.i1821, align 8
  %2326 = load <2 x i64>*, <2 x i64>** %__p.addr.i1821, align 8
  %2327 = bitcast <2 x i64>* %2326 to %struct.__loadu_si128*
  %__v.i1822 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2327, i32 0, i32 0
  %2328 = load <2 x i64>, <2 x i64>* %__v.i1822, align 1
  store <2 x i64> %2328, <2 x i64>* %xmm2, align 16
  %2329 = load i8*, i8** %src.addr, align 8
  %add.ptr1321 = getelementptr inbounds i8, i8* %2329, i64 32
  store i8* %add.ptr1321, i8** %src.addr, align 8
  %2330 = load i8*, i8** %dst.addr, align 8
  %add.ptr1322 = getelementptr inbounds i8, i8* %2330, i64 0
  %2331 = bitcast i8* %add.ptr1322 to <2 x i64>*
  %2332 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2333 = bitcast <2 x i64> %2332 to <16 x i8>
  %2334 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2335 = bitcast <2 x i64> %2334 to <16 x i8>
  %palignr1323 = shufflevector <16 x i8> %2335, <16 x i8> %2333, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2336 = bitcast <16 x i8> %palignr1323 to <2 x i64>
  store <2 x i64>* %2331, <2 x i64>** %__p.addr.i1818, align 8
  store <2 x i64> %2336, <2 x i64>* %__b.addr.i1819, align 16
  %2337 = load <2 x i64>, <2 x i64>* %__b.addr.i1819, align 16
  %2338 = load <2 x i64>*, <2 x i64>** %__p.addr.i1818, align 8
  %2339 = bitcast <2 x i64>* %2338 to %struct.__storeu_si128*
  %__v.i1820 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2339, i32 0, i32 0
  store <2 x i64> %2337, <2 x i64>* %__v.i1820, align 1
  %2340 = load i8*, i8** %dst.addr, align 8
  %add.ptr1324 = getelementptr inbounds i8, i8* %2340, i64 16
  %2341 = bitcast i8* %add.ptr1324 to <2 x i64>*
  %2342 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2343 = bitcast <2 x i64> %2342 to <16 x i8>
  %2344 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2345 = bitcast <2 x i64> %2344 to <16 x i8>
  %palignr1325 = shufflevector <16 x i8> %2345, <16 x i8> %2343, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %2346 = bitcast <16 x i8> %palignr1325 to <2 x i64>
  store <2 x i64>* %2341, <2 x i64>** %__p.addr.i1815, align 8
  store <2 x i64> %2346, <2 x i64>* %__b.addr.i1816, align 16
  %2347 = load <2 x i64>, <2 x i64>* %__b.addr.i1816, align 16
  %2348 = load <2 x i64>*, <2 x i64>** %__p.addr.i1815, align 8
  %2349 = bitcast <2 x i64>* %2348 to %struct.__storeu_si128*
  %__v.i1817 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2349, i32 0, i32 0
  store <2 x i64> %2347, <2 x i64>* %__v.i1817, align 1
  %2350 = load i8*, i8** %dst.addr, align 8
  %add.ptr1326 = getelementptr inbounds i8, i8* %2350, i64 32
  store i8* %add.ptr1326, i8** %dst.addr, align 8
  br label %while.cond1307

while.end1327:                                    ; preds = %while.cond1307
  %2351 = load i64, i64* %n.addr, align 8
  %conv1328 = trunc i64 %2351 to i32
  store i32 %conv1328, i32* %tmp1239, align 4
  %2352 = load i64, i64* %n.addr, align 8
  %sub1329 = sub i64 %2352, 16
  %add1330 = add i64 %sub1329, 12
  %and1331 = and i64 %add1330, 31
  %add1332 = add i64 %and1331, 16
  %sub1333 = sub i64 %add1332, 12
  store i64 %sub1333, i64* %n.addr, align 8
  %2353 = load i64, i64* %n.addr, align 8
  %2354 = load i32, i32* %tmp1239, align 4
  %conv1334 = sext i32 %2354 to i64
  %sub1335 = sub i64 %conv1334, %2353
  %conv1336 = trunc i64 %sub1335 to i32
  store i32 %conv1336, i32* %tmp1239, align 4
  %2355 = load i8*, i8** %src.addr, align 8
  %2356 = load i32, i32* %tmp1239, align 4
  %idx.ext1337 = sext i32 %2356 to i64
  %add.ptr1338 = getelementptr inbounds i8, i8* %2355, i64 %idx.ext1337
  store i8* %add.ptr1338, i8** %src.addr, align 8
  %2357 = load i8*, i8** %dst.addr, align 8
  %2358 = load i32, i32* %tmp1239, align 4
  %idx.ext1339 = sext i32 %2358 to i64
  %add.ptr1340 = getelementptr inbounds i8, i8* %2357, i64 %idx.ext1339
  store i8* %add.ptr1340, i8** %dst.addr, align 8
  br label %if.end1341

if.end1341:                                       ; preds = %while.end1327, %while.end1290
  br label %sw.epilog

sw.bb1342:                                        ; preds = %if.end103
  br label %while.cond1344

while.cond1344:                                   ; preds = %while.body1347, %sw.bb1342
  %2359 = load i64, i64* %n.addr, align 8
  %cmp1345 = icmp uge i64 %2359, 131
  br i1 %cmp1345, label %while.body1347, label %while.end1394

while.body1347:                                   ; preds = %while.cond1344
  %2360 = load i8*, i8** %src.addr, align 8
  %add.ptr1348 = getelementptr inbounds i8, i8* %2360, i64 -13
  %add.ptr1349 = getelementptr inbounds i8, i8* %add.ptr1348, i64 0
  %2361 = bitcast i8* %add.ptr1349 to <2 x i64>*
  store <2 x i64>* %2361, <2 x i64>** %__p.addr.i1813, align 8
  %2362 = load <2 x i64>*, <2 x i64>** %__p.addr.i1813, align 8
  %2363 = bitcast <2 x i64>* %2362 to %struct.__loadu_si128*
  %__v.i1814 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2363, i32 0, i32 0
  %2364 = load <2 x i64>, <2 x i64>* %__v.i1814, align 1
  store <2 x i64> %2364, <2 x i64>* %xmm0, align 16
  %2365 = load i64, i64* %n.addr, align 8
  %sub1351 = sub i64 %2365, 128
  store i64 %sub1351, i64* %n.addr, align 8
  %2366 = load i8*, i8** %src.addr, align 8
  %add.ptr1352 = getelementptr inbounds i8, i8* %2366, i64 -13
  %add.ptr1353 = getelementptr inbounds i8, i8* %add.ptr1352, i64 16
  %2367 = bitcast i8* %add.ptr1353 to <2 x i64>*
  store <2 x i64>* %2367, <2 x i64>** %__p.addr.i1811, align 8
  %2368 = load <2 x i64>*, <2 x i64>** %__p.addr.i1811, align 8
  %2369 = bitcast <2 x i64>* %2368 to %struct.__loadu_si128*
  %__v.i1812 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2369, i32 0, i32 0
  %2370 = load <2 x i64>, <2 x i64>* %__v.i1812, align 1
  store <2 x i64> %2370, <2 x i64>* %xmm1, align 16
  %2371 = load i8*, i8** %src.addr, align 8
  %add.ptr1355 = getelementptr inbounds i8, i8* %2371, i64 -13
  %add.ptr1356 = getelementptr inbounds i8, i8* %add.ptr1355, i64 32
  %2372 = bitcast i8* %add.ptr1356 to <2 x i64>*
  store <2 x i64>* %2372, <2 x i64>** %__p.addr.i1809, align 8
  %2373 = load <2 x i64>*, <2 x i64>** %__p.addr.i1809, align 8
  %2374 = bitcast <2 x i64>* %2373 to %struct.__loadu_si128*
  %__v.i1810 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2374, i32 0, i32 0
  %2375 = load <2 x i64>, <2 x i64>* %__v.i1810, align 1
  store <2 x i64> %2375, <2 x i64>* %xmm2, align 16
  %2376 = load i8*, i8** %src.addr, align 8
  %add.ptr1358 = getelementptr inbounds i8, i8* %2376, i64 -13
  %add.ptr1359 = getelementptr inbounds i8, i8* %add.ptr1358, i64 48
  %2377 = bitcast i8* %add.ptr1359 to <2 x i64>*
  store <2 x i64>* %2377, <2 x i64>** %__p.addr.i1807, align 8
  %2378 = load <2 x i64>*, <2 x i64>** %__p.addr.i1807, align 8
  %2379 = bitcast <2 x i64>* %2378 to %struct.__loadu_si128*
  %__v.i1808 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2379, i32 0, i32 0
  %2380 = load <2 x i64>, <2 x i64>* %__v.i1808, align 1
  store <2 x i64> %2380, <2 x i64>* %xmm3, align 16
  %2381 = load i8*, i8** %src.addr, align 8
  %add.ptr1361 = getelementptr inbounds i8, i8* %2381, i64 -13
  %add.ptr1362 = getelementptr inbounds i8, i8* %add.ptr1361, i64 64
  %2382 = bitcast i8* %add.ptr1362 to <2 x i64>*
  store <2 x i64>* %2382, <2 x i64>** %__p.addr.i1805, align 8
  %2383 = load <2 x i64>*, <2 x i64>** %__p.addr.i1805, align 8
  %2384 = bitcast <2 x i64>* %2383 to %struct.__loadu_si128*
  %__v.i1806 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2384, i32 0, i32 0
  %2385 = load <2 x i64>, <2 x i64>* %__v.i1806, align 1
  store <2 x i64> %2385, <2 x i64>* %xmm4, align 16
  %2386 = load i8*, i8** %src.addr, align 8
  %add.ptr1364 = getelementptr inbounds i8, i8* %2386, i64 -13
  %add.ptr1365 = getelementptr inbounds i8, i8* %add.ptr1364, i64 80
  %2387 = bitcast i8* %add.ptr1365 to <2 x i64>*
  store <2 x i64>* %2387, <2 x i64>** %__p.addr.i1803, align 8
  %2388 = load <2 x i64>*, <2 x i64>** %__p.addr.i1803, align 8
  %2389 = bitcast <2 x i64>* %2388 to %struct.__loadu_si128*
  %__v.i1804 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2389, i32 0, i32 0
  %2390 = load <2 x i64>, <2 x i64>* %__v.i1804, align 1
  store <2 x i64> %2390, <2 x i64>* %xmm5, align 16
  %2391 = load i8*, i8** %src.addr, align 8
  %add.ptr1367 = getelementptr inbounds i8, i8* %2391, i64 -13
  %add.ptr1368 = getelementptr inbounds i8, i8* %add.ptr1367, i64 96
  %2392 = bitcast i8* %add.ptr1368 to <2 x i64>*
  store <2 x i64>* %2392, <2 x i64>** %__p.addr.i1801, align 8
  %2393 = load <2 x i64>*, <2 x i64>** %__p.addr.i1801, align 8
  %2394 = bitcast <2 x i64>* %2393 to %struct.__loadu_si128*
  %__v.i1802 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2394, i32 0, i32 0
  %2395 = load <2 x i64>, <2 x i64>* %__v.i1802, align 1
  store <2 x i64> %2395, <2 x i64>* %xmm6, align 16
  %2396 = load i8*, i8** %src.addr, align 8
  %add.ptr1370 = getelementptr inbounds i8, i8* %2396, i64 -13
  %add.ptr1371 = getelementptr inbounds i8, i8* %add.ptr1370, i64 112
  %2397 = bitcast i8* %add.ptr1371 to <2 x i64>*
  store <2 x i64>* %2397, <2 x i64>** %__p.addr.i1799, align 8
  %2398 = load <2 x i64>*, <2 x i64>** %__p.addr.i1799, align 8
  %2399 = bitcast <2 x i64>* %2398 to %struct.__loadu_si128*
  %__v.i1800 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2399, i32 0, i32 0
  %2400 = load <2 x i64>, <2 x i64>* %__v.i1800, align 1
  store <2 x i64> %2400, <2 x i64>* %xmm7, align 16
  %2401 = load i8*, i8** %src.addr, align 8
  %add.ptr1373 = getelementptr inbounds i8, i8* %2401, i64 -13
  %add.ptr1374 = getelementptr inbounds i8, i8* %add.ptr1373, i64 128
  %2402 = bitcast i8* %add.ptr1374 to <2 x i64>*
  store <2 x i64>* %2402, <2 x i64>** %__p.addr.i1797, align 8
  %2403 = load <2 x i64>*, <2 x i64>** %__p.addr.i1797, align 8
  %2404 = bitcast <2 x i64>* %2403 to %struct.__loadu_si128*
  %__v.i1798 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2404, i32 0, i32 0
  %2405 = load <2 x i64>, <2 x i64>* %__v.i1798, align 1
  store <2 x i64> %2405, <2 x i64>* %xmm8, align 16
  %2406 = load i8*, i8** %src.addr, align 8
  %add.ptr1376 = getelementptr inbounds i8, i8* %2406, i64 128
  store i8* %add.ptr1376, i8** %src.addr, align 8
  %2407 = load i8*, i8** %dst.addr, align 8
  %add.ptr1377 = getelementptr inbounds i8, i8* %2407, i64 0
  %2408 = bitcast i8* %add.ptr1377 to <2 x i64>*
  %2409 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2410 = bitcast <2 x i64> %2409 to <16 x i8>
  %2411 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2412 = bitcast <2 x i64> %2411 to <16 x i8>
  %palignr1378 = shufflevector <16 x i8> %2412, <16 x i8> %2410, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2413 = bitcast <16 x i8> %palignr1378 to <2 x i64>
  store <2 x i64>* %2408, <2 x i64>** %__p.addr.i1794, align 8
  store <2 x i64> %2413, <2 x i64>* %__b.addr.i1795, align 16
  %2414 = load <2 x i64>, <2 x i64>* %__b.addr.i1795, align 16
  %2415 = load <2 x i64>*, <2 x i64>** %__p.addr.i1794, align 8
  %2416 = bitcast <2 x i64>* %2415 to %struct.__storeu_si128*
  %__v.i1796 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2416, i32 0, i32 0
  store <2 x i64> %2414, <2 x i64>* %__v.i1796, align 1
  %2417 = load i8*, i8** %dst.addr, align 8
  %add.ptr1379 = getelementptr inbounds i8, i8* %2417, i64 16
  %2418 = bitcast i8* %add.ptr1379 to <2 x i64>*
  %2419 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2420 = bitcast <2 x i64> %2419 to <16 x i8>
  %2421 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2422 = bitcast <2 x i64> %2421 to <16 x i8>
  %palignr1380 = shufflevector <16 x i8> %2422, <16 x i8> %2420, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2423 = bitcast <16 x i8> %palignr1380 to <2 x i64>
  store <2 x i64>* %2418, <2 x i64>** %__p.addr.i1791, align 8
  store <2 x i64> %2423, <2 x i64>* %__b.addr.i1792, align 16
  %2424 = load <2 x i64>, <2 x i64>* %__b.addr.i1792, align 16
  %2425 = load <2 x i64>*, <2 x i64>** %__p.addr.i1791, align 8
  %2426 = bitcast <2 x i64>* %2425 to %struct.__storeu_si128*
  %__v.i1793 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2426, i32 0, i32 0
  store <2 x i64> %2424, <2 x i64>* %__v.i1793, align 1
  %2427 = load i8*, i8** %dst.addr, align 8
  %add.ptr1381 = getelementptr inbounds i8, i8* %2427, i64 32
  %2428 = bitcast i8* %add.ptr1381 to <2 x i64>*
  %2429 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2430 = bitcast <2 x i64> %2429 to <16 x i8>
  %2431 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2432 = bitcast <2 x i64> %2431 to <16 x i8>
  %palignr1382 = shufflevector <16 x i8> %2432, <16 x i8> %2430, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2433 = bitcast <16 x i8> %palignr1382 to <2 x i64>
  store <2 x i64>* %2428, <2 x i64>** %__p.addr.i1788, align 8
  store <2 x i64> %2433, <2 x i64>* %__b.addr.i1789, align 16
  %2434 = load <2 x i64>, <2 x i64>* %__b.addr.i1789, align 16
  %2435 = load <2 x i64>*, <2 x i64>** %__p.addr.i1788, align 8
  %2436 = bitcast <2 x i64>* %2435 to %struct.__storeu_si128*
  %__v.i1790 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2436, i32 0, i32 0
  store <2 x i64> %2434, <2 x i64>* %__v.i1790, align 1
  %2437 = load i8*, i8** %dst.addr, align 8
  %add.ptr1383 = getelementptr inbounds i8, i8* %2437, i64 48
  %2438 = bitcast i8* %add.ptr1383 to <2 x i64>*
  %2439 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2440 = bitcast <2 x i64> %2439 to <16 x i8>
  %2441 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2442 = bitcast <2 x i64> %2441 to <16 x i8>
  %palignr1384 = shufflevector <16 x i8> %2442, <16 x i8> %2440, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2443 = bitcast <16 x i8> %palignr1384 to <2 x i64>
  store <2 x i64>* %2438, <2 x i64>** %__p.addr.i1785, align 8
  store <2 x i64> %2443, <2 x i64>* %__b.addr.i1786, align 16
  %2444 = load <2 x i64>, <2 x i64>* %__b.addr.i1786, align 16
  %2445 = load <2 x i64>*, <2 x i64>** %__p.addr.i1785, align 8
  %2446 = bitcast <2 x i64>* %2445 to %struct.__storeu_si128*
  %__v.i1787 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2446, i32 0, i32 0
  store <2 x i64> %2444, <2 x i64>* %__v.i1787, align 1
  %2447 = load i8*, i8** %dst.addr, align 8
  %add.ptr1385 = getelementptr inbounds i8, i8* %2447, i64 64
  %2448 = bitcast i8* %add.ptr1385 to <2 x i64>*
  %2449 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2450 = bitcast <2 x i64> %2449 to <16 x i8>
  %2451 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2452 = bitcast <2 x i64> %2451 to <16 x i8>
  %palignr1386 = shufflevector <16 x i8> %2452, <16 x i8> %2450, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2453 = bitcast <16 x i8> %palignr1386 to <2 x i64>
  store <2 x i64>* %2448, <2 x i64>** %__p.addr.i1782, align 8
  store <2 x i64> %2453, <2 x i64>* %__b.addr.i1783, align 16
  %2454 = load <2 x i64>, <2 x i64>* %__b.addr.i1783, align 16
  %2455 = load <2 x i64>*, <2 x i64>** %__p.addr.i1782, align 8
  %2456 = bitcast <2 x i64>* %2455 to %struct.__storeu_si128*
  %__v.i1784 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2456, i32 0, i32 0
  store <2 x i64> %2454, <2 x i64>* %__v.i1784, align 1
  %2457 = load i8*, i8** %dst.addr, align 8
  %add.ptr1387 = getelementptr inbounds i8, i8* %2457, i64 80
  %2458 = bitcast i8* %add.ptr1387 to <2 x i64>*
  %2459 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2460 = bitcast <2 x i64> %2459 to <16 x i8>
  %2461 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2462 = bitcast <2 x i64> %2461 to <16 x i8>
  %palignr1388 = shufflevector <16 x i8> %2462, <16 x i8> %2460, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2463 = bitcast <16 x i8> %palignr1388 to <2 x i64>
  store <2 x i64>* %2458, <2 x i64>** %__p.addr.i1779, align 8
  store <2 x i64> %2463, <2 x i64>* %__b.addr.i1780, align 16
  %2464 = load <2 x i64>, <2 x i64>* %__b.addr.i1780, align 16
  %2465 = load <2 x i64>*, <2 x i64>** %__p.addr.i1779, align 8
  %2466 = bitcast <2 x i64>* %2465 to %struct.__storeu_si128*
  %__v.i1781 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2466, i32 0, i32 0
  store <2 x i64> %2464, <2 x i64>* %__v.i1781, align 1
  %2467 = load i8*, i8** %dst.addr, align 8
  %add.ptr1389 = getelementptr inbounds i8, i8* %2467, i64 96
  %2468 = bitcast i8* %add.ptr1389 to <2 x i64>*
  %2469 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2470 = bitcast <2 x i64> %2469 to <16 x i8>
  %2471 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2472 = bitcast <2 x i64> %2471 to <16 x i8>
  %palignr1390 = shufflevector <16 x i8> %2472, <16 x i8> %2470, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2473 = bitcast <16 x i8> %palignr1390 to <2 x i64>
  store <2 x i64>* %2468, <2 x i64>** %__p.addr.i1776, align 8
  store <2 x i64> %2473, <2 x i64>* %__b.addr.i1777, align 16
  %2474 = load <2 x i64>, <2 x i64>* %__b.addr.i1777, align 16
  %2475 = load <2 x i64>*, <2 x i64>** %__p.addr.i1776, align 8
  %2476 = bitcast <2 x i64>* %2475 to %struct.__storeu_si128*
  %__v.i1778 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2476, i32 0, i32 0
  store <2 x i64> %2474, <2 x i64>* %__v.i1778, align 1
  %2477 = load i8*, i8** %dst.addr, align 8
  %add.ptr1391 = getelementptr inbounds i8, i8* %2477, i64 112
  %2478 = bitcast i8* %add.ptr1391 to <2 x i64>*
  %2479 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %2480 = bitcast <2 x i64> %2479 to <16 x i8>
  %2481 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2482 = bitcast <2 x i64> %2481 to <16 x i8>
  %palignr1392 = shufflevector <16 x i8> %2482, <16 x i8> %2480, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2483 = bitcast <16 x i8> %palignr1392 to <2 x i64>
  store <2 x i64>* %2478, <2 x i64>** %__p.addr.i1773, align 8
  store <2 x i64> %2483, <2 x i64>* %__b.addr.i1774, align 16
  %2484 = load <2 x i64>, <2 x i64>* %__b.addr.i1774, align 16
  %2485 = load <2 x i64>*, <2 x i64>** %__p.addr.i1773, align 8
  %2486 = bitcast <2 x i64>* %2485 to %struct.__storeu_si128*
  %__v.i1775 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2486, i32 0, i32 0
  store <2 x i64> %2484, <2 x i64>* %__v.i1775, align 1
  %2487 = load i8*, i8** %dst.addr, align 8
  %add.ptr1393 = getelementptr inbounds i8, i8* %2487, i64 128
  store i8* %add.ptr1393, i8** %dst.addr, align 8
  br label %while.cond1344

while.end1394:                                    ; preds = %while.cond1344
  %2488 = load i64, i64* %n.addr, align 8
  %conv1395 = trunc i64 %2488 to i32
  store i32 %conv1395, i32* %tmp1343, align 4
  %2489 = load i64, i64* %n.addr, align 8
  %sub1396 = sub i64 %2489, 16
  %add1397 = add i64 %sub1396, 13
  %and1398 = and i64 %add1397, 127
  %add1399 = add i64 %and1398, 16
  %sub1400 = sub i64 %add1399, 13
  store i64 %sub1400, i64* %n.addr, align 8
  %2490 = load i64, i64* %n.addr, align 8
  %2491 = load i32, i32* %tmp1343, align 4
  %conv1401 = sext i32 %2491 to i64
  %sub1402 = sub i64 %conv1401, %2490
  %conv1403 = trunc i64 %sub1402 to i32
  store i32 %conv1403, i32* %tmp1343, align 4
  %2492 = load i8*, i8** %src.addr, align 8
  %2493 = load i32, i32* %tmp1343, align 4
  %idx.ext1404 = sext i32 %2493 to i64
  %add.ptr1405 = getelementptr inbounds i8, i8* %2492, i64 %idx.ext1404
  store i8* %add.ptr1405, i8** %src.addr, align 8
  %2494 = load i8*, i8** %dst.addr, align 8
  %2495 = load i32, i32* %tmp1343, align 4
  %idx.ext1406 = sext i32 %2495 to i64
  %add.ptr1407 = getelementptr inbounds i8, i8* %2494, i64 %idx.ext1406
  store i8* %add.ptr1407, i8** %dst.addr, align 8
  %2496 = load i64, i64* %n.addr, align 8
  %cmp1408 = icmp uge i64 %2496, 35
  br i1 %cmp1408, label %if.then1410, label %if.end1445

if.then1410:                                      ; preds = %while.end1394
  br label %while.cond1411

while.cond1411:                                   ; preds = %while.body1414, %if.then1410
  %2497 = load i64, i64* %n.addr, align 8
  %cmp1412 = icmp uge i64 %2497, 35
  br i1 %cmp1412, label %while.body1414, label %while.end1431

while.body1414:                                   ; preds = %while.cond1411
  %2498 = load i8*, i8** %src.addr, align 8
  %add.ptr1415 = getelementptr inbounds i8, i8* %2498, i64 -13
  %add.ptr1416 = getelementptr inbounds i8, i8* %add.ptr1415, i64 0
  %2499 = bitcast i8* %add.ptr1416 to <2 x i64>*
  store <2 x i64>* %2499, <2 x i64>** %__p.addr.i1771, align 8
  %2500 = load <2 x i64>*, <2 x i64>** %__p.addr.i1771, align 8
  %2501 = bitcast <2 x i64>* %2500 to %struct.__loadu_si128*
  %__v.i1772 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2501, i32 0, i32 0
  %2502 = load <2 x i64>, <2 x i64>* %__v.i1772, align 1
  store <2 x i64> %2502, <2 x i64>* %xmm0, align 16
  %2503 = load i64, i64* %n.addr, align 8
  %sub1418 = sub i64 %2503, 32
  store i64 %sub1418, i64* %n.addr, align 8
  %2504 = load i8*, i8** %src.addr, align 8
  %add.ptr1419 = getelementptr inbounds i8, i8* %2504, i64 -13
  %add.ptr1420 = getelementptr inbounds i8, i8* %add.ptr1419, i64 16
  %2505 = bitcast i8* %add.ptr1420 to <2 x i64>*
  store <2 x i64>* %2505, <2 x i64>** %__p.addr.i1769, align 8
  %2506 = load <2 x i64>*, <2 x i64>** %__p.addr.i1769, align 8
  %2507 = bitcast <2 x i64>* %2506 to %struct.__loadu_si128*
  %__v.i1770 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2507, i32 0, i32 0
  %2508 = load <2 x i64>, <2 x i64>* %__v.i1770, align 1
  store <2 x i64> %2508, <2 x i64>* %xmm1, align 16
  %2509 = load i8*, i8** %src.addr, align 8
  %add.ptr1422 = getelementptr inbounds i8, i8* %2509, i64 -13
  %add.ptr1423 = getelementptr inbounds i8, i8* %add.ptr1422, i64 32
  %2510 = bitcast i8* %add.ptr1423 to <2 x i64>*
  store <2 x i64>* %2510, <2 x i64>** %__p.addr.i1767, align 8
  %2511 = load <2 x i64>*, <2 x i64>** %__p.addr.i1767, align 8
  %2512 = bitcast <2 x i64>* %2511 to %struct.__loadu_si128*
  %__v.i1768 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2512, i32 0, i32 0
  %2513 = load <2 x i64>, <2 x i64>* %__v.i1768, align 1
  store <2 x i64> %2513, <2 x i64>* %xmm2, align 16
  %2514 = load i8*, i8** %src.addr, align 8
  %add.ptr1425 = getelementptr inbounds i8, i8* %2514, i64 32
  store i8* %add.ptr1425, i8** %src.addr, align 8
  %2515 = load i8*, i8** %dst.addr, align 8
  %add.ptr1426 = getelementptr inbounds i8, i8* %2515, i64 0
  %2516 = bitcast i8* %add.ptr1426 to <2 x i64>*
  %2517 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2518 = bitcast <2 x i64> %2517 to <16 x i8>
  %2519 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2520 = bitcast <2 x i64> %2519 to <16 x i8>
  %palignr1427 = shufflevector <16 x i8> %2520, <16 x i8> %2518, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2521 = bitcast <16 x i8> %palignr1427 to <2 x i64>
  store <2 x i64>* %2516, <2 x i64>** %__p.addr.i1764, align 8
  store <2 x i64> %2521, <2 x i64>* %__b.addr.i1765, align 16
  %2522 = load <2 x i64>, <2 x i64>* %__b.addr.i1765, align 16
  %2523 = load <2 x i64>*, <2 x i64>** %__p.addr.i1764, align 8
  %2524 = bitcast <2 x i64>* %2523 to %struct.__storeu_si128*
  %__v.i1766 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2524, i32 0, i32 0
  store <2 x i64> %2522, <2 x i64>* %__v.i1766, align 1
  %2525 = load i8*, i8** %dst.addr, align 8
  %add.ptr1428 = getelementptr inbounds i8, i8* %2525, i64 16
  %2526 = bitcast i8* %add.ptr1428 to <2 x i64>*
  %2527 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2528 = bitcast <2 x i64> %2527 to <16 x i8>
  %2529 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2530 = bitcast <2 x i64> %2529 to <16 x i8>
  %palignr1429 = shufflevector <16 x i8> %2530, <16 x i8> %2528, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %2531 = bitcast <16 x i8> %palignr1429 to <2 x i64>
  store <2 x i64>* %2526, <2 x i64>** %__p.addr.i1761, align 8
  store <2 x i64> %2531, <2 x i64>* %__b.addr.i1762, align 16
  %2532 = load <2 x i64>, <2 x i64>* %__b.addr.i1762, align 16
  %2533 = load <2 x i64>*, <2 x i64>** %__p.addr.i1761, align 8
  %2534 = bitcast <2 x i64>* %2533 to %struct.__storeu_si128*
  %__v.i1763 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2534, i32 0, i32 0
  store <2 x i64> %2532, <2 x i64>* %__v.i1763, align 1
  %2535 = load i8*, i8** %dst.addr, align 8
  %add.ptr1430 = getelementptr inbounds i8, i8* %2535, i64 32
  store i8* %add.ptr1430, i8** %dst.addr, align 8
  br label %while.cond1411

while.end1431:                                    ; preds = %while.cond1411
  %2536 = load i64, i64* %n.addr, align 8
  %conv1432 = trunc i64 %2536 to i32
  store i32 %conv1432, i32* %tmp1343, align 4
  %2537 = load i64, i64* %n.addr, align 8
  %sub1433 = sub i64 %2537, 16
  %add1434 = add i64 %sub1433, 13
  %and1435 = and i64 %add1434, 31
  %add1436 = add i64 %and1435, 16
  %sub1437 = sub i64 %add1436, 13
  store i64 %sub1437, i64* %n.addr, align 8
  %2538 = load i64, i64* %n.addr, align 8
  %2539 = load i32, i32* %tmp1343, align 4
  %conv1438 = sext i32 %2539 to i64
  %sub1439 = sub i64 %conv1438, %2538
  %conv1440 = trunc i64 %sub1439 to i32
  store i32 %conv1440, i32* %tmp1343, align 4
  %2540 = load i8*, i8** %src.addr, align 8
  %2541 = load i32, i32* %tmp1343, align 4
  %idx.ext1441 = sext i32 %2541 to i64
  %add.ptr1442 = getelementptr inbounds i8, i8* %2540, i64 %idx.ext1441
  store i8* %add.ptr1442, i8** %src.addr, align 8
  %2542 = load i8*, i8** %dst.addr, align 8
  %2543 = load i32, i32* %tmp1343, align 4
  %idx.ext1443 = sext i32 %2543 to i64
  %add.ptr1444 = getelementptr inbounds i8, i8* %2542, i64 %idx.ext1443
  store i8* %add.ptr1444, i8** %dst.addr, align 8
  br label %if.end1445

if.end1445:                                       ; preds = %while.end1431, %while.end1394
  br label %sw.epilog

sw.bb1446:                                        ; preds = %if.end103
  br label %while.cond1448

while.cond1448:                                   ; preds = %while.body1451, %sw.bb1446
  %2544 = load i64, i64* %n.addr, align 8
  %cmp1449 = icmp uge i64 %2544, 130
  br i1 %cmp1449, label %while.body1451, label %while.end1498

while.body1451:                                   ; preds = %while.cond1448
  %2545 = load i8*, i8** %src.addr, align 8
  %add.ptr1452 = getelementptr inbounds i8, i8* %2545, i64 -14
  %add.ptr1453 = getelementptr inbounds i8, i8* %add.ptr1452, i64 0
  %2546 = bitcast i8* %add.ptr1453 to <2 x i64>*
  store <2 x i64>* %2546, <2 x i64>** %__p.addr.i1759, align 8
  %2547 = load <2 x i64>*, <2 x i64>** %__p.addr.i1759, align 8
  %2548 = bitcast <2 x i64>* %2547 to %struct.__loadu_si128*
  %__v.i1760 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2548, i32 0, i32 0
  %2549 = load <2 x i64>, <2 x i64>* %__v.i1760, align 1
  store <2 x i64> %2549, <2 x i64>* %xmm0, align 16
  %2550 = load i64, i64* %n.addr, align 8
  %sub1455 = sub i64 %2550, 128
  store i64 %sub1455, i64* %n.addr, align 8
  %2551 = load i8*, i8** %src.addr, align 8
  %add.ptr1456 = getelementptr inbounds i8, i8* %2551, i64 -14
  %add.ptr1457 = getelementptr inbounds i8, i8* %add.ptr1456, i64 16
  %2552 = bitcast i8* %add.ptr1457 to <2 x i64>*
  store <2 x i64>* %2552, <2 x i64>** %__p.addr.i1757, align 8
  %2553 = load <2 x i64>*, <2 x i64>** %__p.addr.i1757, align 8
  %2554 = bitcast <2 x i64>* %2553 to %struct.__loadu_si128*
  %__v.i1758 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2554, i32 0, i32 0
  %2555 = load <2 x i64>, <2 x i64>* %__v.i1758, align 1
  store <2 x i64> %2555, <2 x i64>* %xmm1, align 16
  %2556 = load i8*, i8** %src.addr, align 8
  %add.ptr1459 = getelementptr inbounds i8, i8* %2556, i64 -14
  %add.ptr1460 = getelementptr inbounds i8, i8* %add.ptr1459, i64 32
  %2557 = bitcast i8* %add.ptr1460 to <2 x i64>*
  store <2 x i64>* %2557, <2 x i64>** %__p.addr.i1755, align 8
  %2558 = load <2 x i64>*, <2 x i64>** %__p.addr.i1755, align 8
  %2559 = bitcast <2 x i64>* %2558 to %struct.__loadu_si128*
  %__v.i1756 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2559, i32 0, i32 0
  %2560 = load <2 x i64>, <2 x i64>* %__v.i1756, align 1
  store <2 x i64> %2560, <2 x i64>* %xmm2, align 16
  %2561 = load i8*, i8** %src.addr, align 8
  %add.ptr1462 = getelementptr inbounds i8, i8* %2561, i64 -14
  %add.ptr1463 = getelementptr inbounds i8, i8* %add.ptr1462, i64 48
  %2562 = bitcast i8* %add.ptr1463 to <2 x i64>*
  store <2 x i64>* %2562, <2 x i64>** %__p.addr.i1753, align 8
  %2563 = load <2 x i64>*, <2 x i64>** %__p.addr.i1753, align 8
  %2564 = bitcast <2 x i64>* %2563 to %struct.__loadu_si128*
  %__v.i1754 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2564, i32 0, i32 0
  %2565 = load <2 x i64>, <2 x i64>* %__v.i1754, align 1
  store <2 x i64> %2565, <2 x i64>* %xmm3, align 16
  %2566 = load i8*, i8** %src.addr, align 8
  %add.ptr1465 = getelementptr inbounds i8, i8* %2566, i64 -14
  %add.ptr1466 = getelementptr inbounds i8, i8* %add.ptr1465, i64 64
  %2567 = bitcast i8* %add.ptr1466 to <2 x i64>*
  store <2 x i64>* %2567, <2 x i64>** %__p.addr.i1751, align 8
  %2568 = load <2 x i64>*, <2 x i64>** %__p.addr.i1751, align 8
  %2569 = bitcast <2 x i64>* %2568 to %struct.__loadu_si128*
  %__v.i1752 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2569, i32 0, i32 0
  %2570 = load <2 x i64>, <2 x i64>* %__v.i1752, align 1
  store <2 x i64> %2570, <2 x i64>* %xmm4, align 16
  %2571 = load i8*, i8** %src.addr, align 8
  %add.ptr1468 = getelementptr inbounds i8, i8* %2571, i64 -14
  %add.ptr1469 = getelementptr inbounds i8, i8* %add.ptr1468, i64 80
  %2572 = bitcast i8* %add.ptr1469 to <2 x i64>*
  store <2 x i64>* %2572, <2 x i64>** %__p.addr.i1749, align 8
  %2573 = load <2 x i64>*, <2 x i64>** %__p.addr.i1749, align 8
  %2574 = bitcast <2 x i64>* %2573 to %struct.__loadu_si128*
  %__v.i1750 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2574, i32 0, i32 0
  %2575 = load <2 x i64>, <2 x i64>* %__v.i1750, align 1
  store <2 x i64> %2575, <2 x i64>* %xmm5, align 16
  %2576 = load i8*, i8** %src.addr, align 8
  %add.ptr1471 = getelementptr inbounds i8, i8* %2576, i64 -14
  %add.ptr1472 = getelementptr inbounds i8, i8* %add.ptr1471, i64 96
  %2577 = bitcast i8* %add.ptr1472 to <2 x i64>*
  store <2 x i64>* %2577, <2 x i64>** %__p.addr.i1747, align 8
  %2578 = load <2 x i64>*, <2 x i64>** %__p.addr.i1747, align 8
  %2579 = bitcast <2 x i64>* %2578 to %struct.__loadu_si128*
  %__v.i1748 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2579, i32 0, i32 0
  %2580 = load <2 x i64>, <2 x i64>* %__v.i1748, align 1
  store <2 x i64> %2580, <2 x i64>* %xmm6, align 16
  %2581 = load i8*, i8** %src.addr, align 8
  %add.ptr1474 = getelementptr inbounds i8, i8* %2581, i64 -14
  %add.ptr1475 = getelementptr inbounds i8, i8* %add.ptr1474, i64 112
  %2582 = bitcast i8* %add.ptr1475 to <2 x i64>*
  store <2 x i64>* %2582, <2 x i64>** %__p.addr.i1745, align 8
  %2583 = load <2 x i64>*, <2 x i64>** %__p.addr.i1745, align 8
  %2584 = bitcast <2 x i64>* %2583 to %struct.__loadu_si128*
  %__v.i1746 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2584, i32 0, i32 0
  %2585 = load <2 x i64>, <2 x i64>* %__v.i1746, align 1
  store <2 x i64> %2585, <2 x i64>* %xmm7, align 16
  %2586 = load i8*, i8** %src.addr, align 8
  %add.ptr1477 = getelementptr inbounds i8, i8* %2586, i64 -14
  %add.ptr1478 = getelementptr inbounds i8, i8* %add.ptr1477, i64 128
  %2587 = bitcast i8* %add.ptr1478 to <2 x i64>*
  store <2 x i64>* %2587, <2 x i64>** %__p.addr.i1743, align 8
  %2588 = load <2 x i64>*, <2 x i64>** %__p.addr.i1743, align 8
  %2589 = bitcast <2 x i64>* %2588 to %struct.__loadu_si128*
  %__v.i1744 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2589, i32 0, i32 0
  %2590 = load <2 x i64>, <2 x i64>* %__v.i1744, align 1
  store <2 x i64> %2590, <2 x i64>* %xmm8, align 16
  %2591 = load i8*, i8** %src.addr, align 8
  %add.ptr1480 = getelementptr inbounds i8, i8* %2591, i64 128
  store i8* %add.ptr1480, i8** %src.addr, align 8
  %2592 = load i8*, i8** %dst.addr, align 8
  %add.ptr1481 = getelementptr inbounds i8, i8* %2592, i64 0
  %2593 = bitcast i8* %add.ptr1481 to <2 x i64>*
  %2594 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2595 = bitcast <2 x i64> %2594 to <16 x i8>
  %2596 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2597 = bitcast <2 x i64> %2596 to <16 x i8>
  %palignr1482 = shufflevector <16 x i8> %2597, <16 x i8> %2595, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2598 = bitcast <16 x i8> %palignr1482 to <2 x i64>
  store <2 x i64>* %2593, <2 x i64>** %__p.addr.i1740, align 8
  store <2 x i64> %2598, <2 x i64>* %__b.addr.i1741, align 16
  %2599 = load <2 x i64>, <2 x i64>* %__b.addr.i1741, align 16
  %2600 = load <2 x i64>*, <2 x i64>** %__p.addr.i1740, align 8
  %2601 = bitcast <2 x i64>* %2600 to %struct.__storeu_si128*
  %__v.i1742 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2601, i32 0, i32 0
  store <2 x i64> %2599, <2 x i64>* %__v.i1742, align 1
  %2602 = load i8*, i8** %dst.addr, align 8
  %add.ptr1483 = getelementptr inbounds i8, i8* %2602, i64 16
  %2603 = bitcast i8* %add.ptr1483 to <2 x i64>*
  %2604 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2605 = bitcast <2 x i64> %2604 to <16 x i8>
  %2606 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2607 = bitcast <2 x i64> %2606 to <16 x i8>
  %palignr1484 = shufflevector <16 x i8> %2607, <16 x i8> %2605, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2608 = bitcast <16 x i8> %palignr1484 to <2 x i64>
  store <2 x i64>* %2603, <2 x i64>** %__p.addr.i1737, align 8
  store <2 x i64> %2608, <2 x i64>* %__b.addr.i1738, align 16
  %2609 = load <2 x i64>, <2 x i64>* %__b.addr.i1738, align 16
  %2610 = load <2 x i64>*, <2 x i64>** %__p.addr.i1737, align 8
  %2611 = bitcast <2 x i64>* %2610 to %struct.__storeu_si128*
  %__v.i1739 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2611, i32 0, i32 0
  store <2 x i64> %2609, <2 x i64>* %__v.i1739, align 1
  %2612 = load i8*, i8** %dst.addr, align 8
  %add.ptr1485 = getelementptr inbounds i8, i8* %2612, i64 32
  %2613 = bitcast i8* %add.ptr1485 to <2 x i64>*
  %2614 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2615 = bitcast <2 x i64> %2614 to <16 x i8>
  %2616 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2617 = bitcast <2 x i64> %2616 to <16 x i8>
  %palignr1486 = shufflevector <16 x i8> %2617, <16 x i8> %2615, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2618 = bitcast <16 x i8> %palignr1486 to <2 x i64>
  store <2 x i64>* %2613, <2 x i64>** %__p.addr.i1734, align 8
  store <2 x i64> %2618, <2 x i64>* %__b.addr.i1735, align 16
  %2619 = load <2 x i64>, <2 x i64>* %__b.addr.i1735, align 16
  %2620 = load <2 x i64>*, <2 x i64>** %__p.addr.i1734, align 8
  %2621 = bitcast <2 x i64>* %2620 to %struct.__storeu_si128*
  %__v.i1736 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2621, i32 0, i32 0
  store <2 x i64> %2619, <2 x i64>* %__v.i1736, align 1
  %2622 = load i8*, i8** %dst.addr, align 8
  %add.ptr1487 = getelementptr inbounds i8, i8* %2622, i64 48
  %2623 = bitcast i8* %add.ptr1487 to <2 x i64>*
  %2624 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2625 = bitcast <2 x i64> %2624 to <16 x i8>
  %2626 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2627 = bitcast <2 x i64> %2626 to <16 x i8>
  %palignr1488 = shufflevector <16 x i8> %2627, <16 x i8> %2625, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2628 = bitcast <16 x i8> %palignr1488 to <2 x i64>
  store <2 x i64>* %2623, <2 x i64>** %__p.addr.i1731, align 8
  store <2 x i64> %2628, <2 x i64>* %__b.addr.i1732, align 16
  %2629 = load <2 x i64>, <2 x i64>* %__b.addr.i1732, align 16
  %2630 = load <2 x i64>*, <2 x i64>** %__p.addr.i1731, align 8
  %2631 = bitcast <2 x i64>* %2630 to %struct.__storeu_si128*
  %__v.i1733 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2631, i32 0, i32 0
  store <2 x i64> %2629, <2 x i64>* %__v.i1733, align 1
  %2632 = load i8*, i8** %dst.addr, align 8
  %add.ptr1489 = getelementptr inbounds i8, i8* %2632, i64 64
  %2633 = bitcast i8* %add.ptr1489 to <2 x i64>*
  %2634 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2635 = bitcast <2 x i64> %2634 to <16 x i8>
  %2636 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2637 = bitcast <2 x i64> %2636 to <16 x i8>
  %palignr1490 = shufflevector <16 x i8> %2637, <16 x i8> %2635, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2638 = bitcast <16 x i8> %palignr1490 to <2 x i64>
  store <2 x i64>* %2633, <2 x i64>** %__p.addr.i1728, align 8
  store <2 x i64> %2638, <2 x i64>* %__b.addr.i1729, align 16
  %2639 = load <2 x i64>, <2 x i64>* %__b.addr.i1729, align 16
  %2640 = load <2 x i64>*, <2 x i64>** %__p.addr.i1728, align 8
  %2641 = bitcast <2 x i64>* %2640 to %struct.__storeu_si128*
  %__v.i1730 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2641, i32 0, i32 0
  store <2 x i64> %2639, <2 x i64>* %__v.i1730, align 1
  %2642 = load i8*, i8** %dst.addr, align 8
  %add.ptr1491 = getelementptr inbounds i8, i8* %2642, i64 80
  %2643 = bitcast i8* %add.ptr1491 to <2 x i64>*
  %2644 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2645 = bitcast <2 x i64> %2644 to <16 x i8>
  %2646 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2647 = bitcast <2 x i64> %2646 to <16 x i8>
  %palignr1492 = shufflevector <16 x i8> %2647, <16 x i8> %2645, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2648 = bitcast <16 x i8> %palignr1492 to <2 x i64>
  store <2 x i64>* %2643, <2 x i64>** %__p.addr.i1725, align 8
  store <2 x i64> %2648, <2 x i64>* %__b.addr.i1726, align 16
  %2649 = load <2 x i64>, <2 x i64>* %__b.addr.i1726, align 16
  %2650 = load <2 x i64>*, <2 x i64>** %__p.addr.i1725, align 8
  %2651 = bitcast <2 x i64>* %2650 to %struct.__storeu_si128*
  %__v.i1727 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2651, i32 0, i32 0
  store <2 x i64> %2649, <2 x i64>* %__v.i1727, align 1
  %2652 = load i8*, i8** %dst.addr, align 8
  %add.ptr1493 = getelementptr inbounds i8, i8* %2652, i64 96
  %2653 = bitcast i8* %add.ptr1493 to <2 x i64>*
  %2654 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2655 = bitcast <2 x i64> %2654 to <16 x i8>
  %2656 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2657 = bitcast <2 x i64> %2656 to <16 x i8>
  %palignr1494 = shufflevector <16 x i8> %2657, <16 x i8> %2655, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2658 = bitcast <16 x i8> %palignr1494 to <2 x i64>
  store <2 x i64>* %2653, <2 x i64>** %__p.addr.i1722, align 8
  store <2 x i64> %2658, <2 x i64>* %__b.addr.i1723, align 16
  %2659 = load <2 x i64>, <2 x i64>* %__b.addr.i1723, align 16
  %2660 = load <2 x i64>*, <2 x i64>** %__p.addr.i1722, align 8
  %2661 = bitcast <2 x i64>* %2660 to %struct.__storeu_si128*
  %__v.i1724 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2661, i32 0, i32 0
  store <2 x i64> %2659, <2 x i64>* %__v.i1724, align 1
  %2662 = load i8*, i8** %dst.addr, align 8
  %add.ptr1495 = getelementptr inbounds i8, i8* %2662, i64 112
  %2663 = bitcast i8* %add.ptr1495 to <2 x i64>*
  %2664 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %2665 = bitcast <2 x i64> %2664 to <16 x i8>
  %2666 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2667 = bitcast <2 x i64> %2666 to <16 x i8>
  %palignr1496 = shufflevector <16 x i8> %2667, <16 x i8> %2665, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2668 = bitcast <16 x i8> %palignr1496 to <2 x i64>
  store <2 x i64>* %2663, <2 x i64>** %__p.addr.i1719, align 8
  store <2 x i64> %2668, <2 x i64>* %__b.addr.i1720, align 16
  %2669 = load <2 x i64>, <2 x i64>* %__b.addr.i1720, align 16
  %2670 = load <2 x i64>*, <2 x i64>** %__p.addr.i1719, align 8
  %2671 = bitcast <2 x i64>* %2670 to %struct.__storeu_si128*
  %__v.i1721 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2671, i32 0, i32 0
  store <2 x i64> %2669, <2 x i64>* %__v.i1721, align 1
  %2672 = load i8*, i8** %dst.addr, align 8
  %add.ptr1497 = getelementptr inbounds i8, i8* %2672, i64 128
  store i8* %add.ptr1497, i8** %dst.addr, align 8
  br label %while.cond1448

while.end1498:                                    ; preds = %while.cond1448
  %2673 = load i64, i64* %n.addr, align 8
  %conv1499 = trunc i64 %2673 to i32
  store i32 %conv1499, i32* %tmp1447, align 4
  %2674 = load i64, i64* %n.addr, align 8
  %sub1500 = sub i64 %2674, 16
  %add1501 = add i64 %sub1500, 14
  %and1502 = and i64 %add1501, 127
  %add1503 = add i64 %and1502, 16
  %sub1504 = sub i64 %add1503, 14
  store i64 %sub1504, i64* %n.addr, align 8
  %2675 = load i64, i64* %n.addr, align 8
  %2676 = load i32, i32* %tmp1447, align 4
  %conv1505 = sext i32 %2676 to i64
  %sub1506 = sub i64 %conv1505, %2675
  %conv1507 = trunc i64 %sub1506 to i32
  store i32 %conv1507, i32* %tmp1447, align 4
  %2677 = load i8*, i8** %src.addr, align 8
  %2678 = load i32, i32* %tmp1447, align 4
  %idx.ext1508 = sext i32 %2678 to i64
  %add.ptr1509 = getelementptr inbounds i8, i8* %2677, i64 %idx.ext1508
  store i8* %add.ptr1509, i8** %src.addr, align 8
  %2679 = load i8*, i8** %dst.addr, align 8
  %2680 = load i32, i32* %tmp1447, align 4
  %idx.ext1510 = sext i32 %2680 to i64
  %add.ptr1511 = getelementptr inbounds i8, i8* %2679, i64 %idx.ext1510
  store i8* %add.ptr1511, i8** %dst.addr, align 8
  %2681 = load i64, i64* %n.addr, align 8
  %cmp1512 = icmp uge i64 %2681, 34
  br i1 %cmp1512, label %if.then1514, label %if.end1549

if.then1514:                                      ; preds = %while.end1498
  br label %while.cond1515

while.cond1515:                                   ; preds = %while.body1518, %if.then1514
  %2682 = load i64, i64* %n.addr, align 8
  %cmp1516 = icmp uge i64 %2682, 34
  br i1 %cmp1516, label %while.body1518, label %while.end1535

while.body1518:                                   ; preds = %while.cond1515
  %2683 = load i8*, i8** %src.addr, align 8
  %add.ptr1519 = getelementptr inbounds i8, i8* %2683, i64 -14
  %add.ptr1520 = getelementptr inbounds i8, i8* %add.ptr1519, i64 0
  %2684 = bitcast i8* %add.ptr1520 to <2 x i64>*
  store <2 x i64>* %2684, <2 x i64>** %__p.addr.i1717, align 8
  %2685 = load <2 x i64>*, <2 x i64>** %__p.addr.i1717, align 8
  %2686 = bitcast <2 x i64>* %2685 to %struct.__loadu_si128*
  %__v.i1718 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2686, i32 0, i32 0
  %2687 = load <2 x i64>, <2 x i64>* %__v.i1718, align 1
  store <2 x i64> %2687, <2 x i64>* %xmm0, align 16
  %2688 = load i64, i64* %n.addr, align 8
  %sub1522 = sub i64 %2688, 32
  store i64 %sub1522, i64* %n.addr, align 8
  %2689 = load i8*, i8** %src.addr, align 8
  %add.ptr1523 = getelementptr inbounds i8, i8* %2689, i64 -14
  %add.ptr1524 = getelementptr inbounds i8, i8* %add.ptr1523, i64 16
  %2690 = bitcast i8* %add.ptr1524 to <2 x i64>*
  store <2 x i64>* %2690, <2 x i64>** %__p.addr.i1715, align 8
  %2691 = load <2 x i64>*, <2 x i64>** %__p.addr.i1715, align 8
  %2692 = bitcast <2 x i64>* %2691 to %struct.__loadu_si128*
  %__v.i1716 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2692, i32 0, i32 0
  %2693 = load <2 x i64>, <2 x i64>* %__v.i1716, align 1
  store <2 x i64> %2693, <2 x i64>* %xmm1, align 16
  %2694 = load i8*, i8** %src.addr, align 8
  %add.ptr1526 = getelementptr inbounds i8, i8* %2694, i64 -14
  %add.ptr1527 = getelementptr inbounds i8, i8* %add.ptr1526, i64 32
  %2695 = bitcast i8* %add.ptr1527 to <2 x i64>*
  store <2 x i64>* %2695, <2 x i64>** %__p.addr.i1713, align 8
  %2696 = load <2 x i64>*, <2 x i64>** %__p.addr.i1713, align 8
  %2697 = bitcast <2 x i64>* %2696 to %struct.__loadu_si128*
  %__v.i1714 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2697, i32 0, i32 0
  %2698 = load <2 x i64>, <2 x i64>* %__v.i1714, align 1
  store <2 x i64> %2698, <2 x i64>* %xmm2, align 16
  %2699 = load i8*, i8** %src.addr, align 8
  %add.ptr1529 = getelementptr inbounds i8, i8* %2699, i64 32
  store i8* %add.ptr1529, i8** %src.addr, align 8
  %2700 = load i8*, i8** %dst.addr, align 8
  %add.ptr1530 = getelementptr inbounds i8, i8* %2700, i64 0
  %2701 = bitcast i8* %add.ptr1530 to <2 x i64>*
  %2702 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2703 = bitcast <2 x i64> %2702 to <16 x i8>
  %2704 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2705 = bitcast <2 x i64> %2704 to <16 x i8>
  %palignr1531 = shufflevector <16 x i8> %2705, <16 x i8> %2703, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2706 = bitcast <16 x i8> %palignr1531 to <2 x i64>
  store <2 x i64>* %2701, <2 x i64>** %__p.addr.i1710, align 8
  store <2 x i64> %2706, <2 x i64>* %__b.addr.i1711, align 16
  %2707 = load <2 x i64>, <2 x i64>* %__b.addr.i1711, align 16
  %2708 = load <2 x i64>*, <2 x i64>** %__p.addr.i1710, align 8
  %2709 = bitcast <2 x i64>* %2708 to %struct.__storeu_si128*
  %__v.i1712 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2709, i32 0, i32 0
  store <2 x i64> %2707, <2 x i64>* %__v.i1712, align 1
  %2710 = load i8*, i8** %dst.addr, align 8
  %add.ptr1532 = getelementptr inbounds i8, i8* %2710, i64 16
  %2711 = bitcast i8* %add.ptr1532 to <2 x i64>*
  %2712 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2713 = bitcast <2 x i64> %2712 to <16 x i8>
  %2714 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2715 = bitcast <2 x i64> %2714 to <16 x i8>
  %palignr1533 = shufflevector <16 x i8> %2715, <16 x i8> %2713, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %2716 = bitcast <16 x i8> %palignr1533 to <2 x i64>
  store <2 x i64>* %2711, <2 x i64>** %__p.addr.i1707, align 8
  store <2 x i64> %2716, <2 x i64>* %__b.addr.i1708, align 16
  %2717 = load <2 x i64>, <2 x i64>* %__b.addr.i1708, align 16
  %2718 = load <2 x i64>*, <2 x i64>** %__p.addr.i1707, align 8
  %2719 = bitcast <2 x i64>* %2718 to %struct.__storeu_si128*
  %__v.i1709 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2719, i32 0, i32 0
  store <2 x i64> %2717, <2 x i64>* %__v.i1709, align 1
  %2720 = load i8*, i8** %dst.addr, align 8
  %add.ptr1534 = getelementptr inbounds i8, i8* %2720, i64 32
  store i8* %add.ptr1534, i8** %dst.addr, align 8
  br label %while.cond1515

while.end1535:                                    ; preds = %while.cond1515
  %2721 = load i64, i64* %n.addr, align 8
  %conv1536 = trunc i64 %2721 to i32
  store i32 %conv1536, i32* %tmp1447, align 4
  %2722 = load i64, i64* %n.addr, align 8
  %sub1537 = sub i64 %2722, 16
  %add1538 = add i64 %sub1537, 14
  %and1539 = and i64 %add1538, 31
  %add1540 = add i64 %and1539, 16
  %sub1541 = sub i64 %add1540, 14
  store i64 %sub1541, i64* %n.addr, align 8
  %2723 = load i64, i64* %n.addr, align 8
  %2724 = load i32, i32* %tmp1447, align 4
  %conv1542 = sext i32 %2724 to i64
  %sub1543 = sub i64 %conv1542, %2723
  %conv1544 = trunc i64 %sub1543 to i32
  store i32 %conv1544, i32* %tmp1447, align 4
  %2725 = load i8*, i8** %src.addr, align 8
  %2726 = load i32, i32* %tmp1447, align 4
  %idx.ext1545 = sext i32 %2726 to i64
  %add.ptr1546 = getelementptr inbounds i8, i8* %2725, i64 %idx.ext1545
  store i8* %add.ptr1546, i8** %src.addr, align 8
  %2727 = load i8*, i8** %dst.addr, align 8
  %2728 = load i32, i32* %tmp1447, align 4
  %idx.ext1547 = sext i32 %2728 to i64
  %add.ptr1548 = getelementptr inbounds i8, i8* %2727, i64 %idx.ext1547
  store i8* %add.ptr1548, i8** %dst.addr, align 8
  br label %if.end1549

if.end1549:                                       ; preds = %while.end1535, %while.end1498
  br label %sw.epilog

sw.bb1550:                                        ; preds = %if.end103
  br label %while.cond1552

while.cond1552:                                   ; preds = %while.body1555, %sw.bb1550
  %2729 = load i64, i64* %n.addr, align 8
  %cmp1553 = icmp uge i64 %2729, 129
  br i1 %cmp1553, label %while.body1555, label %while.end1602

while.body1555:                                   ; preds = %while.cond1552
  %2730 = load i8*, i8** %src.addr, align 8
  %add.ptr1556 = getelementptr inbounds i8, i8* %2730, i64 -15
  %add.ptr1557 = getelementptr inbounds i8, i8* %add.ptr1556, i64 0
  %2731 = bitcast i8* %add.ptr1557 to <2 x i64>*
  store <2 x i64>* %2731, <2 x i64>** %__p.addr.i1705, align 8
  %2732 = load <2 x i64>*, <2 x i64>** %__p.addr.i1705, align 8
  %2733 = bitcast <2 x i64>* %2732 to %struct.__loadu_si128*
  %__v.i1706 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2733, i32 0, i32 0
  %2734 = load <2 x i64>, <2 x i64>* %__v.i1706, align 1
  store <2 x i64> %2734, <2 x i64>* %xmm0, align 16
  %2735 = load i64, i64* %n.addr, align 8
  %sub1559 = sub i64 %2735, 128
  store i64 %sub1559, i64* %n.addr, align 8
  %2736 = load i8*, i8** %src.addr, align 8
  %add.ptr1560 = getelementptr inbounds i8, i8* %2736, i64 -15
  %add.ptr1561 = getelementptr inbounds i8, i8* %add.ptr1560, i64 16
  %2737 = bitcast i8* %add.ptr1561 to <2 x i64>*
  store <2 x i64>* %2737, <2 x i64>** %__p.addr.i1703, align 8
  %2738 = load <2 x i64>*, <2 x i64>** %__p.addr.i1703, align 8
  %2739 = bitcast <2 x i64>* %2738 to %struct.__loadu_si128*
  %__v.i1704 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2739, i32 0, i32 0
  %2740 = load <2 x i64>, <2 x i64>* %__v.i1704, align 1
  store <2 x i64> %2740, <2 x i64>* %xmm1, align 16
  %2741 = load i8*, i8** %src.addr, align 8
  %add.ptr1563 = getelementptr inbounds i8, i8* %2741, i64 -15
  %add.ptr1564 = getelementptr inbounds i8, i8* %add.ptr1563, i64 32
  %2742 = bitcast i8* %add.ptr1564 to <2 x i64>*
  store <2 x i64>* %2742, <2 x i64>** %__p.addr.i1701, align 8
  %2743 = load <2 x i64>*, <2 x i64>** %__p.addr.i1701, align 8
  %2744 = bitcast <2 x i64>* %2743 to %struct.__loadu_si128*
  %__v.i1702 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2744, i32 0, i32 0
  %2745 = load <2 x i64>, <2 x i64>* %__v.i1702, align 1
  store <2 x i64> %2745, <2 x i64>* %xmm2, align 16
  %2746 = load i8*, i8** %src.addr, align 8
  %add.ptr1566 = getelementptr inbounds i8, i8* %2746, i64 -15
  %add.ptr1567 = getelementptr inbounds i8, i8* %add.ptr1566, i64 48
  %2747 = bitcast i8* %add.ptr1567 to <2 x i64>*
  store <2 x i64>* %2747, <2 x i64>** %__p.addr.i1699, align 8
  %2748 = load <2 x i64>*, <2 x i64>** %__p.addr.i1699, align 8
  %2749 = bitcast <2 x i64>* %2748 to %struct.__loadu_si128*
  %__v.i1700 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2749, i32 0, i32 0
  %2750 = load <2 x i64>, <2 x i64>* %__v.i1700, align 1
  store <2 x i64> %2750, <2 x i64>* %xmm3, align 16
  %2751 = load i8*, i8** %src.addr, align 8
  %add.ptr1569 = getelementptr inbounds i8, i8* %2751, i64 -15
  %add.ptr1570 = getelementptr inbounds i8, i8* %add.ptr1569, i64 64
  %2752 = bitcast i8* %add.ptr1570 to <2 x i64>*
  store <2 x i64>* %2752, <2 x i64>** %__p.addr.i1697, align 8
  %2753 = load <2 x i64>*, <2 x i64>** %__p.addr.i1697, align 8
  %2754 = bitcast <2 x i64>* %2753 to %struct.__loadu_si128*
  %__v.i1698 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2754, i32 0, i32 0
  %2755 = load <2 x i64>, <2 x i64>* %__v.i1698, align 1
  store <2 x i64> %2755, <2 x i64>* %xmm4, align 16
  %2756 = load i8*, i8** %src.addr, align 8
  %add.ptr1572 = getelementptr inbounds i8, i8* %2756, i64 -15
  %add.ptr1573 = getelementptr inbounds i8, i8* %add.ptr1572, i64 80
  %2757 = bitcast i8* %add.ptr1573 to <2 x i64>*
  store <2 x i64>* %2757, <2 x i64>** %__p.addr.i1695, align 8
  %2758 = load <2 x i64>*, <2 x i64>** %__p.addr.i1695, align 8
  %2759 = bitcast <2 x i64>* %2758 to %struct.__loadu_si128*
  %__v.i1696 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2759, i32 0, i32 0
  %2760 = load <2 x i64>, <2 x i64>* %__v.i1696, align 1
  store <2 x i64> %2760, <2 x i64>* %xmm5, align 16
  %2761 = load i8*, i8** %src.addr, align 8
  %add.ptr1575 = getelementptr inbounds i8, i8* %2761, i64 -15
  %add.ptr1576 = getelementptr inbounds i8, i8* %add.ptr1575, i64 96
  %2762 = bitcast i8* %add.ptr1576 to <2 x i64>*
  store <2 x i64>* %2762, <2 x i64>** %__p.addr.i1693, align 8
  %2763 = load <2 x i64>*, <2 x i64>** %__p.addr.i1693, align 8
  %2764 = bitcast <2 x i64>* %2763 to %struct.__loadu_si128*
  %__v.i1694 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2764, i32 0, i32 0
  %2765 = load <2 x i64>, <2 x i64>* %__v.i1694, align 1
  store <2 x i64> %2765, <2 x i64>* %xmm6, align 16
  %2766 = load i8*, i8** %src.addr, align 8
  %add.ptr1578 = getelementptr inbounds i8, i8* %2766, i64 -15
  %add.ptr1579 = getelementptr inbounds i8, i8* %add.ptr1578, i64 112
  %2767 = bitcast i8* %add.ptr1579 to <2 x i64>*
  store <2 x i64>* %2767, <2 x i64>** %__p.addr.i1691, align 8
  %2768 = load <2 x i64>*, <2 x i64>** %__p.addr.i1691, align 8
  %2769 = bitcast <2 x i64>* %2768 to %struct.__loadu_si128*
  %__v.i1692 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2769, i32 0, i32 0
  %2770 = load <2 x i64>, <2 x i64>* %__v.i1692, align 1
  store <2 x i64> %2770, <2 x i64>* %xmm7, align 16
  %2771 = load i8*, i8** %src.addr, align 8
  %add.ptr1581 = getelementptr inbounds i8, i8* %2771, i64 -15
  %add.ptr1582 = getelementptr inbounds i8, i8* %add.ptr1581, i64 128
  %2772 = bitcast i8* %add.ptr1582 to <2 x i64>*
  store <2 x i64>* %2772, <2 x i64>** %__p.addr.i1689, align 8
  %2773 = load <2 x i64>*, <2 x i64>** %__p.addr.i1689, align 8
  %2774 = bitcast <2 x i64>* %2773 to %struct.__loadu_si128*
  %__v.i1690 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2774, i32 0, i32 0
  %2775 = load <2 x i64>, <2 x i64>* %__v.i1690, align 1
  store <2 x i64> %2775, <2 x i64>* %xmm8, align 16
  %2776 = load i8*, i8** %src.addr, align 8
  %add.ptr1584 = getelementptr inbounds i8, i8* %2776, i64 128
  store i8* %add.ptr1584, i8** %src.addr, align 8
  %2777 = load i8*, i8** %dst.addr, align 8
  %add.ptr1585 = getelementptr inbounds i8, i8* %2777, i64 0
  %2778 = bitcast i8* %add.ptr1585 to <2 x i64>*
  %2779 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2780 = bitcast <2 x i64> %2779 to <16 x i8>
  %2781 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2782 = bitcast <2 x i64> %2781 to <16 x i8>
  %palignr1586 = shufflevector <16 x i8> %2782, <16 x i8> %2780, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2783 = bitcast <16 x i8> %palignr1586 to <2 x i64>
  store <2 x i64>* %2778, <2 x i64>** %__p.addr.i1686, align 8
  store <2 x i64> %2783, <2 x i64>* %__b.addr.i1687, align 16
  %2784 = load <2 x i64>, <2 x i64>* %__b.addr.i1687, align 16
  %2785 = load <2 x i64>*, <2 x i64>** %__p.addr.i1686, align 8
  %2786 = bitcast <2 x i64>* %2785 to %struct.__storeu_si128*
  %__v.i1688 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2786, i32 0, i32 0
  store <2 x i64> %2784, <2 x i64>* %__v.i1688, align 1
  %2787 = load i8*, i8** %dst.addr, align 8
  %add.ptr1587 = getelementptr inbounds i8, i8* %2787, i64 16
  %2788 = bitcast i8* %add.ptr1587 to <2 x i64>*
  %2789 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2790 = bitcast <2 x i64> %2789 to <16 x i8>
  %2791 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2792 = bitcast <2 x i64> %2791 to <16 x i8>
  %palignr1588 = shufflevector <16 x i8> %2792, <16 x i8> %2790, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2793 = bitcast <16 x i8> %palignr1588 to <2 x i64>
  store <2 x i64>* %2788, <2 x i64>** %__p.addr.i1683, align 8
  store <2 x i64> %2793, <2 x i64>* %__b.addr.i1684, align 16
  %2794 = load <2 x i64>, <2 x i64>* %__b.addr.i1684, align 16
  %2795 = load <2 x i64>*, <2 x i64>** %__p.addr.i1683, align 8
  %2796 = bitcast <2 x i64>* %2795 to %struct.__storeu_si128*
  %__v.i1685 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2796, i32 0, i32 0
  store <2 x i64> %2794, <2 x i64>* %__v.i1685, align 1
  %2797 = load i8*, i8** %dst.addr, align 8
  %add.ptr1589 = getelementptr inbounds i8, i8* %2797, i64 32
  %2798 = bitcast i8* %add.ptr1589 to <2 x i64>*
  %2799 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2800 = bitcast <2 x i64> %2799 to <16 x i8>
  %2801 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2802 = bitcast <2 x i64> %2801 to <16 x i8>
  %palignr1590 = shufflevector <16 x i8> %2802, <16 x i8> %2800, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2803 = bitcast <16 x i8> %palignr1590 to <2 x i64>
  store <2 x i64>* %2798, <2 x i64>** %__p.addr.i1680, align 8
  store <2 x i64> %2803, <2 x i64>* %__b.addr.i1681, align 16
  %2804 = load <2 x i64>, <2 x i64>* %__b.addr.i1681, align 16
  %2805 = load <2 x i64>*, <2 x i64>** %__p.addr.i1680, align 8
  %2806 = bitcast <2 x i64>* %2805 to %struct.__storeu_si128*
  %__v.i1682 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2806, i32 0, i32 0
  store <2 x i64> %2804, <2 x i64>* %__v.i1682, align 1
  %2807 = load i8*, i8** %dst.addr, align 8
  %add.ptr1591 = getelementptr inbounds i8, i8* %2807, i64 48
  %2808 = bitcast i8* %add.ptr1591 to <2 x i64>*
  %2809 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2810 = bitcast <2 x i64> %2809 to <16 x i8>
  %2811 = load <2 x i64>, <2 x i64>* %xmm3, align 16
  %2812 = bitcast <2 x i64> %2811 to <16 x i8>
  %palignr1592 = shufflevector <16 x i8> %2812, <16 x i8> %2810, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2813 = bitcast <16 x i8> %palignr1592 to <2 x i64>
  store <2 x i64>* %2808, <2 x i64>** %__p.addr.i1677, align 8
  store <2 x i64> %2813, <2 x i64>* %__b.addr.i1678, align 16
  %2814 = load <2 x i64>, <2 x i64>* %__b.addr.i1678, align 16
  %2815 = load <2 x i64>*, <2 x i64>** %__p.addr.i1677, align 8
  %2816 = bitcast <2 x i64>* %2815 to %struct.__storeu_si128*
  %__v.i1679 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2816, i32 0, i32 0
  store <2 x i64> %2814, <2 x i64>* %__v.i1679, align 1
  %2817 = load i8*, i8** %dst.addr, align 8
  %add.ptr1593 = getelementptr inbounds i8, i8* %2817, i64 64
  %2818 = bitcast i8* %add.ptr1593 to <2 x i64>*
  %2819 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2820 = bitcast <2 x i64> %2819 to <16 x i8>
  %2821 = load <2 x i64>, <2 x i64>* %xmm4, align 16
  %2822 = bitcast <2 x i64> %2821 to <16 x i8>
  %palignr1594 = shufflevector <16 x i8> %2822, <16 x i8> %2820, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2823 = bitcast <16 x i8> %palignr1594 to <2 x i64>
  store <2 x i64>* %2818, <2 x i64>** %__p.addr.i1674, align 8
  store <2 x i64> %2823, <2 x i64>* %__b.addr.i1675, align 16
  %2824 = load <2 x i64>, <2 x i64>* %__b.addr.i1675, align 16
  %2825 = load <2 x i64>*, <2 x i64>** %__p.addr.i1674, align 8
  %2826 = bitcast <2 x i64>* %2825 to %struct.__storeu_si128*
  %__v.i1676 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2826, i32 0, i32 0
  store <2 x i64> %2824, <2 x i64>* %__v.i1676, align 1
  %2827 = load i8*, i8** %dst.addr, align 8
  %add.ptr1595 = getelementptr inbounds i8, i8* %2827, i64 80
  %2828 = bitcast i8* %add.ptr1595 to <2 x i64>*
  %2829 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2830 = bitcast <2 x i64> %2829 to <16 x i8>
  %2831 = load <2 x i64>, <2 x i64>* %xmm5, align 16
  %2832 = bitcast <2 x i64> %2831 to <16 x i8>
  %palignr1596 = shufflevector <16 x i8> %2832, <16 x i8> %2830, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2833 = bitcast <16 x i8> %palignr1596 to <2 x i64>
  store <2 x i64>* %2828, <2 x i64>** %__p.addr.i1671, align 8
  store <2 x i64> %2833, <2 x i64>* %__b.addr.i1672, align 16
  %2834 = load <2 x i64>, <2 x i64>* %__b.addr.i1672, align 16
  %2835 = load <2 x i64>*, <2 x i64>** %__p.addr.i1671, align 8
  %2836 = bitcast <2 x i64>* %2835 to %struct.__storeu_si128*
  %__v.i1673 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2836, i32 0, i32 0
  store <2 x i64> %2834, <2 x i64>* %__v.i1673, align 1
  %2837 = load i8*, i8** %dst.addr, align 8
  %add.ptr1597 = getelementptr inbounds i8, i8* %2837, i64 96
  %2838 = bitcast i8* %add.ptr1597 to <2 x i64>*
  %2839 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2840 = bitcast <2 x i64> %2839 to <16 x i8>
  %2841 = load <2 x i64>, <2 x i64>* %xmm6, align 16
  %2842 = bitcast <2 x i64> %2841 to <16 x i8>
  %palignr1598 = shufflevector <16 x i8> %2842, <16 x i8> %2840, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2843 = bitcast <16 x i8> %palignr1598 to <2 x i64>
  store <2 x i64>* %2838, <2 x i64>** %__p.addr.i1668, align 8
  store <2 x i64> %2843, <2 x i64>* %__b.addr.i1669, align 16
  %2844 = load <2 x i64>, <2 x i64>* %__b.addr.i1669, align 16
  %2845 = load <2 x i64>*, <2 x i64>** %__p.addr.i1668, align 8
  %2846 = bitcast <2 x i64>* %2845 to %struct.__storeu_si128*
  %__v.i1670 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2846, i32 0, i32 0
  store <2 x i64> %2844, <2 x i64>* %__v.i1670, align 1
  %2847 = load i8*, i8** %dst.addr, align 8
  %add.ptr1599 = getelementptr inbounds i8, i8* %2847, i64 112
  %2848 = bitcast i8* %add.ptr1599 to <2 x i64>*
  %2849 = load <2 x i64>, <2 x i64>* %xmm8, align 16
  %2850 = bitcast <2 x i64> %2849 to <16 x i8>
  %2851 = load <2 x i64>, <2 x i64>* %xmm7, align 16
  %2852 = bitcast <2 x i64> %2851 to <16 x i8>
  %palignr1600 = shufflevector <16 x i8> %2852, <16 x i8> %2850, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2853 = bitcast <16 x i8> %palignr1600 to <2 x i64>
  store <2 x i64>* %2848, <2 x i64>** %__p.addr.i1665, align 8
  store <2 x i64> %2853, <2 x i64>* %__b.addr.i1666, align 16
  %2854 = load <2 x i64>, <2 x i64>* %__b.addr.i1666, align 16
  %2855 = load <2 x i64>*, <2 x i64>** %__p.addr.i1665, align 8
  %2856 = bitcast <2 x i64>* %2855 to %struct.__storeu_si128*
  %__v.i1667 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2856, i32 0, i32 0
  store <2 x i64> %2854, <2 x i64>* %__v.i1667, align 1
  %2857 = load i8*, i8** %dst.addr, align 8
  %add.ptr1601 = getelementptr inbounds i8, i8* %2857, i64 128
  store i8* %add.ptr1601, i8** %dst.addr, align 8
  br label %while.cond1552

while.end1602:                                    ; preds = %while.cond1552
  %2858 = load i64, i64* %n.addr, align 8
  %conv1603 = trunc i64 %2858 to i32
  store i32 %conv1603, i32* %tmp1551, align 4
  %2859 = load i64, i64* %n.addr, align 8
  %sub1604 = sub i64 %2859, 16
  %add1605 = add i64 %sub1604, 15
  %and1606 = and i64 %add1605, 127
  %add1607 = add i64 %and1606, 16
  %sub1608 = sub i64 %add1607, 15
  store i64 %sub1608, i64* %n.addr, align 8
  %2860 = load i64, i64* %n.addr, align 8
  %2861 = load i32, i32* %tmp1551, align 4
  %conv1609 = sext i32 %2861 to i64
  %sub1610 = sub i64 %conv1609, %2860
  %conv1611 = trunc i64 %sub1610 to i32
  store i32 %conv1611, i32* %tmp1551, align 4
  %2862 = load i8*, i8** %src.addr, align 8
  %2863 = load i32, i32* %tmp1551, align 4
  %idx.ext1612 = sext i32 %2863 to i64
  %add.ptr1613 = getelementptr inbounds i8, i8* %2862, i64 %idx.ext1612
  store i8* %add.ptr1613, i8** %src.addr, align 8
  %2864 = load i8*, i8** %dst.addr, align 8
  %2865 = load i32, i32* %tmp1551, align 4
  %idx.ext1614 = sext i32 %2865 to i64
  %add.ptr1615 = getelementptr inbounds i8, i8* %2864, i64 %idx.ext1614
  store i8* %add.ptr1615, i8** %dst.addr, align 8
  %2866 = load i64, i64* %n.addr, align 8
  %cmp1616 = icmp uge i64 %2866, 33
  br i1 %cmp1616, label %if.then1618, label %if.end1653

if.then1618:                                      ; preds = %while.end1602
  br label %while.cond1619

while.cond1619:                                   ; preds = %while.body1622, %if.then1618
  %2867 = load i64, i64* %n.addr, align 8
  %cmp1620 = icmp uge i64 %2867, 33
  br i1 %cmp1620, label %while.body1622, label %while.end1639

while.body1622:                                   ; preds = %while.cond1619
  %2868 = load i8*, i8** %src.addr, align 8
  %add.ptr1623 = getelementptr inbounds i8, i8* %2868, i64 -15
  %add.ptr1624 = getelementptr inbounds i8, i8* %add.ptr1623, i64 0
  %2869 = bitcast i8* %add.ptr1624 to <2 x i64>*
  store <2 x i64>* %2869, <2 x i64>** %__p.addr.i1663, align 8
  %2870 = load <2 x i64>*, <2 x i64>** %__p.addr.i1663, align 8
  %2871 = bitcast <2 x i64>* %2870 to %struct.__loadu_si128*
  %__v.i1664 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2871, i32 0, i32 0
  %2872 = load <2 x i64>, <2 x i64>* %__v.i1664, align 1
  store <2 x i64> %2872, <2 x i64>* %xmm0, align 16
  %2873 = load i64, i64* %n.addr, align 8
  %sub1626 = sub i64 %2873, 32
  store i64 %sub1626, i64* %n.addr, align 8
  %2874 = load i8*, i8** %src.addr, align 8
  %add.ptr1627 = getelementptr inbounds i8, i8* %2874, i64 -15
  %add.ptr1628 = getelementptr inbounds i8, i8* %add.ptr1627, i64 16
  %2875 = bitcast i8* %add.ptr1628 to <2 x i64>*
  store <2 x i64>* %2875, <2 x i64>** %__p.addr.i1661, align 8
  %2876 = load <2 x i64>*, <2 x i64>** %__p.addr.i1661, align 8
  %2877 = bitcast <2 x i64>* %2876 to %struct.__loadu_si128*
  %__v.i1662 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2877, i32 0, i32 0
  %2878 = load <2 x i64>, <2 x i64>* %__v.i1662, align 1
  store <2 x i64> %2878, <2 x i64>* %xmm1, align 16
  %2879 = load i8*, i8** %src.addr, align 8
  %add.ptr1630 = getelementptr inbounds i8, i8* %2879, i64 -15
  %add.ptr1631 = getelementptr inbounds i8, i8* %add.ptr1630, i64 32
  %2880 = bitcast i8* %add.ptr1631 to <2 x i64>*
  store <2 x i64>* %2880, <2 x i64>** %__p.addr.i1659, align 8
  %2881 = load <2 x i64>*, <2 x i64>** %__p.addr.i1659, align 8
  %2882 = bitcast <2 x i64>* %2881 to %struct.__loadu_si128*
  %__v.i1660 = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %2882, i32 0, i32 0
  %2883 = load <2 x i64>, <2 x i64>* %__v.i1660, align 1
  store <2 x i64> %2883, <2 x i64>* %xmm2, align 16
  %2884 = load i8*, i8** %src.addr, align 8
  %add.ptr1633 = getelementptr inbounds i8, i8* %2884, i64 32
  store i8* %add.ptr1633, i8** %src.addr, align 8
  %2885 = load i8*, i8** %dst.addr, align 8
  %add.ptr1634 = getelementptr inbounds i8, i8* %2885, i64 0
  %2886 = bitcast i8* %add.ptr1634 to <2 x i64>*
  %2887 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2888 = bitcast <2 x i64> %2887 to <16 x i8>
  %2889 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  %2890 = bitcast <2 x i64> %2889 to <16 x i8>
  %palignr1635 = shufflevector <16 x i8> %2890, <16 x i8> %2888, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2891 = bitcast <16 x i8> %palignr1635 to <2 x i64>
  store <2 x i64>* %2886, <2 x i64>** %__p.addr.i1656, align 8
  store <2 x i64> %2891, <2 x i64>* %__b.addr.i1657, align 16
  %2892 = load <2 x i64>, <2 x i64>* %__b.addr.i1657, align 16
  %2893 = load <2 x i64>*, <2 x i64>** %__p.addr.i1656, align 8
  %2894 = bitcast <2 x i64>* %2893 to %struct.__storeu_si128*
  %__v.i1658 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2894, i32 0, i32 0
  store <2 x i64> %2892, <2 x i64>* %__v.i1658, align 1
  %2895 = load i8*, i8** %dst.addr, align 8
  %add.ptr1636 = getelementptr inbounds i8, i8* %2895, i64 16
  %2896 = bitcast i8* %add.ptr1636 to <2 x i64>*
  %2897 = load <2 x i64>, <2 x i64>* %xmm2, align 16
  %2898 = bitcast <2 x i64> %2897 to <16 x i8>
  %2899 = load <2 x i64>, <2 x i64>* %xmm1, align 16
  %2900 = bitcast <2 x i64> %2899 to <16 x i8>
  %palignr1637 = shufflevector <16 x i8> %2900, <16 x i8> %2898, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %2901 = bitcast <16 x i8> %palignr1637 to <2 x i64>
  store <2 x i64>* %2896, <2 x i64>** %__p.addr.i1654, align 8
  store <2 x i64> %2901, <2 x i64>* %__b.addr.i, align 16
  %2902 = load <2 x i64>, <2 x i64>* %__b.addr.i, align 16
  %2903 = load <2 x i64>*, <2 x i64>** %__p.addr.i1654, align 8
  %2904 = bitcast <2 x i64>* %2903 to %struct.__storeu_si128*
  %__v.i1655 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2904, i32 0, i32 0
  store <2 x i64> %2902, <2 x i64>* %__v.i1655, align 1
  %2905 = load i8*, i8** %dst.addr, align 8
  %add.ptr1638 = getelementptr inbounds i8, i8* %2905, i64 32
  store i8* %add.ptr1638, i8** %dst.addr, align 8
  br label %while.cond1619

while.end1639:                                    ; preds = %while.cond1619
  %2906 = load i64, i64* %n.addr, align 8
  %conv1640 = trunc i64 %2906 to i32
  store i32 %conv1640, i32* %tmp1551, align 4
  %2907 = load i64, i64* %n.addr, align 8
  %sub1641 = sub i64 %2907, 16
  %add1642 = add i64 %sub1641, 15
  %and1643 = and i64 %add1642, 31
  %add1644 = add i64 %and1643, 16
  %sub1645 = sub i64 %add1644, 15
  store i64 %sub1645, i64* %n.addr, align 8
  %2908 = load i64, i64* %n.addr, align 8
  %2909 = load i32, i32* %tmp1551, align 4
  %conv1646 = sext i32 %2909 to i64
  %sub1647 = sub i64 %conv1646, %2908
  %conv1648 = trunc i64 %sub1647 to i32
  store i32 %conv1648, i32* %tmp1551, align 4
  %2910 = load i8*, i8** %src.addr, align 8
  %2911 = load i32, i32* %tmp1551, align 4
  %idx.ext1649 = sext i32 %2911 to i64
  %add.ptr1650 = getelementptr inbounds i8, i8* %2910, i64 %idx.ext1649
  store i8* %add.ptr1650, i8** %src.addr, align 8
  %2912 = load i8*, i8** %dst.addr, align 8
  %2913 = load i32, i32* %tmp1551, align 4
  %idx.ext1651 = sext i32 %2913 to i64
  %add.ptr1652 = getelementptr inbounds i8, i8* %2912, i64 %idx.ext1651
  store i8* %add.ptr1652, i8** %dst.addr, align 8
  br label %if.end1653

if.end1653:                                       ; preds = %while.end1639, %while.end1602
  br label %sw.epilog

sw.default:                                       ; preds = %if.end103
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end1653, %if.end1549, %if.end1445, %if.end1341, %if.end1237, %if.end1133, %if.end1029, %if.end925, %if.end821, %if.end717, %if.end613, %if.end509, %if.end405, %if.end301, %if.end197
  br label %COPY_BLOCK_64_BACK15

return:                                           ; preds = %if.end86, %if.then74, %if.then35, %if.then28, %if.then21, %if.end18
  %2914 = load i8*, i8** %retval, align 8
  ret i8* %2914
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_mov16(i8* %dst, i8* %src) #7 {
entry:
  %__p.addr.i1 = alloca <2 x i64>*, align 8
  %__b.addr.i = alloca <2 x i64>, align 16
  %__p.addr.i = alloca <2 x i64>*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %xmm0 = alloca <2 x i64>, align 16
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  %0 = load i8*, i8** %src.addr, align 8
  %1 = bitcast i8* %0 to <2 x i64>*
  store <2 x i64>* %1, <2 x i64>** %__p.addr.i, align 8
  %2 = load <2 x i64>*, <2 x i64>** %__p.addr.i, align 8
  %3 = bitcast <2 x i64>* %2 to %struct.__loadu_si128*
  %__v.i = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %3, i32 0, i32 0
  %4 = load <2 x i64>, <2 x i64>* %__v.i, align 1
  store <2 x i64> %4, <2 x i64>* %xmm0, align 16
  %5 = load i8*, i8** %dst.addr, align 8
  %6 = bitcast i8* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %xmm0, align 16
  store <2 x i64>* %6, <2 x i64>** %__p.addr.i1, align 8
  store <2 x i64> %7, <2 x i64>* %__b.addr.i, align 16
  %8 = load <2 x i64>, <2 x i64>* %__b.addr.i, align 16
  %9 = load <2 x i64>*, <2 x i64>** %__p.addr.i1, align 8
  %10 = bitcast <2 x i64>* %9 to %struct.__storeu_si128*
  %__v.i2 = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %10, i32 0, i32 0
  store <2 x i64> %8, <2 x i64>* %__v.i2, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_mov32(i8* %dst, i8* %src) #0 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_mov64(i8* %dst, i8* %src) #0 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_mov128(i8* %dst, i8* %src) #0 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %8 = load i8*, i8** %dst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %8, i64 64
  %9 = load i8*, i8** %src.addr, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %9, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %10 = load i8*, i8** %dst.addr, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %10, i64 80
  %11 = load i8*, i8** %src.addr, align 8
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %12 = load i8*, i8** %dst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %12, i64 96
  %13 = load i8*, i8** %src.addr, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %13, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %14 = load i8*, i8** %dst.addr, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %14, i64 112
  %15 = load i8*, i8** %src.addr, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %15, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rte_mov256(i8* %dst, i8* %src) #0 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %8 = load i8*, i8** %dst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %8, i64 64
  %9 = load i8*, i8** %src.addr, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %9, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %10 = load i8*, i8** %dst.addr, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %10, i64 80
  %11 = load i8*, i8** %src.addr, align 8
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %12 = load i8*, i8** %dst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %12, i64 96
  %13 = load i8*, i8** %src.addr, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %13, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %14 = load i8*, i8** %dst.addr, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %14, i64 112
  %15 = load i8*, i8** %src.addr, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %15, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  %16 = load i8*, i8** %dst.addr, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %16, i64 128
  %17 = load i8*, i8** %src.addr, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %17, i64 128
  call void @rte_mov16(i8* %add.ptr16, i8* %add.ptr17)
  %18 = load i8*, i8** %dst.addr, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %18, i64 144
  %19 = load i8*, i8** %src.addr, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %19, i64 144
  call void @rte_mov16(i8* %add.ptr18, i8* %add.ptr19)
  %20 = load i8*, i8** %dst.addr, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %20, i64 160
  %21 = load i8*, i8** %src.addr, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %21, i64 160
  call void @rte_mov16(i8* %add.ptr20, i8* %add.ptr21)
  %22 = load i8*, i8** %dst.addr, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %22, i64 176
  %23 = load i8*, i8** %src.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %23, i64 176
  call void @rte_mov16(i8* %add.ptr22, i8* %add.ptr23)
  %24 = load i8*, i8** %dst.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %24, i64 192
  %25 = load i8*, i8** %src.addr, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %25, i64 192
  call void @rte_mov16(i8* %add.ptr24, i8* %add.ptr25)
  %26 = load i8*, i8** %dst.addr, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %26, i64 208
  %27 = load i8*, i8** %src.addr, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %27, i64 208
  call void @rte_mov16(i8* %add.ptr26, i8* %add.ptr27)
  %28 = load i8*, i8** %dst.addr, align 8
  %add.ptr28 = getelementptr inbounds i8, i8* %28, i64 224
  %29 = load i8*, i8** %src.addr, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %29, i64 224
  call void @rte_mov16(i8* %add.ptr28, i8* %add.ptr29)
  %30 = load i8*, i8** %dst.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %30, i64 240
  %31 = load i8*, i8** %src.addr, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %31, i64 240
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr31)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dma_write(i64 %addr, i64 %len, i8* %buf) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %dst.addr.i = alloca i8*, align 8
  %src.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  store i64 %addr, i64* %addr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load i64, i64* %addr.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i32 39, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.dma_write, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** @dma_mem, align 8
  %6 = load i64, i64* %addr.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8*, i8** %buf.addr, align 8
  %8 = load i64, i64* %len.addr, align 8
  store i8* %add.ptr, i8** %dst.addr.i, align 8
  store i8* %7, i8** %src.addr.i, align 8
  store i64 %8, i64* %n.addr.i, align 8
  %9 = load i8*, i8** %dst.addr.i, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = load i8*, i8** %src.addr.i, align 8
  %12 = ptrtoint i8* %11 to i64
  %or.i = or i64 %10, %12
  %and.i = and i64 %or.i, 15
  %tobool.i = icmp ne i64 %and.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %13 = load i8*, i8** %dst.addr.i, align 8
  %14 = load i8*, i8** %src.addr.i, align 8
  %15 = load i64, i64* %n.addr.i, align 8
  %call.i = call i8* @rte_memcpy_aligned(i8* %13, i8* %14, i64 %15) #5
  store i8* %call.i, i8** %retval.i, align 8
  br label %rte_memcpy.exit

if.else.i:                                        ; preds = %if.end
  %16 = load i8*, i8** %dst.addr.i, align 8
  %17 = load i8*, i8** %src.addr.i, align 8
  %18 = load i64, i64* %n.addr.i, align 8
  %call1.i = call i8* @rte_memcpy_generic(i8* %16, i8* %17, i64 %18) #5
  store i8* %call1.i, i8** %retval.i, align 8
  br label %rte_memcpy.exit

rte_memcpy.exit:                                  ; preds = %if.then.i, %if.else.i
  %19 = load i8*, i8** %retval.i, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @network_buf_buf(%struct.network_buf_handle* %bh) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 1
  %2 = load i8*, i8** %buf_addr, align 64
  ret i8* %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i16 @t_beui16(i16 zeroext %x) #0 {
entry:
  %retval = alloca %struct.beui16, align 1
  %x.addr = alloca i16, align 2
  store i16 %x, i16* %x.addr, align 2
  %0 = load i16, i16* %x.addr, align 2
  %1 = call i16 @llvm.bswap.i16(i16 %0)
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  store i16 %1, i16* %x1, align 1
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  %2 = load i16, i16* %coerce.dive, align 1
  ret i16 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @t_beui32(i32 %x) #0 {
entry:
  %retval = alloca %struct.beui32, align 1
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  store i32 %1, i32* %x1, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  %2 = load i32, i32* %coerce.dive, align 1
  ret i32 %2
}

; Function Attrs: nounwind readnone
declare dso_local zeroext i16 @htons(i16 zeroext) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @tcp_checksums(%struct.network_buf_handle* %nbh, %struct.pkt_tcp* %p, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #0 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %p.addr = alloca %struct.pkt_tcp*, align 8
  %l3_paylen.addr = alloca i16, align 2
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store %struct.pkt_tcp* %p, %struct.pkt_tcp** %p.addr, align 8
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2
  %0 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 7
  store i16 0, i16* %chksum, align 1
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %2 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %ip2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %3 = load i16, i16* %l3_paylen.addr, align 2
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive3, align 1
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive4, align 1
  %call = call zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %1, %struct.ip_hdr* %ip2, i32 %4, i32 %5, i16 zeroext %3)
  %6 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %6, i32 0, i32 2
  %chksum5 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 6
  store i16 %call, i16* %chksum5, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @tx_send(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i16 zeroext %off, i16 zeroext %len) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %off.addr = alloca i16, align 2
  %len.addr = alloca i16, align 2
  %i = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store i16 %off, i16* %off.addr, align 2
  store i16 %len, i16* %len.addr, align 2
  %0 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %tx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %0, i32 0, i32 10
  %1 = load i16, i16* %tx_num, align 8
  %conv = zext i16 %1 to i32
  store i32 %conv, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %cmp = icmp uge i32 %2, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.37, i32 0, i32 0))
  call void @abort() #8
  unreachable

if.end:                                           ; preds = %entry
  %4 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %5 = load i16, i16* %off.addr, align 2
  call void @network_buf_setoff(%struct.network_buf_handle* %4, i16 zeroext %5)
  %6 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %7 = load i16, i16* %len.addr, align 2
  call void @network_buf_setlen(%struct.network_buf_handle* %6, i16 zeroext %7)
  %8 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %9 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %tx_handles = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %9, i32 0, i32 9
  %10 = load i32, i32* %i, align 4
  %idxprom = zext i32 %10 to i64
  %arrayidx = getelementptr inbounds [64 x %struct.network_buf_handle*], [64 x %struct.network_buf_handle*]* %tx_handles, i64 0, i64 %idxprom
  store %struct.network_buf_handle* %8, %struct.network_buf_handle** %arrayidx, align 8
  %11 = load i32, i32* %i, align 4
  %add = add i32 %11, 1
  %conv2 = trunc i32 %add to i16
  %12 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8
  %tx_num3 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %12, i32 0, i32 10
  store i16 %conv2, i16* %tx_num3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %nbh, %struct.ip_hdr* %iph, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #0 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %iph.addr = alloca %struct.ip_hdr*, align 8
  %l3_paylen.addr = alloca i16, align 2
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8
  store %struct.ip_hdr* %iph, %struct.ip_hdr** %iph.addr, align 8
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8
  %1 = load %struct.ip_hdr*, %struct.ip_hdr** %iph.addr, align 8
  %2 = bitcast %struct.ip_hdr* %1 to i8*
  %3 = load i16, i16* %l3_paylen.addr, align 2
  %coerce.dive2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive2, align 1
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive3, align 1
  %call = call zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %0, i8 zeroext 14, i8 zeroext 20, i8* %2, i32 %4, i32 %5, i8 zeroext 6, i16 zeroext %3)
  ret i16 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %bh, i8 zeroext %l2l, i8 zeroext %l3l, i8* %ip_hdr, i32 %ip_s.coerce, i32 %ip_d.coerce, i8 zeroext %ip_proto, i16 zeroext %l3_paylen) #0 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %l2l.addr = alloca i8, align 1
  %l3l.addr = alloca i8, align 1
  %ip_hdr.addr = alloca i8*, align 8
  %ip_proto.addr = alloca i8, align 1
  %l3_paylen.addr = alloca i16, align 2
  %mb = alloca %struct.rte_mbuf*, align 8
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  store i8 %l2l, i8* %l2l.addr, align 1
  store i8 %l3l, i8* %l3l.addr, align 1
  store i8* %ip_hdr, i8** %ip_hdr.addr, align 8
  store i8 %ip_proto, i8* %ip_proto.addr, align 1
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %1, %struct.rte_mbuf** %mb, align 8
  %2 = load i8, i8* %l2l.addr, align 1
  %conv = zext i8 %2 to i32
  %3 = load i8, i8* %l3l.addr, align 1
  %conv2 = zext i8 %3 to i32
  %shl = shl i32 %conv2, 7
  %or = or i32 %conv, %shl
  %conv3 = zext i32 %or to i64
  %4 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %5 = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %4, i32 0, i32 22
  %tx_offload = bitcast %union.anon.18* %5 to i64*
  store i64 %conv3, i64* %tx_offload, align 8
  %6 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %ol_flags = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %6, i32 0, i32 8
  store i64 58546795155816448, i64* %ol_flags, align 8
  %7 = load i8, i8* %ip_proto.addr, align 1
  %8 = load i16, i16* %l3_paylen.addr, align 2
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %9 = load i32, i32* %coerce.dive4, align 1
  %coerce.dive5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %10 = load i32, i32* %coerce.dive5, align 1
  %call = call zeroext i16 @network_ip_phdr_xsum(i32 %9, i32 %10, i8 zeroext %7, i16 zeroext %8)
  ret i16 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @network_ip_phdr_xsum(i32 %ip_src.coerce, i32 %ip_dst.coerce, i8 zeroext %proto, i16 zeroext %l3_paylen) #0 {
entry:
  %ip_src = alloca %struct.beui32, align 1
  %ip_dst = alloca %struct.beui32, align 1
  %proto.addr = alloca i8, align 1
  %l3_paylen.addr = alloca i16, align 2
  %sum = alloca i32, align 4
  %coerce = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  store i32 %ip_src.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  store i32 %ip_dst.coerce, i32* %coerce.dive1, align 1
  store i8 %proto, i8* %proto.addr, align 1
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2
  store i32 0, i32* %sum, align 4
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %0 = load i32, i32* %x, align 1
  %and = and i32 %0, 65535
  %1 = load i32, i32* %sum, align 4
  %add = add i32 %1, %and
  store i32 %add, i32* %sum, align 4
  %x2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %2 = load i32, i32* %x2, align 1
  %shr = lshr i32 %2, 16
  %and3 = and i32 %shr, 65535
  %3 = load i32, i32* %sum, align 4
  %add4 = add i32 %3, %and3
  store i32 %add4, i32* %sum, align 4
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %4 = load i32, i32* %x5, align 1
  %and6 = and i32 %4, 65535
  %5 = load i32, i32* %sum, align 4
  %add7 = add i32 %5, %and6
  store i32 %add7, i32* %sum, align 4
  %x8 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %6 = load i32, i32* %x8, align 1
  %shr9 = lshr i32 %6, 16
  %and10 = and i32 %shr9, 65535
  %7 = load i32, i32* %sum, align 4
  %add11 = add i32 %7, %and10
  store i32 %add11, i32* %sum, align 4
  %8 = load i8, i8* %proto.addr, align 1
  %conv = zext i8 %8 to i16
  %conv12 = zext i16 %conv to i32
  %shl = shl i32 %conv12, 8
  %9 = load i32, i32* %sum, align 4
  %add13 = add i32 %9, %shl
  store i32 %add13, i32* %sum, align 4
  %10 = load i16, i16* %l3_paylen.addr, align 2
  %call = call i16 @t_beui16(i16 zeroext %10)
  %coerce.dive14 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  store i16 %call, i16* %coerce.dive14, align 1
  %x15 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  %11 = load i16, i16* %x15, align 1
  %conv16 = zext i16 %11 to i32
  %12 = load i32, i32* %sum, align 4
  %add17 = add i32 %12, %conv16
  store i32 %add17, i32* %sum, align 4
  %13 = load i32, i32* %sum, align 4
  %and18 = and i32 %13, -65536
  %shr19 = lshr i32 %and18, 16
  %14 = load i32, i32* %sum, align 4
  %and20 = and i32 %14, 65535
  %add21 = add i32 %shr19, %and20
  store i32 %add21, i32* %sum, align 4
  %15 = load i32, i32* %sum, align 4
  %and22 = and i32 %15, -65536
  %shr23 = lshr i32 %and22, 16
  %16 = load i32, i32* %sum, align 4
  %and24 = and i32 %16, 65535
  %add25 = add i32 %shr23, %and24
  store i32 %add25, i32* %sum, align 4
  %17 = load i32, i32* %sum, align 4
  %conv26 = trunc i32 %17 to i16
  ret i16 %conv26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @network_buf_setoff(%struct.network_buf_handle* %bh, i16 zeroext %off) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %off.addr = alloca i16, align 2
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  store i16 %off, i16* %off.addr, align 2
  %0 = load i16, i16* %off.addr, align 2
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %2 = bitcast %struct.network_buf_handle* %1 to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %2, i32 0, i32 4
  store i16 %0, i16* %data_off, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @network_buf_setlen(%struct.network_buf_handle* %bh, i16 zeroext %len) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %len.addr = alloca i16, align 2
  %mb = alloca %struct.rte_mbuf*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  store i16 %len, i16* %len.addr, align 2
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %1, %struct.rte_mbuf** %mb, align 8
  %2 = load i16, i16* %len.addr, align 2
  %3 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %3, i32 0, i32 12
  store i16 %2, i16* %data_len, align 8
  %conv = zext i16 %2 to i32
  %4 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8
  %pkt_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %4, i32 0, i32 11
  store i32 %conv, i32* %pkt_len, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @network_buf_off(%struct.network_buf_handle* %bh) #0 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 4
  %2 = load i16, i16* %data_off, align 16
  ret i16 %2
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0 (trunk 341799)"}
!2 = !{i32 3741992}
!3 = !{i32 -2145969118}
!4 = !{i32 -2145967986}
!5 = !{i32 3838260, i32 3838274, i32 3838306, i32 3838334, i32 3838350, i32 3838363, i32 3838379, i32 3838408, i32 3838425, i32 3838442}
!6 = !{i32 3838658}
!7 = !{i32 -2143359953}
!8 = !{i32 -2143359919}
!9 = !{i32 -2145992290}
!10 = !{i32 3806638}
!11 = !{i32 3806131}
!12 = !{i32 3805923}
!13 = !{i32 3805715}
