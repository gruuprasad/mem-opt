; ModuleID = '<stdin>'
source_filename = "tas/fast/fast_flows.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.flextcp_pl_mem = type { [16 x [16 x %struct.flextcp_pl_appctx]], [131072 x %struct.flextcp_pl_flowst], [262144 x %struct.flextcp_pl_flowhte], [16 x %struct.flextcp_pl_appctx], [8 x %struct.flextcp_pl_appst], [4096 x i8] }
%struct.flextcp_pl_flowst = type { i64, i64, i64, i32, i32, %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16, %struct.eth_addr, i16, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, [56 x i8] }
%struct.beui32 = type { i32 }
%struct.beui16 = type { i16 }
%struct.eth_addr = type { [6 x i8] }
%struct.flextcp_pl_flowhte = type { i32, i32 }
%struct.flextcp_pl_appctx = type { i64, i64, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.flextcp_pl_appst = type { i16, [31 x i16] }
%struct.dataplane_context = type { %struct.network_thread, %struct.qman_thread, %struct.rte_ring*, i16, i32, %struct.rte_epoll_event, [16 x %struct.flextcp_pl_arx], [16 x i16], i16, [32 x %struct.network_buf_handle*], i16, i32, [128 x %struct.network_buf_handle*], i16, i16, i64, i64 }
%struct.network_thread = type { %struct.rte_mempool*, i16 }
%struct.rte_mempool = type { [32 x i8], %union.anon, i8*, %struct.rte_memzone*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.rte_mempool_cache*, i32, %struct.rte_mempool_objhdr_list, i32, %struct.rte_mempool_memhdr_list, [40 x i8] }
%union.anon = type { i8* }
%struct.rte_memzone = type <{ [32 x i8], %union.anon.0, %union.anon.1, i64, i64, i32, i32, i32 }>
%union.anon.0 = type { i64 }
%union.anon.1 = type { i8* }
%struct.rte_mempool_cache = type { i32, i32, i32, [1536 x i8*], [48 x i8] }
%struct.rte_mempool_objhdr_list = type { %struct.rte_mempool_objhdr*, %struct.rte_mempool_objhdr** }
%struct.rte_mempool_objhdr = type { %struct.anon, %struct.rte_mempool*, %union.anon.2 }
%struct.anon = type { %struct.rte_mempool_objhdr* }
%union.anon.2 = type { i64 }
%struct.rte_mempool_memhdr_list = type { %struct.rte_mempool_memhdr*, %struct.rte_mempool_memhdr** }
%struct.rte_mempool_memhdr = type { %struct.anon.3, %struct.rte_mempool*, i8*, %union.anon.4, i64, void (%struct.rte_mempool_memhdr*, i8*)*, i8* }
%struct.anon.3 = type { %struct.rte_mempool_memhdr* }
%union.anon.4 = type { i64 }
%struct.qman_thread = type { %struct.queue*, [4 x i32], i32, i32, i32, i32, %struct.utils_rng, i8 }
%struct.queue = type opaque
%struct.utils_rng = type { i64 }
%struct.rte_ring = type { [32 x i8], i32, %struct.rte_memzone*, i32, i32, i32, [68 x i8], %struct.rte_ring_headtail, [116 x i8], %struct.rte_ring_headtail, [116 x i8] }
%struct.rte_ring_headtail = type { i32, i32, i32 }
%struct.rte_epoll_event = type { i32, i32, i32, %struct.rte_epoll_data }
%struct.rte_epoll_data = type { i32, i8*, void (i32, i8*)*, i8* }
%struct.flextcp_pl_arx = type { %union.anon.5, i8 }
%union.anon.5 = type { [31 x i8] }
%struct.network_buf_handle = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ether_addr = type { [6 x i8] }
%struct.obj_hdr = type { %struct.beui32, %struct.beui16, i8, i8, [0 x i8] }
%struct.pkt_tcp = type <{ %struct.eth_hdr, %struct.ip_hdr, %struct.tcp_hdr }>
%struct.eth_hdr = type { %struct.eth_addr, %struct.eth_addr, %struct.beui16 }
%struct.ip_hdr = type { i8, i8, %struct.beui16, %struct.beui16, %struct.beui16, i8, i8, i16, %struct.beui32, %struct.beui32 }
%struct.tcp_hdr = type { %struct.beui16, %struct.beui16, %struct.beui32, %struct.beui32, i16, %struct.beui16, i16, %struct.beui16 }
%struct.tcp_timestamp_opt = type <{ i8, i8, %struct.beui32, %struct.beui32 }>
%struct.tcp_opts = type { %struct.tcp_timestamp_opt* }
%struct.rte_mbuf = type { [0 x i8*], i8*, %union.anon.6, [0 x i64], i16, %union.anon.7, i16, i16, i64, [0 x i8*], %union.anon.8, i32, i16, i16, %union.anon.12, i16, i16, i64, [0 x i8*], %union.anon.17, %struct.rte_mempool*, %struct.rte_mbuf*, %union.anon.18, i16, i16, i32, [24 x i8] }
%union.anon.6 = type { i64 }
%union.anon.7 = type { %struct.rte_atomic16_t }
%struct.rte_atomic16_t = type { i16 }
%union.anon.8 = type { i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %union.anon.14, i32 }
%union.anon.14 = type { i32 }
%union.anon.17 = type { i8* }
%union.anon.18 = type { i64 }
%struct.flextcp_pl_arx_connupdate = type <{ i64, i32, i32, i32, i8 }>
%struct.flow_key = type { %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16 }
%union.anon.20 = type { i64 }
%union.anon.21 = type { i64 }
%struct.__loadu_si128 = type { <2 x i64> }
%struct.__storeu_si128 = type { <2 x i64> }

@fp_state = external dso_local global %struct.flextcp_pl_mem*, align 8
@ctxs = external dso_local global %struct.dataplane_context**, align 8
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [42 x i8] c"fast_flows_qman: rte_ring_enqueue failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"flast_flows_qman: qman_set clear failed, UNEXPECTED\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"fast_flows_qman: bump not on object boundary\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"fast_flows_qman: header does not fit in first segment\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"flast_flows_qman: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"len > 0\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"tas/fast/fast_flows.c\00", align 1
@__PRETTY_FUNCTION__.fast_flows_qman = private unnamed_addr constant [97 x i8] c"int fast_flows_qman(struct dataplane_context *, uint32_t, struct network_buf_handle *, uint32_t)\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"fast_flows_qman_fwd: qman_set failed, UNEXPECTED\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"batch_arg\00", section "llvm.metadata"
@.str.9 = private unnamed_addr constant [22 x i8] c"tas/fast/fast_flows.c\00", section "llvm.metadata"
@.str.10 = private unnamed_addr constant [49 x i8] c"dma_krx_pkt_fastpath: slowpath because of state\0A\00", align 1
@.str.11 = private unnamed_addr constant [53 x i8] c"fast_flows_packet: ignored fin because out of order\0A\00", align 1
@.str.12 = private unnamed_addr constant [50 x i8] c"fast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"flast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"tas_batch_maker\00", section "llvm.metadata"
@.str.15 = private unnamed_addr constant [53 x i8] c"fast_flows_bump: tx bump while TX is already closed\0A\00", align 1
@.str.16 = private unnamed_addr constant [44 x i8] c"fast_flows_bump: tx eos without dummy byte\0A\00", align 1
@.str.17 = private unnamed_addr constant [49 x i8] c"flast_flows_bump: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"expensive\00", section "llvm.metadata"
@.str.19 = private unnamed_addr constant [10 x i8] c"tas_batch\00", section "llvm.metadata"
@crc32_alg = internal global i8 1, align 1
@.str.20 = private unnamed_addr constant [57 x i8] c"addr + len >= addr && addr + len <= FLEXNIC_DMA_MEM_SIZE\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"tas/fast/dma.h\00", align 1
@__PRETTY_FUNCTION__.dma_pointer = private unnamed_addr constant [37 x i8] c"void *dma_pointer(uintptr_t, size_t)\00", align 1
@tas_shm = external dso_local global i8*, align 8
@.str.22 = private unnamed_addr constant [35 x i8] c"hlen=%u opts_len=%u len=%u so=%zu\0A\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"parse_options: opt_avail=%u kind=%u off=%u\0A\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"parse_options: opt_len=%u so=%zu\0A\00", align 1
@crc32c_tables = internal constant [8 x [256 x i32]] [[256 x i32] [i32 0, i32 -227835133, i32 -516198153, i32 324072436, i32 -946170081, i32 904991772, i32 648144872, i32 -724933397, i32 -1965467441, i32 2024987596, i32 1809983544, i32 -1719030981, i32 1296289744, i32 -1087877933, i32 -1401372889, i32 1578318884, i32 274646895, i32 -499825556, i32 -244992104, i32 51262619, i32 -675000208, i32 632279923, i32 922689671, i32 -996891772, i32 -1702387808, i32 1760304291, i32 2075979607, i32 -1982370732, i32 1562183871, i32 -1351185476, i32 -1138329528, i32 1313733451, i32 549293790, i32 -757723683, i32 -1048117719, i32 871202090, i32 -416867903, i32 357341890, i32 102525238, i32 -193467851, i32 -1436232175, i32 1477399826, i32 1264559846, i32 -1187764763, i32 1845379342, i32 -1617575411, i32 -1933233671, i32 2125378298, i32 820201905, i32 -1031222606, i32 -774358714, i32 598981189, i32 -143008082, i32 85089709, i32 373468761, i32 -467063462, i32 -1170599554, i32 1213305469, i32 1526817161, i32 -1452612982, i32 2107672161, i32 -1882520222, i32 -1667500394, i32 1861252501, i32 1098587580, i32 -1290756417, i32 -1606390453, i32 1378610760, i32 -2032039261, i32 1955203488, i32 1742404180, i32 -1783531177, i32 -878557837, i32 969524848, i32 714683780, i32 -655182201, i32 205050476, i32 -28094097, i32 -318528869, i32 526918040, i32 1361435347, i32 -1555146288, i32 -1340167644, i32 1114974503, i32 -1765847604, i32 1691668175, i32 2005155131, i32 -2047885768, i32 -604208612, i32 697762079, i32 986182379, i32 -928222744, i32 476452099, i32 -301099520, i32 -44210700, i32 255256311, i32 1640403810, i32 -1817374623, i32 -2130844779, i32 1922457750, i32 -1503918979, i32 1412925310, i32 1197962378, i32 -1257441399, i32 -350237779, i32 427051182, i32 170179418, i32 -129025959, i32 746937522, i32 -554770511, i32 -843174843, i32 1070968646, i32 1905808397, i32 -2081171698, i32 -1868356358, i32 1657317369, i32 -1241332974, i32 1147748369, i32 1463399397, i32 -1521340186, i32 -79622974, i32 153784257, i32 444234805, i32 -401473738, i32 1021025245, i32 -827320098, i32 -572462294, i32 797665321, i32 -2097792136, i32 1889384571, i32 1674398607, i32 -1851340660, i32 1164749927, i32 -1224265884, i32 -1537745776, i32 1446797203, i32 137323447, i32 -96149324, i32 -384560320, i32 461344835, i32 -810158936, i32 1037989803, i32 781091935, i32 -588970148, i32 -1834419177, i32 1623424788, i32 1939049696, i32 -2114449437, i32 1429367560, i32 -1487280117, i32 -1274471425, i32 1180866812, i32 410100952, i32 -367384613, i32 -112536529, i32 186734380, i32 -538233913, i32 763408580, i32 1053836080, i32 -860110797, i32 -1572096602, i32 1344288421, i32 1131464017, i32 -1323612590, i32 1708204729, i32 -1749376582, i32 -2065018290, i32 1988219213, i32 680717673, i32 -621187478, i32 -911630946, i32 1002577565, i32 -284657034, i32 493091189, i32 238226049, i32 -61306494, i32 -1307217207, i32 1082061258, i32 1395524158, i32 -1589280451, i32 1972364758, i32 -2015074603, i32 -1800104671, i32 1725896226, i32 952904198, i32 -894981883, i32 -638100751, i32 731699698, i32 -11092711, i32 222117402, i32 510512622, i32 -335130899, i32 -1014159676, i32 837199303, i32 582374963, i32 -790768336, i32 68661723, i32 -159632680, i32 -450051796, i32 390545967, i32 1230274059, i32 -1153434360, i32 -1469116676, i32 1510247935, i32 -1899042540, i32 2091215383, i32 1878366691, i32 -1650582816, i32 -741088853, i32 565732008, i32 854102364, i32 -1065151905, i32 340358836, i32 -433916489, i32 -177076669, i32 119113024, i32 1493875044, i32 -1419691417, i32 -1204696685, i32 1247431312, i32 -1634718085, i32 1828433272, i32 2141937292, i32 -1916740209, i32 -483350502, i32 291187481, i32 34330861, i32 -262120466, i32 615137029, i32 -691946490, i32 -980332558, i32 939183345, i32 1776939221, i32 -1685949482, i32 -1999470558, i32 2058945313, i32 -1368168502, i32 1545135305, i32 1330124605, i32 -1121741762, i32 -210866315, i32 17165430, i32 307568514, i32 -532767615, i32 888469610, i32 -962626711, i32 -707819363, i32 665062302, i32 2042050490, i32 -1948470087, i32 -1735637171, i32 1793573966, i32 -1104306011, i32 1279665062, i32 1595330642, i32 -1384295599], [256 x i32] [i32 0, i32 329422967, i32 658845934, i32 887597209, i32 1317691868, i32 1562966443, i32 1775194418, i32 2054015301, i32 -1659583560, i32 -1900651569, i32 -1169034410, i32 -1443665119, i32 -744578460, i32 -1069794797, i32 -186936694, i32 -411497731, i32 1069937025, i32 744974838, i32 411091311, i32 186800408, i32 1901039709, i32 1659701290, i32 1443537075, i32 1168652484, i32 -1563348423, i32 -1317819826, i32 -2053897513, i32 -1774806368, i32 -329559067, i32 -406638, i32 -887201013, i32 -658703492, i32 2139874050, i32 1814657909, i32 1489949676, i32 1265388443, i32 822182622, i32 581114537, i32 373600816, i32 98970183, i32 -492887878, i32 -247613235, i32 -975564716, i32 -696743901, i32 -1407893146, i32 -1078470383, i32 -1957662328, i32 -1728910849, i32 1078858371, i32 1408010996, i32 1728782957, i32 1957280282, i32 247755615, i32 493284136, i32 696337329, i32 975428550, i32 -581250757, i32 -822589108, i32 -98573867, i32 -373458526, i32 -1815039769, i32 -2140002160, i32 -1265270775, i32 -1489561474, i32 -15219196, i32 -323658125, i32 -665651478, i32 -873435491, i32 -1315067944, i32 -1572913233, i32 -1764190410, i32 -2055598271, i32 1644365244, i32 1906417099, i32 1162229074, i32 1457827109, i32 747201632, i32 1059847191, i32 197940366, i32 409914617, i32 -1059965051, i32 -747589646, i32 -409532565, i32 -197812452, i32 -1906813351, i32 -1644507602, i32 -1457690953, i32 -1161822528, i32 1573319741, i32 1315204170, i32 2055455955, i32 1763794084, i32 323786209, i32 15601046, i32 873047311, i32 665533816, i32 -2137250554, i32 -1824604815, i32 -1478945304, i32 -1266971233, i32 -837401382, i32 -575349587, i32 -380406732, i32 -84808637, i32 495511230, i32 237665993, i32 986568272, i32 695160359, i32 1392674658, i32 1084235541, i32 1950857100, i32 1743073275, i32 -1084631929, i32 -1392816912, i32 -1742936983, i32 -1950450658, i32 -237783717, i32 -495899348, i32 -694778443, i32 -986440254, i32 575477567, i32 837783368, i32 84420561, i32 380288934, i32 1825011427, i32 2137386644, i32 1266828813, i32 1478549114, i32 -71042311, i32 -396270962, i32 -595146217, i32 -819703200, i32 -1253467355, i32 -1494547630, i32 -1844663349, i32 -2119289924, i32 1725380929, i32 1970643254, i32 1100089775, i32 1378914776, i32 677206173, i32 1006616810, i32 253257843, i32 482013188, i32 -1006236808, i32 -677080305, i32 -482133098, i32 -253647903, i32 -1970509148, i32 -1724976429, i32 -1379313078, i32 -1100234179, i32 1494403264, i32 1253068983, i32 2119694382, i32 1844797529, i32 395880732, i32 70922603, i32 819829234, i32 595526021, i32 -2075649541, i32 -1746239092, i32 -1559418603, i32 -1330663070, i32 -893224921, i32 -647962544, i32 -309901111, i32 -31076162, i32 425515587, i32 184435252, i32 1041885869, i32 767259354, i32 1473690527, i32 1148462056, i32 1888717681, i32 1664160518, i32 -1148327814, i32 -1473286131, i32 -1664558956, i32 -1888861981, i32 -184055386, i32 -425389615, i32 -767379128, i32 -1042276033, i32 647572418, i32 893105077, i32 31202092, i32 310281051, i32 1746094622, i32 2075251305, i32 1331067632, i32 1559552647, i32 81018109, i32 393651338, i32 596708371, i32 808686692, i32 1247698209, i32 1509737814, i32 1830514127, i32 2126116280, i32 -1715404987, i32 -1973262542, i32 -1098526805, i32 -1389930532, i32 -682975591, i32 -991426834, i32 -267407753, i32 -475187712, i32 991022460, i32 682841355, i32 475331986, i32 267806181, i32 1973136544, i32 1715025111, i32 1390320718, i32 1098646585, i32 -1509617980, i32 -1247308109, i32 -2126496214, i32 -1830640035, i32 -393253096, i32 -80873617, i32 -808820746, i32 -597112959, i32 2069880831, i32 1761429384, i32 1545269009, i32 1337489254, i32 903200291, i32 645342804, i32 311463629, i32 20059834, i32 -431285177, i32 -169245648, i32 -1056035671, i32 -760433442, i32 -1463714405, i32 -1151080980, i32 -1887154827, i32 -1675176702, i32 1150955134, i32 1463334409, i32 1675566736, i32 1887274727, i32 168841122, i32 431151061, i32 760577868, i32 1056433979, i32 -644944442, i32 -903055951, i32 -20194008, i32 -311868065, i32 -1761309670, i32 -2069490579, i32 -1337869068, i32 -1545395069], [256 x i32] [i32 0, i32 -1522429314, i32 1332695565, i32 -366034829, i32 -1629576166, i32 1000289892, i32 -776866281, i32 1961911401, i32 944848581, i32 -1659851589, i32 2000579784, i32 -763363658, i32 -1500538145, i32 63834273, i32 -371144494, i32 1285642924, i32 1889697162, i32 -706482188, i32 1070411655, i32 -1702052359, i32 -293807728, i32 1262308334, i32 -1592554595, i32 72489443, i32 1223902031, i32 -307048143, i32 127668546, i32 -1562541252, i32 -701634731, i32 1936487723, i32 -1723681448, i32 1006839590, i32 -515572972, i32 1141205354, i32 -1372870375, i32 191511399, i32 2140823310, i32 -623129232, i32 821366019, i32 -1783324803, i32 -652884527, i32 2085902255, i32 -1770350628, i32 859506082, i32 1204511179, i32 -494210123, i32 144978886, i32 -1377459784, i32 -1847163234, i32 883365088, i32 -561392493, i32 2076722925, i32 255337092, i32 -1434865414, i32 1079472265, i32 -451484937, i32 -1447577509, i32 217459237, i32 -421991850, i32 1134131240, i32 929635393, i32 -1842835905, i32 2013679180, i32 -582493134, i32 -949649191, i32 1646531239, i32 -2012556588, i32 759906474, i32 1505436867, i32 -50678083, i32 383022798, i32 -1282022224, i32 -13320676, i32 1517628514, i32 -1336153071, i32 354057839, i32 1642732038, i32 -995391368, i32 780486667, i32 -1950033291, i32 -1211630253, i32 310800173, i32 -123162786, i32 1575566624, i32 689527113, i32 -1940337865, i32 1719012164, i32 -1019766470, i32 -1885944938, i32 718754280, i32 -1057386085, i32 1706558437, i32 289957772, i32 -1274415630, i32 1579627905, i32 -77158401, i32 639728589, i32 -2090800717, i32 1766730176, i32 -871384130, i32 -1191190569, i32 499010985, i32 -141521446, i32 1389436836, i32 510674184, i32 -1154361482, i32 1360992005, i32 -195132037, i32 -2136022766, i32 636449644, i32 -809389281, i32 1786782049, i32 1451427399, i32 -205351879, i32 434918474, i32 -1129462220, i32 -933387683, i32 1830563875, i32 -2026704816, i32 577987118, i32 1859270786, i32 -879514884, i32 566061711, i32 -2063795983, i32 -267608936, i32 1431113446, i32 -1083978091, i32 438459627, i32 -1960347837, i32 778495293, i32 -1001904818, i32 1628026672, i32 368694105, i32 -1330101977, i32 1519812948, i32 -2682070, i32 -1284093562, i32 372759544, i32 -65463413, i32 1498974709, i32 766045596, i32 -1997963294, i32 1657257873, i32 -947507729, i32 -75167031, i32 1589942455, i32 -1259710268, i32 296471226, i32 1700507347, i32 -1072022355, i32 708115678, i32 -1888129376, i32 -1009503220, i32 1721083506, i32 -1933875711, i32 704312447, i32 1560973334, i32 -129301912, i32 308658715, i32 -1222356891, i32 1784908887, i32 -819847639, i32 621600346, i32 -2142417884, i32 -188929971, i32 1375517235, i32 -1143834048, i32 513009726, i32 1379054226, i32 -143449876, i32 492691615, i32 -1206095135, i32 -856942968, i32 1772979446, i32 -2088549243, i32 650303227, i32 448917981, i32 -1082104925, i32 1437508560, i32 -252759634, i32 -2078321209, i32 559859641, i32 -881850422, i32 1848743348, i32 579915544, i32 -2016322202, i32 1845468437, i32 -927068309, i32 -1135711486, i32 420477308, i32 -215926513, i32 1449175921, i32 1279457178, i32 -385653276, i32 53323159, i32 -1502857239, i32 -761506944, i32 2011021822, i32 -1645018739, i32 951227379, i32 1947453791, i32 -783131871, i32 998021970, i32 -1640167124, i32 -355635899, i32 1334640443, i32 -1516093624, i32 14921014, i32 1021348368, i32 -1717495698, i32 1938806813, i32 -691123613, i32 -1572983286, i32 125811828, i32 -313426937, i32 1209069177, i32 78755029, i32 -1578096981, i32 1272899288, i32 -291539802, i32 -1703997233, i32 1060012721, i32 -721403198, i32 1883361468, i32 -1392112498, i32 138911472, i32 -496411005, i32 1193856253, i32 869836948, i32 -1768342806, i32 2092432025, i32 -638162713, i32 -1789447605, i32 806789173, i32 -633839546, i32 2138698296, i32 193566289, i32 -1362623441, i32 1155974236, i32 -509127134, i32 -576425724, i32 2028331898, i32 -1832180983, i32 931836279, i32 1132123422, i32 -432322720, i32 202737427, i32 -1454107283, i32 -436908095, i32 1085595071, i32 -1432740404, i32 266047410, i32 2066475995, i32 -563447387, i32 876919254, i32 -1861932120], [256 x i32] [i32 0, i32 -582636872, i32 -1083759743, i32 1646430521, i32 2065838579, i32 -1503159477, i32 -1002106254, i32 419477706, i32 -163290138, i32 721537374, i32 1227047015, i32 -1805194529, i32 -1922674155, i32 1344534701, i32 838955412, i32 -280700116, i32 -379276995, i32 874584965, i32 1443074748, i32 -1958332412, i32 -1840873266, i32 1325607542, i32 757179215, i32 -261879305, i32 522244827, i32 -1033537437, i32 -1605897894, i32 2097306594, i32 1677910824, i32 -1186510448, i32 -614088535, i32 102787601, i32 -685435765, i32 174112307, i32 1749169930, i32 -1257792078, i32 -1408817800, i32 1900187584, i32 325060345, i32 -836391871, i32 560035693, i32 -64692779, i32 -1643752212, i32 1128529492, i32 1514358430, i32 -2029589466, i32 -450599649, i32 945934247, i32 1044489654, i32 -486273266, i32 -2128181705, i32 1550003343, i32 1164153925, i32 -1742323971, i32 -100354108, i32 658578812, i32 -939145648, i32 356543720, i32 2002970065, i32 -1440264343, i32 -1289226333, i32 1851940123, i32 205575202, i32 -788169062, i32 -1415159833, i32 1994650975, i32 348224614, i32 -914041122, i32 -796627436, i32 230802604, i32 1877167509, i32 -1297684691, i32 1575107585, i32 -2136500551, i32 -494592128, i32 1069593912, i32 650120690, i32 -75126966, i32 -1717096845, i32 1155695819, i32 1120071386, i32 -1618525086, i32 -39465637, i32 551577571, i32 971038505, i32 -458918511, i32 -2037908312, i32 1539462672, i32 -1266250436, i32 1774397316, i32 199339709, i32 -693894139, i32 -811287345, i32 316741239, i32 1891868494, i32 -1383713290, i32 2088979308, i32 -1580801580, i32 -1008441107, i32 513917525, i32 128023199, i32 -622538713, i32 -1194960610, i32 1703146406, i32 -1966659446, i32 1468170802, i32 899681035, i32 -387604045, i32 -236643975, i32 748729281, i32 1317157624, i32 -1815637952, i32 -1779959215, i32 1218597097, i32 713087440, i32 -138054808, i32 -289027166, i32 864051482, i32 1369630755, i32 -1931001189, i32 1671666103, i32 -1092209905, i32 -591087050, i32 25235598, i32 411150404, i32 -977009924, i32 -1478063163, i32 2057511293, i32 1386268991, i32 -1880792185, i32 -305665346, i32 813842438, i32 696449228, i32 -188263820, i32 -1763321011, i32 1268806133, i32 -1528517927, i32 2040594529, i32 461605208, i32 -960093216, i32 -540632278, i32 42152338, i32 1621211307, i32 -1109126637, i32 -1144752126, i32 1719784122, i32 77814659, i32 -639176389, i32 -1058649615, i32 497279817, i32 2139187824, i32 -1564163896, i32 1300241380, i32 -1866092196, i32 -219727771, i32 799183581, i32 916597271, i32 -337149777, i32 -1983575658, i32 1417716526, i32 -2054824524, i32 1489008396, i32 987954741, i32 -408464243, i32 -22549433, i32 602031871, i32 1103155142, i32 -1668979330, i32 1942077010, i32 -1367075606, i32 -861495853, i32 300103531, i32 149131169, i32 -710531815, i32 -1216041952, i32 1791035032, i32 1826712713, i32 -1314601423, i32 -746172664, i32 247719344, i32 398679418, i32 -897124414, i32 -1465614597, i32 1977734211, i32 -1700458641, i32 1205904855, i32 633482478, i32 -125335978, i32 -511230308, i32 1019384868, i32 1591745821, i32 -2086291547, i32 -117008680, i32 608386144, i32 1180808537, i32 -1692131359, i32 -2111527125, i32 1600195987, i32 1027835050, i32 -536465902, i32 256046398, i32 -771268730, i32 -1339697473, i32 1835039751, i32 1952498893, i32 -1457164683, i32 -888674484, i32 373444084, i32 274868197, i32 -853045923, i32 -1358625692, i32 1916841692, i32 1799362070, i32 -1241138002, i32 -735627881, i32 157458223, i32 -433699837, i32 996404923, i32 1497458562, i32 -2080060102, i32 -1660652048, i32 1078058824, i32 576935537, i32 -14222135, i32 774079059, i32 -211408661, i32 -1857773102, i32 1275136874, i32 1426174880, i32 -2008803048, i32 -362377183, i32 925055641, i32 -664280651, i32 86133517, i32 1728102964, i32 -1169856372, i32 -1555705786, i32 2113960702, i32 472052679, i32 -1050191489, i32 -951635090, i32 436378070, i32 2015367407, i32 -1520059817, i32 -1134230883, i32 1629530149, i32 50471196, i32 -565736540, i32 822300808, i32 -330892752, i32 -1906019575, i32 1394727345, i32 1243701627, i32 -1755001917, i32 -179944710, i32 671344706], [256 x i32] [i32 0, i32 940666796, i32 1881333592, i32 1211347188, i32 -532300112, i32 -665530084, i32 -1872272920, i32 -1468658108, i32 -983102575, i32 -42572739, i32 -1253714743, i32 -1923826843, i32 623031585, i32 489937549, i32 1426090617, i32 1829832149, i32 -1893572141, i32 -1221390721, i32 -16728437, i32 -955133657, i32 1869078371, i32 1467396303, i32 524615739, i32 659845015, i32 1246063170, i32 1918109166, i32 979875098, i32 41343670, i32 -1442786062, i32 -1844331682, i32 -635302998, i32 -499948538, i32 464041303, i32 599382779, i32 1804233231, i32 1402668451, i32 -68351001, i32 -1006869429, i32 -1949313857, i32 -1277248749, i32 -556810554, i32 -421605014, i32 -1360174690, i32 -1761866190, i32 1049231478, i32 110850010, i32 1319690030, i32 1991880834, i32 -1802840956, i32 -1399080152, i32 -458748964, i32 -591829904, i32 1959750196, i32 1289618840, i32 82687340, i32 1023204032, i32 1374543637, i32 1778167993, i32 567214157, i32 434008033, i32 -1314365019, i32 -1984360951, i32 -1047871747, i32 -107228847, i32 928082606, i32 255853826, i32 1198765558, i32 2137184858, i32 -686500834, i32 -284836942, i32 -1489630394, i32 -1624808214, i32 -231317185, i32 -903410029, i32 -2112569753, i32 -1174023733, i32 309583759, i32 711110691, i32 1649475799, i32 1514172283, i32 -1200419971, i32 -2141035311, i32 -934161371, i32 -264193143, i32 1479980493, i32 1613224545, i32 672426645, i32 268764473, i32 2098462956, i32 1157984064, i32 221700020, i32 891793432, i32 -1655587236, i32 -1522478608, i32 -311205628, i32 -714994008, i32 754573305, i32 350793813, i32 1557856417, i32 1690988301, i32 -860069559, i32 -189985051, i32 -1130447343, i32 -2070949443, i32 -375466904, i32 -779109436, i32 -1715729616, i32 -1582472036, i32 165374680, i32 835323252, i32 2046408064, i32 1105779244, i32 -1545880022, i32 -1681206906, i32 -738631310, i32 -337113378, i32 1134428314, i32 2072997686, i32 868016066, i32 195932270, i32 1723643323, i32 1588451863, i32 379480803, i32 781124943, i32 -2030499061, i32 -1092066137, i32 -153365421, i32 -825574401, i32 1856165212, i32 1454619376, i32 511707652, i32 647062952, i32 -1897436180, i32 -1225391040, i32 -20597580, i32 -959128808, i32 -1413095731, i32 -1814777503, i32 -605617771, i32 -470389191, i32 1266704509, i32 1938886609, i32 1000521509, i32 62115977, i32 -511658865, i32 -644752605, i32 -1851626537, i32 -1447885701, i32 29690431, i32 970220947, i32 1911018855, i32 1240906443, i32 619167518, i32 485937330, i32 1422221382, i32 1825837034, i32 -996015698, i32 -55349758, i32 -1266622730, i32 -1936608934, i32 1963614219, i32 1293619111, i32 86556499, i32 1027199231, i32 -1789927749, i32 -1386303209, i32 -445840925, i32 -579047857, i32 -1335006310, i32 -2005138378, i32 -1068518206, i32 -128001170, i32 1344853290, i32 1748613766, i32 537528946, i32 404448734, i32 -98041384, i32 -1036423564, i32 -1978999168, i32 -1306808020, i32 443400040, i32 578605252, i32 1783586864, i32 1381896092, i32 1062144585, i32 123626981, i32 1332598033, i32 2004662973, i32 -552946439, i32 -417604779, i32 -1356305503, i32 -1757871091, i32 1509146610, i32 1642254430, i32 701587626, i32 297799430, i32 -1179254462, i32 -2119733522, i32 -912990694, i32 -242896458, i32 -1667976093, i32 -1534731313, i32 -323589317, i32 -727251817, i32 2094074579, i32 1153459583, i32 217306507, i32 887274023, i32 -690889183, i32 -289361523, i32 -1494023815, i32 -1629327659, i32 915693713, i32 243601213, i32 1186381769, i32 2124927077, i32 330749360, i32 732412444, i32 1670646504, i32 1535468868, i32 -202151168, i32 -874380116, i32 -2083408808, i32 -1144988684, i32 1113262757, i32 2051695881, i32 846845437, i32 174635601, i32 -1575046123, i32 -1710236743, i32 -767792307, i32 -366148383, i32 -2026110668, i32 -1087541608, i32 -148971924, i32 -821055040, i32 1736032132, i32 1600704552, i32 391864540, i32 793382768, i32 -847680650, i32 -177732390, i32 -1118063570, i32 -2058691710, i32 758961606, i32 355318378, i32 1562249886, i32 1695507762, i32 136208615, i32 806293323, i32 2017247167, i32 1076744211, i32 -396632489, i32 -800411141, i32 -1736900337, i32 -1603768669], [256 x i32] [i32 0, i32 -282039527, i32 -611540797, i32 884788186, i32 -1292552329, i32 1573215342, i32 1769576372, i32 -2041971539, i32 1611012127, i32 -1892257018, i32 -1148536612, i32 1421530053, i32 -755814552, i32 1036207217, i32 159354795, i32 -430971726, i32 -1072943042, i32 792484647, i32 461410557, i32 -189727772, i32 1928922953, i32 -1647743920, i32 -1451907190, i32 1178979475, i32 -1609947103, i32 1329218360, i32 2072414434, i32 -1799953413, i32 318709590, i32 -36735921, i32 -915161195, i32 641979532, i32 -2047601011, i32 1791262100, i32 1584969294, i32 -1320624809, i32 922821114, i32 -667858205, i32 -326270663, i32 62777888, i32 -437121390, i32 180512139, i32 1048489553, i32 -783366840, i32 1460091365, i32 -1204333828, i32 -1937008346, i32 1673261631, i32 1173890739, i32 -1429713494, i32 -1636530576, i32 1900342633, i32 -150138428, i32 406682333, i32 746696967, i32 -1011754466, i32 637419180, i32 -892447307, i32 -26042769, i32 289600886, i32 -1760884261, i32 2017157826, i32 1283959064, i32 -1548238335, i32 235166699, i32 -516673294, i32 -712443096, i32 985174065, i32 -1125028708, i32 1405159301, i32 1736297567, i32 -2008176826, i32 1845642228, i32 -2127419155, i32 -1248926921, i32 1522436142, i32 -587762557, i32 868687770, i32 125555776, i32 -397688999, i32 -838308907, i32 557318348, i32 361024278, i32 -88825841, i32 2096979106, i32 -1815267397, i32 -1485702047, i32 1212258168, i32 -1374784566, i32 1094588627, i32 1971507977, i32 -1699563504, i32 486229181, i32 -204787804, i32 -948444034, i32 675778407, i32 -1947185818, i32 1690314367, i32 1350364581, i32 -1085503812, i32 956660241, i32 -701165304, i32 -494282030, i32 230273483, i32 -336177799, i32 80100960, i32 813364666, i32 -548757853, i32 1493393934, i32 -1238169321, i32 -2104507699, i32 1841277396, i32 1274838360, i32 -1530128831, i32 -1871651429, i32 2134947458, i32 -116831697, i32 372842806, i32 579201772, i32 -843742731, i32 737830215, i32 -993391010, i32 -260651644, i32 524725917, i32 -1727049168, i32 1983854889, i32 1115943667, i32 -1380738582, i32 470333398, i32 -214377265, i32 -947644651, i32 682916876, i32 -1359118175, i32 1104014264, i32 1970348130, i32 -1706996869, i32 2081337289, i32 -1824602928, i32 -1484648694, i32 1219650579, i32 -822372162, i32 567014311, i32 360134781, i32 -95988892, i32 -603682840, i32 859106545, i32 126363435, i32 -390575054, i32 1861333151, i32 -2118001786, i32 -1250095012, i32 1515027269, i32 -1140678665, i32 1395848430, i32 1737375540, i32 -2000792531, i32 251111552, i32 -507001959, i32 -713357245, i32 978019162, i32 -1711496869, i32 1993132610, i32 1114636696, i32 -1388287359, i32 722048556, i32 -1002832587, i32 -259705105, i32 531979766, i32 -101009084, i32 382390877, i32 578165127, i32 -851021154, i32 1259310643, i32 -1539316438, i32 -1870450960, i32 2142455273, i32 1508938085, i32 -1228866948, i32 -2105790042, i32 1833720511, i32 -351951342, i32 70634763, i32 814286545, i32 -541495864, i32 972458362, i32 -691608989, i32 -495310407, i32 222970528, i32 -1962689011, i32 1681118484, i32 1351556814, i32 -1077971497, i32 302836797, i32 -46364892, i32 -914338562, i32 649078759, i32 -1594238134, i32 1338617939, i32 2071296905, i32 -1807413104, i32 1913320482, i32 -1657102533, i32 -1450814239, i32 1186349048, i32 -1056980139, i32 802138188, i32 460546966, i32 -196933489, i32 -771695613, i32 1026602778, i32 160201920, i32 -423880743, i32 1626729332, i32 -1882881939, i32 -1149678665, i32 1414078638, i32 -1308179428, i32 1563864837, i32 1770677471, i32 -2034626618, i32 15987563, i32 -272394126, i32 -612412504, i32 877607089, i32 -1745290576, i32 2026410409, i32 1282693747, i32 -1555811990, i32 621661639, i32 -901929250, i32 -25072380, i32 296814109, i32 -134290769, i32 416188854, i32 745685612, i32 -1019074187, i32 1158403544, i32 -1438925119, i32 -1635289829, i32 1907826178, i32 1475660430, i32 -1195073129, i32 -1938265523, i32 1665663316, i32 -452854279, i32 171022048, i32 1049451834, i32 -776128989, i32 938660497, i32 -658327160, i32 -327257518, i32 55449931, i32 -2063079962, i32 1782025983, i32 1586185509, i32 -1313132996], [256 x i32] [i32 0, i32 1745038536, i32 -804890224, i32 -1207601832, i32 -1511995951, i32 -840701671, i32 1978047553, i32 501592201, i32 1311636819, i32 640602523, i32 -1641306941, i32 -165115893, i32 -338872190, i32 -2083646390, i32 1003184402, i32 1405636058, i32 -1671693658, i32 -195504530, i32 1281205046, i32 610177022, i32 968572791, i32 1371018175, i32 -373463321, i32 -2118235601, i32 -764016651, i32 -1166726339, i32 40918629, i32 1785950893, i32 2006368804, i32 529919724, i32 -1483695180, i32 -812402820, i32 1029407677, i32 1431875445, i32 -312616403, i32 -2057373979, i32 -1732557204, i32 -256349532, i32 1220354044, i32 549335860, i32 1937145582, i32 460673574, i32 -1552930946, i32 -881652810, i32 -694764737, i32 -1097492489, i32 110158511, i32 1855180391, i32 -1593804517, i32 -922528301, i32 1896226955, i32 419761219, i32 81837258, i32 1826852866, i32 -723065510, i32 -1125791342, i32 -282229688, i32 -2026985344, i32 1059839448, i32 1462300944, i32 1254965657, i32 583953745, i32 -1697966071, i32 -221760319, i32 2058815354, i32 313797554, i32 -1431216406, i32 -1028492766, i32 -547896661, i32 -1219170717, i32 257006395, i32 1733474291, i32 882571817, i32 1553585889, i32 -459496519, i32 -1935700111, i32 -1854259208, i32 -109505744, i32 1098671720, i32 696208032, i32 -420676132, i32 -1896885996, i32 921347148, i32 1592363140, i32 1124874253, i32 722408645, i32 -1828036195, i32 -83276459, i32 -1463746417, i32 -1061016505, i32 2026330399, i32 281310679, i32 220317022, i32 1696786838, i32 -584606514, i32 -1255886842, i32 1206682823, i32 804235279, i32 -1746215593, i32 -1445473, i32 -502513386, i32 -1978700322, i32 839522438, i32 1510552654, i32 163674516, i32 1640125788, i32 -641261564, i32 -1312551732, i32 -1407075259, i32 -1004367731, i32 2082989525, i32 337955101, i32 -608731551, i32 -1280027991, i32 196159473, i32 1672612665, i32 2119678896, i32 374642552, i32 -1370365408, i32 -967651608, i32 -1785035982, i32 -40259590, i32 1167907490, i32 765458026, i32 813319907, i32 1484352043, i32 -528736397, i32 -2004929605, i32 -177336588, i32 -1653792196, i32 627595108, i32 1298889644, i32 1351535397, i32 948824045, i32 -2138533195, i32 -393494915, i32 -1153174617, i32 -750723217, i32 1799727671, i32 54953727, i32 514012790, i32 1990204094, i32 -828018714, i32 -1499053266, i32 1765143634, i32 20371610, i32 -1187795518, i32 -785350390, i32 -858443389, i32 -1529471669, i32 483616787, i32 1959806171, i32 655886593, i32 1327179209, i32 -149008239, i32 -1625457575, i32 -2097623856, i32 -352591848, i32 1392416064, i32 989706632, i32 -936014519, i32 -1607032447, i32 406050009, i32 1882257425, i32 1842694296, i32 97936464, i32 -1110241016, i32 -707772992, i32 -2045218790, i32 -300196654, i32 1444817290, i32 1042089282, i32 603502027, i32 1274779907, i32 -201397157, i32 -1677868909, i32 1416525807, i32 1013799719, i32 -2073547137, i32 -328531273, i32 -242306498, i32 -1718771978, i32 562621358, i32 1233897318, i32 440634044, i32 1916839540, i32 -901393620, i32 -1572405276, i32 -1079816339, i32 -677354587, i32 1873090301, i32 128334389, i32 -1881601650, i32 -405134010, i32 1608470558, i32 937196758, i32 708430943, i32 1111154839, i32 -96496177, i32 -1841514233, i32 -1040911139, i32 -1443375083, i32 301116749, i32 2045870469, i32 1679044876, i32 202841540, i32 -1273861988, i32 -602848172, i32 327349032, i32 2072109024, i32 -1014715720, i32 -1417181584, i32 -1235077383, i32 -564061647, i32 1717858153, i32 241648545, i32 1571753595, i32 900473523, i32 -1918281749, i32 -441812189, i32 -128988246, i32 -1874008222, i32 675910202, i32 1078640370, i32 -1300067789, i32 -629037317, i32 1652872099, i32 176684907, i32 392318946, i32 2137088810, i32 -949741966, i32 -1352189254, i32 -55609504, i32 -1800643672, i32 749285104, i32 1151992376, i32 1498395313, i32 827104889, i32 -1991644383, i32 -515192855, i32 786002069, i32 1188715613, i32 -18929403, i32 -1763965491, i32 -1959152316, i32 -482698868, i32 1530916052, i32 859619356, i32 1626639814, i32 150446350, i32 -1326263210, i32 -655230818, i32 -988526569, i32 -1390975777, i32 353505671, i32 2098281807], [256 x i32] [i32 0, i32 1228700967, i32 -1837565362, i32 -616265879, i32 555582061, i32 1747058506, i32 -1285195741, i32 -94829308, i32 1111164122, i32 185039357, i32 -800850284, i32 -1719696461, i32 1663469239, i32 706411408, i32 -245465863, i32 -1201536546, i32 -2072639052, i32 -850758509, i32 370078714, i32 1597148893, i32 -1519678503, i32 -329779458, i32 924021143, i32 2117012656, i32 -968028818, i32 -1888391095, i32 1412822816, i32 487164423, i32 -414150909, i32 -1368591836, i32 1965585741, i32 1007945834, i32 218129817, i32 1144789182, i32 -1619484713, i32 -700128528, i32 740157428, i32 1696701139, i32 -1100669510, i32 -145137507, i32 1329291587, i32 101129316, i32 -582771955, i32 -1803557334, i32 1848042286, i32 656055817, i32 -60941984, i32 -1251843001, i32 -1988727763, i32 -1068887798, i32 453940835, i32 1379068740, i32 -1469321664, i32 -514354329, i32 974328846, i32 1932486953, i32 -884119305, i32 -2106518064, i32 1496683193, i32 269086622, i32 -363795814, i32 -1553164355, i32 2015891668, i32 823422451, i32 436259634, i32 1396487701, i32 -2005388932, i32 -1052488613, i32 991775071, i32 1914778744, i32 -1452952815, i32 -530985418, i32 1480314856, i32 285717199, i32 -901565018, i32 -2088810367, i32 2032553349, i32 807022754, i32 -346114101, i32 -1570583828, i32 -1636384122, i32 -682967135, i32 202258632, i32 1160922607, i32 -1083490069, i32 -162054708, i32 756267685, i32 1680852866, i32 -598882724, i32 -1787708549, i32 1312111634, i32 118047029, i32 -45071311, i32 -1267975914, i32 1864941183, i32 638894936, i32 385920683, i32 1581044620, i32 -2055711515, i32 -867948094, i32 907881670, i32 2132890081, i32 -1536829816, i32 -312890449, i32 1429973617, i32 470275926, i32 -951889857, i32 -1904268008, i32 1948657692, i32 1025135931, i32 -429993390, i32 -1352487051, i32 -1820940513, i32 -632628680, i32 17718609, i32 1211244662, i32 -1301600910, i32 -78161835, i32 538173244, i32 1764729371, i32 -783440955, i32 -1737367838, i32 1127569803, i32 168371372, i32 -263183960, i32 -1184080753, i32 1646844902, i32 722773697, i32 872519268, i32 2101209923, i32 -1501991894, i32 -280686323, i32 354161673, i32 1545627950, i32 -2023428537, i32 -833055904, i32 1983550142, i32 1057419161, i32 -465409808, i32 -1384245801, i32 1462178003, i32 505114100, i32 -983569763, i32 -1939630150, i32 -1334337584, i32 -112467209, i32 571434398, i32 1798510777, i32 -1855316547, i32 -665427814, i32 51570675, i32 1244568276, i32 -229860598, i32 -1150228947, i32 1614045508, i32 688397411, i32 -749659801, i32 -1704106944, i32 1093264169, i32 135634446, i32 956429309, i32 1883082458, i32 -1418131021, i32 -498764652, i32 404517264, i32 1361054903, i32 -1973122082, i32 -1017579783, i32 2067461927, i32 839289344, i32 -381547159, i32 -1602326450, i32 1512535370, i32 320538733, i32 -933261564, i32 -2124156381, i32 -1116210615, i32 -196376722, i32 789512199, i32 1714650400, i32 -1670744028, i32 -715782909, i32 236094058, i32 1194262349, i32 -11731309, i32 -1234140236, i32 1832125661, i32 604535290, i32 -565084930, i32 -1754463783, i32 1277789872, i32 85326743, i32 771841366, i32 1732059249, i32 -1132878056, i32 -179971521, i32 253550395, i32 1176543772, i32 -1654381195, i32 -732407726, i32 1815763340, i32 621159595, i32 -29187134, i32 -1216422171, i32 1294457825, i32 68921030, i32 -547413585, i32 -1771873144, i32 -1435020062, i32 -481613371, i32 940551852, i32 1899221899, i32 -1955932529, i32 -1034507352, i32 420621505, i32 1345212902, i32 -397651912, i32 -1586483937, i32 2050271862, i32 856217425, i32 -917384619, i32 -2140295310, i32 1529423899, i32 303387964, i32 587282639, i32 1782400488, i32 -1317420415, i32 -129646682, i32 35437218, i32 1260439429, i32 -1872477972, i32 -648528437, i32 1631206421, i32 671498546, i32 -213727653, i32 -1166099588, i32 1076346488, i32 152814431, i32 -765508554, i32 -1687996143, i32 -1485360773, i32 -297055140, i32 890227509, i32 2083763730, i32 -2039827690, i32 -816394703, i32 336742744, i32 1563309183, i32 -447990367, i32 -1401927546, i32 1999949807, i32 1040757448, i32 -1001277492, i32 -1922184469, i32 1445547394, i32 521482405]], align 16
@__PRETTY_FUNCTION__.dma_read = private unnamed_addr constant [41 x i8] c"void dma_read(uintptr_t, size_t, void *)\00", align 1
@__PRETTY_FUNCTION__.dma_write = private unnamed_addr constant [48 x i8] c"void dma_write(uintptr_t, size_t, const void *)\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"pos < fs->rx_len\00", align 1
@__PRETTY_FUNCTION__.flow_rx_seq_write = private unnamed_addr constant [85 x i8] c"void flow_rx_seq_write(struct flextcp_pl_flowst *, uint32_t, uint16_t, const void *)\00", align 1
@eth_addr = external dso_local global %struct.ether_addr, align 1
@.str.26 = private unnamed_addr constant [43 x i8] c"tx_send: transmit buffer full, unexpected\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @rte_hash_crc_init_alg, i8* null }]
@llvm.global.annotations = appending global [2 x { i8*, i8*, i8*, i32 }] [{ i8*, i8*, i8*, i32 } { i8* bitcast (i32 (%struct.dataplane_context*, %struct.network_buf_handle*, i8*, %struct.tcp_opts*, i32)* @fast_flows_packet to i8*), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 328 }, { i8*, i8*, i8*, i32 } { i8* bitcast (void (%struct.dataplane_context*, %struct.network_buf_handle**, i8**, i16)* @fast_flows_packet_fss to i8*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1012 }], section "llvm.metadata"
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @rte_hash_crc_init_alg to i8*)], section "llvm.metadata"

; Function Attrs: nounwind uwtable
define internal void @rte_hash_crc_init_alg() #0 {
entry:
  call void @rte_hash_crc_set_alg(i8 zeroext 6)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_hash_crc_set_alg(i8 zeroext %alg) #1 {
entry:
  %conv = zext i8 %alg to i32
  %cmp = icmp eq i32 %conv, 6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @rte_cpu_get_flag_enabled(i32 83)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %alg.addr.0 = phi i8 [ %alg, %land.lhs.true ], [ 2, %if.then ], [ %alg, %entry ]
  store i8 %alg.addr.0, i8* @crc32_alg, align 1, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_qman_pf(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i16 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = zext i16 %i.0 to i32
  %conv1 = zext i16 %n to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %idxprom = zext i16 %i.0 to i64
  %arrayidx = getelementptr inbounds i32, i32* %queues, i64 %idxprom
  %1 = load i32, i32* %arrayidx, align 4, !tbaa !7
  %idxprom3 = zext i32 %1 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  %2 = bitcast %struct.flextcp_pl_flowst* %arrayidx4 to i8*
  call void @rte_prefetch0(i8* %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add i16 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_prefetch0(i8* %p) #1 {
entry:
  call void asm sideeffect "prefetcht0 $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %p) #6, !srcloc !9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_qman_pfbufs(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i16 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = zext i16 %i.0 to i32
  %conv1 = zext i16 %n to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %idxprom = zext i16 %i.0 to i64
  %arrayidx = getelementptr inbounds i32, i32* %queues, i64 %idxprom
  %1 = load i32, i32* %arrayidx, align 4, !tbaa !7
  %idxprom3 = zext i32 %1 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx4, i32 0, i32 2
  %2 = load i64, i64* %tx_base, align 16, !tbaa !10
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx4, i32 0, i32 22
  %3 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %conv5 = zext i32 %3 to i64
  %add = add i64 %2, %conv5
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  call void @rte_prefetch0(i8* %call)
  %add.ptr = getelementptr i8, i8* %call, i64 64
  call void @rte_prefetch0(i8* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add i16 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dma_pointer(i64 %addr, i64 %len) #1 {
entry:
  %add = add i64 %addr, %len
  %cmp = icmp uge i64 %add, %addr
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %add1 = add i64 %addr, %len
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 74, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.dma_pointer, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %0 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %addr
  ret i8* %add.ptr
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_qman(%struct.dataplane_context* %ctx, i32 %queue, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %oh = alloca %struct.obj_hdr, align 1
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %idxprom = zext i32 %queue to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  %1 = bitcast %struct.obj_hdr* %oh to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %2 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flow_group_steering = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %2, i32 0, i32 5
  %flow_group = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 11
  %3 = load i16, i16* %flow_group, align 4, !tbaa !18
  %idxprom1 = zext i16 %3 to i64
  %arrayidx2 = getelementptr inbounds [4096 x i8], [4096 x i8]* %flow_group_steering, i64 0, i64 %idxprom1
  %4 = load i8, i8* %arrayidx2, align 1, !tbaa !2
  %conv = zext i8 %4 to i16
  %conv3 = zext i16 %conv to i32
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 3
  %5 = load i16, i16* %id, align 8, !tbaa !19
  %conv4 = zext i16 %5 to i32
  %cmp = icmp ne i32 %conv3, %conv4
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %6 = load %struct.dataplane_context**, %struct.dataplane_context*** @ctxs, align 8, !tbaa !5
  %idxprom6 = zext i16 %conv to i64
  %arrayidx7 = getelementptr inbounds %struct.dataplane_context*, %struct.dataplane_context** %6, i64 %idxprom6
  %7 = load %struct.dataplane_context*, %struct.dataplane_context** %arrayidx7, align 8, !tbaa !5
  %qman_fwd_ring = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %7, i32 0, i32 2
  %8 = load %struct.rte_ring*, %struct.rte_ring** %qman_fwd_ring, align 8, !tbaa !27
  %9 = bitcast %struct.flextcp_pl_flowst* %arrayidx to i8*
  %call = call i32 @rte_ring_enqueue(%struct.rte_ring* %8, i8* %9)
  %cmp8 = icmp ne i32 %call, 0
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %if.then
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %call12 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %queue, i32 0, i32 0, i16 zeroext 0, i8 zeroext 11)
  %cmp13 = icmp ne i32 %call12, 0
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end17:                                         ; preds = %if.end
  %12 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %kctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %12, i32 0, i32 3
  %idxprom18 = zext i16 %conv to i64
  %arrayidx19 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %kctx, i64 0, i64 %idxprom18
  call void @util_flexnic_kick(%struct.flextcp_pl_appctx* %arrayidx19, i32 %ts)
  br label %unlock

if.end20:                                         ; preds = %entry
  %call21 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %arrayidx, i32* null)
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end20
  br label %unlock

if.end25:                                         ; preds = %if.end20
  %cmp26 = icmp ult i32 1448, %call21
  br i1 %cmp26, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end25
  br label %cond.end

cond.false:                                       ; preds = %if.end25
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1448, %cond.true ], [ %call21, %cond.false ]
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %13 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %13, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then28, label %if.end70

if.then28:                                        ; preds = %cond.end
  %tx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 32
  %14 = load i32, i32* %tx_objrem, align 64, !tbaa !29
  %cmp29 = icmp eq i32 %14, 0
  br i1 %cmp29, label %if.then31, label %if.end49

if.then31:                                        ; preds = %if.then28
  %conv32 = zext i32 %cond to i64
  %cmp33 = icmp ult i64 %conv32, 8
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.then31
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end37:                                         ; preds = %if.then31
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %16 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %17 = bitcast %struct.obj_hdr* %oh to i8*
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %arrayidx, i32 %16, i16 zeroext 8, i8* %17)
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 3
  %18 = load i8, i8* %dstlen, align 1, !tbaa !2
  %conv38 = zext i8 %18 to i64
  %add = add i64 8, %conv38
  %conv39 = trunc i64 %add to i32
  %len40 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 0
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %len40, i32 0, i32 0
  %19 = load i32, i32* %coerce.dive, align 1
  %call41 = call i32 @f_beui32(i32 %19)
  %add42 = add i32 %conv39, %call41
  %cmp43 = icmp ult i32 %cond, %conv39
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end37
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end47:                                         ; preds = %if.end37
  %tx_objrem48 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 32
  store i32 %add42, i32* %tx_objrem48, align 64, !tbaa !29
  br label %if.end49

if.end49:                                         ; preds = %if.end47, %if.then28
  %tx_objrem50 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 32
  %21 = load i32, i32* %tx_objrem50, align 64, !tbaa !29
  %cmp51 = icmp ult i32 %21, %cond
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %if.end49
  %tx_objrem54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 32
  %22 = load i32, i32* %tx_objrem54, align 64, !tbaa !29
  br label %cond.end56

cond.false55:                                     ; preds = %if.end49
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %22, %cond.true53 ], [ %cond, %cond.false55 ]
  %tx_objrem58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 32
  %23 = load i32, i32* %tx_objrem58, align 64, !tbaa !29
  %sub = sub i32 %23, %cond57
  store i32 %sub, i32* %tx_objrem58, align 64, !tbaa !29
  %cmp59 = icmp ugt i32 %call21, %cond57
  br i1 %cmp59, label %if.then61, label %if.end69

if.then61:                                        ; preds = %cond.end56
  %qman62 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %call63 = call i32 @qman_set(%struct.qman_thread* %qman62, i32 %queue, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp64 = icmp ne i32 %call63, 0
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then61
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end68:                                         ; preds = %if.then61
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %cond.end56
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %cond.end
  %len.0 = phi i32 [ %cond57, %if.end69 ], [ %cond, %cond.end ]
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 23
  %25 = load i32, i32* %tx_next_seq, align 32, !tbaa !30
  %tx_next_pos71 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %26 = load i32, i32* %tx_next_pos71, align 4, !tbaa !17
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %27 = load i32, i32* %rx_avail, align 4, !tbaa !31
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 16
  %28 = load i32, i32* %rx_next_seq, align 4, !tbaa !32
  %tx_next_seq72 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 23
  %29 = load i32, i32* %tx_next_seq72, align 32, !tbaa !30
  %add73 = add i32 %29, %len.0
  store i32 %add73, i32* %tx_next_seq72, align 32, !tbaa !30
  %tx_next_pos74 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %30 = load i32, i32* %tx_next_pos74, align 4, !tbaa !17
  %add75 = add i32 %30, %len.0
  store i32 %add75, i32* %tx_next_pos74, align 4, !tbaa !17
  %tx_next_pos76 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %31 = load i32, i32* %tx_next_pos76, align 4, !tbaa !17
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 4
  %32 = load i32, i32* %tx_len, align 4, !tbaa !33
  %cmp77 = icmp uge i32 %31, %32
  br i1 %cmp77, label %if.then79, label %if.end83

if.then79:                                        ; preds = %if.end70
  %tx_len80 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 4
  %33 = load i32, i32* %tx_len80, align 4, !tbaa !33
  %tx_next_pos81 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %34 = load i32, i32* %tx_next_pos81, align 4, !tbaa !17
  %sub82 = sub i32 %34, %33
  store i32 %sub82, i32* %tx_next_pos81, align 4, !tbaa !17
  br label %if.end83

if.end83:                                         ; preds = %if.then79, %if.end70
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 21
  %35 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %add84 = add i32 %35, %len.0
  store i32 %add84, i32* %tx_sent, align 8, !tbaa !34
  %rx_base_sp85 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %36 = load i64, i64* %rx_base_sp85, align 8, !tbaa !28
  %and86 = and i64 %36, 16
  %cmp87 = icmp eq i64 %and86, 16
  br i1 %cmp87, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end83
  %tx_next_pos89 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 22
  %37 = load i32, i32* %tx_next_pos89, align 4, !tbaa !17
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 24
  %38 = load i32, i32* %tx_head, align 4, !tbaa !35
  %cmp90 = icmp eq i32 %37, %38
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end83
  %39 = phi i1 [ false, %if.end83 ], [ %cmp90, %land.rhs ]
  %land.ext = zext i1 %39 to i32
  %conv92 = trunc i32 %land.ext to i8
  %tobool93 = icmp ne i8 %conv92, 0
  br i1 %tobool93, label %if.then94, label %if.end99

if.then94:                                        ; preds = %land.end
  %cmp95 = icmp ugt i32 %len.0, 0
  br i1 %cmp95, label %if.then97, label %if.else

if.then97:                                        ; preds = %if.then94
  br label %if.end98

if.else:                                          ; preds = %if.then94
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i32 242, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @__PRETTY_FUNCTION__.fast_flows_qman, i32 0, i32 0)) #11
  unreachable

if.end98:                                         ; preds = %if.then97
  %dec = add i32 %len.0, -1
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %land.end
  %len.1 = phi i32 [ %dec, %if.end98 ], [ %len.0, %land.end ]
  %conv100 = trunc i32 %len.1 to i16
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 25
  %40 = load i32, i32* %tx_next_ts, align 8, !tbaa !36
  call void @flow_tx_segment(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, %struct.flextcp_pl_flowst* %arrayidx, i32 %25, i32 %28, i32 %27, i16 zeroext %conv100, i32 %26, i32 %40, i32 %ts, i8 zeroext %conv92)
  br label %unlock

unlock:                                           ; preds = %if.end99, %if.then24, %if.end17
  %ret.0 = phi i32 [ -1, %if.end17 ], [ -1, %if.then24 ], [ 0, %if.end99 ]
  %lock101 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock101)
  %41 = bitcast %struct.obj_hdr* %oh to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #6
  ret i32 %ret.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @util_spin_lock(i32* %sl) #1 {
entry:
  %0 = call i32 asm sideeffect "1:\0Axchg $0, $1\0Atest $1, $1\0Ajz 3f\0A2:\0Apause\0Acmpl $$0, $0\0Ajnz 2b\0Ajmp 1b\0A3:\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %sl, i32 1) #6, !srcloc !37
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @rte_ring_enqueue(%struct.rte_ring* %r, i8* %obj) #3 {
entry:
  %obj.addr = alloca i8*, align 8
  store i8* %obj, i8** %obj.addr, align 8, !tbaa !5
  %call = call i32 @rte_ring_enqueue_bulk(%struct.rte_ring* %r, i8** %obj.addr, i32 1, i32* null)
  %tobool = icmp ne i32 %call, 0
  %0 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 -105
  ret i32 %cond
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

declare dso_local i32 @qman_set(%struct.qman_thread*, i32, i32, i32, i16 zeroext, i8 zeroext) #4

declare dso_local void @util_flexnic_kick(%struct.flextcp_pl_appctx*, i32) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_txavail(%struct.flextcp_pl_flowst* %fs, i32* %phead) #1 {
entry:
  %cmp = icmp ne i32* %phead, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i32, i32* %phead, align 4, !tbaa !7
  br label %cond.end

cond.false:                                       ; preds = %entry
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 24
  %1 = load i32, i32* %tx_head, align 4, !tbaa !35
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ %1, %cond.false ]
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %2 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %cmp1 = icmp ule i32 %2, %cond
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %tx_next_pos2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %3 = load i32, i32* %tx_next_pos2, align 4, !tbaa !17
  %sub = sub i32 %cond, %3
  br label %if.end

if.else:                                          ; preds = %cond.end
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 4
  %4 = load i32, i32* %tx_len, align 4, !tbaa !33
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %5 = load i32, i32* %tx_next_pos3, align 4, !tbaa !17
  %sub4 = sub i32 %4, %5
  %add = add i32 %sub4, %cond
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %buf_avail.0 = phi i32 [ %sub, %if.then ], [ %add, %if.else ]
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 17
  %6 = load i32, i32* %rx_remote_avail, align 8, !tbaa !38
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %7 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %sub5 = sub i32 %6, %7
  %cmp6 = icmp ult i32 %sub5, %buf_avail.0
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.end
  br label %cond.end9

cond.false8:                                      ; preds = %if.end
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ %sub5, %cond.true7 ], [ %buf_avail.0, %cond.false8 ]
  ret i32 %cond10
}

; Function Attrs: nounwind uwtable
define internal void @flow_tx_read(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %dst) #0 {
entry:
  %conv = zext i16 %len to i32
  %add = add i32 %pos, %conv
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 4
  %0 = load i32, i32* %tx_len, align 4, !tbaa !33
  %cmp = icmp ule i32 %add, %0
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 2
  %1 = load i64, i64* %tx_base, align 16, !tbaa !10
  %conv3 = zext i32 %pos to i64
  %add4 = add i64 %1, %conv3
  %conv5 = zext i16 %len to i64
  call void @dma_read(i64 %add4, i64 %conv5, i8* %dst)
  br label %if.end

if.else:                                          ; preds = %entry
  %tx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 4
  %2 = load i32, i32* %tx_len6, align 4, !tbaa !33
  %sub = sub i32 %2, %pos
  %tx_base7 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 2
  %3 = load i64, i64* %tx_base7, align 16, !tbaa !10
  %conv8 = zext i32 %pos to i64
  %add9 = add i64 %3, %conv8
  %conv10 = zext i32 %sub to i64
  call void @dma_read(i64 %add9, i64 %conv10, i8* %dst)
  %tx_base11 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 2
  %4 = load i64, i64* %tx_base11, align 16, !tbaa !10
  %conv12 = zext i16 %len to i32
  %sub13 = sub i32 %conv12, %sub
  %conv14 = zext i32 %sub13 to i64
  %idx.ext = zext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8, i8* %dst, i64 %idx.ext
  call void @dma_read(i64 %4, i64 %conv14, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @f_beui32(i32 %x.coerce) #1 {
entry:
  %x = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  store i32 %x.coerce, i32* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  %0 = load i32, i32* %x1, align 1, !tbaa !39
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %1
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: nounwind uwtable
define internal void @flow_tx_segment(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, %struct.flextcp_pl_flowst* %fs, i32 %seq, i32 %ack, i32 %rxwnd, i16 zeroext %payload, i32 %payload_pos, i32 %ts_echo, i32 %ts_my, i8 zeroext %fin) #0 {
entry:
  %tmp = alloca %struct.beui16, align 1
  %tmp7 = alloca %struct.beui16, align 1
  %tmp15 = alloca %struct.beui16, align 1
  %tmp19 = alloca %struct.beui16, align 1
  %tmp43 = alloca %struct.beui32, align 1
  %tmp47 = alloca %struct.beui32, align 1
  %tmp59 = alloca %struct.beui16, align 1
  %tmp69 = alloca %struct.beui16, align 1
  %tmp74 = alloca %struct.beui32, align 1
  %tmp77 = alloca %struct.beui32, align 1
  %call = call i8* @network_buf_buf(%struct.network_buf_handle* %nbh)
  %0 = bitcast i8* %call to %struct.pkt_tcp*
  %conv = zext i16 12 to i64
  %add = add i64 54, %conv
  %conv1 = trunc i64 %add to i16
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 0
  %remote_mac = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 9
  %1 = bitcast %struct.eth_addr* %dest to i8*
  %2 = bitcast %struct.eth_addr* %remote_mac to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 4 %2, i64 6, i1 false), !tbaa.struct !40
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %3 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 getelementptr inbounds (%struct.ether_addr, %struct.ether_addr* @eth_addr, i32 0, i32 0, i32 0), i64 6, i1 false)
  %eth3 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth3, i32 0, i32 2
  %4 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4) #6
  %call4 = call i16 @t_beui16(i16 zeroext 2048)
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp, i32 0, i32 0
  store i16 %call4, i16* %coerce.dive, align 1
  %5 = bitcast %struct.beui16* %type to i8*
  %6 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %6, i64 2, i1 false), !tbaa.struct !41
  %7 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %7) #6
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 0
  store i8 69, i8* %_v_hl, align 1, !tbaa !43
  %ip5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip5, i32 0, i32 1
  store i8 0, i8* %_tos, align 1, !tbaa !48
  %ip6 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip6, i32 0, i32 2
  %8 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %8) #6
  %conv8 = zext i16 %conv1 to i64
  %sub = sub i64 %conv8, 14
  %conv9 = zext i16 %payload to i64
  %add10 = add i64 %sub, %conv9
  %conv11 = trunc i64 %add10 to i16
  %call12 = call i16 @t_beui16(i16 zeroext %conv11)
  %coerce.dive13 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp7, i32 0, i32 0
  store i16 %call12, i16* %coerce.dive13, align 1
  %9 = bitcast %struct.beui16* %len to i8*
  %10 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 2, i1 false), !tbaa.struct !41
  %11 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %11) #6
  %ip14 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %id = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip14, i32 0, i32 3
  %12 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %12) #6
  %call16 = call i16 @t_beui16(i16 zeroext 3)
  %coerce.dive17 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp15, i32 0, i32 0
  store i16 %call16, i16* %coerce.dive17, align 1
  %13 = bitcast %struct.beui16* %id to i8*
  %14 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 2, i1 false), !tbaa.struct !41
  %15 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %15) #6
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %offset = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 4
  %16 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %16) #6
  %call20 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive21 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp19, i32 0, i32 0
  store i16 %call20, i16* %coerce.dive21, align 1
  %17 = bitcast %struct.beui16* %offset to i8*
  %18 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 2, i1 false), !tbaa.struct !41
  %19 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %19) #6
  %ip22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip22, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1, !tbaa !49
  %ip23 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip23, i32 0, i32 6
  store i8 6, i8* %proto, align 1, !tbaa !50
  %ip24 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip24, i32 0, i32 7
  store i16 0, i16* %chksum, align 1, !tbaa !51
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %local_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 5
  %20 = bitcast %struct.beui32* %src26 to i8*
  %21 = bitcast %struct.beui32* %local_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 32 %21, i64 4, i1 false), !tbaa.struct !52
  %ip27 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %dest28 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip27, i32 0, i32 9
  %remote_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 6
  %22 = bitcast %struct.beui32* %dest28 to i8*
  %23 = bitcast %struct.beui32* %remote_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 4 %23, i64 4, i1 false), !tbaa.struct !52
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 1
  %24 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %24, 8
  %cmp = icmp eq i64 %and, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %ip30 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %_tos31 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip30, i32 0, i32 1
  %25 = load i8, i8* %_tos31, align 1, !tbaa !48
  %conv32 = zext i8 %25 to i32
  %and33 = and i32 %conv32, 4092
  %or = or i32 %and33, 2
  %conv34 = trunc i32 %or to i8
  %ip35 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %_tos36 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip35, i32 0, i32 1
  store i8 %conv34, i8* %_tos36, align 1, !tbaa !48
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv37 = zext i8 %fin to i32
  %tobool = icmp ne i32 %conv37, 0
  %26 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %conv38 = trunc i32 %cond to i16
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %src39 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %local_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 7
  %27 = bitcast %struct.beui16* %src39 to i8*
  %28 = bitcast %struct.beui16* %local_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 8 %28, i64 2, i1 false), !tbaa.struct !41
  %tcp40 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %dest41 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp40, i32 0, i32 1
  %remote_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 8
  %29 = bitcast %struct.beui16* %dest41 to i8*
  %30 = bitcast %struct.beui16* %remote_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 2 %30, i64 2, i1 false), !tbaa.struct !41
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 2
  %31 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #6
  %call44 = call i32 @t_beui32(i32 %seq)
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp43, i32 0, i32 0
  store i32 %call44, i32* %coerce.dive45, align 1
  %32 = bitcast %struct.beui32* %seqno to i8*
  %33 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 4, i1 false), !tbaa.struct !52
  %34 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #6
  %tcp46 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp46, i32 0, i32 3
  %35 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #6
  %call48 = call i32 @t_beui32(i32 %ack)
  %coerce.dive49 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp47, i32 0, i32 0
  store i32 %call48, i32* %coerce.dive49, align 1
  %36 = bitcast %struct.beui32* %ackno to i8*
  %37 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 4, i1 false), !tbaa.struct !52
  %38 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #6
  %conv50 = zext i16 12 to i32
  %div = sdiv i32 %conv50, 4
  %add51 = add nsw i32 5, %div
  %shl = shl i32 %add51, 12
  %conv52 = zext i16 %conv38 to i32
  %or53 = or i32 24, %conv52
  %or54 = or i32 %shl, %or53
  %conv55 = trunc i32 %or54 to i16
  %call56 = call zeroext i16 @__bswap_16(i16 zeroext %conv55)
  %tcp57 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp57, i32 0, i32 4
  store i16 %call56, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !53
  %tcp58 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp58, i32 0, i32 5
  %39 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %39) #6
  %cmp60 = icmp ult i32 %rxwnd, 65535
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi i32 [ %rxwnd, %cond.true ], [ 65535, %cond.false ]
  %conv63 = trunc i32 %cond62 to i16
  %call64 = call i16 @t_beui16(i16 zeroext %conv63)
  %coerce.dive65 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp59, i32 0, i32 0
  store i16 %call64, i16* %coerce.dive65, align 1
  %40 = bitcast %struct.beui16* %wnd to i8*
  %41 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 2, i1 false), !tbaa.struct !41
  %42 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %42) #6
  %tcp66 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %chksum67 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp66, i32 0, i32 6
  store i16 0, i16* %chksum67, align 1, !tbaa !54
  %tcp68 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp68, i32 0, i32 7
  %43 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %43) #6
  %call70 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive71 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp69, i32 0, i32 0
  store i16 %call70, i16* %coerce.dive71, align 1
  %44 = bitcast %struct.beui16* %urgp to i8*
  %45 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 2, i1 false), !tbaa.struct !41
  %46 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %46) #6
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i64 1
  %47 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  %conv72 = zext i16 12 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 0, i64 %conv72, i1 false)
  %add.ptr73 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i64 1
  %48 = bitcast %struct.pkt_tcp* %add.ptr73 to %struct.tcp_timestamp_opt*
  %kind = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %48, i32 0, i32 0
  store i8 8, i8* %kind, align 1, !tbaa !55
  %length = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %48, i32 0, i32 1
  store i8 10, i8* %length, align 1, !tbaa !57
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %48, i32 0, i32 2
  %49 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %49) #6
  %call75 = call i32 @t_beui32(i32 %ts_my)
  %coerce.dive76 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp74, i32 0, i32 0
  store i32 %call75, i32* %coerce.dive76, align 1
  %50 = bitcast %struct.beui32* %ts_val to i8*
  %51 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 4, i1 false), !tbaa.struct !52
  %52 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #6
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %48, i32 0, i32 3
  %53 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %53) #6
  %call78 = call i32 @t_beui32(i32 %ts_echo)
  %coerce.dive79 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp77, i32 0, i32 0
  store i32 %call78, i32* %coerce.dive79, align 1
  %54 = bitcast %struct.beui32* %ts_ecr to i8*
  %55 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 4, i1 false), !tbaa.struct !52
  %56 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #6
  %conv80 = zext i16 %payload to i32
  %cmp81 = icmp sgt i32 %conv80, 0
  br i1 %cmp81, label %if.then83, label %if.end86

if.then83:                                        ; preds = %cond.end
  %57 = bitcast %struct.pkt_tcp* %0 to i8*
  %conv84 = zext i16 %conv1 to i32
  %idx.ext = sext i32 %conv84 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %57, i64 %idx.ext
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %fs, i32 %payload_pos, i16 zeroext %payload, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then83, %cond.end
  %local_ip87 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 5
  %remote_ip88 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 6
  %conv89 = zext i16 %conv1 to i64
  %sub90 = sub i64 %conv89, 34
  %conv91 = zext i16 %payload to i64
  %add92 = add i64 %sub90, %conv91
  %conv93 = trunc i64 %add92 to i16
  %coerce.dive94 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip87, i32 0, i32 0
  %58 = load i32, i32* %coerce.dive94, align 32
  %coerce.dive95 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip88, i32 0, i32 0
  %59 = load i32, i32* %coerce.dive95, align 4
  call void @tcp_checksums(%struct.network_buf_handle* %nbh, %struct.pkt_tcp* %0, i32 %58, i32 %59, i16 zeroext %conv93)
  %conv96 = zext i16 %conv1 to i32
  %conv97 = zext i16 %payload to i32
  %add98 = add nsw i32 %conv96, %conv97
  %conv99 = trunc i32 %add98 to i16
  call void @tx_send(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i16 zeroext 0, i16 zeroext %conv99)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @util_spin_unlock(i32* %sl) #1 {
entry:
  %0 = call i32 asm sideeffect "xchg $0, $1\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %sl, i32 0) #6, !srcloc !58
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_qman_fwd(%struct.dataplane_context* %ctx, %struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %fs to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %fs, i32* null)
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %conv1 = zext i16 %conv to i32
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 26
  %1 = load i32, i32* %tx_rate, align 4, !tbaa !59
  %call2 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %conv1, i32 %1, i32 %call, i16 zeroext 1448, i8 zeroext 11)
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %entry
  %lock5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock5)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_parse(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, %struct.tcp_opts* %tos, i16 zeroext %n) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i16 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = zext i16 %i.0 to i32
  %conv1 = zext i16 %n to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = zext i16 %i.0 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %fss, i64 %idxprom
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !5
  %cmp3 = icmp eq i8* %0, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %idxprom5 = zext i16 %i.0 to i64
  %arrayidx6 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %nbhs, i64 %idxprom5
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx6, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %1)
  %2 = bitcast i8* %call to %struct.pkt_tcp*
  %idxprom7 = zext i16 %i.0 to i64
  %arrayidx8 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %nbhs, i64 %idxprom7
  %3 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx8, align 8, !tbaa !5
  %call9 = call zeroext i16 @network_buf_len(%struct.network_buf_handle* %3)
  %conv10 = zext i16 %call9 to i64
  %cmp11 = icmp ult i64 %conv10, 54
  %conv12 = zext i1 %cmp11 to i32
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %type, i32 0, i32 0
  %4 = load i16, i16* %coerce.dive, align 1
  %call13 = call zeroext i16 @f_beui16(i16 %4)
  %conv14 = zext i16 %call13 to i32
  %cmp15 = icmp ne i32 %conv14, 2048
  %conv16 = zext i1 %cmp15 to i32
  %or = or i32 %conv12, %conv16
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 6
  %5 = load i8, i8* %proto, align 1, !tbaa !50
  %conv17 = zext i8 %5 to i32
  %cmp18 = icmp ne i32 %conv17, 6
  %conv19 = zext i1 %cmp18 to i32
  %or20 = or i32 %or, %conv19
  %ip21 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip21, i32 0, i32 0
  %6 = load i8, i8* %_v_hl, align 1, !tbaa !43
  %conv22 = zext i8 %6 to i32
  %shr = ashr i32 %conv22, 4
  %cmp23 = icmp ne i32 %shr, 4
  %conv24 = zext i1 %cmp23 to i32
  %or25 = or i32 %or20, %conv24
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %_v_hl27 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 0
  %7 = load i8, i8* %_v_hl27, align 1, !tbaa !43
  %conv28 = zext i8 %7 to i32
  %and = and i32 %conv28, 15
  %cmp29 = icmp ne i32 %and, 5
  %conv30 = zext i1 %cmp29 to i32
  %or31 = or i32 %or25, %conv30
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %8 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !53
  %call32 = call zeroext i16 @__bswap_16(i16 zeroext %8)
  %conv33 = zext i16 %call32 to i32
  %shr34 = ashr i32 %conv33, 12
  %cmp35 = icmp slt i32 %shr34, 5
  %conv36 = zext i1 %cmp35 to i32
  %or37 = or i32 %or31, %conv36
  %conv38 = zext i16 %call9 to i64
  %ip39 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %len40 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip39, i32 0, i32 2
  %coerce.dive41 = getelementptr inbounds %struct.beui16, %struct.beui16* %len40, i32 0, i32 0
  %9 = load i16, i16* %coerce.dive41, align 1
  %call42 = call zeroext i16 @f_beui16(i16 %9)
  %conv43 = zext i16 %call42 to i64
  %add = add i64 %conv43, 14
  %cmp44 = icmp ult i64 %conv38, %add
  %conv45 = zext i1 %cmp44 to i32
  %or46 = or i32 %or37, %conv45
  %idxprom47 = zext i16 %i.0 to i64
  %arrayidx48 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %tos, i64 %idxprom47
  %call49 = call i32 @tcp_parse_options(%struct.pkt_tcp* %2, i16 zeroext %call9, %struct.tcp_opts* %arrayidx48)
  %cmp50 = icmp ne i32 %call49, 0
  %conv51 = zext i1 %cmp50 to i32
  %or52 = or i32 %or46, %conv51
  %idxprom53 = zext i16 %i.0 to i64
  %arrayidx54 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %tos, i64 %idxprom53
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %arrayidx54, i32 0, i32 0
  %10 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts, align 8, !tbaa !60
  %cmp55 = icmp eq %struct.tcp_timestamp_opt* %10, null
  %conv56 = zext i1 %cmp55 to i32
  %or57 = or i32 %or52, %conv56
  %tobool = icmp ne i32 %or57, 0
  br i1 %tobool, label %if.then58, label %if.end61

if.then58:                                        ; preds = %if.end
  %idxprom59 = zext i16 %i.0 to i64
  %arrayidx60 = getelementptr inbounds i8*, i8** %fss, i64 %idxprom59
  store i8* null, i8** %arrayidx60, align 8, !tbaa !5
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end61, %if.then
  %inc = add i16 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @network_buf_bufoff(%struct.network_buf_handle* %bh) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 1
  %1 = load i8*, i8** %buf_addr, align 64, !tbaa !62
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 4
  %2 = load i16, i16* %data_off, align 16, !tbaa !64
  %conv = zext i16 %2 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext
  ret i8* %add.ptr
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_len(%struct.network_buf_handle* %bh) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 12
  %1 = load i16, i16* %data_len, align 8, !tbaa !65
  ret i16 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @f_beui16(i16 %x.coerce) #1 {
entry:
  %x = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  store i16 %x.coerce, i16* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  %0 = load i16, i16* %x1, align 1, !tbaa !66
  %1 = call i16 @llvm.bswap.i16(i16 %0)
  ret i16 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @__bswap_16(i16 zeroext %__bsx) #1 {
entry:
  %conv = zext i16 %__bsx to i32
  %shr = ashr i32 %conv, 8
  %and = and i32 %shr, 255
  %conv1 = zext i16 %__bsx to i32
  %and2 = and i32 %conv1, 255
  %shl = shl i32 %and2, 8
  %or = or i32 %and, %shl
  %conv3 = trunc i32 %or to i16
  ret i16 %conv3
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_parse_options(%struct.pkt_tcp* %p, i16 zeroext %len, %struct.tcp_opts* %opts) #1 {
entry:
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i64 1
  %0 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %1 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !53
  %call = call zeroext i16 @__bswap_16(i16 zeroext %1)
  %conv = zext i16 %call to i32
  %shr = ashr i32 %conv, 12
  %mul = mul nsw i32 %shr, 4
  %sub = sub nsw i32 %mul, 20
  %conv1 = trunc i32 %sub to i16
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %opts, i32 0, i32 0
  store %struct.tcp_timestamp_opt* null, %struct.tcp_timestamp_opt** %ts, align 8, !tbaa !60
  %tcp2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 2
  %_hdrlen_rsvd_flags3 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp2, i32 0, i32 4
  %2 = load i16, i16* %_hdrlen_rsvd_flags3, align 1, !tbaa !53
  %call4 = call zeroext i16 @__bswap_16(i16 zeroext %2)
  %conv5 = zext i16 %call4 to i32
  %shr6 = ashr i32 %conv5, 12
  %cmp = icmp slt i32 %shr6, 5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %conv8 = zext i16 %conv1 to i64
  %conv9 = zext i16 %len to i64
  %sub10 = sub i64 %conv9, 54
  %cmp11 = icmp ugt i64 %conv8, %sub10
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %tcp13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 2
  %_hdrlen_rsvd_flags14 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp13, i32 0, i32 4
  %4 = load i16, i16* %_hdrlen_rsvd_flags14, align 1, !tbaa !53
  %call15 = call zeroext i16 @__bswap_16(i16 zeroext %4)
  %conv16 = zext i16 %call15 to i32
  %shr17 = ashr i32 %conv16, 12
  %conv18 = zext i16 %conv1 to i32
  %conv19 = zext i16 %len to i32
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.22, i32 0, i32 0), i32 %shr17, i32 %conv18, i32 %conv19, i64 54)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %if.end66, %if.end
  %off.0 = phi i16 [ 0, %if.end ], [ %conv70, %if.end66 ]
  %conv21 = zext i16 %off.0 to i32
  %conv22 = zext i16 %conv1 to i32
  %cmp23 = icmp slt i32 %conv21, %conv22
  br i1 %cmp23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %idxprom = zext i16 %off.0 to i64
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !2
  %conv25 = zext i16 %conv1 to i32
  %conv26 = zext i16 %off.0 to i32
  %sub27 = sub nsw i32 %conv25, %conv26
  %conv28 = trunc i32 %sub27 to i8
  %conv29 = zext i8 %5 to i32
  %cmp30 = icmp eq i32 %conv29, 0
  br i1 %cmp30, label %if.then32, label %if.else

if.then32:                                        ; preds = %while.body
  br label %while.end

if.else:                                          ; preds = %while.body
  %conv33 = zext i8 %5 to i32
  %cmp34 = icmp eq i32 %conv33, 1
  br i1 %cmp34, label %if.then36, label %if.else37

if.then36:                                        ; preds = %if.else
  br label %if.end65

if.else37:                                        ; preds = %if.else
  %conv38 = zext i8 %conv28 to i32
  %cmp39 = icmp slt i32 %conv38, 2
  br i1 %cmp39, label %if.then41, label %if.end46

if.then41:                                        ; preds = %if.else37
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %conv42 = zext i8 %conv28 to i32
  %conv43 = zext i8 %5 to i32
  %conv44 = zext i16 %off.0 to i32
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0), i32 %conv42, i32 %conv43, i32 %conv44)
  br label %cleanup

if.end46:                                         ; preds = %if.else37
  %conv47 = zext i16 %off.0 to i32
  %add = add nsw i32 %conv47, 1
  %idxprom48 = sext i32 %add to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %0, i64 %idxprom48
  %7 = load i8, i8* %arrayidx49, align 1, !tbaa !2
  %conv50 = zext i8 %5 to i32
  %cmp51 = icmp eq i32 %conv50, 8
  br i1 %cmp51, label %if.then53, label %if.end64

if.then53:                                        ; preds = %if.end46
  %conv54 = zext i8 %7 to i64
  %cmp55 = icmp ne i64 %conv54, 10
  br i1 %cmp55, label %if.then57, label %if.end60

if.then57:                                        ; preds = %if.then53
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %conv58 = zext i8 %7 to i32
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.24, i32 0, i32 0), i32 %conv58, i64 10)
  br label %cleanup

if.end60:                                         ; preds = %if.then53
  %conv61 = zext i16 %off.0 to i32
  %idx.ext = sext i32 %conv61 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %0, i64 %idx.ext
  %9 = bitcast i8* %add.ptr62 to %struct.tcp_timestamp_opt*
  %ts63 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %opts, i32 0, i32 0
  store %struct.tcp_timestamp_opt* %9, %struct.tcp_timestamp_opt** %ts63, align 8, !tbaa !60
  br label %if.end64

if.end64:                                         ; preds = %if.end60, %if.end46
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then36
  %opt_len.0 = phi i8 [ 1, %if.then36 ], [ %7, %if.end64 ]
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  %conv67 = zext i8 %opt_len.0 to i32
  %conv68 = zext i16 %off.0 to i32
  %add69 = add nsw i32 %conv68, %conv67
  %conv70 = trunc i32 %add69 to i16
  br label %while.cond

while.end:                                        ; preds = %if.then32, %while.cond
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then57, %if.then41, %if.then
  %retval.0 = phi i32 [ -1, %if.then ], [ 0, %while.end ], [ -1, %if.then41 ], [ -1, %if.then57 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_pfbufs(%struct.dataplane_context* %ctx, i8** %fss, i16 zeroext %n) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i16 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = zext i16 %i.0 to i32
  %conv1 = zext i16 %n to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = zext i16 %i.0 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %fss, i64 %idxprom
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !5
  %cmp3 = icmp eq i8* %0, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %idxprom5 = zext i16 %i.0 to i64
  %arrayidx6 = getelementptr inbounds i8*, i8** %fss, i64 %idxprom5
  %1 = load i8*, i8** %arrayidx6, align 8, !tbaa !5
  %2 = bitcast i8* %1 to %struct.flextcp_pl_flowst*
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %3 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %3, -64
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %4 = load i32, i32* %rx_next_pos, align 64, !tbaa !67
  %conv7 = zext i32 %4 to i64
  %add = add i64 %and, %conv7
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  call void @rte_prefetch0(i8* %call)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %inc = add i16 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_packet(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i8* %fsp, %struct.tcp_opts* %opts, i32 %ts) #0 {
entry:
  %fsp.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.tcp_opts*, align 8
  %tx_bump = alloca i32, align 4
  %trim_start = alloca i16, align 2
  %trim_end = alloca i16, align 2
  %steer_id = alloca i64, align 8
  store i8* %fsp, i8** %fsp.addr, align 8, !tbaa !5
  %fsp.addr1 = bitcast i8** %fsp.addr to i8*
  call void @llvm.var.annotation(i8* %fsp.addr1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 329)
  store %struct.tcp_opts* %opts, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %opts.addr2 = bitcast %struct.tcp_opts** %opts.addr to i8*
  call void @llvm.var.annotation(i8* %opts.addr2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 329)
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %nbh)
  %0 = bitcast i8* %call to %struct.pkt_tcp*
  %1 = load i8*, i8** %fsp.addr, align 8, !tbaa !5
  %2 = bitcast i8* %1 to %struct.flextcp_pl_flowst*
  %3 = bitcast i32* %tx_bump to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  store i32 0, i32* %tx_bump, align 4, !tbaa !7
  %4 = bitcast i16* %trim_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4) #6
  %5 = bitcast i16* %trim_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %5) #6
  %6 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  %7 = bitcast i64* %steer_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #6
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %8 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !53
  %call3 = call zeroext i16 @__bswap_16(i16 zeroext %8)
  %conv4 = zext i16 %call3 to i32
  %shr = ashr i32 %conv4, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv5 = trunc i32 %mul to i16
  %conv6 = zext i16 %conv5 to i64
  %add = add i64 54, %conv6
  %conv7 = trunc i64 %add to i32
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %len, i32 0, i32 0
  %9 = load i16, i16* %coerce.dive, align 1
  %call8 = call zeroext i16 @f_beui16(i16 %9)
  %conv9 = zext i16 %call8 to i64
  %conv10 = zext i16 %conv5 to i64
  %add11 = add i64 40, %conv10
  %sub12 = sub i64 %conv9, %add11
  %conv13 = trunc i64 %sub12 to i32
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %10 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %10, 1
  %cmp = icmp ne i64 %and, 0
  %conv14 = zext i1 %cmp to i32
  %conv15 = sext i32 %conv14 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10, i32 0, i32 0))
  br label %slowpath

if.end:                                           ; preds = %entry
  %tcp17 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags18 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp17, i32 0, i32 4
  %12 = load i16, i16* %_hdrlen_rsvd_flags18, align 1, !tbaa !53
  %call19 = call zeroext i16 @__bswap_16(i16 zeroext %12)
  %conv20 = zext i16 %call19 to i32
  %and21 = and i32 %conv20, 511
  %and22 = and i32 %and21, -218
  %cmp23 = icmp ne i32 %and22, 0
  %conv24 = zext i1 %cmp23 to i32
  %conv25 = sext i32 %conv24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %if.then28, label %if.end39

if.then28:                                        ; preds = %if.end
  %tcp29 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags30 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp29, i32 0, i32 4
  %13 = load i16, i16* %_hdrlen_rsvd_flags30, align 1, !tbaa !53
  %call31 = call zeroext i16 @__bswap_16(i16 zeroext %13)
  %conv32 = zext i16 %call31 to i32
  %and33 = and i32 %conv32, 511
  %and34 = and i32 %and33, 2
  %cmp35 = icmp ne i32 %and34, 0
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then28
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.then28
  %no_permanent_sp.0 = phi i32 [ 1, %if.then37 ], [ 0, %if.then28 ]
  br label %slowpath

if.end39:                                         ; preds = %if.end
  %call40 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %2, i32* null)
  %tcp41 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp41, i32 0, i32 2
  %coerce.dive42 = getelementptr inbounds %struct.beui32, %struct.beui32* %seqno, i32 0, i32 0
  %14 = load i32, i32* %coerce.dive42, align 1
  %call43 = call i32 @f_beui32(i32 %14)
  %tcp44 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp44, i32 0, i32 3
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %ackno, i32 0, i32 0
  %15 = load i32, i32* %coerce.dive45, align 1
  %call46 = call i32 @f_beui32(i32 %15)
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %16 = load i32, i32* %rx_next_pos, align 64, !tbaa !67
  %cmp47 = icmp ugt i32 %conv13, 0
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end39
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.end39
  %trigger_ack.0 = phi i32 [ 1, %if.then49 ], [ 0, %if.end39 ]
  %tcp51 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags52 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp51, i32 0, i32 4
  %17 = load i16, i16* %_hdrlen_rsvd_flags52, align 1, !tbaa !53
  %call53 = call zeroext i16 @__bswap_16(i16 zeroext %17)
  %conv54 = zext i16 %call53 to i32
  %and55 = and i32 %conv54, 511
  %and56 = and i32 %and55, 16
  %cmp57 = icmp eq i32 %and56, 16
  br i1 %cmp57, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.end50
  %cnt_rx_acks = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 28
  %18 = load i16, i16* %cnt_rx_acks, align 2, !tbaa !68
  %inc = add i16 %18, 1
  store i16 %inc, i16* %cnt_rx_acks, align 2, !tbaa !68
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %if.end50
  %tcp61 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags62 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp61, i32 0, i32 4
  %19 = load i16, i16* %_hdrlen_rsvd_flags62, align 1, !tbaa !53
  %call63 = call zeroext i16 @__bswap_16(i16 zeroext %19)
  %conv64 = zext i16 %call63 to i32
  %and65 = and i32 %conv64, 511
  %and66 = and i32 %and65, 16
  %cmp67 = icmp eq i32 %and66, 16
  br i1 %cmp67, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end60
  %call69 = call i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %2, i32 %call46, i32* %tx_bump)
  %cmp70 = icmp eq i32 %call69, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end60
  %20 = phi i1 [ false, %if.end60 ], [ %cmp70, %land.rhs ]
  %land.ext = zext i1 %20 to i32
  %conv72 = sext i32 %land.ext to i64
  %expval73 = call i64 @llvm.expect.i64(i64 %conv72, i64 1)
  %tobool74 = icmp ne i64 %expval73, 0
  br i1 %tobool74, label %if.then75, label %if.end134

if.then75:                                        ; preds = %land.end
  %21 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %cnt_rx_ack_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 29
  %22 = load i32, i32* %cnt_rx_ack_bytes, align 4, !tbaa !69
  %add76 = add i32 %22, %21
  store i32 %add76, i32* %cnt_rx_ack_bytes, align 4, !tbaa !69
  %tcp77 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags78 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp77, i32 0, i32 4
  %23 = load i16, i16* %_hdrlen_rsvd_flags78, align 1, !tbaa !53
  %call79 = call zeroext i16 @__bswap_16(i16 zeroext %23)
  %conv80 = zext i16 %call79 to i32
  %and81 = and i32 %conv80, 511
  %and82 = and i32 %and81, 64
  %cmp83 = icmp eq i32 %and82, 64
  br i1 %cmp83, label %if.then85, label %if.end87

if.then85:                                        ; preds = %if.then75
  %24 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %cnt_rx_ecn_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 30
  %25 = load i32, i32* %cnt_rx_ecn_bytes, align 8, !tbaa !70
  %add86 = add i32 %25, %24
  store i32 %add86, i32* %cnt_rx_ecn_bytes, align 8, !tbaa !70
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %if.then75
  %26 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %27 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %cmp88 = icmp ule i32 %26, %27
  %conv89 = zext i1 %cmp88 to i32
  %conv90 = sext i32 %conv89 to i64
  %expval91 = call i64 @llvm.expect.i64(i64 %conv90, i64 1)
  %tobool92 = icmp ne i64 %expval91, 0
  br i1 %tobool92, label %if.then93, label %if.else

if.then93:                                        ; preds = %if.end87
  %28 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %tx_sent94 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %29 = load i32, i32* %tx_sent94, align 8, !tbaa !34
  %sub95 = sub i32 %29, %28
  store i32 %sub95, i32* %tx_sent94, align 8, !tbaa !34
  br label %if.end111

if.else:                                          ; preds = %if.end87
  %30 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %tx_sent96 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %31 = load i32, i32* %tx_sent96, align 8, !tbaa !34
  %sub97 = sub i32 %30, %31
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 23
  %32 = load i32, i32* %tx_next_seq, align 32, !tbaa !30
  %add98 = add i32 %32, %sub97
  store i32 %add98, i32* %tx_next_seq, align 32, !tbaa !30
  %33 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %tx_sent99 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %34 = load i32, i32* %tx_sent99, align 8, !tbaa !34
  %sub100 = sub i32 %33, %34
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 22
  %35 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %add101 = add i32 %35, %sub100
  store i32 %add101, i32* %tx_next_pos, align 4, !tbaa !17
  %tx_next_pos102 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 22
  %36 = load i32, i32* %tx_next_pos102, align 4, !tbaa !17
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 4
  %37 = load i32, i32* %tx_len, align 4, !tbaa !33
  %cmp103 = icmp uge i32 %36, %37
  br i1 %cmp103, label %if.then105, label %if.end109

if.then105:                                       ; preds = %if.else
  %tx_len106 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 4
  %38 = load i32, i32* %tx_len106, align 4, !tbaa !33
  %tx_next_pos107 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 22
  %39 = load i32, i32* %tx_next_pos107, align 4, !tbaa !17
  %sub108 = sub i32 %39, %38
  store i32 %sub108, i32* %tx_next_pos107, align 4, !tbaa !17
  br label %if.end109

if.end109:                                        ; preds = %if.then105, %if.else
  %tx_sent110 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  store i32 0, i32* %tx_sent110, align 8, !tbaa !34
  br label %if.end111

if.end111:                                        ; preds = %if.end109, %if.then93
  %40 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %cmp112 = icmp ne i32 %40, 0
  %conv113 = zext i1 %cmp112 to i32
  %conv114 = sext i32 %conv113 to i64
  %expval115 = call i64 @llvm.expect.i64(i64 %conv114, i64 0)
  %tobool116 = icmp ne i64 %expval115, 0
  br i1 %tobool116, label %if.then117, label %if.else118

if.then117:                                       ; preds = %if.end111
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4, !tbaa !71
  br label %if.end133

if.else118:                                       ; preds = %if.end111
  %cmp119 = icmp eq i32 %conv13, 0
  br i1 %cmp119, label %land.rhs121, label %land.end126

land.rhs121:                                      ; preds = %if.else118
  %rx_dupack_cnt122 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 18
  %41 = load i32, i32* %rx_dupack_cnt122, align 4, !tbaa !71
  %inc123 = add i32 %41, 1
  store i32 %inc123, i32* %rx_dupack_cnt122, align 4, !tbaa !71
  %cmp124 = icmp uge i32 %inc123, 3
  br label %land.end126

land.end126:                                      ; preds = %land.rhs121, %if.else118
  %42 = phi i1 [ false, %if.else118 ], [ %cmp124, %land.rhs121 ]
  %land.ext127 = zext i1 %42 to i32
  %conv128 = sext i32 %land.ext127 to i64
  %expval129 = call i64 @llvm.expect.i64(i64 %conv128, i64 0)
  %tobool130 = icmp ne i64 %expval129, 0
  br i1 %tobool130, label %if.then131, label %if.end132

if.then131:                                       ; preds = %land.end126
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %2)
  br label %unlock

if.end132:                                        ; preds = %land.end126
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.then117
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %land.end
  %conv135 = trunc i32 %conv13 to i16
  %call136 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %2, i32 %call43, i16 zeroext %conv135, i16* %trim_start, i16* %trim_end)
  %cmp137 = icmp ne i32 %call136, 0
  %conv138 = zext i1 %cmp137 to i32
  %conv139 = sext i32 %conv138 to i64
  %expval140 = call i64 @llvm.expect.i64(i64 %conv139, i64 0)
  %tobool141 = icmp ne i64 %expval140, 0
  br i1 %tobool141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end134
  br label %unlock

if.end143:                                        ; preds = %if.end134
  %43 = load i16, i16* %trim_start, align 2, !tbaa !42
  %conv144 = zext i16 %43 to i32
  %44 = load i16, i16* %trim_end, align 2, !tbaa !42
  %conv145 = zext i16 %44 to i32
  %add146 = add nsw i32 %conv144, %conv145
  %sub147 = sub i32 %conv13, %add146
  %45 = load i16, i16* %trim_start, align 2, !tbaa !42
  %conv148 = zext i16 %45 to i32
  %add149 = add i32 %conv7, %conv148
  %46 = bitcast %struct.pkt_tcp* %0 to i8*
  %idx.ext = zext i32 %add149 to i64
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 %idx.ext
  %47 = bitcast i8* %add.ptr to %struct.obj_hdr*
  %48 = load i16, i16* %trim_start, align 2, !tbaa !42
  %conv150 = zext i16 %48 to i32
  %add151 = add i32 %call43, %conv150
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %49 = load i32, i32* %rx_next_seq, align 4, !tbaa !32
  %cmp152 = icmp ne i32 %add151, %49
  %conv153 = zext i1 %cmp152 to i32
  %conv154 = sext i32 %conv153 to i64
  %expval155 = call i64 @llvm.expect.i64(i64 %conv154, i64 0)
  %tobool156 = icmp ne i64 %expval155, 0
  br i1 %tobool156, label %if.then157, label %if.end190

if.then157:                                       ; preds = %if.end143
  %cmp158 = icmp eq i32 %sub147, 0
  br i1 %cmp158, label %if.then160, label %if.end161

if.then160:                                       ; preds = %if.then157
  br label %unlock

if.end161:                                        ; preds = %if.then157
  %rx_ooo_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %50 = load i32, i32* %rx_ooo_len, align 4, !tbaa !72
  %cmp162 = icmp eq i32 %50, 0
  br i1 %cmp162, label %if.then164, label %if.else167

if.then164:                                       ; preds = %if.end161
  %rx_ooo_start = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  store i32 %add151, i32* %rx_ooo_start, align 16, !tbaa !73
  %rx_ooo_len165 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  store i32 %sub147, i32* %rx_ooo_len165, align 4, !tbaa !72
  %conv166 = trunc i32 %sub147 to i16
  %51 = bitcast %struct.obj_hdr* %47 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %2, i32 %add151, i16 zeroext %conv166, i8* %51)
  br label %if.end189

if.else167:                                       ; preds = %if.end161
  %add168 = add i32 %add151, %sub147
  %rx_ooo_start169 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  %52 = load i32, i32* %rx_ooo_start169, align 16, !tbaa !73
  %cmp170 = icmp eq i32 %add168, %52
  br i1 %cmp170, label %if.then172, label %if.else177

if.then172:                                       ; preds = %if.else167
  %rx_ooo_start173 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  store i32 %add151, i32* %rx_ooo_start173, align 16, !tbaa !73
  %rx_ooo_len174 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %53 = load i32, i32* %rx_ooo_len174, align 4, !tbaa !72
  %add175 = add i32 %53, %sub147
  store i32 %add175, i32* %rx_ooo_len174, align 4, !tbaa !72
  %conv176 = trunc i32 %sub147 to i16
  %54 = bitcast %struct.obj_hdr* %47 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %2, i32 %add151, i16 zeroext %conv176, i8* %54)
  br label %if.end188

if.else177:                                       ; preds = %if.else167
  %rx_ooo_start178 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  %55 = load i32, i32* %rx_ooo_start178, align 16, !tbaa !73
  %rx_ooo_len179 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %56 = load i32, i32* %rx_ooo_len179, align 4, !tbaa !72
  %add180 = add i32 %55, %56
  %cmp181 = icmp eq i32 %add180, %add151
  br i1 %cmp181, label %if.then183, label %if.end187

if.then183:                                       ; preds = %if.else177
  %rx_ooo_len184 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %57 = load i32, i32* %rx_ooo_len184, align 4, !tbaa !72
  %add185 = add i32 %57, %sub147
  store i32 %add185, i32* %rx_ooo_len184, align 4, !tbaa !72
  %conv186 = trunc i32 %sub147 to i16
  %58 = bitcast %struct.obj_hdr* %47 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %2, i32 %add151, i16 zeroext %conv186, i8* %58)
  br label %if.end187

if.end187:                                        ; preds = %if.then183, %if.else177
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then172
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then164
  br label %unlock

if.end190:                                        ; preds = %if.end143
  %59 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts191 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %59, i32 0, i32 0
  %60 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts191, align 8, !tbaa !60
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %60, i32 0, i32 2
  %coerce.dive192 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_val, i32 0, i32 0
  %61 = load i32, i32* %coerce.dive192, align 1
  %call193 = call i32 @f_beui32(i32 %61)
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 25
  store i32 %call193, i32* %tx_next_ts, align 8, !tbaa !36
  %tcp194 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags195 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp194, i32 0, i32 4
  %62 = load i16, i16* %_hdrlen_rsvd_flags195, align 1, !tbaa !53
  %call196 = call zeroext i16 @__bswap_16(i16 zeroext %62)
  %conv197 = zext i16 %call196 to i32
  %and198 = and i32 %conv197, 511
  %and199 = and i32 %and198, 16
  %cmp200 = icmp eq i32 %and199, 16
  br i1 %cmp200, label %land.rhs202, label %land.end208

land.rhs202:                                      ; preds = %if.end190
  %63 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts203 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %63, i32 0, i32 0
  %64 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts203, align 8, !tbaa !60
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %64, i32 0, i32 3
  %coerce.dive204 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr, i32 0, i32 0
  %65 = load i32, i32* %coerce.dive204, align 1
  %call205 = call i32 @f_beui32(i32 %65)
  %cmp206 = icmp ne i32 %call205, 0
  br label %land.end208

land.end208:                                      ; preds = %land.rhs202, %if.end190
  %66 = phi i1 [ false, %if.end190 ], [ %cmp206, %land.rhs202 ]
  %land.ext209 = zext i1 %66 to i32
  %conv210 = sext i32 %land.ext209 to i64
  %expval211 = call i64 @llvm.expect.i64(i64 %conv210, i64 1)
  %tobool212 = icmp ne i64 %expval211, 0
  br i1 %tobool212, label %if.then213, label %if.end236

if.then213:                                       ; preds = %land.end208
  %67 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts214 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %67, i32 0, i32 0
  %68 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts214, align 8, !tbaa !60
  %ts_ecr215 = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %68, i32 0, i32 3
  %coerce.dive216 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr215, i32 0, i32 0
  %69 = load i32, i32* %coerce.dive216, align 1
  %call217 = call i32 @f_beui32(i32 %69)
  %sub218 = sub i32 %ts, %call217
  %cmp219 = icmp ult i32 %sub218, 100000
  br i1 %cmp219, label %if.then221, label %if.end235

if.then221:                                       ; preds = %if.then213
  %rtt_est = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 31
  %70 = load i32, i32* %rtt_est, align 4, !tbaa !74
  %cmp222 = icmp ne i32 %70, 0
  %conv223 = zext i1 %cmp222 to i32
  %conv224 = sext i32 %conv223 to i64
  %expval225 = call i64 @llvm.expect.i64(i64 %conv224, i64 1)
  %tobool226 = icmp ne i64 %expval225, 0
  br i1 %tobool226, label %if.then227, label %if.else232

if.then227:                                       ; preds = %if.then221
  %rtt_est228 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 31
  %71 = load i32, i32* %rtt_est228, align 4, !tbaa !74
  %mul229 = mul i32 %71, 7
  %add230 = add i32 %mul229, %sub218
  %div = udiv i32 %add230, 8
  %rtt_est231 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 31
  store i32 %div, i32* %rtt_est231, align 4, !tbaa !74
  br label %if.end234

if.else232:                                       ; preds = %if.then221
  %rtt_est233 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 31
  store i32 %sub218, i32* %rtt_est233, align 4, !tbaa !74
  br label %if.end234

if.end234:                                        ; preds = %if.else232, %if.then227
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.then213
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %land.end208
  %tcp237 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp237, i32 0, i32 5
  %coerce.dive238 = getelementptr inbounds %struct.beui16, %struct.beui16* %wnd, i32 0, i32 0
  %72 = load i16, i16* %coerce.dive238, align 1
  %call239 = call zeroext i16 @f_beui16(i16 %72)
  %conv240 = zext i16 %call239 to i32
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 17
  store i32 %conv240, i32* %rx_remote_avail, align 8, !tbaa !38
  %rx_base_sp241 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %73 = load i64, i64* %rx_base_sp241, align 8, !tbaa !28
  %and242 = and i64 %73, 32
  %cmp243 = icmp eq i64 %and242, 32
  br i1 %cmp243, label %land.lhs.true, label %if.end248

land.lhs.true:                                    ; preds = %if.end236
  %cmp245 = icmp ugt i32 %sub147, 0
  br i1 %cmp245, label %if.then247, label %if.end248

if.then247:                                       ; preds = %land.lhs.true
  br label %unlock

if.end248:                                        ; preds = %land.lhs.true, %if.end236
  %rx_base_sp249 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %74 = load i64, i64* %rx_base_sp249, align 8, !tbaa !28
  %and250 = and i64 %74, 2
  %expval251 = call i64 @llvm.expect.i64(i64 %and250, i64 0)
  %tobool252 = icmp ne i64 %expval251, 0
  br i1 %tobool252, label %if.then253, label %if.end327

if.then253:                                       ; preds = %if.end248
  %rx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 33
  %75 = load i32, i32* %rx_objrem, align 4, !tbaa !75
  %cmp254 = icmp eq i32 %75, 0
  br i1 %cmp254, label %land.lhs.true256, label %if.end319

land.lhs.true256:                                 ; preds = %if.then253
  %cmp257 = icmp ugt i32 %sub147, 0
  br i1 %cmp257, label %if.then259, label %if.end319

if.then259:                                       ; preds = %land.lhs.true256
  %conv260 = zext i32 %sub147 to i64
  %cmp261 = icmp ult i64 %conv260, 8
  br i1 %cmp261, label %if.then268, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then259
  %conv263 = zext i32 %sub147 to i64
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 3
  %76 = load i8, i8* %dstlen, align 1, !tbaa !2
  %conv264 = zext i8 %76 to i64
  %add265 = add i64 8, %conv264
  %cmp266 = icmp ult i64 %conv263, %add265
  br i1 %cmp266, label %if.then268, label %if.end269

if.then268:                                       ; preds = %lor.lhs.false, %if.then259
  br label %slowpath

if.end269:                                        ; preds = %lor.lhs.false
  %magic = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 1
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %magic, i32 0, i32 0
  store i16 0, i16* %x, align 1, !tbaa !66
  %77 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %appctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %77, i32 0, i32 0
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 3
  %78 = load i16, i16* %id, align 8, !tbaa !19
  %idxprom = zext i16 %78 to i64
  %arrayidx = getelementptr inbounds [16 x [16 x %struct.flextcp_pl_appctx]], [16 x [16 x %struct.flextcp_pl_appctx]]* %appctx, i64 0, i64 %idxprom
  %db_id = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 10
  %79 = load i16, i16* %db_id, align 2, !tbaa !76
  %idxprom270 = zext i16 %79 to i64
  %arrayidx271 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %arrayidx, i64 0, i64 %idxprom270
  %appst_id = getelementptr inbounds %struct.flextcp_pl_appctx, %struct.flextcp_pl_appctx* %arrayidx271, i32 0, i32 4
  %80 = load i32, i32* %appst_id, align 1, !tbaa !77
  %81 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %appst272 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %81, i32 0, i32 4
  %idxprom273 = zext i32 %80 to i64
  %arrayidx274 = getelementptr inbounds [8 x %struct.flextcp_pl_appst], [8 x %struct.flextcp_pl_appst]* %appst272, i64 0, i64 %idxprom273
  %rx_base_sp275 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %82 = load i64, i64* %rx_base_sp275, align 8, !tbaa !28
  %and276 = and i64 %82, 4
  %cmp277 = icmp eq i64 %and276, 0
  br i1 %cmp277, label %if.then279, label %if.else285

if.then279:                                       ; preds = %if.end269
  %dst = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 4
  %arraydecay280 = getelementptr inbounds [0 x i8], [0 x i8]* %dst, i32 0, i32 0
  %dstlen281 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 3
  %83 = load i8, i8* %dstlen281, align 1, !tbaa !2
  %conv282 = zext i8 %83 to i32
  %call283 = call i32 @rte_hash_crc(i8* %arraydecay280, i32 %conv282, i32 0)
  %ctx_num = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %arrayidx274, i32 0, i32 0
  %84 = load i16, i16* %ctx_num, align 1, !tbaa !79
  %conv284 = zext i16 %84 to i32
  %rem = urem i32 %call283, %conv284
  br label %if.end303

if.else285:                                       ; preds = %if.end269
  store i64 0, i64* %steer_id, align 8, !tbaa !81
  %dstlen286 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 3
  %85 = load i8, i8* %dstlen286, align 1, !tbaa !2
  %conv287 = zext i8 %85 to i32
  %cmp288 = icmp sgt i32 %conv287, 8
  br i1 %cmp288, label %if.then290, label %if.end291

if.then290:                                       ; preds = %if.else285
  br label %slowpath

if.end291:                                        ; preds = %if.else285
  %86 = bitcast i64* %steer_id to i8*
  %dst292 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 4
  %arraydecay293 = getelementptr inbounds [0 x i8], [0 x i8]* %dst292, i32 0, i32 0
  %dstlen294 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 3
  %87 = load i8, i8* %dstlen294, align 1, !tbaa !2
  %conv295 = zext i8 %87 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 1 %arraydecay293, i64 %conv295, i1 false)
  %88 = load i64, i64* %steer_id, align 8, !tbaa !81
  %ctx_num296 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %arrayidx274, i32 0, i32 0
  %89 = load i16, i16* %ctx_num296, align 1, !tbaa !79
  %conv297 = zext i16 %89 to i64
  %cmp298 = icmp uge i64 %88, %conv297
  br i1 %cmp298, label %if.then300, label %if.end301

if.then300:                                       ; preds = %if.end291
  br label %slowpath

if.end301:                                        ; preds = %if.end291
  %90 = load i64, i64* %steer_id, align 8, !tbaa !81
  %conv302 = trunc i64 %90 to i32
  br label %if.end303

if.end303:                                        ; preds = %if.end301, %if.then279
  %i.0 = phi i32 [ %rem, %if.then279 ], [ %conv302, %if.end301 ]
  %ctx_ids = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %arrayidx274, i32 0, i32 1
  %idxprom304 = zext i32 %i.0 to i64
  %arrayidx305 = getelementptr inbounds [31 x i16], [31 x i16]* %ctx_ids, i64 0, i64 %idxprom304
  %91 = load i16, i16* %arrayidx305, align 1, !tbaa !42
  %conv306 = zext i16 %91 to i32
  %conv307 = trunc i32 %conv306 to i16
  %db_id308 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 10
  store i16 %conv307, i16* %db_id308, align 2, !tbaa !76
  %dstlen309 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 3
  %92 = load i8, i8* %dstlen309, align 1, !tbaa !2
  %conv310 = zext i8 %92 to i64
  %add311 = add i64 8, %conv310
  %len312 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %47, i32 0, i32 0
  %coerce.dive313 = getelementptr inbounds %struct.beui32, %struct.beui32* %len312, i32 0, i32 0
  %93 = load i32, i32* %coerce.dive313, align 1
  %call314 = call i32 @f_beui32(i32 %93)
  %conv315 = zext i32 %call314 to i64
  %add316 = add i64 %add311, %conv315
  %conv317 = trunc i64 %add316 to i32
  %rx_objrem318 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 33
  store i32 %conv317, i32* %rx_objrem318, align 4, !tbaa !75
  br label %if.end319

if.end319:                                        ; preds = %if.end303, %land.lhs.true256, %if.then253
  %rx_objrem320 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 33
  %94 = load i32, i32* %rx_objrem320, align 4, !tbaa !75
  %cmp321 = icmp ugt i32 %sub147, %94
  br i1 %cmp321, label %if.then323, label %if.end324

if.then323:                                       ; preds = %if.end319
  br label %slowpath

if.end324:                                        ; preds = %if.end319
  %rx_objrem325 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 33
  %95 = load i32, i32* %rx_objrem325, align 4, !tbaa !75
  %sub326 = sub i32 %95, %sub147
  store i32 %sub326, i32* %rx_objrem325, align 4, !tbaa !75
  br label %if.end327

if.end327:                                        ; preds = %if.end324, %if.end248
  %cmp328 = icmp ugt i32 %sub147, 0
  br i1 %cmp328, label %if.then330, label %if.end403

if.then330:                                       ; preds = %if.end327
  %rx_next_pos331 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %96 = load i32, i32* %rx_next_pos331, align 64, !tbaa !67
  %conv332 = trunc i32 %sub147 to i16
  %97 = bitcast %struct.obj_hdr* %47 to i8*
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %2, i32 %96, i16 zeroext %conv332, i8* %97)
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 14
  %98 = load i32, i32* %rx_avail, align 4, !tbaa !31
  %sub333 = sub i32 %98, %sub147
  store i32 %sub333, i32* %rx_avail, align 4, !tbaa !31
  %rx_next_pos334 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %99 = load i32, i32* %rx_next_pos334, align 64, !tbaa !67
  %add335 = add i32 %99, %sub147
  store i32 %add335, i32* %rx_next_pos334, align 64, !tbaa !67
  %rx_next_pos336 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %100 = load i32, i32* %rx_next_pos336, align 64, !tbaa !67
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 3
  %101 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp337 = icmp uge i32 %100, %101
  br i1 %cmp337, label %if.then339, label %if.end343

if.then339:                                       ; preds = %if.then330
  %rx_len340 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 3
  %102 = load i32, i32* %rx_len340, align 8, !tbaa !82
  %rx_next_pos341 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %103 = load i32, i32* %rx_next_pos341, align 64, !tbaa !67
  %sub342 = sub i32 %103, %102
  store i32 %sub342, i32* %rx_next_pos341, align 64, !tbaa !67
  br label %if.end343

if.end343:                                        ; preds = %if.then339, %if.then330
  %rx_next_seq344 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %104 = load i32, i32* %rx_next_seq344, align 4, !tbaa !32
  %add345 = add i32 %104, %sub147
  store i32 %add345, i32* %rx_next_seq344, align 4, !tbaa !32
  %rx_ooo_len346 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %105 = load i32, i32* %rx_ooo_len346, align 4, !tbaa !72
  %cmp347 = icmp ne i32 %105, 0
  %conv348 = zext i1 %cmp347 to i32
  %conv349 = sext i32 %conv348 to i64
  %expval350 = call i64 @llvm.expect.i64(i64 %conv349, i64 0)
  %tobool351 = icmp ne i64 %expval350, 0
  br i1 %tobool351, label %if.then352, label %if.end402

if.then352:                                       ; preds = %if.end343
  %rx_ooo_start353 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  %106 = load i32, i32* %rx_ooo_start353, align 16, !tbaa !73
  %rx_ooo_len354 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %107 = load i32, i32* %rx_ooo_len354, align 4, !tbaa !72
  %conv355 = trunc i32 %107 to i16
  %call356 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %2, i32 %106, i16 zeroext %conv355, i16* %trim_start, i16* %trim_end)
  %cmp357 = icmp ne i32 %call356, 0
  br i1 %cmp357, label %if.then359, label %if.else361

if.then359:                                       ; preds = %if.then352
  %rx_ooo_len360 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len360, align 4, !tbaa !72
  br label %if.end401

if.else361:                                       ; preds = %if.then352
  %108 = load i16, i16* %trim_start, align 2, !tbaa !42
  %conv362 = zext i16 %108 to i32
  %rx_ooo_start363 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  %109 = load i32, i32* %rx_ooo_start363, align 16, !tbaa !73
  %add364 = add i32 %109, %conv362
  store i32 %add364, i32* %rx_ooo_start363, align 16, !tbaa !73
  %110 = load i16, i16* %trim_start, align 2, !tbaa !42
  %conv365 = zext i16 %110 to i32
  %111 = load i16, i16* %trim_end, align 2, !tbaa !42
  %conv366 = zext i16 %111 to i32
  %add367 = add nsw i32 %conv365, %conv366
  %rx_ooo_len368 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %112 = load i32, i32* %rx_ooo_len368, align 4, !tbaa !72
  %sub369 = sub i32 %112, %add367
  store i32 %sub369, i32* %rx_ooo_len368, align 4, !tbaa !72
  %rx_ooo_len370 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %113 = load i32, i32* %rx_ooo_len370, align 4, !tbaa !72
  %cmp371 = icmp ugt i32 %113, 0
  br i1 %cmp371, label %land.lhs.true373, label %if.end400

land.lhs.true373:                                 ; preds = %if.else361
  %rx_ooo_start374 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 19
  %114 = load i32, i32* %rx_ooo_start374, align 16, !tbaa !73
  %rx_next_seq375 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %115 = load i32, i32* %rx_next_seq375, align 4, !tbaa !32
  %cmp376 = icmp eq i32 %114, %115
  br i1 %cmp376, label %if.then378, label %if.end400

if.then378:                                       ; preds = %land.lhs.true373
  %rx_ooo_len379 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %116 = load i32, i32* %rx_ooo_len379, align 4, !tbaa !72
  %add380 = add i32 %sub147, %116
  %rx_ooo_len381 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %117 = load i32, i32* %rx_ooo_len381, align 4, !tbaa !72
  %rx_avail382 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 14
  %118 = load i32, i32* %rx_avail382, align 4, !tbaa !31
  %sub383 = sub i32 %118, %117
  store i32 %sub383, i32* %rx_avail382, align 4, !tbaa !31
  %rx_ooo_len384 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %119 = load i32, i32* %rx_ooo_len384, align 4, !tbaa !72
  %rx_next_pos385 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %120 = load i32, i32* %rx_next_pos385, align 64, !tbaa !67
  %add386 = add i32 %120, %119
  store i32 %add386, i32* %rx_next_pos385, align 64, !tbaa !67
  %rx_next_pos387 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %121 = load i32, i32* %rx_next_pos387, align 64, !tbaa !67
  %rx_len388 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 3
  %122 = load i32, i32* %rx_len388, align 8, !tbaa !82
  %cmp389 = icmp uge i32 %121, %122
  br i1 %cmp389, label %if.then391, label %if.end395

if.then391:                                       ; preds = %if.then378
  %rx_len392 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 3
  %123 = load i32, i32* %rx_len392, align 8, !tbaa !82
  %rx_next_pos393 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 15
  %124 = load i32, i32* %rx_next_pos393, align 64, !tbaa !67
  %sub394 = sub i32 %124, %123
  store i32 %sub394, i32* %rx_next_pos393, align 64, !tbaa !67
  br label %if.end395

if.end395:                                        ; preds = %if.then391, %if.then378
  %rx_ooo_len396 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %125 = load i32, i32* %rx_ooo_len396, align 4, !tbaa !72
  %rx_next_seq397 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %126 = load i32, i32* %rx_next_seq397, align 4, !tbaa !32
  %add398 = add i32 %126, %125
  store i32 %add398, i32* %rx_next_seq397, align 4, !tbaa !32
  %rx_ooo_len399 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len399, align 4, !tbaa !72
  br label %if.end400

if.end400:                                        ; preds = %if.end395, %land.lhs.true373, %if.else361
  %rx_bump.0 = phi i32 [ %add380, %if.end395 ], [ %sub147, %land.lhs.true373 ], [ %sub147, %if.else361 ]
  br label %if.end401

if.end401:                                        ; preds = %if.end400, %if.then359
  %rx_bump.1 = phi i32 [ %sub147, %if.then359 ], [ %rx_bump.0, %if.end400 ]
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.end343
  %rx_bump.2 = phi i32 [ %rx_bump.1, %if.end401 ], [ %sub147, %if.end343 ]
  br label %if.end403

if.end403:                                        ; preds = %if.end402, %if.end327
  %rx_bump.3 = phi i32 [ %rx_bump.2, %if.end402 ], [ 0, %if.end327 ]
  %trigger_ack.1 = phi i32 [ 1, %if.end402 ], [ %trigger_ack.0, %if.end327 ]
  %tcp404 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %_hdrlen_rsvd_flags405 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp404, i32 0, i32 4
  %127 = load i16, i16* %_hdrlen_rsvd_flags405, align 1, !tbaa !53
  %call406 = call zeroext i16 @__bswap_16(i16 zeroext %127)
  %conv407 = zext i16 %call406 to i32
  %and408 = and i32 %conv407, 511
  %and409 = and i32 %and408, 1
  %cmp410 = icmp eq i32 %and409, 1
  br i1 %cmp410, label %land.lhs.true412, label %if.end435

land.lhs.true412:                                 ; preds = %if.end403
  %rx_base_sp413 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %128 = load i64, i64* %rx_base_sp413, align 8, !tbaa !28
  %and414 = and i64 %128, 32
  %tobool415 = icmp ne i64 %and414, 0
  br i1 %tobool415, label %if.end435, label %if.then416

if.then416:                                       ; preds = %land.lhs.true412
  %rx_next_seq417 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %129 = load i32, i32* %rx_next_seq417, align 4, !tbaa !32
  %tcp418 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 2
  %seqno419 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp418, i32 0, i32 2
  %coerce.dive420 = getelementptr inbounds %struct.beui32, %struct.beui32* %seqno419, i32 0, i32 0
  %130 = load i32, i32* %coerce.dive420, align 1
  %call421 = call i32 @f_beui32(i32 %130)
  %add422 = add i32 %call421, %conv13
  %cmp423 = icmp eq i32 %129, %add422
  br i1 %cmp423, label %land.lhs.true425, label %if.else432

land.lhs.true425:                                 ; preds = %if.then416
  %rx_ooo_len426 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 20
  %131 = load i32, i32* %rx_ooo_len426, align 4, !tbaa !72
  %tobool427 = icmp ne i32 %131, 0
  br i1 %tobool427, label %if.else432, label %if.then428

if.then428:                                       ; preds = %land.lhs.true425
  %rx_base_sp429 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %132 = load i64, i64* %rx_base_sp429, align 8, !tbaa !28
  %or = or i64 %132, 32
  store i64 %or, i64* %rx_base_sp429, align 8, !tbaa !28
  %rx_next_seq430 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %133 = load i32, i32* %rx_next_seq430, align 4, !tbaa !32
  %inc431 = add i32 %133, 1
  store i32 %inc431, i32* %rx_next_seq430, align 4, !tbaa !32
  br label %if.end434

if.else432:                                       ; preds = %land.lhs.true425, %if.then416
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call433 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end434

if.end434:                                        ; preds = %if.else432, %if.then428
  %trigger_ack.2 = phi i32 [ %trigger_ack.1, %if.else432 ], [ 1, %if.then428 ]
  %fin_bump.0 = phi i32 [ 0, %if.else432 ], [ 1, %if.then428 ]
  br label %if.end435

if.end435:                                        ; preds = %if.end434, %land.lhs.true412, %if.end403
  %trigger_ack.3 = phi i32 [ %trigger_ack.1, %land.lhs.true412 ], [ %trigger_ack.2, %if.end434 ], [ %trigger_ack.1, %if.end403 ]
  %fin_bump.1 = phi i32 [ 0, %land.lhs.true412 ], [ %fin_bump.0, %if.end434 ], [ 0, %if.end403 ]
  br label %unlock

unlock:                                           ; preds = %if.end435, %if.then247, %if.end189, %if.then160, %if.then142, %if.then131
  %rx_bump.4 = phi i32 [ 0, %if.then142 ], [ 0, %if.then160 ], [ 0, %if.end189 ], [ 0, %if.then247 ], [ %rx_bump.3, %if.end435 ], [ 0, %if.then131 ]
  %trigger_ack.4 = phi i32 [ %trigger_ack.0, %if.then142 ], [ 1, %if.then160 ], [ 1, %if.end189 ], [ %trigger_ack.0, %if.then247 ], [ %trigger_ack.3, %if.end435 ], [ %trigger_ack.0, %if.then131 ]
  %fin_bump.2 = phi i32 [ 0, %if.then142 ], [ 0, %if.then160 ], [ 0, %if.end189 ], [ 0, %if.then247 ], [ %fin_bump.1, %if.end435 ], [ 0, %if.then131 ]
  %cmp436 = icmp ne i32 %rx_bump.4, 0
  br i1 %cmp436, label %lor.end, label %lor.lhs.false438

lor.lhs.false438:                                 ; preds = %unlock
  %135 = load i32, i32* %tx_bump, align 4, !tbaa !7
  %cmp439 = icmp ne i32 %135, 0
  br i1 %cmp439, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false438
  %tobool441 = icmp ne i32 %fin_bump.2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false438, %unlock
  %136 = phi i1 [ true, %lor.lhs.false438 ], [ true, %unlock ], [ %tobool441, %lor.rhs ]
  %lor.ext = zext i1 %136 to i32
  %conv442 = sext i32 %lor.ext to i64
  %expval443 = call i64 @llvm.expect.i64(i64 %conv442, i64 1)
  %tobool444 = icmp ne i64 %expval443, 0
  br i1 %tobool444, label %if.then445, label %if.end459

if.then445:                                       ; preds = %lor.end
  %rx_base_sp446 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %137 = load i64, i64* %rx_base_sp446, align 8, !tbaa !28
  %and447 = and i64 %137, 2
  %tobool448 = icmp ne i64 %and447, 0
  br i1 %tobool448, label %if.else450, label %if.then449

if.then449:                                       ; preds = %if.then445
  br label %if.end451

if.else450:                                       ; preds = %if.then445
  br label %if.end451

if.end451:                                        ; preds = %if.else450, %if.then449
  %type.0 = phi i16 [ 2, %if.else450 ], [ 1, %if.then449 ]
  %tobool452 = icmp ne i32 %fin_bump.2, 0
  br i1 %tobool452, label %if.then453, label %if.end457

if.then453:                                       ; preds = %if.end451
  %conv454 = zext i16 %type.0 to i32
  %or455 = or i32 %conv454, 256
  %conv456 = trunc i32 %or455 to i16
  br label %if.end457

if.end457:                                        ; preds = %if.then453, %if.end451
  %type.1 = phi i16 [ %conv456, %if.then453 ], [ %type.0, %if.end451 ]
  %db_id458 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 10
  %138 = load i16, i16* %db_id458, align 2, !tbaa !76
  %opaque = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 0
  %139 = load i64, i64* %opaque, align 64, !tbaa !83
  %140 = load i32, i32* %tx_bump, align 4, !tbaa !7
  call void @arx_cache_add(%struct.dataplane_context* %ctx, i16 zeroext %138, i64 %139, i32 %rx_bump.4, i32 %16, i32 %140, i16 zeroext %type.1)
  br label %if.end459

if.end459:                                        ; preds = %if.end457, %lor.end
  %call460 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %2, i32* null)
  %cmp461 = icmp ugt i32 %call460, %call40
  br i1 %cmp461, label %if.then463, label %if.end490

if.then463:                                       ; preds = %if.end459
  %rx_base_sp464 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %141 = load i64, i64* %rx_base_sp464, align 8, !tbaa !28
  %and465 = and i64 %141, 2
  %tobool466 = icmp ne i64 %and465, 0
  br i1 %tobool466, label %if.else476, label %if.then467

if.then467:                                       ; preds = %if.then463
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %conv468 = zext i16 %conv to i32
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 26
  %142 = load i32, i32* %tx_rate, align 4, !tbaa !59
  %sub469 = sub i32 %call460, %call40
  %call470 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %conv468, i32 %142, i32 %sub469, i16 zeroext 1448, i8 zeroext 19)
  %cmp471 = icmp ne i32 %call470, 0
  br i1 %cmp471, label %if.then473, label %if.end475

if.then473:                                       ; preds = %if.then467
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call474 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %143, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end475:                                        ; preds = %if.then467
  br label %if.end489

if.else476:                                       ; preds = %if.then463
  %cmp477 = icmp eq i32 %call40, 0
  br i1 %cmp477, label %if.then479, label %if.end488

if.then479:                                       ; preds = %if.else476
  %qman480 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %conv481 = zext i16 %conv to i32
  %call482 = call i32 @qman_set(%struct.qman_thread* %qman480, i32 %conv481, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp483 = icmp ne i32 %call482, 0
  br i1 %cmp483, label %if.then485, label %if.end487

if.then485:                                       ; preds = %if.then479
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call486 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end487:                                        ; preds = %if.then479
  br label %if.end488

if.end488:                                        ; preds = %if.end487, %if.else476
  br label %if.end489

if.end489:                                        ; preds = %if.end488, %if.end475
  br label %if.end490

if.end490:                                        ; preds = %if.end489, %if.end459
  %tobool491 = icmp ne i32 %trigger_ack.4, 0
  br i1 %tobool491, label %if.then492, label %if.end498

if.then492:                                       ; preds = %if.end490
  %tx_next_seq493 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 23
  %145 = load i32, i32* %tx_next_seq493, align 32, !tbaa !30
  %rx_next_seq494 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %146 = load i32, i32* %rx_next_seq494, align 4, !tbaa !32
  %rx_avail495 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 14
  %147 = load i32, i32* %rx_avail495, align 4, !tbaa !31
  %tx_next_ts496 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 25
  %148 = load i32, i32* %tx_next_ts496, align 8, !tbaa !36
  %149 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts497 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %149, i32 0, i32 0
  %150 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts497, align 8, !tbaa !60
  call void @flow_tx_ack(%struct.dataplane_context* %ctx, i32 %145, i32 %146, i32 %147, i32 %148, i32 %ts, %struct.network_buf_handle* %nbh, %struct.tcp_timestamp_opt* %150)
  br label %if.end498

if.end498:                                        ; preds = %if.then492, %if.end490
  %lock499 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock499)
  br label %cleanup

slowpath:                                         ; preds = %if.then323, %if.then300, %if.then290, %if.then268, %if.end38, %if.then
  %no_permanent_sp.1 = phi i32 [ 0, %if.then ], [ %no_permanent_sp.0, %if.end38 ], [ 0, %if.then268 ], [ 0, %if.then323 ], [ 0, %if.then290 ], [ 0, %if.then300 ]
  %tobool500 = icmp ne i32 %no_permanent_sp.1, 0
  br i1 %tobool500, label %if.end504, label %if.then501

if.then501:                                       ; preds = %slowpath
  %rx_base_sp502 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %151 = load i64, i64* %rx_base_sp502, align 8, !tbaa !28
  %or503 = or i64 %151, 1
  store i64 %or503, i64* %rx_base_sp502, align 8, !tbaa !28
  br label %if.end504

if.end504:                                        ; preds = %if.then501, %slowpath
  %lock505 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock505)
  br label %cleanup

cleanup:                                          ; preds = %if.end504, %if.end498
  %retval.0 = phi i32 [ -1, %if.end504 ], [ %trigger_ack.4, %if.end498 ]
  %152 = bitcast i64* %steer_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %152) #6
  %153 = bitcast i16* %trim_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %153) #6
  %154 = bitcast i16* %trim_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %154) #6
  %155 = bitcast i32* %tx_bump to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %155) #6
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare void @llvm.var.annotation(i8*, i8*, i8*, i32) #6

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #7

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %fs, i32 %ack, i32* %bump) #1 {
entry:
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 23
  %0 = load i32, i32* %tx_next_seq, align 32, !tbaa !30
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %1 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %sub = sub i32 %0, %1
  %tx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 23
  %2 = load i32, i32* %tx_next_seq1, align 32, !tbaa !30
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %3 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 24
  %4 = load i32, i32* %tx_head, align 4, !tbaa !35
  %cmp = icmp ule i32 %3, %4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %tx_head2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 24
  %5 = load i32, i32* %tx_head2, align 4, !tbaa !35
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %6 = load i32, i32* %tx_next_pos3, align 4, !tbaa !17
  %sub4 = sub i32 %5, %6
  %add = add i32 %2, %sub4
  br label %if.end

if.else:                                          ; preds = %entry
  %tx_head5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 24
  %7 = load i32, i32* %tx_head5, align 4, !tbaa !35
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %8 = load i32, i32* %tx_next_pos6, align 4, !tbaa !17
  %sub7 = sub i32 %7, %8
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 4
  %9 = load i32, i32* %tx_len, align 4, !tbaa !33
  %add8 = add i32 %sub7, %9
  %add9 = add i32 %2, %add8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %fsack_b.0 = phi i32 [ %add, %if.then ], [ %add9, %if.else ]
  %cmp10 = icmp ule i32 %sub, %fsack_b.0
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end
  %cmp12 = icmp ult i32 %ack, %sub
  br i1 %cmp12, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then11
  %cmp13 = icmp ugt i32 %ack, %fsack_b.0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false, %if.then11
  br label %cleanup

if.end15:                                         ; preds = %lor.lhs.false
  %sub16 = sub i32 %ack, %sub
  store i32 %sub16, i32* %bump, align 4, !tbaa !7
  br label %cleanup

if.else17:                                        ; preds = %if.end
  %cmp18 = icmp ugt i32 %sub, %ack
  br i1 %cmp18, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %if.else17
  %cmp19 = icmp ugt i32 %ack, %fsack_b.0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true
  br label %cleanup

if.end21:                                         ; preds = %land.lhs.true, %if.else17
  %sub22 = sub i32 %ack, %sub
  store i32 %sub22, i32* %bump, align 4, !tbaa !7
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.then20, %if.end15, %if.then14
  %retval.0 = phi i32 [ -1, %if.then14 ], [ 0, %if.end15 ], [ -1, %if.then20 ], [ 0, %if.end21 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4, !tbaa !71
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %0 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 23
  %1 = load i32, i32* %tx_next_seq, align 32, !tbaa !30
  %sub = sub i32 %1, %0
  store i32 %sub, i32* %tx_next_seq, align 32, !tbaa !30
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %2 = load i32, i32* %tx_next_pos, align 4, !tbaa !17
  %tx_sent1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %3 = load i32, i32* %tx_sent1, align 8, !tbaa !34
  %cmp = icmp uge i32 %2, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %tx_sent2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %4 = load i32, i32* %tx_sent2, align 8, !tbaa !34
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %5 = load i32, i32* %tx_next_pos3, align 4, !tbaa !17
  %sub4 = sub i32 %5, %4
  store i32 %sub4, i32* %tx_next_pos3, align 4, !tbaa !17
  br label %if.end

if.else:                                          ; preds = %entry
  %tx_sent5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  %6 = load i32, i32* %tx_sent5, align 8, !tbaa !34
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  %7 = load i32, i32* %tx_next_pos6, align 4, !tbaa !17
  %sub7 = sub i32 %6, %7
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 4
  %8 = load i32, i32* %tx_len, align 4, !tbaa !33
  %sub8 = sub i32 %8, %sub7
  %tx_next_pos9 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 22
  store i32 %sub8, i32* %tx_next_pos9, align 4, !tbaa !17
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %tx_sent10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 21
  store i32 0, i32* %tx_sent10, align 8, !tbaa !34
  %cnt_tx_drops = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 27
  %9 = load i16, i16* %cnt_tx_drops, align 16, !tbaa !84
  %conv = zext i16 %9 to i32
  %cmp11 = icmp eq i32 %conv, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 26
  %10 = load i32, i32* %tx_rate, align 4, !tbaa !59
  %div = udiv i32 %10, 2
  store i32 %div, i32* %tx_rate, align 4, !tbaa !59
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  %cnt_tx_drops15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 27
  %11 = load i16, i16* %cnt_tx_drops15, align 16, !tbaa !84
  %inc = add i16 %11, 1
  store i16 %inc, i16* %cnt_tx_drops15, align 16, !tbaa !84
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %fs, i32 %pkt_seq, i16 zeroext %pkt_bytes, i16* %trim_start, i16* %trim_end) #1 {
entry:
  %conv = zext i16 %pkt_bytes to i32
  %add = add i32 %pkt_seq, %conv
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 16
  %0 = load i32, i32* %rx_next_seq, align 4, !tbaa !32
  %rx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 16
  %1 = load i32, i32* %rx_next_seq1, align 4, !tbaa !32
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 14
  %2 = load i32, i32* %rx_avail, align 4, !tbaa !31
  %add2 = add i32 %1, %2
  %cmp = icmp ule i32 %pkt_seq, %add
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %cmp4 = icmp ule i32 %0, %add2
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %cmp6 = icmp ult i32 %add, %0
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %cleanup

if.end:                                           ; preds = %if.then
  %cmp9 = icmp ugt i32 %pkt_seq, %add2
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  br label %cleanup

if.end12:                                         ; preds = %if.end
  %cmp13 = icmp ult i32 %pkt_seq, %0
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end12
  %sub = sub i32 %0, %pkt_seq
  br label %cond.end

cond.false:                                       ; preds = %if.end12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %conv15 = trunc i32 %cond to i16
  store i16 %conv15, i16* %trim_start, align 2, !tbaa !42
  %cmp16 = icmp ugt i32 %add, %add2
  br i1 %cmp16, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end
  %sub19 = sub i32 %add, %add2
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %sub19, %cond.true18 ], [ 0, %cond.false20 ]
  %conv23 = trunc i32 %cond22 to i16
  store i16 %conv23, i16* %trim_end, align 2, !tbaa !42
  br label %if.end113

if.else:                                          ; preds = %land.lhs.true, %entry
  %cmp24 = icmp ule i32 %pkt_seq, %add
  br i1 %cmp24, label %land.lhs.true26, label %if.else59

land.lhs.true26:                                  ; preds = %if.else
  %cmp27 = icmp ugt i32 %0, %add2
  br i1 %cmp27, label %if.then29, label %if.else59

if.then29:                                        ; preds = %land.lhs.true26
  %cmp30 = icmp ugt i32 %pkt_seq, %add2
  br i1 %cmp30, label %land.lhs.true32, label %if.end36

land.lhs.true32:                                  ; preds = %if.then29
  %cmp33 = icmp ult i32 %add, %0
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %land.lhs.true32
  br label %cleanup

if.end36:                                         ; preds = %land.lhs.true32, %if.then29
  %cmp37 = icmp ugt i32 %pkt_seq, %add2
  br i1 %cmp37, label %land.lhs.true39, label %cond.false44

land.lhs.true39:                                  ; preds = %if.end36
  %cmp40 = icmp ult i32 %pkt_seq, %0
  br i1 %cmp40, label %cond.true42, label %cond.false44

cond.true42:                                      ; preds = %land.lhs.true39
  %sub43 = sub i32 %0, %pkt_seq
  br label %cond.end45

cond.false44:                                     ; preds = %land.lhs.true39, %if.end36
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi i32 [ %sub43, %cond.true42 ], [ 0, %cond.false44 ]
  %conv47 = trunc i32 %cond46 to i16
  store i16 %conv47, i16* %trim_start, align 2, !tbaa !42
  %cmp48 = icmp uge i32 %add, %add2
  br i1 %cmp48, label %land.lhs.true50, label %cond.false55

land.lhs.true50:                                  ; preds = %cond.end45
  %cmp51 = icmp ult i32 %add, %0
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %land.lhs.true50
  %sub54 = sub i32 %add, %add2
  br label %cond.end56

cond.false55:                                     ; preds = %land.lhs.true50, %cond.end45
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %sub54, %cond.true53 ], [ 0, %cond.false55 ]
  %conv58 = trunc i32 %cond57 to i16
  store i16 %conv58, i16* %trim_end, align 2, !tbaa !42
  br label %if.end112

if.else59:                                        ; preds = %land.lhs.true26, %if.else
  %cmp60 = icmp ugt i32 %pkt_seq, %add
  br i1 %cmp60, label %land.lhs.true62, label %if.else94

land.lhs.true62:                                  ; preds = %if.else59
  %cmp63 = icmp ule i32 %0, %add2
  br i1 %cmp63, label %if.then65, label %if.else94

if.then65:                                        ; preds = %land.lhs.true62
  %cmp66 = icmp ugt i32 %pkt_seq, %add2
  br i1 %cmp66, label %land.lhs.true68, label %if.end72

land.lhs.true68:                                  ; preds = %if.then65
  %cmp69 = icmp ult i32 %add, %0
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %land.lhs.true68
  br label %cleanup

if.end72:                                         ; preds = %land.lhs.true68, %if.then65
  %cmp73 = icmp ule i32 %0, %add
  br i1 %cmp73, label %cond.true77, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end72
  %cmp75 = icmp ugt i32 %0, %pkt_seq
  br i1 %cmp75, label %cond.true77, label %cond.false79

cond.true77:                                      ; preds = %lor.lhs.false, %if.end72
  %sub78 = sub i32 %0, %pkt_seq
  br label %cond.end80

cond.false79:                                     ; preds = %lor.lhs.false
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false79, %cond.true77
  %cond81 = phi i32 [ %sub78, %cond.true77 ], [ 0, %cond.false79 ]
  %conv82 = trunc i32 %cond81 to i16
  store i16 %conv82, i16* %trim_start, align 2, !tbaa !42
  %cmp83 = icmp ugt i32 %add, %add2
  br i1 %cmp83, label %cond.true88, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %cond.end80
  %cmp86 = icmp uge i32 %0, %pkt_seq
  br i1 %cmp86, label %cond.true88, label %cond.false90

cond.true88:                                      ; preds = %lor.lhs.false85, %cond.end80
  %sub89 = sub i32 %add, %add2
  br label %cond.end91

cond.false90:                                     ; preds = %lor.lhs.false85
  br label %cond.end91

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi i32 [ %sub89, %cond.true88 ], [ 0, %cond.false90 ]
  %conv93 = trunc i32 %cond92 to i16
  store i16 %conv93, i16* %trim_end, align 2, !tbaa !42
  br label %if.end111

if.else94:                                        ; preds = %land.lhs.true62, %if.else59
  %cmp95 = icmp ult i32 %pkt_seq, %0
  br i1 %cmp95, label %cond.true97, label %cond.false99

cond.true97:                                      ; preds = %if.else94
  %sub98 = sub i32 %0, %pkt_seq
  br label %cond.end100

cond.false99:                                     ; preds = %if.else94
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi i32 [ %sub98, %cond.true97 ], [ 0, %cond.false99 ]
  %conv102 = trunc i32 %cond101 to i16
  store i16 %conv102, i16* %trim_start, align 2, !tbaa !42
  %cmp103 = icmp ugt i32 %add, %add2
  br i1 %cmp103, label %cond.true105, label %cond.false107

cond.true105:                                     ; preds = %cond.end100
  %sub106 = sub i32 %add, %add2
  br label %cond.end108

cond.false107:                                    ; preds = %cond.end100
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi i32 [ %sub106, %cond.true105 ], [ 0, %cond.false107 ]
  %conv110 = trunc i32 %cond109 to i16
  store i16 %conv110, i16* %trim_end, align 2, !tbaa !42
  br label %if.end111

if.end111:                                        ; preds = %cond.end108, %cond.end91
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %cond.end56
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %cond.end21
  br label %cleanup

cleanup:                                          ; preds = %if.end113, %if.then71, %if.then35, %if.then11, %if.then8
  %retval.0 = phi i32 [ -1, %if.then8 ], [ -1, %if.then11 ], [ 0, %if.end113 ], [ -1, %if.then35 ], [ -1, %if.then71 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %fs, i32 %seq, i16 zeroext %len, i8* %src) #0 {
entry:
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 16
  %0 = load i32, i32* %rx_next_seq, align 4, !tbaa !32
  %sub = sub i32 %seq, %0
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 15
  %1 = load i32, i32* %rx_next_pos, align 64, !tbaa !67
  %add = add i32 %1, %sub
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 3
  %2 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp = icmp uge i32 %add, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %rx_len1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 3
  %3 = load i32, i32* %rx_len1, align 8, !tbaa !82
  %sub2 = sub i32 %add, %3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %pos.0 = phi i32 [ %sub2, %if.then ], [ %add, %entry ]
  %rx_len3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 3
  %4 = load i32, i32* %rx_len3, align 8, !tbaa !82
  %cmp4 = icmp ult i32 %pos.0, %4
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  br label %if.end6

if.else:                                          ; preds = %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i32 809, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.flow_rx_seq_write, i32 0, i32 0)) #11
  unreachable

if.end6:                                          ; preds = %if.then5
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %fs, i32 %pos.0, i16 zeroext %len, i8* %src)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc(i8* %data, i32 %data_len, i32 %init_val) #1 {
entry:
  %0 = ptrtoint i8* %data to i64
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %init_val.addr.0 = phi i32 [ %init_val, %entry ], [ %call, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %pd.0 = phi i64 [ %0, %entry ], [ %add, %for.inc ]
  %div = udiv i32 %data_len, 8
  %cmp = icmp ult i32 %i.0, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = inttoptr i64 %pd.0 to i64*
  %2 = load i64, i64* %1, align 8, !tbaa !81
  %call = call i32 @rte_hash_crc_8byte(i64 %2, i32 %init_val.addr.0)
  %add = add i64 %pd.0, 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %and = and i32 %data_len, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %3 = inttoptr i64 %pd.0 to i32*
  %4 = load i32, i32* %3, align 4, !tbaa !7
  %call1 = call i32 @rte_hash_crc_4byte(i32 %4, i32 %init_val.addr.0)
  %add2 = add i64 %pd.0, 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %init_val.addr.1 = phi i32 [ %call1, %if.then ], [ %init_val.addr.0, %for.end ]
  %pd.1 = phi i64 [ %add2, %if.then ], [ %pd.0, %for.end ]
  %and3 = and i32 %data_len, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %5 = inttoptr i64 %pd.1 to i16*
  %6 = load i16, i16* %5, align 2, !tbaa !42
  %call6 = call i32 @rte_hash_crc_2byte(i16 zeroext %6, i32 %init_val.addr.1)
  %add7 = add i64 %pd.1, 2
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %init_val.addr.2 = phi i32 [ %call6, %if.then5 ], [ %init_val.addr.1, %if.end ]
  %pd.2 = phi i64 [ %add7, %if.then5 ], [ %pd.1, %if.end ]
  %and9 = and i32 %data_len, 1
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end8
  %7 = inttoptr i64 %pd.2 to i8*
  %8 = load i8, i8* %7, align 1, !tbaa !2
  %call12 = call i32 @rte_hash_crc_1byte(i8 zeroext %8, i32 %init_val.addr.2)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end8
  %init_val.addr.3 = phi i32 [ %call12, %if.then11 ], [ %init_val.addr.2, %if.end8 ]
  ret i32 %init_val.addr.3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: nounwind uwtable
define internal void @flow_rx_write(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %src) #0 {
entry:
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 1
  %0 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %0, -64
  %conv = zext i16 %len to i32
  %add = add i32 %pos, %conv
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 3
  %1 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp = icmp ule i32 %add, %1
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv3 = zext i32 %pos to i64
  %add4 = add i64 %and, %conv3
  %conv5 = zext i16 %len to i64
  call void @dma_write(i64 %add4, i64 %conv5, i8* %src)
  br label %if.end

if.else:                                          ; preds = %entry
  %rx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %fs, i32 0, i32 3
  %2 = load i32, i32* %rx_len6, align 8, !tbaa !82
  %sub = sub i32 %2, %pos
  %conv7 = zext i32 %pos to i64
  %add8 = add i64 %and, %conv7
  %conv9 = zext i32 %sub to i64
  call void @dma_write(i64 %add8, i64 %conv9, i8* %src)
  %conv10 = zext i16 %len to i32
  %sub11 = sub i32 %conv10, %sub
  %conv12 = zext i32 %sub11 to i64
  %idx.ext = zext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8, i8* %src, i64 %idx.ext
  call void @dma_write(i64 %and, i64 %conv12, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @arx_cache_add(%struct.dataplane_context* %ctx, i16 zeroext %ctx_id, i64 %opaque, i32 %rx_bump, i32 %rx_pos, i32 %tx_bump, i16 zeroext %type_flags) #1 {
entry:
  %arx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 8
  %0 = load i16, i16* %arx_num, align 8, !tbaa !85
  %inc = add i16 %0, 1
  store i16 %inc, i16* %arx_num, align 8, !tbaa !85
  %arx_ctx = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 7
  %idxprom = zext i16 %0 to i64
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* %arx_ctx, i64 0, i64 %idxprom
  store i16 %ctx_id, i16* %arrayidx, align 2, !tbaa !42
  %conv = zext i16 %type_flags to i32
  %and = and i32 %conv, 255
  %conv1 = trunc i32 %and to i8
  %arx_cache = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom2 = zext i16 %0 to i64
  %arrayidx3 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache, i64 0, i64 %idxprom2
  %type = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx3, i32 0, i32 1
  store volatile i8 %conv1, i8* %type, align 1, !tbaa !86
  %arx_cache4 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom5 = zext i16 %0 to i64
  %arrayidx6 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache4, i64 0, i64 %idxprom5
  %msg = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx6, i32 0, i32 0
  %connupdate = bitcast %union.anon.5* %msg to %struct.flextcp_pl_arx_connupdate*
  %opaque7 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate, i32 0, i32 0
  store i64 %opaque, i64* %opaque7, align 8, !tbaa !2
  %arx_cache8 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom9 = zext i16 %0 to i64
  %arrayidx10 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache8, i64 0, i64 %idxprom9
  %msg11 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx10, i32 0, i32 0
  %connupdate12 = bitcast %union.anon.5* %msg11 to %struct.flextcp_pl_arx_connupdate*
  %rx_bump13 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate12, i32 0, i32 1
  store i32 %rx_bump, i32* %rx_bump13, align 8, !tbaa !2
  %arx_cache14 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom15 = zext i16 %0 to i64
  %arrayidx16 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache14, i64 0, i64 %idxprom15
  %msg17 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx16, i32 0, i32 0
  %connupdate18 = bitcast %union.anon.5* %msg17 to %struct.flextcp_pl_arx_connupdate*
  %rx_pos19 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate18, i32 0, i32 2
  store i32 %rx_pos, i32* %rx_pos19, align 4, !tbaa !2
  %arx_cache20 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom21 = zext i16 %0 to i64
  %arrayidx22 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache20, i64 0, i64 %idxprom21
  %msg23 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx22, i32 0, i32 0
  %connupdate24 = bitcast %union.anon.5* %msg23 to %struct.flextcp_pl_arx_connupdate*
  %tx_bump25 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate24, i32 0, i32 3
  store i32 %tx_bump, i32* %tx_bump25, align 8, !tbaa !2
  %conv26 = zext i16 %type_flags to i32
  %shr = ashr i32 %conv26, 8
  %conv27 = trunc i32 %shr to i8
  %arx_cache28 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 6
  %idxprom29 = zext i16 %0 to i64
  %arrayidx30 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache28, i64 0, i64 %idxprom29
  %msg31 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx30, i32 0, i32 0
  %connupdate32 = bitcast %union.anon.5* %msg31 to %struct.flextcp_pl_arx_connupdate*
  %flags = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate32, i32 0, i32 4
  store i8 %conv27, i8* %flags, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @flow_tx_ack(%struct.dataplane_context* %ctx, i32 %seq, i32 %ack, i32 %rxwnd, i32 %echots, i32 %myts, %struct.network_buf_handle* %nbh, %struct.tcp_timestamp_opt* %ts_opt) #0 {
entry:
  %eth = alloca %struct.eth_addr, align 1
  %ip = alloca %struct.beui32, align 1
  %port = alloca %struct.beui16, align 1
  %tmp = alloca %struct.beui32, align 1
  %tmp39 = alloca %struct.beui32, align 1
  %tmp54 = alloca %struct.beui16, align 1
  %tmp61 = alloca %struct.beui16, align 1
  %tmp64 = alloca %struct.beui32, align 1
  %tmp67 = alloca %struct.beui32, align 1
  %tmp71 = alloca %struct.beui16, align 1
  %0 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* %0) #6
  %1 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  %2 = bitcast %struct.beui16* %port to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #6
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %nbh)
  %3 = bitcast i8* %call to %struct.pkt_tcp*
  %eth1 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth1, i32 0, i32 1
  %4 = bitcast %struct.eth_addr* %eth to i8*
  %5 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 6, i1 false), !tbaa.struct !40
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 0
  %src3 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %eth4 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth4, i32 0, i32 0
  %6 = bitcast %struct.eth_addr* %src3 to i8*
  %7 = bitcast %struct.eth_addr* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 6, i1 false), !tbaa.struct !40
  %eth5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 0
  %dest6 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth5, i32 0, i32 0
  %8 = bitcast %struct.eth_addr* %dest6 to i8*
  %9 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 6, i1 false), !tbaa.struct !40
  %ip7 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %src8 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip7, i32 0, i32 8
  %10 = bitcast %struct.beui32* %ip to i8*
  %11 = bitcast %struct.beui32* %src8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %11, i64 4, i1 false), !tbaa.struct !52
  %ip9 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %src10 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip9, i32 0, i32 8
  %ip11 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %dest12 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip11, i32 0, i32 9
  %12 = bitcast %struct.beui32* %src10 to i8*
  %13 = bitcast %struct.beui32* %dest12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 4, i1 false), !tbaa.struct !52
  %ip13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %dest14 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip13, i32 0, i32 9
  %14 = bitcast %struct.beui32* %dest14 to i8*
  %15 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 4, i1 false), !tbaa.struct !52
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %src15 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %16 = bitcast %struct.beui16* %port to i8*
  %17 = bitcast %struct.beui16* %src15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %17, i64 2, i1 false), !tbaa.struct !41
  %tcp16 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %src17 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp16, i32 0, i32 0
  %tcp18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %dest19 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp18, i32 0, i32 1
  %18 = bitcast %struct.beui16* %src17 to i8*
  %19 = bitcast %struct.beui16* %dest19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 2, i1 false), !tbaa.struct !41
  %tcp20 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %dest21 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp20, i32 0, i32 1
  %20 = bitcast %struct.beui16* %dest21 to i8*
  %21 = bitcast %struct.beui16* %port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 2, i1 false), !tbaa.struct !41
  %tcp22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp22, i32 0, i32 4
  %22 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !53
  %call23 = call zeroext i16 @__bswap_16(i16 zeroext %22)
  %conv = zext i16 %call23 to i32
  %shr = ashr i32 %conv, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv24 = sext i32 %mul to i64
  %add = add i64 54, %conv24
  %conv25 = trunc i64 %add to i16
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 1
  %23 = load i8, i8* %_tos, align 1, !tbaa !48
  %conv27 = zext i8 %23 to i32
  %and = and i32 %conv27, 3
  %cmp = icmp eq i32 %and, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %ecn_flags.0 = phi i16 [ 64, %if.then ], [ 0, %entry ]
  %ip29 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %_tos30 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip29, i32 0, i32 1
  %24 = load i8, i8* %_tos30, align 1, !tbaa !48
  %conv31 = zext i8 %24 to i32
  %and32 = and i32 %conv31, 4092
  %conv33 = trunc i32 %and32 to i8
  %ip34 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %_tos35 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip34, i32 0, i32 1
  store i8 %conv33, i8* %_tos35, align 1, !tbaa !48
  %tcp36 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp36, i32 0, i32 2
  %25 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #6
  %call37 = call i32 @t_beui32(i32 %seq)
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp, i32 0, i32 0
  store i32 %call37, i32* %coerce.dive, align 1
  %26 = bitcast %struct.beui32* %seqno to i8*
  %27 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 4, i1 false), !tbaa.struct !52
  %28 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #6
  %tcp38 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp38, i32 0, i32 3
  %29 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #6
  %call40 = call i32 @t_beui32(i32 %ack)
  %coerce.dive41 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp39, i32 0, i32 0
  store i32 %call40, i32* %coerce.dive41, align 1
  %30 = bitcast %struct.beui32* %ackno to i8*
  %31 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 4, i1 false), !tbaa.struct !52
  %32 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #6
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %_hdrlen_rsvd_flags43 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 4
  %33 = load i16, i16* %_hdrlen_rsvd_flags43, align 1, !tbaa !53
  %call44 = call zeroext i16 @__bswap_16(i16 zeroext %33)
  %conv45 = zext i16 %call44 to i32
  %shr46 = ashr i32 %conv45, 12
  %shl = shl i32 %shr46, 12
  %conv47 = zext i16 %ecn_flags.0 to i32
  %or = or i32 16, %conv47
  %or48 = or i32 %shl, %or
  %conv49 = trunc i32 %or48 to i16
  %call50 = call zeroext i16 @__bswap_16(i16 zeroext %conv49)
  %tcp51 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %_hdrlen_rsvd_flags52 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp51, i32 0, i32 4
  store i16 %call50, i16* %_hdrlen_rsvd_flags52, align 1, !tbaa !53
  %tcp53 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp53, i32 0, i32 5
  %34 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %34) #6
  %cmp55 = icmp ult i32 %rxwnd, 65535
  br i1 %cmp55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %rxwnd, %cond.true ], [ 65535, %cond.false ]
  %conv57 = trunc i32 %cond to i16
  %call58 = call i16 @t_beui16(i16 zeroext %conv57)
  %coerce.dive59 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp54, i32 0, i32 0
  store i16 %call58, i16* %coerce.dive59, align 1
  %35 = bitcast %struct.beui16* %wnd to i8*
  %36 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %36, i64 2, i1 false), !tbaa.struct !41
  %37 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %37) #6
  %tcp60 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp60, i32 0, i32 7
  %38 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %38) #6
  %call62 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive63 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp61, i32 0, i32 0
  store i16 %call62, i16* %coerce.dive63, align 1
  %39 = bitcast %struct.beui16* %urgp to i8*
  %40 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %40, i64 2, i1 false), !tbaa.struct !41
  %41 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %41) #6
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %ts_opt, i32 0, i32 2
  %42 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #6
  %call65 = call i32 @t_beui32(i32 %myts)
  %coerce.dive66 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp64, i32 0, i32 0
  store i32 %call65, i32* %coerce.dive66, align 1
  %43 = bitcast %struct.beui32* %ts_val to i8*
  %44 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %44, i64 4, i1 false), !tbaa.struct !52
  %45 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45) #6
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %ts_opt, i32 0, i32 3
  %46 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #6
  %call68 = call i32 @t_beui32(i32 %echots)
  %coerce.dive69 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp67, i32 0, i32 0
  store i32 %call68, i32* %coerce.dive69, align 1
  %47 = bitcast %struct.beui32* %ts_ecr to i8*
  %48 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %48, i64 4, i1 false), !tbaa.struct !52
  %49 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #6
  %ip70 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip70, i32 0, i32 2
  %50 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %50) #6
  %conv72 = zext i16 %conv25 to i64
  %sub73 = sub i64 %conv72, 14
  %conv74 = trunc i64 %sub73 to i16
  %call75 = call i16 @t_beui16(i16 zeroext %conv74)
  %coerce.dive76 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp71, i32 0, i32 0
  store i16 %call75, i16* %coerce.dive76, align 1
  %51 = bitcast %struct.beui16* %len to i8*
  %52 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %52, i64 2, i1 false), !tbaa.struct !41
  %53 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %53) #6
  %ip77 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip77, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1, !tbaa !49
  %ip78 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %src79 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip78, i32 0, i32 8
  %ip80 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %3, i32 0, i32 1
  %dest81 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip80, i32 0, i32 9
  %conv82 = zext i16 %conv25 to i64
  %sub83 = sub i64 %conv82, 34
  %conv84 = trunc i64 %sub83 to i16
  %coerce.dive85 = getelementptr inbounds %struct.beui32, %struct.beui32* %src79, i32 0, i32 0
  %54 = load i32, i32* %coerce.dive85, align 1
  %coerce.dive86 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest81, i32 0, i32 0
  %55 = load i32, i32* %coerce.dive86, align 1
  call void @tcp_checksums(%struct.network_buf_handle* %nbh, %struct.pkt_tcp* %3, i32 %54, i32 %55, i16 zeroext %conv84)
  %call87 = call zeroext i16 @network_buf_off(%struct.network_buf_handle* %nbh)
  call void @tx_send(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i16 zeroext %call87, i16 zeroext %conv25)
  %56 = bitcast %struct.beui16* %port to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %56) #6
  %57 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %57) #6
  %58 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.lifetime.end.p0i8(i64 6, i8* %58) #6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_bump(%struct.dataplane_context* %ctx, i32 %flow_id, i16 zeroext %bump_seq, i32 %rx_tail, i32 %tx_head, i8 zeroext %flags, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %tx_head.addr = alloca i32, align 4
  store i32 %tx_head, i32* %tx_head.addr, align 4, !tbaa !7
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %idxprom = zext i32 %flow_id to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %conv = zext i16 %bump_seq to i32
  %bump_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 12
  %1 = load i16, i16* %bump_seq1, align 2, !tbaa !88
  %conv2 = zext i16 %1 to i32
  %cmp = icmp sge i32 %conv, %conv2
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %conv4 = zext i16 %bump_seq to i32
  %bump_seq5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 12
  %2 = load i16, i16* %bump_seq5, align 2, !tbaa !88
  %conv6 = zext i16 %2 to i32
  %sub = sub nsw i32 %conv4, %conv6
  %cmp7 = icmp sgt i32 %sub, 32767
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %conv9 = zext i16 %bump_seq to i32
  %bump_seq10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 12
  %3 = load i16, i16* %bump_seq10, align 2, !tbaa !88
  %conv11 = zext i16 %3 to i32
  %cmp12 = icmp slt i32 %conv9, %conv11
  br i1 %cmp12, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %lor.lhs.false
  %bump_seq15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 12
  %4 = load i16, i16* %bump_seq15, align 2, !tbaa !88
  %conv16 = zext i16 %4 to i32
  %cmp17 = icmp slt i32 %conv16, 49149
  br i1 %cmp17, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %land.lhs.true14
  %conv20 = zext i16 %bump_seq to i32
  %cmp21 = icmp sgt i32 %conv20, 16383
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false19, %land.lhs.true14, %land.lhs.true
  br label %unlock

if.end:                                           ; preds = %lor.lhs.false19, %lor.lhs.false
  %bump_seq23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 12
  store i16 %bump_seq, i16* %bump_seq23, align 2, !tbaa !88
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %5 = load i64, i64* %rx_base_sp, align 8, !tbaa !28
  %and = and i64 %5, 16
  %cmp24 = icmp eq i64 %and, 16
  br i1 %cmp24, label %land.lhs.true26, label %if.else

land.lhs.true26:                                  ; preds = %if.end
  %6 = load i32, i32* %tx_head.addr, align 4, !tbaa !7
  %tx_head27 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 24
  %7 = load i32, i32* %tx_head27, align 4, !tbaa !35
  %cmp28 = icmp ne i32 %6, %7
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %land.lhs.true26
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.15, i32 0, i32 0))
  %tx_head31 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 24
  %9 = load i32, i32* %tx_head31, align 4, !tbaa !35
  store i32 %9, i32* %tx_head.addr, align 4, !tbaa !7
  br label %if.end46

if.else:                                          ; preds = %land.lhs.true26, %if.end
  %conv32 = zext i8 %flags to i32
  %and33 = and i32 %conv32, 1
  %cmp34 = icmp eq i32 %and33, 1
  br i1 %cmp34, label %land.lhs.true36, label %if.end45

land.lhs.true36:                                  ; preds = %if.else
  %rx_base_sp37 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %10 = load i64, i64* %rx_base_sp37, align 8, !tbaa !28
  %and38 = and i64 %10, 16
  %tobool = icmp ne i64 %and38, 0
  br i1 %tobool, label %if.end45, label %land.lhs.true39

land.lhs.true39:                                  ; preds = %land.lhs.true36
  %11 = load i32, i32* %tx_head.addr, align 4, !tbaa !7
  %tx_head40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 24
  %12 = load i32, i32* %tx_head40, align 4, !tbaa !35
  %cmp41 = icmp eq i32 %11, %12
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %land.lhs.true39
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16, i32 0, i32 0))
  br label %unlock

if.end45:                                         ; preds = %land.lhs.true39, %land.lhs.true36, %if.else
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  %call47 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %arrayidx, i32* null)
  %call48 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %arrayidx, i32* %tx_head.addr)
  %conv49 = zext i8 %flags to i32
  %and50 = and i32 %conv49, 1
  %cmp51 = icmp eq i32 %and50, 1
  br i1 %cmp51, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end46
  %rx_base_sp54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %14 = load i64, i64* %rx_base_sp54, align 8, !tbaa !28
  %and55 = and i64 %14, 16
  %tobool56 = icmp ne i64 %and55, 0
  br i1 %tobool56, label %if.end59, label %if.then57

if.then57:                                        ; preds = %land.lhs.true53
  %rx_base_sp58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %15 = load i64, i64* %rx_base_sp58, align 8, !tbaa !28
  %or = or i64 %15, 16
  store i64 %or, i64* %rx_base_sp58, align 8, !tbaa !28
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %land.lhs.true53, %if.end46
  %rx_base_sp60 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 1
  %16 = load i64, i64* %rx_base_sp60, align 8, !tbaa !28
  %and61 = and i64 %16, 2
  %tobool62 = icmp ne i64 %and61, 0
  br i1 %tobool62, label %if.else75, label %if.then63

if.then63:                                        ; preds = %if.end59
  %cmp64 = icmp ult i32 %call47, %call48
  br i1 %cmp64, label %if.then66, label %if.end74

if.then66:                                        ; preds = %if.then63
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 26
  %17 = load i32, i32* %tx_rate, align 4, !tbaa !59
  %sub67 = sub i32 %call48, %call47
  %call68 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %flow_id, i32 %17, i32 %sub67, i16 zeroext 1448, i8 zeroext 19)
  %cmp69 = icmp ne i32 %call68, 0
  br i1 %cmp69, label %if.then71, label %if.end73

if.then71:                                        ; preds = %if.then66
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end73:                                         ; preds = %if.then66
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then63
  br label %if.end90

if.else75:                                        ; preds = %if.end59
  %cmp76 = icmp eq i32 %call47, 0
  br i1 %cmp76, label %land.lhs.true78, label %if.end89

land.lhs.true78:                                  ; preds = %if.else75
  %cmp79 = icmp ne i32 %call48, 0
  br i1 %cmp79, label %if.then81, label %if.end89

if.then81:                                        ; preds = %land.lhs.true78
  %qman82 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %call83 = call i32 @qman_set(%struct.qman_thread* %qman82, i32 %flow_id, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp84 = icmp ne i32 %call83, 0
  br i1 %cmp84, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.then81
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end88:                                         ; preds = %if.then81
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %land.lhs.true78, %if.else75
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end74
  %20 = load i32, i32* %tx_head.addr, align 4, !tbaa !7
  %tx_head91 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 24
  store i32 %20, i32* %tx_head91, align 4, !tbaa !35
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 15
  %21 = load i32, i32* %rx_next_pos, align 64, !tbaa !67
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %22 = load i32, i32* %rx_avail, align 4, !tbaa !31
  %add = add i32 %21, %22
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 3
  %23 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp92 = icmp uge i32 %add, %23
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %if.end90
  %rx_len95 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 3
  %24 = load i32, i32* %rx_len95, align 8, !tbaa !82
  %sub96 = sub i32 %add, %24
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.end90
  %tail.0 = phi i32 [ %sub96, %if.then94 ], [ %add, %if.end90 ]
  %rx_avail98 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %25 = load i32, i32* %rx_avail98, align 4, !tbaa !31
  %cmp99 = icmp uge i32 %rx_tail, %tail.0
  br i1 %cmp99, label %if.then101, label %if.else105

if.then101:                                       ; preds = %if.end97
  %sub102 = sub i32 %rx_tail, %tail.0
  %rx_avail103 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %26 = load i32, i32* %rx_avail103, align 4, !tbaa !31
  %add104 = add i32 %26, %sub102
  store i32 %add104, i32* %rx_avail103, align 4, !tbaa !31
  br label %if.end111

if.else105:                                       ; preds = %if.end97
  %rx_len106 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 3
  %27 = load i32, i32* %rx_len106, align 8, !tbaa !82
  %sub107 = sub i32 %27, %tail.0
  %add108 = add i32 %sub107, %rx_tail
  %rx_avail109 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %28 = load i32, i32* %rx_avail109, align 4, !tbaa !31
  %add110 = add i32 %28, %add108
  store i32 %add110, i32* %rx_avail109, align 4, !tbaa !31
  br label %if.end111

if.end111:                                        ; preds = %if.else105, %if.then101
  %cmp112 = icmp eq i32 %call48, 0
  br i1 %cmp112, label %land.lhs.true114, label %if.end123

land.lhs.true114:                                 ; preds = %if.end111
  %cmp115 = icmp eq i32 %25, 0
  br i1 %cmp115, label %land.lhs.true117, label %if.end123

land.lhs.true117:                                 ; preds = %land.lhs.true114
  %rx_avail118 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %29 = load i32, i32* %rx_avail118, align 4, !tbaa !31
  %cmp119 = icmp ne i32 %29, 0
  br i1 %cmp119, label %if.then121, label %if.end123

if.then121:                                       ; preds = %land.lhs.true117
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 23
  %30 = load i32, i32* %tx_next_seq, align 32, !tbaa !30
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 16
  %31 = load i32, i32* %rx_next_seq, align 4, !tbaa !32
  %rx_avail122 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 14
  %32 = load i32, i32* %rx_avail122, align 4, !tbaa !31
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 25
  %33 = load i32, i32* %tx_next_ts, align 8, !tbaa !36
  call void @flow_tx_segment(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, %struct.flextcp_pl_flowst* %arrayidx, i32 %30, i32 %31, i32 %32, i16 zeroext 0, i32 0, i32 %33, i32 %ts, i8 zeroext 0)
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %land.lhs.true117, %land.lhs.true114, %if.end111
  %ret.0 = phi i32 [ 0, %if.then121 ], [ -1, %land.lhs.true117 ], [ -1, %land.lhs.true114 ], [ -1, %if.end111 ]
  br label %unlock

unlock:                                           ; preds = %if.end123, %if.then43, %if.then
  %ret.1 = phi i32 [ -1, %if.then ], [ %ret.0, %if.end123 ], [ -1, %if.then43 ]
  %lock124 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock124)
  ret i32 %ret.1
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_retransmit(%struct.dataplane_context* %ctx, i32 %flow_id) #0 {
entry:
  %0 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %0, i32 0, i32 1
  %idxprom = zext i32 %flow_id to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %arrayidx, i32* null)
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 21
  %1 = load i32, i32* %tx_sent, align 8, !tbaa !34
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out

if.end:                                           ; preds = %entry
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %arrayidx)
  %call1 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %arrayidx, i32* null)
  %cmp2 = icmp ugt i32 %call1, %call
  br i1 %cmp2, label %if.then3, label %if.end9

if.then3:                                         ; preds = %if.end
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 1
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 26
  %2 = load i32, i32* %tx_rate, align 4, !tbaa !59
  %sub = sub i32 %call1, %call
  %call4 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %flow_id, i32 %2, i32 %sub, i16 zeroext 1448, i8 zeroext 19)
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.then3
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end8:                                          ; preds = %if.then3
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  br label %out

out:                                              ; preds = %if.end9, %if.then
  %lock10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %arrayidx, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock10)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_fss(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, i16 zeroext %n) #0 {
entry:
  %p = alloca %struct.pkt_tcp*, align 8
  %key = alloca %struct.flow_key, align 1
  %e = alloca %struct.flextcp_pl_flowhte*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %0 = zext i16 %n to i64
  %1 = call i8* @llvm.stacksave()
  %2 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %p1 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.var.annotation(i8* %p1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1018)
  %3 = bitcast %struct.flow_key* %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* %3) #6
  %4 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %e2 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.var.annotation(i8* %e2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1020)
  %5 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %fs3 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.var.annotation(i8* %fs3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1021)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i16 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = zext i16 %i.0 to i32
  %conv4 = zext i16 %n to i32
  %cmp = icmp slt i32 %conv, %conv4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = zext i16 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %nbhs, i64 %idxprom
  %6 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %6)
  %7 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %7, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %idxprom6 = zext i16 %i.0 to i64
  %arrayidx7 = getelementptr inbounds i8*, i8** %fss, i64 %idxprom6
  store i8* null, i8** %arrayidx7, align 8, !tbaa !5
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 0
  %8 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %8, i32 0, i32 1
  %dest = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 9
  %9 = bitcast %struct.beui32* %local_ip to i8*
  %10 = bitcast %struct.beui32* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 4, i1 false), !tbaa.struct !52
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 1
  %11 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip8 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %11, i32 0, i32 1
  %src = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip8, i32 0, i32 8
  %12 = bitcast %struct.beui32* %remote_ip to i8*
  %13 = bitcast %struct.beui32* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 4, i1 false), !tbaa.struct !52
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 2
  %14 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %14, i32 0, i32 2
  %dest9 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 1
  %15 = bitcast %struct.beui16* %local_port to i8*
  %16 = bitcast %struct.beui16* %dest9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 2, i1 false), !tbaa.struct !41
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 3
  %17 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp10 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %17, i32 0, i32 2
  %src11 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp10, i32 0, i32 0
  %18 = bitcast %struct.beui16* %remote_port to i8*
  %19 = bitcast %struct.beui16* %src11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 2, i1 false), !tbaa.struct !41
  %call12 = call i32 @flow_hash(%struct.flow_key* %key)
  %20 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowht = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %20, i32 0, i32 2
  %idxprom13 = zext i32 %call12 to i64
  %arrayidx14 = getelementptr inbounds [262144 x %struct.flextcp_pl_flowhte], [262144 x %struct.flextcp_pl_flowhte]* %flowht, i64 0, i64 %idxprom13
  store %struct.flextcp_pl_flowhte* %arrayidx14, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %21 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %flow_id = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %21, i32 0, i32 0
  %22 = load i32, i32* %flow_id, align 1, !tbaa !89
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !91
  %23 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %flow_hash = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %23, i32 0, i32 1
  %24 = load i32, i32* %flow_hash, align 1, !tbaa !92
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !93
  %25 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %25, i32 0, i32 1
  %idxprom15 = zext i32 %22 to i64
  %arrayidx16 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom15
  store %struct.flextcp_pl_flowst* %arrayidx16, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %26 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %local_ip17 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %26, i32 0, i32 5
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip17, i32 0, i32 0
  %27 = load i32, i32* %x, align 32, !tbaa !94
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 1
  %dest19 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 9
  %x20 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest19, i32 0, i32 0
  %29 = load i32, i32* %x20, align 1, !tbaa !95
  %cmp21 = icmp eq i32 %27, %29
  %conv22 = zext i1 %cmp21 to i32
  %30 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %remote_ip23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %30, i32 0, i32 6
  %x24 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip23, i32 0, i32 0
  %31 = load i32, i32* %x24, align 4, !tbaa !96
  %32 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %32, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %x27 = getelementptr inbounds %struct.beui32, %struct.beui32* %src26, i32 0, i32 0
  %33 = load i32, i32* %x27, align 1, !tbaa !97
  %cmp28 = icmp eq i32 %31, %33
  %conv29 = zext i1 %cmp28 to i32
  %and = and i32 %conv22, %conv29
  %34 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %local_port30 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %34, i32 0, i32 7
  %x31 = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port30, i32 0, i32 0
  %35 = load i16, i16* %x31, align 8, !tbaa !98
  %conv32 = zext i16 %35 to i32
  %36 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp33 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %36, i32 0, i32 2
  %dest34 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp33, i32 0, i32 1
  %x35 = getelementptr inbounds %struct.beui16, %struct.beui16* %dest34, i32 0, i32 0
  %37 = load i16, i16* %x35, align 1, !tbaa !99
  %conv36 = zext i16 %37 to i32
  %cmp37 = icmp eq i32 %conv32, %conv36
  %conv38 = zext i1 %cmp37 to i32
  %and39 = and i32 %and, %conv38
  %38 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %remote_port40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %38, i32 0, i32 8
  %x41 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port40, i32 0, i32 0
  %39 = load i16, i16* %x41, align 2, !tbaa !100
  %conv42 = zext i16 %39 to i32
  %40 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp43 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %40, i32 0, i32 2
  %src44 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp43, i32 0, i32 0
  %x45 = getelementptr inbounds %struct.beui16, %struct.beui16* %src44, i32 0, i32 0
  %41 = load i16, i16* %x45, align 1, !tbaa !101
  %conv46 = zext i16 %41 to i32
  %cmp47 = icmp eq i32 %conv42, %conv46
  %conv48 = zext i1 %cmp47 to i32
  %and49 = and i32 %and39, %conv48
  %tobool = icmp ne i32 %and49, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %42 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst50 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %42, i32 0, i32 1
  %idxprom51 = zext i32 %22 to i64
  %arrayidx52 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst50, i64 0, i64 %idxprom51
  %43 = bitcast %struct.flextcp_pl_flowst* %arrayidx52 to i8*
  %idxprom53 = zext i16 %i.0 to i64
  %arrayidx54 = getelementptr inbounds i8*, i8** %fss, i64 %idxprom53
  store i8* %43, i8** %arrayidx54, align 8, !tbaa !5
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add i16 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %44 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #6
  %45 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #6
  %46 = bitcast %struct.flow_key* %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 12, i8* %46) #6
  %47 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #6
  call void @llvm.stackrestore(i8* %1)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #6

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @flow_hash(%struct.flow_key* %k) #1 {
entry:
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %k, i32 0, i32 2
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port, i32 0, i32 0
  %0 = load i16, i16* %x, align 1, !tbaa !102
  %conv = zext i16 %0 to i32
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %k, i32 0, i32 3
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port, i32 0, i32 0
  %1 = load i16, i16* %x1, align 1, !tbaa !104
  %conv2 = zext i16 %1 to i32
  %shl = shl i32 %conv2, 16
  %or = or i32 %conv, %shl
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %k, i32 0, i32 0
  %x3 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip, i32 0, i32 0
  %2 = load i32, i32* %x3, align 1, !tbaa !105
  %conv4 = zext i32 %2 to i64
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %k, i32 0, i32 1
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip, i32 0, i32 0
  %3 = load i32, i32* %x5, align 1, !tbaa !106
  %conv6 = zext i32 %3 to i64
  %shl7 = shl i64 %conv6, 32
  %or8 = or i64 %conv4, %shl7
  %call = call i32 @crc32c_sse42_u64(i64 %or8, i64 0)
  %call9 = call i32 @crc32c_sse42_u32(i32 %or, i32 %call)
  ret i32 %call9
}

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #6

declare dso_local i32 @rte_cpu_get_flag_enabled(i32) #4

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @rte_ring_enqueue_bulk(%struct.rte_ring* %r, i8** %obj_table, i32 %n, i32* %free_space) #3 {
entry:
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 7
  %single = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod, i32 0, i32 2
  %0 = load i32, i32* %single, align 8, !tbaa !107
  %call = call i32 @__rte_ring_do_enqueue(%struct.rte_ring* %r, i8** %obj_table, i32 %n, i32 0, i32 %0, i32* %free_space)
  ret i32 %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @__rte_ring_do_enqueue(%struct.rte_ring* %r, i8** %obj_table, i32 %n, i32 %behavior, i32 %is_sp, i32* %free_space) #3 {
entry:
  %prod_head = alloca i32, align 4
  %prod_next = alloca i32, align 4
  %free_entries = alloca i32, align 4
  %0 = bitcast i32* %prod_head to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %prod_next to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  %2 = bitcast i32* %free_entries to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %call = call i32 @__rte_ring_move_prod_head(%struct.rte_ring* %r, i32 %is_sp, i32 %n, i32 %behavior, i32* %prod_head, i32* %prod_next, i32* %free_entries)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %end

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %size1 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 3
  %3 = load i32, i32* %size1, align 16, !tbaa !110
  %4 = load i32, i32* %prod_head, align 4, !tbaa !7
  %mask = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 4
  %5 = load i32, i32* %mask, align 4, !tbaa !111
  %and = and i32 %4, %5
  %arrayidx = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i64 1
  %6 = bitcast %struct.rte_ring* %arrayidx to i8**
  %add = add i32 %and, %call
  %cmp2 = icmp ult i32 %add, %3
  %conv = zext i1 %cmp2 to i32
  %conv3 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv3, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %i.0 = phi i32 [ 0, %if.then4 ], [ %add29, %for.inc ]
  %idx.0 = phi i32 [ %and, %if.then4 ], [ %add30, %for.inc ]
  %and5 = and i32 %call, -4
  %cmp6 = icmp ult i32 %i.0, %and5
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = zext i32 %i.0 to i64
  %arrayidx8 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom
  %7 = load i8*, i8** %arrayidx8, align 8, !tbaa !5
  %idxprom9 = zext i32 %idx.0 to i64
  %arrayidx10 = getelementptr inbounds i8*, i8** %6, i64 %idxprom9
  store i8* %7, i8** %arrayidx10, align 8, !tbaa !5
  %add11 = add i32 %i.0, 1
  %idxprom12 = zext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom12
  %8 = load i8*, i8** %arrayidx13, align 8, !tbaa !5
  %add14 = add i32 %idx.0, 1
  %idxprom15 = zext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds i8*, i8** %6, i64 %idxprom15
  store i8* %8, i8** %arrayidx16, align 8, !tbaa !5
  %add17 = add i32 %i.0, 2
  %idxprom18 = zext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom18
  %9 = load i8*, i8** %arrayidx19, align 8, !tbaa !5
  %add20 = add i32 %idx.0, 2
  %idxprom21 = zext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i8*, i8** %6, i64 %idxprom21
  store i8* %9, i8** %arrayidx22, align 8, !tbaa !5
  %add23 = add i32 %i.0, 3
  %idxprom24 = zext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom24
  %10 = load i8*, i8** %arrayidx25, align 8, !tbaa !5
  %add26 = add i32 %idx.0, 3
  %idxprom27 = zext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8*, i8** %6, i64 %idxprom27
  store i8* %10, i8** %arrayidx28, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add29 = add i32 %i.0, 4
  %add30 = add i32 %idx.0, 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %and31 = and i32 %call, 3
  switch i32 %and31, label %sw.epilog [
    i32 3, label %sw.bb
    i32 2, label %sw.bb37
    i32 1, label %sw.bb44
  ]

sw.bb:                                            ; preds = %for.end
  %inc = add i32 %i.0, 1
  %idxprom32 = zext i32 %i.0 to i64
  %arrayidx33 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom32
  %11 = load i8*, i8** %arrayidx33, align 8, !tbaa !5
  %inc34 = add i32 %idx.0, 1
  %idxprom35 = zext i32 %idx.0 to i64
  %arrayidx36 = getelementptr inbounds i8*, i8** %6, i64 %idxprom35
  store i8* %11, i8** %arrayidx36, align 8, !tbaa !5
  br label %sw.bb37

sw.bb37:                                          ; preds = %sw.bb, %for.end
  %i.1 = phi i32 [ %i.0, %for.end ], [ %inc, %sw.bb ]
  %idx.1 = phi i32 [ %idx.0, %for.end ], [ %inc34, %sw.bb ]
  %inc38 = add i32 %i.1, 1
  %idxprom39 = zext i32 %i.1 to i64
  %arrayidx40 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom39
  %12 = load i8*, i8** %arrayidx40, align 8, !tbaa !5
  %inc41 = add i32 %idx.1, 1
  %idxprom42 = zext i32 %idx.1 to i64
  %arrayidx43 = getelementptr inbounds i8*, i8** %6, i64 %idxprom42
  store i8* %12, i8** %arrayidx43, align 8, !tbaa !5
  br label %sw.bb44

sw.bb44:                                          ; preds = %sw.bb37, %for.end
  %i.2 = phi i32 [ %i.0, %for.end ], [ %inc38, %sw.bb37 ]
  %idx.2 = phi i32 [ %idx.0, %for.end ], [ %inc41, %sw.bb37 ]
  %inc45 = add i32 %i.2, 1
  %idxprom46 = zext i32 %i.2 to i64
  %arrayidx47 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom46
  %13 = load i8*, i8** %arrayidx47, align 8, !tbaa !5
  %inc48 = add i32 %idx.2, 1
  %idxprom49 = zext i32 %idx.2 to i64
  %arrayidx50 = getelementptr inbounds i8*, i8** %6, i64 %idxprom49
  store i8* %13, i8** %arrayidx50, align 8, !tbaa !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb44, %for.end
  br label %if.end75

if.else:                                          ; preds = %do.body
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc59, %if.else
  %i.3 = phi i32 [ 0, %if.else ], [ %inc60, %for.inc59 ]
  %idx.3 = phi i32 [ %and, %if.else ], [ %inc61, %for.inc59 ]
  %cmp52 = icmp ult i32 %idx.3, %3
  br i1 %cmp52, label %for.body54, label %for.end62

for.body54:                                       ; preds = %for.cond51
  %idxprom55 = zext i32 %i.3 to i64
  %arrayidx56 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom55
  %14 = load i8*, i8** %arrayidx56, align 8, !tbaa !5
  %idxprom57 = zext i32 %idx.3 to i64
  %arrayidx58 = getelementptr inbounds i8*, i8** %6, i64 %idxprom57
  store i8* %14, i8** %arrayidx58, align 8, !tbaa !5
  br label %for.inc59

for.inc59:                                        ; preds = %for.body54
  %inc60 = add i32 %i.3, 1
  %inc61 = add i32 %idx.3, 1
  br label %for.cond51

for.end62:                                        ; preds = %for.cond51
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc71, %for.end62
  %i.4 = phi i32 [ %i.3, %for.end62 ], [ %inc72, %for.inc71 ]
  %idx.4 = phi i32 [ 0, %for.end62 ], [ %inc73, %for.inc71 ]
  %cmp64 = icmp ult i32 %i.4, %call
  br i1 %cmp64, label %for.body66, label %for.end74

for.body66:                                       ; preds = %for.cond63
  %idxprom67 = zext i32 %i.4 to i64
  %arrayidx68 = getelementptr inbounds i8*, i8** %obj_table, i64 %idxprom67
  %15 = load i8*, i8** %arrayidx68, align 8, !tbaa !5
  %idxprom69 = zext i32 %idx.4 to i64
  %arrayidx70 = getelementptr inbounds i8*, i8** %6, i64 %idxprom69
  store i8* %15, i8** %arrayidx70, align 8, !tbaa !5
  br label %for.inc71

for.inc71:                                        ; preds = %for.body66
  %inc72 = add i32 %i.4, 1
  %inc73 = add i32 %idx.4, 1
  br label %for.cond63

for.end74:                                        ; preds = %for.cond63
  br label %if.end75

if.end75:                                         ; preds = %for.end74, %sw.epilog
  br label %do.cond

do.cond:                                          ; preds = %if.end75
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body76

do.body76:                                        ; preds = %do.end
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !112
  br label %do.cond77

do.cond77:                                        ; preds = %do.body76
  br label %do.end78

do.end78:                                         ; preds = %do.cond77
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 7
  %16 = load i32, i32* %prod_head, align 4, !tbaa !7
  %17 = load i32, i32* %prod_next, align 4, !tbaa !7
  call void @update_tail(%struct.rte_ring_headtail* %prod, i32 %16, i32 %17, i32 %is_sp)
  br label %end

end:                                              ; preds = %do.end78, %if.then
  %cmp79 = icmp ne i32* %free_space, null
  br i1 %cmp79, label %if.then81, label %if.end82

if.then81:                                        ; preds = %end
  %18 = load i32, i32* %free_entries, align 4, !tbaa !7
  %sub = sub i32 %18, %call
  store i32 %sub, i32* %free_space, align 4, !tbaa !7
  br label %if.end82

if.end82:                                         ; preds = %if.then81, %end
  %19 = bitcast i32* %free_entries to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #6
  %20 = bitcast i32* %prod_next to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #6
  %21 = bitcast i32* %prod_head to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #6
  ret i32 %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @__rte_ring_move_prod_head(%struct.rte_ring* %r, i32 %is_sp, i32 %n, i32 %behavior, i32* %old_head, i32* %new_head, i32* %free_entries) #3 {
entry:
  %capacity1 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 5
  %0 = load i32, i32* %capacity1, align 8, !tbaa !113
  br label %do.body

do.body:                                          ; preds = %do.cond18, %entry
  %success.0 = phi i32 [ undef, %entry ], [ %success.2, %do.cond18 ]
  %retval.0 = phi i32 [ undef, %entry ], [ %retval.1, %do.cond18 ]
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 7
  %head = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod, i32 0, i32 0
  %1 = load volatile i32, i32* %head, align 128, !tbaa !114
  store i32 %1, i32* %old_head, align 4, !tbaa !7
  br label %do.body2

do.body2:                                         ; preds = %do.body
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !115
  br label %do.cond

do.cond:                                          ; preds = %do.body2
  br label %do.end

do.end:                                           ; preds = %do.cond
  %cons = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 9
  %tail = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %cons, i32 0, i32 1
  %2 = load volatile i32, i32* %tail, align 4, !tbaa !116
  %add = add i32 %0, %2
  %3 = load i32, i32* %old_head, align 4, !tbaa !7
  %sub = sub i32 %add, %3
  store i32 %sub, i32* %free_entries, align 4, !tbaa !7
  %4 = load i32, i32* %free_entries, align 4, !tbaa !7
  %cmp = icmp ugt i32 %n, %4
  %conv = zext i1 %cmp to i32
  %conv3 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv3, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %cmp4 = icmp eq i32 %behavior, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %5 = load i32, i32* %free_entries, align 4, !tbaa !7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %5, %cond.false ]
  br label %if.end

if.end:                                           ; preds = %cond.end, %do.end
  %n.addr.0 = phi i32 [ %cond, %cond.end ], [ %n, %do.end ]
  %cmp6 = icmp eq i32 %n.addr.0, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  br label %cleanup

if.end9:                                          ; preds = %if.end
  %6 = load i32, i32* %old_head, align 4, !tbaa !7
  %add10 = add i32 %6, %n.addr.0
  store i32 %add10, i32* %new_head, align 4, !tbaa !7
  %tobool11 = icmp ne i32 %is_sp, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  %7 = load i32, i32* %new_head, align 4, !tbaa !7
  %prod13 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 7
  %head14 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod13, i32 0, i32 0
  store volatile i32 %7, i32* %head14, align 128, !tbaa !114
  br label %if.end17

if.else:                                          ; preds = %if.end9
  %prod15 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %r, i32 0, i32 7
  %head16 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod15, i32 0, i32 0
  %8 = load i32, i32* %old_head, align 4, !tbaa !7
  %9 = load i32, i32* %new_head, align 4, !tbaa !7
  %call = call i32 @rte_atomic32_cmpset(i32* %head16, i32 %8, i32 %9)
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %success.1 = phi i32 [ 1, %if.then12 ], [ %call, %if.else ]
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then8
  %success.2 = phi i32 [ %success.0, %if.then8 ], [ %success.1, %if.end17 ]
  %cleanup.dest.slot.0 = phi i32 [ 1, %if.then8 ], [ 0, %if.end17 ]
  %retval.1 = phi i32 [ 0, %if.then8 ], [ %retval.0, %if.end17 ]
  switch i32 %cleanup.dest.slot.0, label %cleanup25 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond18

do.cond18:                                        ; preds = %cleanup.cont
  %cmp19 = icmp eq i32 %success.2, 0
  %conv20 = zext i1 %cmp19 to i32
  %conv21 = sext i32 %conv20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %tobool23 = icmp ne i64 %expval22, 0
  br i1 %tobool23, label %do.body, label %do.end24

do.end24:                                         ; preds = %do.cond18
  br label %cleanup25

cleanup25:                                        ; preds = %do.end24, %cleanup
  %retval.2 = phi i32 [ %retval.1, %cleanup ], [ %n.addr.0, %do.end24 ]
  ret i32 %retval.2
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @update_tail(%struct.rte_ring_headtail* %ht, i32 %old_val, i32 %new_val, i32 %single) #3 {
entry:
  %tobool = icmp ne i32 %single, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %tail = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %ht, i32 0, i32 1
  %0 = load volatile i32, i32* %tail, align 4, !tbaa !117
  %cmp = icmp ne i32 %0, %old_val
  %conv = zext i1 %cmp to i32
  %conv1 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 0)
  %tobool2 = icmp ne i64 %expval, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @rte_pause()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  %tail3 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %ht, i32 0, i32 1
  store volatile i32 %new_val, i32* %tail3, align 4, !tbaa !117
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_atomic32_cmpset(i32* %dst, i32 %exp, i32 %src) #1 {
entry:
  %0 = call i8 asm sideeffect "lock ; cmpxchgl $2, $1;sete $0;", "={ax},=*m,r,{ax},*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %dst, i32 %src, i32 %exp, i32* %dst) #6, !srcloc !118
  %conv = zext i8 %0 to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_pause() #1 {
entry:
  call void @llvm.x86.sse2.pause()
  ret void
}

; Function Attrs: nounwind
declare void @llvm.x86.sse2.pause() #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_8byte(i64 %data, i32 %init_val) #1 {
entry:
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv3 = zext i32 %init_val to i64
  %call = call i32 @crc32c_sse42_u64(i64 %data, i64 %conv3)
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv4 = zext i8 %1 to i32
  %and = and i32 %conv4, 2
  %conv5 = zext i32 %and to i64
  %expval6 = call i64 @llvm.expect.i64(i64 %conv5, i64 1)
  %tobool7 = icmp ne i64 %expval6, 0
  br i1 %tobool7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end
  %conv9 = zext i32 %init_val to i64
  %call10 = call i32 @crc32c_sse42_u64_mimic(i64 %data, i64 %conv9)
  br label %return

if.end11:                                         ; preds = %if.end
  %call12 = call i32 @crc32c_2words(i64 %data, i32 %init_val)
  br label %return

return:                                           ; preds = %if.end11, %if.then8, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call10, %if.then8 ], [ %call12, %if.end11 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_4byte(i32 %data, i32 %init_val) #1 {
entry:
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @crc32c_sse42_u32(i32 %data, i32 %init_val)
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @crc32c_1word(i32 %data, i32 %init_val)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call2, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_2byte(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @crc32c_sse42_u16(i16 zeroext %data, i32 %init_val)
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @crc32c_2bytes(i16 zeroext %data, i32 %init_val)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call2, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_1byte(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @crc32c_sse42_u8(i8 zeroext %data, i32 %init_val)
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @crc32c_1byte(i8 zeroext %data, i32 %init_val)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call2, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u64(i64 %data, i64 %init_val) #1 {
entry:
  %0 = call i64 asm sideeffect "crc32q $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %data, i64 %init_val) #6, !srcloc !119
  %conv = trunc i64 %0 to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u64_mimic(i64 %data, i64 %init_val) #1 {
entry:
  %d = alloca %union.anon.20, align 8
  %0 = bitcast %union.anon.20* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %u64 = bitcast %union.anon.20* %d to i64*
  store i64 %data, i64* %u64, align 8, !tbaa !2
  %u32 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 8, !tbaa !2
  %conv = trunc i64 %init_val to i32
  %call = call i32 @crc32c_sse42_u32(i32 %1, i32 %conv)
  %conv1 = zext i32 %call to i64
  %u322 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %u322, i64 0, i64 1
  %2 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  %conv4 = trunc i64 %conv1 to i32
  %call5 = call i32 @crc32c_sse42_u32(i32 %2, i32 %conv4)
  %conv6 = zext i32 %call5 to i64
  %conv7 = trunc i64 %conv6 to i32
  %3 = bitcast %union.anon.20* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  ret i32 %conv7
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_2words(i64 %data, i32 %init_val) #1 {
entry:
  %d = alloca %union.anon.21, align 8
  %0 = bitcast %union.anon.21* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %u64 = bitcast %union.anon.21* %d to i64*
  store i64 %data, i64* %u64, align 8, !tbaa !2
  %u32 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 8, !tbaa !2
  %xor = xor i32 %init_val, %1
  %and = and i32 %xor, 255
  %idxprom = zext i32 %and to i64
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 7), i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx1, align 4, !tbaa !7
  %shr = lshr i32 %xor, 8
  %and2 = and i32 %shr, 255
  %idxprom3 = zext i32 %and2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 6), i64 0, i64 %idxprom3
  %3 = load i32, i32* %arrayidx4, align 4, !tbaa !7
  %xor5 = xor i32 %2, %3
  %shr6 = lshr i32 %xor, 16
  %and7 = and i32 %shr6, 255
  %idxprom8 = zext i32 %and7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 5), i64 0, i64 %idxprom8
  %4 = load i32, i32* %arrayidx9, align 4, !tbaa !7
  %shr10 = lshr i32 %shr6, 8
  %and11 = and i32 %shr10, 255
  %idxprom12 = zext i32 %and11 to i64
  %arrayidx13 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 4), i64 0, i64 %idxprom12
  %5 = load i32, i32* %arrayidx13, align 4, !tbaa !7
  %xor14 = xor i32 %4, %5
  %xor15 = xor i32 %xor5, %xor14
  %u3216 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %u3216, i64 0, i64 1
  %6 = load i32, i32* %arrayidx17, align 4, !tbaa !2
  %and18 = and i32 %6, 255
  %idxprom19 = zext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom19
  %7 = load i32, i32* %arrayidx20, align 4, !tbaa !7
  %u3221 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %u3221, i64 0, i64 1
  %8 = load i32, i32* %arrayidx22, align 4, !tbaa !2
  %shr23 = lshr i32 %8, 8
  %and24 = and i32 %shr23, 255
  %idxprom25 = zext i32 %and24 to i64
  %arrayidx26 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom25
  %9 = load i32, i32* %arrayidx26, align 4, !tbaa !7
  %xor27 = xor i32 %7, %9
  %u3228 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %u3228, i64 0, i64 1
  %10 = load i32, i32* %arrayidx29, align 4, !tbaa !2
  %shr30 = lshr i32 %10, 16
  %and31 = and i32 %shr30, 255
  %idxprom32 = zext i32 %and31 to i64
  %arrayidx33 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom32
  %11 = load i32, i32* %arrayidx33, align 4, !tbaa !7
  %shr34 = lshr i32 %shr30, 8
  %and35 = and i32 %shr34, 255
  %idxprom36 = zext i32 %and35 to i64
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom36
  %12 = load i32, i32* %arrayidx37, align 4, !tbaa !7
  %xor38 = xor i32 %11, %12
  %xor39 = xor i32 %xor27, %xor38
  %xor40 = xor i32 %xor15, %xor39
  %13 = bitcast %union.anon.21* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #6
  ret i32 %xor40
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u32(i32 %data, i32 %init_val) #1 {
entry:
  %0 = call i32 asm sideeffect "crc32l $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %data, i32 %init_val) #6, !srcloc !120
  ret i32 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_1word(i32 %data, i32 %init_val) #1 {
entry:
  %xor = xor i32 %init_val, %data
  %and = and i32 %xor, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !7
  %shr = lshr i32 %xor, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom2
  %1 = load i32, i32* %arrayidx3, align 4, !tbaa !7
  %xor4 = xor i32 %0, %1
  %shr5 = lshr i32 %xor, 16
  %and6 = and i32 %shr5, 255
  %idxprom7 = zext i32 %and6 to i64
  %arrayidx8 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom7
  %2 = load i32, i32* %arrayidx8, align 4, !tbaa !7
  %shr9 = lshr i32 %shr5, 8
  %and10 = and i32 %shr9, 255
  %idxprom11 = zext i32 %and10 to i64
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom11
  %3 = load i32, i32* %arrayidx12, align 4, !tbaa !7
  %xor13 = xor i32 %2, %3
  %xor14 = xor i32 %xor4, %xor13
  ret i32 %xor14
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u16(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %0 = call i32 asm sideeffect "crc32w $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i16 %data, i32 %init_val) #6, !srcloc !121
  ret i32 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_2bytes(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %conv = zext i16 %data to i32
  %xor = xor i32 %init_val, %conv
  %and = and i32 %xor, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !7
  %shr = lshr i32 %xor, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom2
  %1 = load i32, i32* %arrayidx3, align 4, !tbaa !7
  %xor4 = xor i32 %0, %1
  %shr5 = lshr i32 %xor, 16
  %xor6 = xor i32 %xor4, %shr5
  ret i32 %xor6
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u8(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %0 = call i32 asm sideeffect "crc32b $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i8 %data, i32 %init_val) #6, !srcloc !122
  ret i32 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_1byte(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %conv = zext i8 %data to i32
  %xor = xor i32 %init_val, %conv
  %and = and i32 %xor, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !7
  %shr = lshr i32 %xor, 8
  %xor1 = xor i32 %0, %shr
  ret i32 %xor1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @dma_read(i64 %addr, i64 %len, i8* %buf) #1 {
entry:
  %add = add i64 %addr, %len
  %cmp = icmp uge i64 %add, %addr
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %add1 = add i64 %addr, %len
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 41, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.dma_read, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %0 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %addr
  %call = call i8* @rte_memcpy(i8* %buf, i8* %add.ptr, i64 %len)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @rte_memcpy(i8* %dst, i8* %src, i64 %n) #3 {
entry:
  %0 = ptrtoint i8* %dst to i64
  %1 = ptrtoint i8* %src to i64
  %or = or i64 %0, %1
  %and = and i64 %or, 15
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call = call i8* @rte_memcpy_aligned(i8* %dst, i8* %src, i64 %n)
  br label %return

if.else:                                          ; preds = %entry
  %call1 = call i8* @rte_memcpy_generic(i8* %dst, i8* %src, i64 %n)
  br label %return

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi i8* [ %call1, %if.else ], [ %call, %if.then ]
  ret i8* %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @rte_memcpy_aligned(i8* %dst, i8* %src, i64 %n) #1 {
entry:
  %cmp = icmp ult i64 %n, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %and = and i64 %n, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %0 = load i8, i8* %src, align 1, !tbaa !2
  store i8 %0, i8* %dst, align 1, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %src, i64 1
  %add.ptr2 = getelementptr inbounds i8, i8* %dst, i64 1
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %src.addr.0 = phi i8* [ %add.ptr, %if.then1 ], [ %src, %if.then ]
  %dst.addr.0 = phi i8* [ %add.ptr2, %if.then1 ], [ %dst, %if.then ]
  %and3 = and i64 %n, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %1 = bitcast i8* %src.addr.0 to i16*
  %2 = load i16, i16* %1, align 2, !tbaa !42
  %3 = bitcast i8* %dst.addr.0 to i16*
  store i16 %2, i16* %3, align 2, !tbaa !42
  %4 = bitcast i8* %src.addr.0 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %4, i64 1
  %5 = bitcast i16* %add.ptr6 to i8*
  %6 = bitcast i8* %dst.addr.0 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %6, i64 1
  %7 = bitcast i16* %add.ptr7 to i8*
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %src.addr.1 = phi i8* [ %5, %if.then5 ], [ %src.addr.0, %if.end ]
  %dst.addr.1 = phi i8* [ %7, %if.then5 ], [ %dst.addr.0, %if.end ]
  %and9 = and i64 %n, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %8 = bitcast i8* %src.addr.1 to i32*
  %9 = load i32, i32* %8, align 4, !tbaa !7
  %10 = bitcast i8* %dst.addr.1 to i32*
  store i32 %9, i32* %10, align 4, !tbaa !7
  %11 = bitcast i8* %src.addr.1 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %11, i64 1
  %12 = bitcast i32* %add.ptr12 to i8*
  %13 = bitcast i8* %dst.addr.1 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %13, i64 1
  %14 = bitcast i32* %add.ptr13 to i8*
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %src.addr.2 = phi i8* [ %12, %if.then11 ], [ %src.addr.1, %if.end8 ]
  %dst.addr.2 = phi i8* [ %14, %if.then11 ], [ %dst.addr.1, %if.end8 ]
  %and15 = and i64 %n, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %15 = bitcast i8* %src.addr.2 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !81
  %17 = bitcast i8* %dst.addr.2 to i64*
  store i64 %16, i64* %17, align 8, !tbaa !81
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  br label %cleanup

if.end19:                                         ; preds = %entry
  %cmp20 = icmp ule i64 %n, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  call void @rte_mov16(i8* %dst, i8* %src)
  %add.ptr22 = getelementptr inbounds i8, i8* %dst, i64 -16
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %n
  %add.ptr24 = getelementptr inbounds i8, i8* %src, i64 -16
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %n
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  br label %cleanup

if.end26:                                         ; preds = %if.end19
  %cmp27 = icmp ule i64 %n, 64
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  call void @rte_mov32(i8* %dst, i8* %src)
  %add.ptr29 = getelementptr inbounds i8, i8* %dst, i64 -32
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %n
  %add.ptr31 = getelementptr inbounds i8, i8* %src, i64 -32
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %n
  call void @rte_mov32(i8* %add.ptr30, i8* %add.ptr32)
  br label %cleanup

if.end33:                                         ; preds = %if.end26
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end33
  %n.addr.0 = phi i64 [ %n, %if.end33 ], [ %sub, %for.inc ]
  %src.addr.3 = phi i8* [ %src, %if.end33 ], [ %add.ptr36, %for.inc ]
  %dst.addr.3 = phi i8* [ %dst, %if.end33 ], [ %add.ptr35, %for.inc ]
  %cmp34 = icmp uge i64 %n.addr.0, 64
  br i1 %cmp34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @rte_mov64(i8* %dst.addr.3, i8* %src.addr.3)
  %add.ptr35 = getelementptr inbounds i8, i8* %dst.addr.3, i64 64
  %add.ptr36 = getelementptr inbounds i8, i8* %src.addr.3, i64 64
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub = sub i64 %n.addr.0, 64
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %add.ptr37 = getelementptr inbounds i8, i8* %dst.addr.3, i64 -64
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr37, i64 %n.addr.0
  %add.ptr39 = getelementptr inbounds i8, i8* %src.addr.3, i64 -64
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr39, i64 %n.addr.0
  call void @rte_mov64(i8* %add.ptr38, i8* %add.ptr40)
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then28, %if.then21, %if.end18
  ret i8* %dst
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @rte_memcpy_generic(i8* %dst, i8* %src, i64 %n) #9 {
entry:
  %0 = ptrtoint i8* %dst to i64
  %1 = ptrtoint i8* %src to i64
  %cmp = icmp ult i64 %n, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %and = and i64 %n, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = inttoptr i64 %1 to i8*
  %3 = load i8, i8* %2, align 1, !tbaa !2
  %4 = inttoptr i64 %0 to i8*
  store i8 %3, i8* %4, align 1, !tbaa !2
  %5 = inttoptr i64 %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 1
  %6 = ptrtoint i8* %add.ptr to i64
  %7 = inttoptr i64 %0 to i8*
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = ptrtoint i8* %add.ptr2 to i64
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %srcu.0 = phi i64 [ %6, %if.then1 ], [ %1, %if.then ]
  %dstu.0 = phi i64 [ %8, %if.then1 ], [ %0, %if.then ]
  %and3 = and i64 %n, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %9 = inttoptr i64 %srcu.0 to i16*
  %10 = load i16, i16* %9, align 2, !tbaa !42
  %11 = inttoptr i64 %dstu.0 to i16*
  store i16 %10, i16* %11, align 2, !tbaa !42
  %12 = inttoptr i64 %srcu.0 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %12, i64 1
  %13 = ptrtoint i16* %add.ptr6 to i64
  %14 = inttoptr i64 %dstu.0 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %14, i64 1
  %15 = ptrtoint i16* %add.ptr7 to i64
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %srcu.1 = phi i64 [ %13, %if.then5 ], [ %srcu.0, %if.end ]
  %dstu.1 = phi i64 [ %15, %if.then5 ], [ %dstu.0, %if.end ]
  %and9 = and i64 %n, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %16 = inttoptr i64 %srcu.1 to i32*
  %17 = load i32, i32* %16, align 4, !tbaa !7
  %18 = inttoptr i64 %dstu.1 to i32*
  store i32 %17, i32* %18, align 4, !tbaa !7
  %19 = inttoptr i64 %srcu.1 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %19, i64 1
  %20 = ptrtoint i32* %add.ptr12 to i64
  %21 = inttoptr i64 %dstu.1 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %21, i64 1
  %22 = ptrtoint i32* %add.ptr13 to i64
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %srcu.2 = phi i64 [ %20, %if.then11 ], [ %srcu.1, %if.end8 ]
  %dstu.2 = phi i64 [ %22, %if.then11 ], [ %dstu.1, %if.end8 ]
  %and15 = and i64 %n, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %23 = inttoptr i64 %srcu.2 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !81
  %25 = inttoptr i64 %dstu.2 to i64*
  store i64 %24, i64* %25, align 8, !tbaa !81
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  br label %cleanup

if.end19:                                         ; preds = %entry
  %cmp20 = icmp ule i64 %n, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  call void @rte_mov16(i8* %dst, i8* %src)
  %add.ptr22 = getelementptr inbounds i8, i8* %dst, i64 -16
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %n
  %add.ptr24 = getelementptr inbounds i8, i8* %src, i64 -16
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %n
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  br label %cleanup

if.end26:                                         ; preds = %if.end19
  %cmp27 = icmp ule i64 %n, 48
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  call void @rte_mov32(i8* %dst, i8* %src)
  %add.ptr29 = getelementptr inbounds i8, i8* %dst, i64 -16
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %n
  %add.ptr31 = getelementptr inbounds i8, i8* %src, i64 -16
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %n
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr32)
  br label %cleanup

if.end33:                                         ; preds = %if.end26
  %cmp34 = icmp ule i64 %n, 64
  br i1 %cmp34, label %if.then35, label %if.end42

if.then35:                                        ; preds = %if.end33
  call void @rte_mov32(i8* %dst, i8* %src)
  %add.ptr36 = getelementptr inbounds i8, i8* %dst, i64 32
  %add.ptr37 = getelementptr inbounds i8, i8* %src, i64 32
  call void @rte_mov16(i8* %add.ptr36, i8* %add.ptr37)
  %add.ptr38 = getelementptr inbounds i8, i8* %dst, i64 -16
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 %n
  %add.ptr40 = getelementptr inbounds i8, i8* %src, i64 -16
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 %n
  call void @rte_mov16(i8* %add.ptr39, i8* %add.ptr41)
  br label %cleanup

if.end42:                                         ; preds = %if.end33
  %cmp43 = icmp ule i64 %n, 128
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end42
  br label %COPY_BLOCK_128_BACK15

if.end45:                                         ; preds = %if.end42
  %cmp46 = icmp ule i64 %n, 512
  br i1 %cmp46, label %if.then47, label %if.end87

if.then47:                                        ; preds = %if.end45
  %cmp48 = icmp uge i64 %n, 256
  br i1 %cmp48, label %if.then49, label %if.end54

if.then49:                                        ; preds = %if.then47
  %sub = sub i64 %n, 256
  call void @rte_mov128(i8* %dst, i8* %src)
  %add.ptr50 = getelementptr inbounds i8, i8* %dst, i64 128
  %add.ptr51 = getelementptr inbounds i8, i8* %src, i64 128
  call void @rte_mov128(i8* %add.ptr50, i8* %add.ptr51)
  %add.ptr52 = getelementptr inbounds i8, i8* %src, i64 256
  %add.ptr53 = getelementptr inbounds i8, i8* %dst, i64 256
  br label %if.end54

if.end54:                                         ; preds = %if.then49, %if.then47
  %n.addr.0 = phi i64 [ %sub, %if.then49 ], [ %n, %if.then47 ]
  %src.addr.0 = phi i8* [ %add.ptr52, %if.then49 ], [ %src, %if.then47 ]
  %dst.addr.0 = phi i8* [ %add.ptr53, %if.then49 ], [ %dst, %if.then47 ]
  br label %COPY_BLOCK_255_BACK15

COPY_BLOCK_255_BACK15:                            ; preds = %for.end, %if.end54
  %n.addr.1 = phi i64 [ %n.addr.0, %if.end54 ], [ %n.addr.8, %for.end ]
  %src.addr.1 = phi i8* [ %src.addr.0, %if.end54 ], [ %src.addr.8, %for.end ]
  %dst.addr.1 = phi i8* [ %dst.addr.0, %if.end54 ], [ %dst.addr.8, %for.end ]
  %cmp55 = icmp uge i64 %n.addr.1, 128
  br i1 %cmp55, label %if.then56, label %if.end60

if.then56:                                        ; preds = %COPY_BLOCK_255_BACK15
  %sub57 = sub i64 %n.addr.1, 128
  call void @rte_mov128(i8* %dst.addr.1, i8* %src.addr.1)
  %add.ptr58 = getelementptr inbounds i8, i8* %src.addr.1, i64 128
  %add.ptr59 = getelementptr inbounds i8, i8* %dst.addr.1, i64 128
  br label %if.end60

if.end60:                                         ; preds = %if.then56, %COPY_BLOCK_255_BACK15
  %n.addr.2 = phi i64 [ %sub57, %if.then56 ], [ %n.addr.1, %COPY_BLOCK_255_BACK15 ]
  %src.addr.2 = phi i8* [ %add.ptr58, %if.then56 ], [ %src.addr.1, %COPY_BLOCK_255_BACK15 ]
  %dst.addr.2 = phi i8* [ %add.ptr59, %if.then56 ], [ %dst.addr.1, %COPY_BLOCK_255_BACK15 ]
  br label %COPY_BLOCK_128_BACK15

COPY_BLOCK_128_BACK15:                            ; preds = %if.end60, %if.then44
  %n.addr.3 = phi i64 [ %n, %if.then44 ], [ %n.addr.2, %if.end60 ]
  %src.addr.3 = phi i8* [ %src, %if.then44 ], [ %src.addr.2, %if.end60 ]
  %dst.addr.3 = phi i8* [ %dst, %if.then44 ], [ %dst.addr.2, %if.end60 ]
  %cmp61 = icmp uge i64 %n.addr.3, 64
  br i1 %cmp61, label %if.then62, label %if.end66

if.then62:                                        ; preds = %COPY_BLOCK_128_BACK15
  %sub63 = sub i64 %n.addr.3, 64
  call void @rte_mov64(i8* %dst.addr.3, i8* %src.addr.3)
  %add.ptr64 = getelementptr inbounds i8, i8* %src.addr.3, i64 64
  %add.ptr65 = getelementptr inbounds i8, i8* %dst.addr.3, i64 64
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %COPY_BLOCK_128_BACK15
  %n.addr.4 = phi i64 [ %sub63, %if.then62 ], [ %n.addr.3, %COPY_BLOCK_128_BACK15 ]
  %src.addr.4 = phi i8* [ %add.ptr64, %if.then62 ], [ %src.addr.3, %COPY_BLOCK_128_BACK15 ]
  %dst.addr.4 = phi i8* [ %add.ptr65, %if.then62 ], [ %dst.addr.3, %COPY_BLOCK_128_BACK15 ]
  br label %COPY_BLOCK_64_BACK15

COPY_BLOCK_64_BACK15:                             ; preds = %sw.epilog, %if.end66
  %n.addr.5 = phi i64 [ %n.addr.4, %if.end66 ], [ %n.addr.54, %sw.epilog ]
  %src.addr.5 = phi i8* [ %src.addr.4, %if.end66 ], [ %src.addr.54, %sw.epilog ]
  %dst.addr.5 = phi i8* [ %dst.addr.4, %if.end66 ], [ %dst.addr.54, %sw.epilog ]
  %cmp67 = icmp uge i64 %n.addr.5, 32
  br i1 %cmp67, label %if.then68, label %if.end72

if.then68:                                        ; preds = %COPY_BLOCK_64_BACK15
  %sub69 = sub i64 %n.addr.5, 32
  call void @rte_mov32(i8* %dst.addr.5, i8* %src.addr.5)
  %add.ptr70 = getelementptr inbounds i8, i8* %src.addr.5, i64 32
  %add.ptr71 = getelementptr inbounds i8, i8* %dst.addr.5, i64 32
  br label %if.end72

if.end72:                                         ; preds = %if.then68, %COPY_BLOCK_64_BACK15
  %n.addr.6 = phi i64 [ %sub69, %if.then68 ], [ %n.addr.5, %COPY_BLOCK_64_BACK15 ]
  %src.addr.6 = phi i8* [ %add.ptr70, %if.then68 ], [ %src.addr.5, %COPY_BLOCK_64_BACK15 ]
  %dst.addr.6 = phi i8* [ %add.ptr71, %if.then68 ], [ %dst.addr.5, %COPY_BLOCK_64_BACK15 ]
  %cmp73 = icmp ugt i64 %n.addr.6, 16
  br i1 %cmp73, label %if.then74, label %if.end79

if.then74:                                        ; preds = %if.end72
  call void @rte_mov16(i8* %dst.addr.6, i8* %src.addr.6)
  %add.ptr75 = getelementptr inbounds i8, i8* %dst.addr.6, i64 -16
  %add.ptr76 = getelementptr inbounds i8, i8* %add.ptr75, i64 %n.addr.6
  %add.ptr77 = getelementptr inbounds i8, i8* %src.addr.6, i64 -16
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 %n.addr.6
  call void @rte_mov16(i8* %add.ptr76, i8* %add.ptr78)
  br label %cleanup

if.end79:                                         ; preds = %if.end72
  %cmp80 = icmp ugt i64 %n.addr.6, 0
  br i1 %cmp80, label %if.then81, label %if.end86

if.then81:                                        ; preds = %if.end79
  %add.ptr82 = getelementptr inbounds i8, i8* %dst.addr.6, i64 -16
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr82, i64 %n.addr.6
  %add.ptr84 = getelementptr inbounds i8, i8* %src.addr.6, i64 -16
  %add.ptr85 = getelementptr inbounds i8, i8* %add.ptr84, i64 %n.addr.6
  call void @rte_mov16(i8* %add.ptr83, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %if.end79
  br label %cleanup

if.end87:                                         ; preds = %if.end45
  %26 = ptrtoint i8* %dst to i64
  %and88 = and i64 %26, 15
  %cmp89 = icmp ugt i64 %and88, 0
  br i1 %cmp89, label %if.then90, label %if.end95

if.then90:                                        ; preds = %if.end87
  %sub91 = sub i64 16, %and88
  %add = add i64 %sub91, 16
  %sub92 = sub i64 %n, %add
  call void @rte_mov32(i8* %dst, i8* %src)
  %add.ptr93 = getelementptr inbounds i8, i8* %src, i64 %add
  %add.ptr94 = getelementptr inbounds i8, i8* %dst, i64 %add
  br label %if.end95

if.end95:                                         ; preds = %if.then90, %if.end87
  %n.addr.7 = phi i64 [ %sub92, %if.then90 ], [ %n, %if.end87 ]
  %src.addr.7 = phi i8* [ %add.ptr93, %if.then90 ], [ %src, %if.end87 ]
  %dst.addr.7 = phi i8* [ %add.ptr94, %if.then90 ], [ %dst, %if.end87 ]
  %27 = ptrtoint i8* %src.addr.7 to i64
  %and96 = and i64 %27, 15
  %cmp97 = icmp eq i64 %and96, 0
  br i1 %cmp97, label %if.then98, label %if.end103

if.then98:                                        ; preds = %if.end95
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then98
  %n.addr.8 = phi i64 [ %n.addr.7, %if.then98 ], [ %sub102, %for.inc ]
  %src.addr.8 = phi i8* [ %src.addr.7, %if.then98 ], [ %add.ptr101, %for.inc ]
  %dst.addr.8 = phi i8* [ %dst.addr.7, %if.then98 ], [ %add.ptr100, %for.inc ]
  %cmp99 = icmp uge i64 %n.addr.8, 256
  br i1 %cmp99, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @rte_mov256(i8* %dst.addr.8, i8* %src.addr.8)
  %add.ptr100 = getelementptr inbounds i8, i8* %dst.addr.8, i64 256
  %add.ptr101 = getelementptr inbounds i8, i8* %src.addr.8, i64 256
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub102 = sub i64 %n.addr.8, 256
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %COPY_BLOCK_255_BACK15

if.end103:                                        ; preds = %if.end95
  switch i64 %and96, label %sw.default [
    i64 1, label %sw.bb
    i64 2, label %sw.bb198
    i64 3, label %sw.bb302
    i64 4, label %sw.bb406
    i64 5, label %sw.bb510
    i64 6, label %sw.bb614
    i64 7, label %sw.bb718
    i64 8, label %sw.bb822
    i64 9, label %sw.bb926
    i64 10, label %sw.bb1030
    i64 11, label %sw.bb1134
    i64 12, label %sw.bb1238
    i64 13, label %sw.bb1342
    i64 14, label %sw.bb1446
    i64 15, label %sw.bb1550
  ]

sw.bb:                                            ; preds = %if.end103
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb
  %n.addr.9 = phi i64 [ %n.addr.7, %sw.bb ], [ %sub107, %while.body ]
  %src.addr.9 = phi i8* [ %src.addr.7, %sw.bb ], [ %add.ptr132, %while.body ]
  %dst.addr.9 = phi i8* [ %dst.addr.7, %sw.bb ], [ %add.ptr148, %while.body ]
  %cmp104 = icmp uge i64 %n.addr.9, 143
  br i1 %cmp104, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %add.ptr105 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr106 = getelementptr inbounds i8, i8* %add.ptr105, i64 0
  %28 = bitcast i8* %add.ptr106 to <2 x i64>*
  %call = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %28)
  %sub107 = sub i64 %n.addr.9, 128
  %add.ptr108 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr109 = getelementptr inbounds i8, i8* %add.ptr108, i64 16
  %29 = bitcast i8* %add.ptr109 to <2 x i64>*
  %call110 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %29)
  %add.ptr111 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr112 = getelementptr inbounds i8, i8* %add.ptr111, i64 32
  %30 = bitcast i8* %add.ptr112 to <2 x i64>*
  %call113 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %30)
  %add.ptr114 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr115 = getelementptr inbounds i8, i8* %add.ptr114, i64 48
  %31 = bitcast i8* %add.ptr115 to <2 x i64>*
  %call116 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %31)
  %add.ptr117 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr118 = getelementptr inbounds i8, i8* %add.ptr117, i64 64
  %32 = bitcast i8* %add.ptr118 to <2 x i64>*
  %call119 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %32)
  %add.ptr120 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr121 = getelementptr inbounds i8, i8* %add.ptr120, i64 80
  %33 = bitcast i8* %add.ptr121 to <2 x i64>*
  %call122 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %33)
  %add.ptr123 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr124 = getelementptr inbounds i8, i8* %add.ptr123, i64 96
  %34 = bitcast i8* %add.ptr124 to <2 x i64>*
  %call125 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %34)
  %add.ptr126 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr127 = getelementptr inbounds i8, i8* %add.ptr126, i64 112
  %35 = bitcast i8* %add.ptr127 to <2 x i64>*
  %call128 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %35)
  %add.ptr129 = getelementptr inbounds i8, i8* %src.addr.9, i64 -1
  %add.ptr130 = getelementptr inbounds i8, i8* %add.ptr129, i64 128
  %36 = bitcast i8* %add.ptr130 to <2 x i64>*
  %call131 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %36)
  %add.ptr132 = getelementptr inbounds i8, i8* %src.addr.9, i64 128
  %add.ptr133 = getelementptr inbounds i8, i8* %dst.addr.9, i64 0
  %37 = bitcast i8* %add.ptr133 to <2 x i64>*
  %38 = bitcast <2 x i64> %call110 to <16 x i8>
  %39 = bitcast <2 x i64> %call to <16 x i8>
  %palignr = shufflevector <16 x i8> %39, <16 x i8> %38, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %40 = bitcast <16 x i8> %palignr to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %37, <2 x i64> %40)
  %add.ptr134 = getelementptr inbounds i8, i8* %dst.addr.9, i64 16
  %41 = bitcast i8* %add.ptr134 to <2 x i64>*
  %42 = bitcast <2 x i64> %call113 to <16 x i8>
  %43 = bitcast <2 x i64> %call110 to <16 x i8>
  %palignr135 = shufflevector <16 x i8> %43, <16 x i8> %42, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %44 = bitcast <16 x i8> %palignr135 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %41, <2 x i64> %44)
  %add.ptr136 = getelementptr inbounds i8, i8* %dst.addr.9, i64 32
  %45 = bitcast i8* %add.ptr136 to <2 x i64>*
  %46 = bitcast <2 x i64> %call116 to <16 x i8>
  %47 = bitcast <2 x i64> %call113 to <16 x i8>
  %palignr137 = shufflevector <16 x i8> %47, <16 x i8> %46, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %48 = bitcast <16 x i8> %palignr137 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %45, <2 x i64> %48)
  %add.ptr138 = getelementptr inbounds i8, i8* %dst.addr.9, i64 48
  %49 = bitcast i8* %add.ptr138 to <2 x i64>*
  %50 = bitcast <2 x i64> %call119 to <16 x i8>
  %51 = bitcast <2 x i64> %call116 to <16 x i8>
  %palignr139 = shufflevector <16 x i8> %51, <16 x i8> %50, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %52 = bitcast <16 x i8> %palignr139 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %49, <2 x i64> %52)
  %add.ptr140 = getelementptr inbounds i8, i8* %dst.addr.9, i64 64
  %53 = bitcast i8* %add.ptr140 to <2 x i64>*
  %54 = bitcast <2 x i64> %call122 to <16 x i8>
  %55 = bitcast <2 x i64> %call119 to <16 x i8>
  %palignr141 = shufflevector <16 x i8> %55, <16 x i8> %54, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %56 = bitcast <16 x i8> %palignr141 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %53, <2 x i64> %56)
  %add.ptr142 = getelementptr inbounds i8, i8* %dst.addr.9, i64 80
  %57 = bitcast i8* %add.ptr142 to <2 x i64>*
  %58 = bitcast <2 x i64> %call125 to <16 x i8>
  %59 = bitcast <2 x i64> %call122 to <16 x i8>
  %palignr143 = shufflevector <16 x i8> %59, <16 x i8> %58, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %60 = bitcast <16 x i8> %palignr143 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %57, <2 x i64> %60)
  %add.ptr144 = getelementptr inbounds i8, i8* %dst.addr.9, i64 96
  %61 = bitcast i8* %add.ptr144 to <2 x i64>*
  %62 = bitcast <2 x i64> %call128 to <16 x i8>
  %63 = bitcast <2 x i64> %call125 to <16 x i8>
  %palignr145 = shufflevector <16 x i8> %63, <16 x i8> %62, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %64 = bitcast <16 x i8> %palignr145 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %61, <2 x i64> %64)
  %add.ptr146 = getelementptr inbounds i8, i8* %dst.addr.9, i64 112
  %65 = bitcast i8* %add.ptr146 to <2 x i64>*
  %66 = bitcast <2 x i64> %call131 to <16 x i8>
  %67 = bitcast <2 x i64> %call128 to <16 x i8>
  %palignr147 = shufflevector <16 x i8> %67, <16 x i8> %66, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %68 = bitcast <16 x i8> %palignr147 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %65, <2 x i64> %68)
  %add.ptr148 = getelementptr inbounds i8, i8* %dst.addr.9, i64 128
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %conv = trunc i64 %n.addr.9 to i32
  %sub149 = sub i64 %n.addr.9, 16
  %add150 = add i64 %sub149, 1
  %and151 = and i64 %add150, 127
  %add152 = add i64 %and151, 16
  %sub153 = sub i64 %add152, 1
  %conv154 = sext i32 %conv to i64
  %sub155 = sub i64 %conv154, %sub153
  %conv156 = trunc i64 %sub155 to i32
  %idx.ext = sext i32 %conv156 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %src.addr.9, i64 %idx.ext
  %idx.ext158 = sext i32 %conv156 to i64
  %add.ptr159 = getelementptr inbounds i8, i8* %dst.addr.9, i64 %idx.ext158
  %cmp160 = icmp uge i64 %sub153, 47
  br i1 %cmp160, label %if.then162, label %if.end197

if.then162:                                       ; preds = %while.end
  br label %while.cond163

while.cond163:                                    ; preds = %while.body166, %if.then162
  %n.addr.10 = phi i64 [ %sub153, %if.then162 ], [ %sub170, %while.body166 ]
  %src.addr.10 = phi i8* [ %add.ptr157, %if.then162 ], [ %add.ptr177, %while.body166 ]
  %dst.addr.10 = phi i8* [ %add.ptr159, %if.then162 ], [ %add.ptr182, %while.body166 ]
  %cmp164 = icmp uge i64 %n.addr.10, 47
  br i1 %cmp164, label %while.body166, label %while.end183

while.body166:                                    ; preds = %while.cond163
  %add.ptr167 = getelementptr inbounds i8, i8* %src.addr.10, i64 -1
  %add.ptr168 = getelementptr inbounds i8, i8* %add.ptr167, i64 0
  %69 = bitcast i8* %add.ptr168 to <2 x i64>*
  %call169 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %69)
  %sub170 = sub i64 %n.addr.10, 32
  %add.ptr171 = getelementptr inbounds i8, i8* %src.addr.10, i64 -1
  %add.ptr172 = getelementptr inbounds i8, i8* %add.ptr171, i64 16
  %70 = bitcast i8* %add.ptr172 to <2 x i64>*
  %call173 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %70)
  %add.ptr174 = getelementptr inbounds i8, i8* %src.addr.10, i64 -1
  %add.ptr175 = getelementptr inbounds i8, i8* %add.ptr174, i64 32
  %71 = bitcast i8* %add.ptr175 to <2 x i64>*
  %call176 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %71)
  %add.ptr177 = getelementptr inbounds i8, i8* %src.addr.10, i64 32
  %add.ptr178 = getelementptr inbounds i8, i8* %dst.addr.10, i64 0
  %72 = bitcast i8* %add.ptr178 to <2 x i64>*
  %73 = bitcast <2 x i64> %call173 to <16 x i8>
  %74 = bitcast <2 x i64> %call169 to <16 x i8>
  %palignr179 = shufflevector <16 x i8> %74, <16 x i8> %73, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %75 = bitcast <16 x i8> %palignr179 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %72, <2 x i64> %75)
  %add.ptr180 = getelementptr inbounds i8, i8* %dst.addr.10, i64 16
  %76 = bitcast i8* %add.ptr180 to <2 x i64>*
  %77 = bitcast <2 x i64> %call176 to <16 x i8>
  %78 = bitcast <2 x i64> %call173 to <16 x i8>
  %palignr181 = shufflevector <16 x i8> %78, <16 x i8> %77, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %79 = bitcast <16 x i8> %palignr181 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %76, <2 x i64> %79)
  %add.ptr182 = getelementptr inbounds i8, i8* %dst.addr.10, i64 32
  br label %while.cond163

while.end183:                                     ; preds = %while.cond163
  %conv184 = trunc i64 %n.addr.10 to i32
  %sub185 = sub i64 %n.addr.10, 16
  %add186 = add i64 %sub185, 1
  %and187 = and i64 %add186, 31
  %add188 = add i64 %and187, 16
  %sub189 = sub i64 %add188, 1
  %conv190 = sext i32 %conv184 to i64
  %sub191 = sub i64 %conv190, %sub189
  %conv192 = trunc i64 %sub191 to i32
  %idx.ext193 = sext i32 %conv192 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %src.addr.10, i64 %idx.ext193
  %idx.ext195 = sext i32 %conv192 to i64
  %add.ptr196 = getelementptr inbounds i8, i8* %dst.addr.10, i64 %idx.ext195
  br label %if.end197

if.end197:                                        ; preds = %while.end183, %while.end
  %n.addr.11 = phi i64 [ %sub189, %while.end183 ], [ %sub153, %while.end ]
  %src.addr.11 = phi i8* [ %add.ptr194, %while.end183 ], [ %add.ptr157, %while.end ]
  %dst.addr.11 = phi i8* [ %add.ptr196, %while.end183 ], [ %add.ptr159, %while.end ]
  br label %sw.epilog

sw.bb198:                                         ; preds = %if.end103
  br label %while.cond200

while.cond200:                                    ; preds = %while.body203, %sw.bb198
  %n.addr.12 = phi i64 [ %n.addr.7, %sw.bb198 ], [ %sub207, %while.body203 ]
  %src.addr.12 = phi i8* [ %src.addr.7, %sw.bb198 ], [ %add.ptr232, %while.body203 ]
  %dst.addr.12 = phi i8* [ %dst.addr.7, %sw.bb198 ], [ %add.ptr249, %while.body203 ]
  %cmp201 = icmp uge i64 %n.addr.12, 142
  br i1 %cmp201, label %while.body203, label %while.end250

while.body203:                                    ; preds = %while.cond200
  %add.ptr204 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr205 = getelementptr inbounds i8, i8* %add.ptr204, i64 0
  %80 = bitcast i8* %add.ptr205 to <2 x i64>*
  %call206 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %80)
  %sub207 = sub i64 %n.addr.12, 128
  %add.ptr208 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr209 = getelementptr inbounds i8, i8* %add.ptr208, i64 16
  %81 = bitcast i8* %add.ptr209 to <2 x i64>*
  %call210 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %81)
  %add.ptr211 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr211, i64 32
  %82 = bitcast i8* %add.ptr212 to <2 x i64>*
  %call213 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %82)
  %add.ptr214 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr215 = getelementptr inbounds i8, i8* %add.ptr214, i64 48
  %83 = bitcast i8* %add.ptr215 to <2 x i64>*
  %call216 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %83)
  %add.ptr217 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr218 = getelementptr inbounds i8, i8* %add.ptr217, i64 64
  %84 = bitcast i8* %add.ptr218 to <2 x i64>*
  %call219 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %84)
  %add.ptr220 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr221 = getelementptr inbounds i8, i8* %add.ptr220, i64 80
  %85 = bitcast i8* %add.ptr221 to <2 x i64>*
  %call222 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %85)
  %add.ptr223 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 96
  %86 = bitcast i8* %add.ptr224 to <2 x i64>*
  %call225 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %86)
  %add.ptr226 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr227 = getelementptr inbounds i8, i8* %add.ptr226, i64 112
  %87 = bitcast i8* %add.ptr227 to <2 x i64>*
  %call228 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %87)
  %add.ptr229 = getelementptr inbounds i8, i8* %src.addr.12, i64 -2
  %add.ptr230 = getelementptr inbounds i8, i8* %add.ptr229, i64 128
  %88 = bitcast i8* %add.ptr230 to <2 x i64>*
  %call231 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %88)
  %add.ptr232 = getelementptr inbounds i8, i8* %src.addr.12, i64 128
  %add.ptr233 = getelementptr inbounds i8, i8* %dst.addr.12, i64 0
  %89 = bitcast i8* %add.ptr233 to <2 x i64>*
  %90 = bitcast <2 x i64> %call210 to <16 x i8>
  %91 = bitcast <2 x i64> %call206 to <16 x i8>
  %palignr234 = shufflevector <16 x i8> %91, <16 x i8> %90, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %92 = bitcast <16 x i8> %palignr234 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %89, <2 x i64> %92)
  %add.ptr235 = getelementptr inbounds i8, i8* %dst.addr.12, i64 16
  %93 = bitcast i8* %add.ptr235 to <2 x i64>*
  %94 = bitcast <2 x i64> %call213 to <16 x i8>
  %95 = bitcast <2 x i64> %call210 to <16 x i8>
  %palignr236 = shufflevector <16 x i8> %95, <16 x i8> %94, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %96 = bitcast <16 x i8> %palignr236 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %93, <2 x i64> %96)
  %add.ptr237 = getelementptr inbounds i8, i8* %dst.addr.12, i64 32
  %97 = bitcast i8* %add.ptr237 to <2 x i64>*
  %98 = bitcast <2 x i64> %call216 to <16 x i8>
  %99 = bitcast <2 x i64> %call213 to <16 x i8>
  %palignr238 = shufflevector <16 x i8> %99, <16 x i8> %98, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %100 = bitcast <16 x i8> %palignr238 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %97, <2 x i64> %100)
  %add.ptr239 = getelementptr inbounds i8, i8* %dst.addr.12, i64 48
  %101 = bitcast i8* %add.ptr239 to <2 x i64>*
  %102 = bitcast <2 x i64> %call219 to <16 x i8>
  %103 = bitcast <2 x i64> %call216 to <16 x i8>
  %palignr240 = shufflevector <16 x i8> %103, <16 x i8> %102, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %104 = bitcast <16 x i8> %palignr240 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %101, <2 x i64> %104)
  %add.ptr241 = getelementptr inbounds i8, i8* %dst.addr.12, i64 64
  %105 = bitcast i8* %add.ptr241 to <2 x i64>*
  %106 = bitcast <2 x i64> %call222 to <16 x i8>
  %107 = bitcast <2 x i64> %call219 to <16 x i8>
  %palignr242 = shufflevector <16 x i8> %107, <16 x i8> %106, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %108 = bitcast <16 x i8> %palignr242 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %105, <2 x i64> %108)
  %add.ptr243 = getelementptr inbounds i8, i8* %dst.addr.12, i64 80
  %109 = bitcast i8* %add.ptr243 to <2 x i64>*
  %110 = bitcast <2 x i64> %call225 to <16 x i8>
  %111 = bitcast <2 x i64> %call222 to <16 x i8>
  %palignr244 = shufflevector <16 x i8> %111, <16 x i8> %110, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %112 = bitcast <16 x i8> %palignr244 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %109, <2 x i64> %112)
  %add.ptr245 = getelementptr inbounds i8, i8* %dst.addr.12, i64 96
  %113 = bitcast i8* %add.ptr245 to <2 x i64>*
  %114 = bitcast <2 x i64> %call228 to <16 x i8>
  %115 = bitcast <2 x i64> %call225 to <16 x i8>
  %palignr246 = shufflevector <16 x i8> %115, <16 x i8> %114, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %116 = bitcast <16 x i8> %palignr246 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %113, <2 x i64> %116)
  %add.ptr247 = getelementptr inbounds i8, i8* %dst.addr.12, i64 112
  %117 = bitcast i8* %add.ptr247 to <2 x i64>*
  %118 = bitcast <2 x i64> %call231 to <16 x i8>
  %119 = bitcast <2 x i64> %call228 to <16 x i8>
  %palignr248 = shufflevector <16 x i8> %119, <16 x i8> %118, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %120 = bitcast <16 x i8> %palignr248 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %117, <2 x i64> %120)
  %add.ptr249 = getelementptr inbounds i8, i8* %dst.addr.12, i64 128
  br label %while.cond200

while.end250:                                     ; preds = %while.cond200
  %conv251 = trunc i64 %n.addr.12 to i32
  %sub252 = sub i64 %n.addr.12, 16
  %add253 = add i64 %sub252, 2
  %and254 = and i64 %add253, 127
  %add255 = add i64 %and254, 16
  %sub256 = sub i64 %add255, 2
  %conv257 = sext i32 %conv251 to i64
  %sub258 = sub i64 %conv257, %sub256
  %conv259 = trunc i64 %sub258 to i32
  %idx.ext260 = sext i32 %conv259 to i64
  %add.ptr261 = getelementptr inbounds i8, i8* %src.addr.12, i64 %idx.ext260
  %idx.ext262 = sext i32 %conv259 to i64
  %add.ptr263 = getelementptr inbounds i8, i8* %dst.addr.12, i64 %idx.ext262
  %cmp264 = icmp uge i64 %sub256, 46
  br i1 %cmp264, label %if.then266, label %if.end301

if.then266:                                       ; preds = %while.end250
  br label %while.cond267

while.cond267:                                    ; preds = %while.body270, %if.then266
  %n.addr.13 = phi i64 [ %sub256, %if.then266 ], [ %sub274, %while.body270 ]
  %src.addr.13 = phi i8* [ %add.ptr261, %if.then266 ], [ %add.ptr281, %while.body270 ]
  %dst.addr.13 = phi i8* [ %add.ptr263, %if.then266 ], [ %add.ptr286, %while.body270 ]
  %cmp268 = icmp uge i64 %n.addr.13, 46
  br i1 %cmp268, label %while.body270, label %while.end287

while.body270:                                    ; preds = %while.cond267
  %add.ptr271 = getelementptr inbounds i8, i8* %src.addr.13, i64 -2
  %add.ptr272 = getelementptr inbounds i8, i8* %add.ptr271, i64 0
  %121 = bitcast i8* %add.ptr272 to <2 x i64>*
  %call273 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %121)
  %sub274 = sub i64 %n.addr.13, 32
  %add.ptr275 = getelementptr inbounds i8, i8* %src.addr.13, i64 -2
  %add.ptr276 = getelementptr inbounds i8, i8* %add.ptr275, i64 16
  %122 = bitcast i8* %add.ptr276 to <2 x i64>*
  %call277 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %122)
  %add.ptr278 = getelementptr inbounds i8, i8* %src.addr.13, i64 -2
  %add.ptr279 = getelementptr inbounds i8, i8* %add.ptr278, i64 32
  %123 = bitcast i8* %add.ptr279 to <2 x i64>*
  %call280 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %123)
  %add.ptr281 = getelementptr inbounds i8, i8* %src.addr.13, i64 32
  %add.ptr282 = getelementptr inbounds i8, i8* %dst.addr.13, i64 0
  %124 = bitcast i8* %add.ptr282 to <2 x i64>*
  %125 = bitcast <2 x i64> %call277 to <16 x i8>
  %126 = bitcast <2 x i64> %call273 to <16 x i8>
  %palignr283 = shufflevector <16 x i8> %126, <16 x i8> %125, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %127 = bitcast <16 x i8> %palignr283 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %124, <2 x i64> %127)
  %add.ptr284 = getelementptr inbounds i8, i8* %dst.addr.13, i64 16
  %128 = bitcast i8* %add.ptr284 to <2 x i64>*
  %129 = bitcast <2 x i64> %call280 to <16 x i8>
  %130 = bitcast <2 x i64> %call277 to <16 x i8>
  %palignr285 = shufflevector <16 x i8> %130, <16 x i8> %129, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %131 = bitcast <16 x i8> %palignr285 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %128, <2 x i64> %131)
  %add.ptr286 = getelementptr inbounds i8, i8* %dst.addr.13, i64 32
  br label %while.cond267

while.end287:                                     ; preds = %while.cond267
  %conv288 = trunc i64 %n.addr.13 to i32
  %sub289 = sub i64 %n.addr.13, 16
  %add290 = add i64 %sub289, 2
  %and291 = and i64 %add290, 31
  %add292 = add i64 %and291, 16
  %sub293 = sub i64 %add292, 2
  %conv294 = sext i32 %conv288 to i64
  %sub295 = sub i64 %conv294, %sub293
  %conv296 = trunc i64 %sub295 to i32
  %idx.ext297 = sext i32 %conv296 to i64
  %add.ptr298 = getelementptr inbounds i8, i8* %src.addr.13, i64 %idx.ext297
  %idx.ext299 = sext i32 %conv296 to i64
  %add.ptr300 = getelementptr inbounds i8, i8* %dst.addr.13, i64 %idx.ext299
  br label %if.end301

if.end301:                                        ; preds = %while.end287, %while.end250
  %n.addr.14 = phi i64 [ %sub293, %while.end287 ], [ %sub256, %while.end250 ]
  %src.addr.14 = phi i8* [ %add.ptr298, %while.end287 ], [ %add.ptr261, %while.end250 ]
  %dst.addr.14 = phi i8* [ %add.ptr300, %while.end287 ], [ %add.ptr263, %while.end250 ]
  br label %sw.epilog

sw.bb302:                                         ; preds = %if.end103
  br label %while.cond304

while.cond304:                                    ; preds = %while.body307, %sw.bb302
  %n.addr.15 = phi i64 [ %n.addr.7, %sw.bb302 ], [ %sub311, %while.body307 ]
  %src.addr.15 = phi i8* [ %src.addr.7, %sw.bb302 ], [ %add.ptr336, %while.body307 ]
  %dst.addr.15 = phi i8* [ %dst.addr.7, %sw.bb302 ], [ %add.ptr353, %while.body307 ]
  %cmp305 = icmp uge i64 %n.addr.15, 141
  br i1 %cmp305, label %while.body307, label %while.end354

while.body307:                                    ; preds = %while.cond304
  %add.ptr308 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr309 = getelementptr inbounds i8, i8* %add.ptr308, i64 0
  %132 = bitcast i8* %add.ptr309 to <2 x i64>*
  %call310 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %132)
  %sub311 = sub i64 %n.addr.15, 128
  %add.ptr312 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr313 = getelementptr inbounds i8, i8* %add.ptr312, i64 16
  %133 = bitcast i8* %add.ptr313 to <2 x i64>*
  %call314 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %133)
  %add.ptr315 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr316 = getelementptr inbounds i8, i8* %add.ptr315, i64 32
  %134 = bitcast i8* %add.ptr316 to <2 x i64>*
  %call317 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %134)
  %add.ptr318 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr319 = getelementptr inbounds i8, i8* %add.ptr318, i64 48
  %135 = bitcast i8* %add.ptr319 to <2 x i64>*
  %call320 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %135)
  %add.ptr321 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr322 = getelementptr inbounds i8, i8* %add.ptr321, i64 64
  %136 = bitcast i8* %add.ptr322 to <2 x i64>*
  %call323 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %136)
  %add.ptr324 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr325 = getelementptr inbounds i8, i8* %add.ptr324, i64 80
  %137 = bitcast i8* %add.ptr325 to <2 x i64>*
  %call326 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %137)
  %add.ptr327 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr328 = getelementptr inbounds i8, i8* %add.ptr327, i64 96
  %138 = bitcast i8* %add.ptr328 to <2 x i64>*
  %call329 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %138)
  %add.ptr330 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr331 = getelementptr inbounds i8, i8* %add.ptr330, i64 112
  %139 = bitcast i8* %add.ptr331 to <2 x i64>*
  %call332 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %139)
  %add.ptr333 = getelementptr inbounds i8, i8* %src.addr.15, i64 -3
  %add.ptr334 = getelementptr inbounds i8, i8* %add.ptr333, i64 128
  %140 = bitcast i8* %add.ptr334 to <2 x i64>*
  %call335 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %140)
  %add.ptr336 = getelementptr inbounds i8, i8* %src.addr.15, i64 128
  %add.ptr337 = getelementptr inbounds i8, i8* %dst.addr.15, i64 0
  %141 = bitcast i8* %add.ptr337 to <2 x i64>*
  %142 = bitcast <2 x i64> %call314 to <16 x i8>
  %143 = bitcast <2 x i64> %call310 to <16 x i8>
  %palignr338 = shufflevector <16 x i8> %143, <16 x i8> %142, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %144 = bitcast <16 x i8> %palignr338 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %141, <2 x i64> %144)
  %add.ptr339 = getelementptr inbounds i8, i8* %dst.addr.15, i64 16
  %145 = bitcast i8* %add.ptr339 to <2 x i64>*
  %146 = bitcast <2 x i64> %call317 to <16 x i8>
  %147 = bitcast <2 x i64> %call314 to <16 x i8>
  %palignr340 = shufflevector <16 x i8> %147, <16 x i8> %146, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %148 = bitcast <16 x i8> %palignr340 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %145, <2 x i64> %148)
  %add.ptr341 = getelementptr inbounds i8, i8* %dst.addr.15, i64 32
  %149 = bitcast i8* %add.ptr341 to <2 x i64>*
  %150 = bitcast <2 x i64> %call320 to <16 x i8>
  %151 = bitcast <2 x i64> %call317 to <16 x i8>
  %palignr342 = shufflevector <16 x i8> %151, <16 x i8> %150, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %152 = bitcast <16 x i8> %palignr342 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %149, <2 x i64> %152)
  %add.ptr343 = getelementptr inbounds i8, i8* %dst.addr.15, i64 48
  %153 = bitcast i8* %add.ptr343 to <2 x i64>*
  %154 = bitcast <2 x i64> %call323 to <16 x i8>
  %155 = bitcast <2 x i64> %call320 to <16 x i8>
  %palignr344 = shufflevector <16 x i8> %155, <16 x i8> %154, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %156 = bitcast <16 x i8> %palignr344 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %153, <2 x i64> %156)
  %add.ptr345 = getelementptr inbounds i8, i8* %dst.addr.15, i64 64
  %157 = bitcast i8* %add.ptr345 to <2 x i64>*
  %158 = bitcast <2 x i64> %call326 to <16 x i8>
  %159 = bitcast <2 x i64> %call323 to <16 x i8>
  %palignr346 = shufflevector <16 x i8> %159, <16 x i8> %158, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %160 = bitcast <16 x i8> %palignr346 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %157, <2 x i64> %160)
  %add.ptr347 = getelementptr inbounds i8, i8* %dst.addr.15, i64 80
  %161 = bitcast i8* %add.ptr347 to <2 x i64>*
  %162 = bitcast <2 x i64> %call329 to <16 x i8>
  %163 = bitcast <2 x i64> %call326 to <16 x i8>
  %palignr348 = shufflevector <16 x i8> %163, <16 x i8> %162, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %164 = bitcast <16 x i8> %palignr348 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %161, <2 x i64> %164)
  %add.ptr349 = getelementptr inbounds i8, i8* %dst.addr.15, i64 96
  %165 = bitcast i8* %add.ptr349 to <2 x i64>*
  %166 = bitcast <2 x i64> %call332 to <16 x i8>
  %167 = bitcast <2 x i64> %call329 to <16 x i8>
  %palignr350 = shufflevector <16 x i8> %167, <16 x i8> %166, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %168 = bitcast <16 x i8> %palignr350 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %165, <2 x i64> %168)
  %add.ptr351 = getelementptr inbounds i8, i8* %dst.addr.15, i64 112
  %169 = bitcast i8* %add.ptr351 to <2 x i64>*
  %170 = bitcast <2 x i64> %call335 to <16 x i8>
  %171 = bitcast <2 x i64> %call332 to <16 x i8>
  %palignr352 = shufflevector <16 x i8> %171, <16 x i8> %170, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %172 = bitcast <16 x i8> %palignr352 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %169, <2 x i64> %172)
  %add.ptr353 = getelementptr inbounds i8, i8* %dst.addr.15, i64 128
  br label %while.cond304

while.end354:                                     ; preds = %while.cond304
  %conv355 = trunc i64 %n.addr.15 to i32
  %sub356 = sub i64 %n.addr.15, 16
  %add357 = add i64 %sub356, 3
  %and358 = and i64 %add357, 127
  %add359 = add i64 %and358, 16
  %sub360 = sub i64 %add359, 3
  %conv361 = sext i32 %conv355 to i64
  %sub362 = sub i64 %conv361, %sub360
  %conv363 = trunc i64 %sub362 to i32
  %idx.ext364 = sext i32 %conv363 to i64
  %add.ptr365 = getelementptr inbounds i8, i8* %src.addr.15, i64 %idx.ext364
  %idx.ext366 = sext i32 %conv363 to i64
  %add.ptr367 = getelementptr inbounds i8, i8* %dst.addr.15, i64 %idx.ext366
  %cmp368 = icmp uge i64 %sub360, 45
  br i1 %cmp368, label %if.then370, label %if.end405

if.then370:                                       ; preds = %while.end354
  br label %while.cond371

while.cond371:                                    ; preds = %while.body374, %if.then370
  %n.addr.16 = phi i64 [ %sub360, %if.then370 ], [ %sub378, %while.body374 ]
  %src.addr.16 = phi i8* [ %add.ptr365, %if.then370 ], [ %add.ptr385, %while.body374 ]
  %dst.addr.16 = phi i8* [ %add.ptr367, %if.then370 ], [ %add.ptr390, %while.body374 ]
  %cmp372 = icmp uge i64 %n.addr.16, 45
  br i1 %cmp372, label %while.body374, label %while.end391

while.body374:                                    ; preds = %while.cond371
  %add.ptr375 = getelementptr inbounds i8, i8* %src.addr.16, i64 -3
  %add.ptr376 = getelementptr inbounds i8, i8* %add.ptr375, i64 0
  %173 = bitcast i8* %add.ptr376 to <2 x i64>*
  %call377 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %173)
  %sub378 = sub i64 %n.addr.16, 32
  %add.ptr379 = getelementptr inbounds i8, i8* %src.addr.16, i64 -3
  %add.ptr380 = getelementptr inbounds i8, i8* %add.ptr379, i64 16
  %174 = bitcast i8* %add.ptr380 to <2 x i64>*
  %call381 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %174)
  %add.ptr382 = getelementptr inbounds i8, i8* %src.addr.16, i64 -3
  %add.ptr383 = getelementptr inbounds i8, i8* %add.ptr382, i64 32
  %175 = bitcast i8* %add.ptr383 to <2 x i64>*
  %call384 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %175)
  %add.ptr385 = getelementptr inbounds i8, i8* %src.addr.16, i64 32
  %add.ptr386 = getelementptr inbounds i8, i8* %dst.addr.16, i64 0
  %176 = bitcast i8* %add.ptr386 to <2 x i64>*
  %177 = bitcast <2 x i64> %call381 to <16 x i8>
  %178 = bitcast <2 x i64> %call377 to <16 x i8>
  %palignr387 = shufflevector <16 x i8> %178, <16 x i8> %177, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %179 = bitcast <16 x i8> %palignr387 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %176, <2 x i64> %179)
  %add.ptr388 = getelementptr inbounds i8, i8* %dst.addr.16, i64 16
  %180 = bitcast i8* %add.ptr388 to <2 x i64>*
  %181 = bitcast <2 x i64> %call384 to <16 x i8>
  %182 = bitcast <2 x i64> %call381 to <16 x i8>
  %palignr389 = shufflevector <16 x i8> %182, <16 x i8> %181, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %183 = bitcast <16 x i8> %palignr389 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %180, <2 x i64> %183)
  %add.ptr390 = getelementptr inbounds i8, i8* %dst.addr.16, i64 32
  br label %while.cond371

while.end391:                                     ; preds = %while.cond371
  %conv392 = trunc i64 %n.addr.16 to i32
  %sub393 = sub i64 %n.addr.16, 16
  %add394 = add i64 %sub393, 3
  %and395 = and i64 %add394, 31
  %add396 = add i64 %and395, 16
  %sub397 = sub i64 %add396, 3
  %conv398 = sext i32 %conv392 to i64
  %sub399 = sub i64 %conv398, %sub397
  %conv400 = trunc i64 %sub399 to i32
  %idx.ext401 = sext i32 %conv400 to i64
  %add.ptr402 = getelementptr inbounds i8, i8* %src.addr.16, i64 %idx.ext401
  %idx.ext403 = sext i32 %conv400 to i64
  %add.ptr404 = getelementptr inbounds i8, i8* %dst.addr.16, i64 %idx.ext403
  br label %if.end405

if.end405:                                        ; preds = %while.end391, %while.end354
  %n.addr.17 = phi i64 [ %sub397, %while.end391 ], [ %sub360, %while.end354 ]
  %src.addr.17 = phi i8* [ %add.ptr402, %while.end391 ], [ %add.ptr365, %while.end354 ]
  %dst.addr.17 = phi i8* [ %add.ptr404, %while.end391 ], [ %add.ptr367, %while.end354 ]
  br label %sw.epilog

sw.bb406:                                         ; preds = %if.end103
  br label %while.cond408

while.cond408:                                    ; preds = %while.body411, %sw.bb406
  %n.addr.18 = phi i64 [ %n.addr.7, %sw.bb406 ], [ %sub415, %while.body411 ]
  %src.addr.18 = phi i8* [ %src.addr.7, %sw.bb406 ], [ %add.ptr440, %while.body411 ]
  %dst.addr.18 = phi i8* [ %dst.addr.7, %sw.bb406 ], [ %add.ptr457, %while.body411 ]
  %cmp409 = icmp uge i64 %n.addr.18, 140
  br i1 %cmp409, label %while.body411, label %while.end458

while.body411:                                    ; preds = %while.cond408
  %add.ptr412 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr413 = getelementptr inbounds i8, i8* %add.ptr412, i64 0
  %184 = bitcast i8* %add.ptr413 to <2 x i64>*
  %call414 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %184)
  %sub415 = sub i64 %n.addr.18, 128
  %add.ptr416 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr417 = getelementptr inbounds i8, i8* %add.ptr416, i64 16
  %185 = bitcast i8* %add.ptr417 to <2 x i64>*
  %call418 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %185)
  %add.ptr419 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr420 = getelementptr inbounds i8, i8* %add.ptr419, i64 32
  %186 = bitcast i8* %add.ptr420 to <2 x i64>*
  %call421 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %186)
  %add.ptr422 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr423 = getelementptr inbounds i8, i8* %add.ptr422, i64 48
  %187 = bitcast i8* %add.ptr423 to <2 x i64>*
  %call424 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %187)
  %add.ptr425 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr426 = getelementptr inbounds i8, i8* %add.ptr425, i64 64
  %188 = bitcast i8* %add.ptr426 to <2 x i64>*
  %call427 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %188)
  %add.ptr428 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr429 = getelementptr inbounds i8, i8* %add.ptr428, i64 80
  %189 = bitcast i8* %add.ptr429 to <2 x i64>*
  %call430 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %189)
  %add.ptr431 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr432 = getelementptr inbounds i8, i8* %add.ptr431, i64 96
  %190 = bitcast i8* %add.ptr432 to <2 x i64>*
  %call433 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %190)
  %add.ptr434 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr435 = getelementptr inbounds i8, i8* %add.ptr434, i64 112
  %191 = bitcast i8* %add.ptr435 to <2 x i64>*
  %call436 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %191)
  %add.ptr437 = getelementptr inbounds i8, i8* %src.addr.18, i64 -4
  %add.ptr438 = getelementptr inbounds i8, i8* %add.ptr437, i64 128
  %192 = bitcast i8* %add.ptr438 to <2 x i64>*
  %call439 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %192)
  %add.ptr440 = getelementptr inbounds i8, i8* %src.addr.18, i64 128
  %add.ptr441 = getelementptr inbounds i8, i8* %dst.addr.18, i64 0
  %193 = bitcast i8* %add.ptr441 to <2 x i64>*
  %194 = bitcast <2 x i64> %call418 to <16 x i8>
  %195 = bitcast <2 x i64> %call414 to <16 x i8>
  %palignr442 = shufflevector <16 x i8> %195, <16 x i8> %194, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %196 = bitcast <16 x i8> %palignr442 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %193, <2 x i64> %196)
  %add.ptr443 = getelementptr inbounds i8, i8* %dst.addr.18, i64 16
  %197 = bitcast i8* %add.ptr443 to <2 x i64>*
  %198 = bitcast <2 x i64> %call421 to <16 x i8>
  %199 = bitcast <2 x i64> %call418 to <16 x i8>
  %palignr444 = shufflevector <16 x i8> %199, <16 x i8> %198, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %200 = bitcast <16 x i8> %palignr444 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %197, <2 x i64> %200)
  %add.ptr445 = getelementptr inbounds i8, i8* %dst.addr.18, i64 32
  %201 = bitcast i8* %add.ptr445 to <2 x i64>*
  %202 = bitcast <2 x i64> %call424 to <16 x i8>
  %203 = bitcast <2 x i64> %call421 to <16 x i8>
  %palignr446 = shufflevector <16 x i8> %203, <16 x i8> %202, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %204 = bitcast <16 x i8> %palignr446 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %201, <2 x i64> %204)
  %add.ptr447 = getelementptr inbounds i8, i8* %dst.addr.18, i64 48
  %205 = bitcast i8* %add.ptr447 to <2 x i64>*
  %206 = bitcast <2 x i64> %call427 to <16 x i8>
  %207 = bitcast <2 x i64> %call424 to <16 x i8>
  %palignr448 = shufflevector <16 x i8> %207, <16 x i8> %206, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %208 = bitcast <16 x i8> %palignr448 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %205, <2 x i64> %208)
  %add.ptr449 = getelementptr inbounds i8, i8* %dst.addr.18, i64 64
  %209 = bitcast i8* %add.ptr449 to <2 x i64>*
  %210 = bitcast <2 x i64> %call430 to <16 x i8>
  %211 = bitcast <2 x i64> %call427 to <16 x i8>
  %palignr450 = shufflevector <16 x i8> %211, <16 x i8> %210, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %212 = bitcast <16 x i8> %palignr450 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %209, <2 x i64> %212)
  %add.ptr451 = getelementptr inbounds i8, i8* %dst.addr.18, i64 80
  %213 = bitcast i8* %add.ptr451 to <2 x i64>*
  %214 = bitcast <2 x i64> %call433 to <16 x i8>
  %215 = bitcast <2 x i64> %call430 to <16 x i8>
  %palignr452 = shufflevector <16 x i8> %215, <16 x i8> %214, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %216 = bitcast <16 x i8> %palignr452 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %213, <2 x i64> %216)
  %add.ptr453 = getelementptr inbounds i8, i8* %dst.addr.18, i64 96
  %217 = bitcast i8* %add.ptr453 to <2 x i64>*
  %218 = bitcast <2 x i64> %call436 to <16 x i8>
  %219 = bitcast <2 x i64> %call433 to <16 x i8>
  %palignr454 = shufflevector <16 x i8> %219, <16 x i8> %218, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %220 = bitcast <16 x i8> %palignr454 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %217, <2 x i64> %220)
  %add.ptr455 = getelementptr inbounds i8, i8* %dst.addr.18, i64 112
  %221 = bitcast i8* %add.ptr455 to <2 x i64>*
  %222 = bitcast <2 x i64> %call439 to <16 x i8>
  %223 = bitcast <2 x i64> %call436 to <16 x i8>
  %palignr456 = shufflevector <16 x i8> %223, <16 x i8> %222, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %224 = bitcast <16 x i8> %palignr456 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %221, <2 x i64> %224)
  %add.ptr457 = getelementptr inbounds i8, i8* %dst.addr.18, i64 128
  br label %while.cond408

while.end458:                                     ; preds = %while.cond408
  %conv459 = trunc i64 %n.addr.18 to i32
  %sub460 = sub i64 %n.addr.18, 16
  %add461 = add i64 %sub460, 4
  %and462 = and i64 %add461, 127
  %add463 = add i64 %and462, 16
  %sub464 = sub i64 %add463, 4
  %conv465 = sext i32 %conv459 to i64
  %sub466 = sub i64 %conv465, %sub464
  %conv467 = trunc i64 %sub466 to i32
  %idx.ext468 = sext i32 %conv467 to i64
  %add.ptr469 = getelementptr inbounds i8, i8* %src.addr.18, i64 %idx.ext468
  %idx.ext470 = sext i32 %conv467 to i64
  %add.ptr471 = getelementptr inbounds i8, i8* %dst.addr.18, i64 %idx.ext470
  %cmp472 = icmp uge i64 %sub464, 44
  br i1 %cmp472, label %if.then474, label %if.end509

if.then474:                                       ; preds = %while.end458
  br label %while.cond475

while.cond475:                                    ; preds = %while.body478, %if.then474
  %n.addr.19 = phi i64 [ %sub464, %if.then474 ], [ %sub482, %while.body478 ]
  %src.addr.19 = phi i8* [ %add.ptr469, %if.then474 ], [ %add.ptr489, %while.body478 ]
  %dst.addr.19 = phi i8* [ %add.ptr471, %if.then474 ], [ %add.ptr494, %while.body478 ]
  %cmp476 = icmp uge i64 %n.addr.19, 44
  br i1 %cmp476, label %while.body478, label %while.end495

while.body478:                                    ; preds = %while.cond475
  %add.ptr479 = getelementptr inbounds i8, i8* %src.addr.19, i64 -4
  %add.ptr480 = getelementptr inbounds i8, i8* %add.ptr479, i64 0
  %225 = bitcast i8* %add.ptr480 to <2 x i64>*
  %call481 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %225)
  %sub482 = sub i64 %n.addr.19, 32
  %add.ptr483 = getelementptr inbounds i8, i8* %src.addr.19, i64 -4
  %add.ptr484 = getelementptr inbounds i8, i8* %add.ptr483, i64 16
  %226 = bitcast i8* %add.ptr484 to <2 x i64>*
  %call485 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %226)
  %add.ptr486 = getelementptr inbounds i8, i8* %src.addr.19, i64 -4
  %add.ptr487 = getelementptr inbounds i8, i8* %add.ptr486, i64 32
  %227 = bitcast i8* %add.ptr487 to <2 x i64>*
  %call488 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %227)
  %add.ptr489 = getelementptr inbounds i8, i8* %src.addr.19, i64 32
  %add.ptr490 = getelementptr inbounds i8, i8* %dst.addr.19, i64 0
  %228 = bitcast i8* %add.ptr490 to <2 x i64>*
  %229 = bitcast <2 x i64> %call485 to <16 x i8>
  %230 = bitcast <2 x i64> %call481 to <16 x i8>
  %palignr491 = shufflevector <16 x i8> %230, <16 x i8> %229, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %231 = bitcast <16 x i8> %palignr491 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %228, <2 x i64> %231)
  %add.ptr492 = getelementptr inbounds i8, i8* %dst.addr.19, i64 16
  %232 = bitcast i8* %add.ptr492 to <2 x i64>*
  %233 = bitcast <2 x i64> %call488 to <16 x i8>
  %234 = bitcast <2 x i64> %call485 to <16 x i8>
  %palignr493 = shufflevector <16 x i8> %234, <16 x i8> %233, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %235 = bitcast <16 x i8> %palignr493 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %232, <2 x i64> %235)
  %add.ptr494 = getelementptr inbounds i8, i8* %dst.addr.19, i64 32
  br label %while.cond475

while.end495:                                     ; preds = %while.cond475
  %conv496 = trunc i64 %n.addr.19 to i32
  %sub497 = sub i64 %n.addr.19, 16
  %add498 = add i64 %sub497, 4
  %and499 = and i64 %add498, 31
  %add500 = add i64 %and499, 16
  %sub501 = sub i64 %add500, 4
  %conv502 = sext i32 %conv496 to i64
  %sub503 = sub i64 %conv502, %sub501
  %conv504 = trunc i64 %sub503 to i32
  %idx.ext505 = sext i32 %conv504 to i64
  %add.ptr506 = getelementptr inbounds i8, i8* %src.addr.19, i64 %idx.ext505
  %idx.ext507 = sext i32 %conv504 to i64
  %add.ptr508 = getelementptr inbounds i8, i8* %dst.addr.19, i64 %idx.ext507
  br label %if.end509

if.end509:                                        ; preds = %while.end495, %while.end458
  %n.addr.20 = phi i64 [ %sub501, %while.end495 ], [ %sub464, %while.end458 ]
  %src.addr.20 = phi i8* [ %add.ptr506, %while.end495 ], [ %add.ptr469, %while.end458 ]
  %dst.addr.20 = phi i8* [ %add.ptr508, %while.end495 ], [ %add.ptr471, %while.end458 ]
  br label %sw.epilog

sw.bb510:                                         ; preds = %if.end103
  br label %while.cond512

while.cond512:                                    ; preds = %while.body515, %sw.bb510
  %n.addr.21 = phi i64 [ %n.addr.7, %sw.bb510 ], [ %sub519, %while.body515 ]
  %src.addr.21 = phi i8* [ %src.addr.7, %sw.bb510 ], [ %add.ptr544, %while.body515 ]
  %dst.addr.21 = phi i8* [ %dst.addr.7, %sw.bb510 ], [ %add.ptr561, %while.body515 ]
  %cmp513 = icmp uge i64 %n.addr.21, 139
  br i1 %cmp513, label %while.body515, label %while.end562

while.body515:                                    ; preds = %while.cond512
  %add.ptr516 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr517 = getelementptr inbounds i8, i8* %add.ptr516, i64 0
  %236 = bitcast i8* %add.ptr517 to <2 x i64>*
  %call518 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %236)
  %sub519 = sub i64 %n.addr.21, 128
  %add.ptr520 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr521 = getelementptr inbounds i8, i8* %add.ptr520, i64 16
  %237 = bitcast i8* %add.ptr521 to <2 x i64>*
  %call522 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %237)
  %add.ptr523 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr524 = getelementptr inbounds i8, i8* %add.ptr523, i64 32
  %238 = bitcast i8* %add.ptr524 to <2 x i64>*
  %call525 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %238)
  %add.ptr526 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr527 = getelementptr inbounds i8, i8* %add.ptr526, i64 48
  %239 = bitcast i8* %add.ptr527 to <2 x i64>*
  %call528 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %239)
  %add.ptr529 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr530 = getelementptr inbounds i8, i8* %add.ptr529, i64 64
  %240 = bitcast i8* %add.ptr530 to <2 x i64>*
  %call531 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %240)
  %add.ptr532 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr533 = getelementptr inbounds i8, i8* %add.ptr532, i64 80
  %241 = bitcast i8* %add.ptr533 to <2 x i64>*
  %call534 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %241)
  %add.ptr535 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr536 = getelementptr inbounds i8, i8* %add.ptr535, i64 96
  %242 = bitcast i8* %add.ptr536 to <2 x i64>*
  %call537 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %242)
  %add.ptr538 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr539 = getelementptr inbounds i8, i8* %add.ptr538, i64 112
  %243 = bitcast i8* %add.ptr539 to <2 x i64>*
  %call540 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %243)
  %add.ptr541 = getelementptr inbounds i8, i8* %src.addr.21, i64 -5
  %add.ptr542 = getelementptr inbounds i8, i8* %add.ptr541, i64 128
  %244 = bitcast i8* %add.ptr542 to <2 x i64>*
  %call543 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %244)
  %add.ptr544 = getelementptr inbounds i8, i8* %src.addr.21, i64 128
  %add.ptr545 = getelementptr inbounds i8, i8* %dst.addr.21, i64 0
  %245 = bitcast i8* %add.ptr545 to <2 x i64>*
  %246 = bitcast <2 x i64> %call522 to <16 x i8>
  %247 = bitcast <2 x i64> %call518 to <16 x i8>
  %palignr546 = shufflevector <16 x i8> %247, <16 x i8> %246, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %248 = bitcast <16 x i8> %palignr546 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %245, <2 x i64> %248)
  %add.ptr547 = getelementptr inbounds i8, i8* %dst.addr.21, i64 16
  %249 = bitcast i8* %add.ptr547 to <2 x i64>*
  %250 = bitcast <2 x i64> %call525 to <16 x i8>
  %251 = bitcast <2 x i64> %call522 to <16 x i8>
  %palignr548 = shufflevector <16 x i8> %251, <16 x i8> %250, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %252 = bitcast <16 x i8> %palignr548 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %249, <2 x i64> %252)
  %add.ptr549 = getelementptr inbounds i8, i8* %dst.addr.21, i64 32
  %253 = bitcast i8* %add.ptr549 to <2 x i64>*
  %254 = bitcast <2 x i64> %call528 to <16 x i8>
  %255 = bitcast <2 x i64> %call525 to <16 x i8>
  %palignr550 = shufflevector <16 x i8> %255, <16 x i8> %254, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %256 = bitcast <16 x i8> %palignr550 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %253, <2 x i64> %256)
  %add.ptr551 = getelementptr inbounds i8, i8* %dst.addr.21, i64 48
  %257 = bitcast i8* %add.ptr551 to <2 x i64>*
  %258 = bitcast <2 x i64> %call531 to <16 x i8>
  %259 = bitcast <2 x i64> %call528 to <16 x i8>
  %palignr552 = shufflevector <16 x i8> %259, <16 x i8> %258, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %260 = bitcast <16 x i8> %palignr552 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %257, <2 x i64> %260)
  %add.ptr553 = getelementptr inbounds i8, i8* %dst.addr.21, i64 64
  %261 = bitcast i8* %add.ptr553 to <2 x i64>*
  %262 = bitcast <2 x i64> %call534 to <16 x i8>
  %263 = bitcast <2 x i64> %call531 to <16 x i8>
  %palignr554 = shufflevector <16 x i8> %263, <16 x i8> %262, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %264 = bitcast <16 x i8> %palignr554 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %261, <2 x i64> %264)
  %add.ptr555 = getelementptr inbounds i8, i8* %dst.addr.21, i64 80
  %265 = bitcast i8* %add.ptr555 to <2 x i64>*
  %266 = bitcast <2 x i64> %call537 to <16 x i8>
  %267 = bitcast <2 x i64> %call534 to <16 x i8>
  %palignr556 = shufflevector <16 x i8> %267, <16 x i8> %266, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %268 = bitcast <16 x i8> %palignr556 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %265, <2 x i64> %268)
  %add.ptr557 = getelementptr inbounds i8, i8* %dst.addr.21, i64 96
  %269 = bitcast i8* %add.ptr557 to <2 x i64>*
  %270 = bitcast <2 x i64> %call540 to <16 x i8>
  %271 = bitcast <2 x i64> %call537 to <16 x i8>
  %palignr558 = shufflevector <16 x i8> %271, <16 x i8> %270, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %272 = bitcast <16 x i8> %palignr558 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %269, <2 x i64> %272)
  %add.ptr559 = getelementptr inbounds i8, i8* %dst.addr.21, i64 112
  %273 = bitcast i8* %add.ptr559 to <2 x i64>*
  %274 = bitcast <2 x i64> %call543 to <16 x i8>
  %275 = bitcast <2 x i64> %call540 to <16 x i8>
  %palignr560 = shufflevector <16 x i8> %275, <16 x i8> %274, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %276 = bitcast <16 x i8> %palignr560 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %273, <2 x i64> %276)
  %add.ptr561 = getelementptr inbounds i8, i8* %dst.addr.21, i64 128
  br label %while.cond512

while.end562:                                     ; preds = %while.cond512
  %conv563 = trunc i64 %n.addr.21 to i32
  %sub564 = sub i64 %n.addr.21, 16
  %add565 = add i64 %sub564, 5
  %and566 = and i64 %add565, 127
  %add567 = add i64 %and566, 16
  %sub568 = sub i64 %add567, 5
  %conv569 = sext i32 %conv563 to i64
  %sub570 = sub i64 %conv569, %sub568
  %conv571 = trunc i64 %sub570 to i32
  %idx.ext572 = sext i32 %conv571 to i64
  %add.ptr573 = getelementptr inbounds i8, i8* %src.addr.21, i64 %idx.ext572
  %idx.ext574 = sext i32 %conv571 to i64
  %add.ptr575 = getelementptr inbounds i8, i8* %dst.addr.21, i64 %idx.ext574
  %cmp576 = icmp uge i64 %sub568, 43
  br i1 %cmp576, label %if.then578, label %if.end613

if.then578:                                       ; preds = %while.end562
  br label %while.cond579

while.cond579:                                    ; preds = %while.body582, %if.then578
  %n.addr.22 = phi i64 [ %sub568, %if.then578 ], [ %sub586, %while.body582 ]
  %src.addr.22 = phi i8* [ %add.ptr573, %if.then578 ], [ %add.ptr593, %while.body582 ]
  %dst.addr.22 = phi i8* [ %add.ptr575, %if.then578 ], [ %add.ptr598, %while.body582 ]
  %cmp580 = icmp uge i64 %n.addr.22, 43
  br i1 %cmp580, label %while.body582, label %while.end599

while.body582:                                    ; preds = %while.cond579
  %add.ptr583 = getelementptr inbounds i8, i8* %src.addr.22, i64 -5
  %add.ptr584 = getelementptr inbounds i8, i8* %add.ptr583, i64 0
  %277 = bitcast i8* %add.ptr584 to <2 x i64>*
  %call585 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %277)
  %sub586 = sub i64 %n.addr.22, 32
  %add.ptr587 = getelementptr inbounds i8, i8* %src.addr.22, i64 -5
  %add.ptr588 = getelementptr inbounds i8, i8* %add.ptr587, i64 16
  %278 = bitcast i8* %add.ptr588 to <2 x i64>*
  %call589 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %278)
  %add.ptr590 = getelementptr inbounds i8, i8* %src.addr.22, i64 -5
  %add.ptr591 = getelementptr inbounds i8, i8* %add.ptr590, i64 32
  %279 = bitcast i8* %add.ptr591 to <2 x i64>*
  %call592 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %279)
  %add.ptr593 = getelementptr inbounds i8, i8* %src.addr.22, i64 32
  %add.ptr594 = getelementptr inbounds i8, i8* %dst.addr.22, i64 0
  %280 = bitcast i8* %add.ptr594 to <2 x i64>*
  %281 = bitcast <2 x i64> %call589 to <16 x i8>
  %282 = bitcast <2 x i64> %call585 to <16 x i8>
  %palignr595 = shufflevector <16 x i8> %282, <16 x i8> %281, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %283 = bitcast <16 x i8> %palignr595 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %280, <2 x i64> %283)
  %add.ptr596 = getelementptr inbounds i8, i8* %dst.addr.22, i64 16
  %284 = bitcast i8* %add.ptr596 to <2 x i64>*
  %285 = bitcast <2 x i64> %call592 to <16 x i8>
  %286 = bitcast <2 x i64> %call589 to <16 x i8>
  %palignr597 = shufflevector <16 x i8> %286, <16 x i8> %285, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %287 = bitcast <16 x i8> %palignr597 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %284, <2 x i64> %287)
  %add.ptr598 = getelementptr inbounds i8, i8* %dst.addr.22, i64 32
  br label %while.cond579

while.end599:                                     ; preds = %while.cond579
  %conv600 = trunc i64 %n.addr.22 to i32
  %sub601 = sub i64 %n.addr.22, 16
  %add602 = add i64 %sub601, 5
  %and603 = and i64 %add602, 31
  %add604 = add i64 %and603, 16
  %sub605 = sub i64 %add604, 5
  %conv606 = sext i32 %conv600 to i64
  %sub607 = sub i64 %conv606, %sub605
  %conv608 = trunc i64 %sub607 to i32
  %idx.ext609 = sext i32 %conv608 to i64
  %add.ptr610 = getelementptr inbounds i8, i8* %src.addr.22, i64 %idx.ext609
  %idx.ext611 = sext i32 %conv608 to i64
  %add.ptr612 = getelementptr inbounds i8, i8* %dst.addr.22, i64 %idx.ext611
  br label %if.end613

if.end613:                                        ; preds = %while.end599, %while.end562
  %n.addr.23 = phi i64 [ %sub605, %while.end599 ], [ %sub568, %while.end562 ]
  %src.addr.23 = phi i8* [ %add.ptr610, %while.end599 ], [ %add.ptr573, %while.end562 ]
  %dst.addr.23 = phi i8* [ %add.ptr612, %while.end599 ], [ %add.ptr575, %while.end562 ]
  br label %sw.epilog

sw.bb614:                                         ; preds = %if.end103
  br label %while.cond616

while.cond616:                                    ; preds = %while.body619, %sw.bb614
  %n.addr.24 = phi i64 [ %n.addr.7, %sw.bb614 ], [ %sub623, %while.body619 ]
  %src.addr.24 = phi i8* [ %src.addr.7, %sw.bb614 ], [ %add.ptr648, %while.body619 ]
  %dst.addr.24 = phi i8* [ %dst.addr.7, %sw.bb614 ], [ %add.ptr665, %while.body619 ]
  %cmp617 = icmp uge i64 %n.addr.24, 138
  br i1 %cmp617, label %while.body619, label %while.end666

while.body619:                                    ; preds = %while.cond616
  %add.ptr620 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr621 = getelementptr inbounds i8, i8* %add.ptr620, i64 0
  %288 = bitcast i8* %add.ptr621 to <2 x i64>*
  %call622 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %288)
  %sub623 = sub i64 %n.addr.24, 128
  %add.ptr624 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr625 = getelementptr inbounds i8, i8* %add.ptr624, i64 16
  %289 = bitcast i8* %add.ptr625 to <2 x i64>*
  %call626 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %289)
  %add.ptr627 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr628 = getelementptr inbounds i8, i8* %add.ptr627, i64 32
  %290 = bitcast i8* %add.ptr628 to <2 x i64>*
  %call629 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %290)
  %add.ptr630 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr631 = getelementptr inbounds i8, i8* %add.ptr630, i64 48
  %291 = bitcast i8* %add.ptr631 to <2 x i64>*
  %call632 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %291)
  %add.ptr633 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr634 = getelementptr inbounds i8, i8* %add.ptr633, i64 64
  %292 = bitcast i8* %add.ptr634 to <2 x i64>*
  %call635 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %292)
  %add.ptr636 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr637 = getelementptr inbounds i8, i8* %add.ptr636, i64 80
  %293 = bitcast i8* %add.ptr637 to <2 x i64>*
  %call638 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %293)
  %add.ptr639 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr640 = getelementptr inbounds i8, i8* %add.ptr639, i64 96
  %294 = bitcast i8* %add.ptr640 to <2 x i64>*
  %call641 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %294)
  %add.ptr642 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr643 = getelementptr inbounds i8, i8* %add.ptr642, i64 112
  %295 = bitcast i8* %add.ptr643 to <2 x i64>*
  %call644 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %295)
  %add.ptr645 = getelementptr inbounds i8, i8* %src.addr.24, i64 -6
  %add.ptr646 = getelementptr inbounds i8, i8* %add.ptr645, i64 128
  %296 = bitcast i8* %add.ptr646 to <2 x i64>*
  %call647 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %296)
  %add.ptr648 = getelementptr inbounds i8, i8* %src.addr.24, i64 128
  %add.ptr649 = getelementptr inbounds i8, i8* %dst.addr.24, i64 0
  %297 = bitcast i8* %add.ptr649 to <2 x i64>*
  %298 = bitcast <2 x i64> %call626 to <16 x i8>
  %299 = bitcast <2 x i64> %call622 to <16 x i8>
  %palignr650 = shufflevector <16 x i8> %299, <16 x i8> %298, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %300 = bitcast <16 x i8> %palignr650 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %297, <2 x i64> %300)
  %add.ptr651 = getelementptr inbounds i8, i8* %dst.addr.24, i64 16
  %301 = bitcast i8* %add.ptr651 to <2 x i64>*
  %302 = bitcast <2 x i64> %call629 to <16 x i8>
  %303 = bitcast <2 x i64> %call626 to <16 x i8>
  %palignr652 = shufflevector <16 x i8> %303, <16 x i8> %302, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %304 = bitcast <16 x i8> %palignr652 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %301, <2 x i64> %304)
  %add.ptr653 = getelementptr inbounds i8, i8* %dst.addr.24, i64 32
  %305 = bitcast i8* %add.ptr653 to <2 x i64>*
  %306 = bitcast <2 x i64> %call632 to <16 x i8>
  %307 = bitcast <2 x i64> %call629 to <16 x i8>
  %palignr654 = shufflevector <16 x i8> %307, <16 x i8> %306, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %308 = bitcast <16 x i8> %palignr654 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %305, <2 x i64> %308)
  %add.ptr655 = getelementptr inbounds i8, i8* %dst.addr.24, i64 48
  %309 = bitcast i8* %add.ptr655 to <2 x i64>*
  %310 = bitcast <2 x i64> %call635 to <16 x i8>
  %311 = bitcast <2 x i64> %call632 to <16 x i8>
  %palignr656 = shufflevector <16 x i8> %311, <16 x i8> %310, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %312 = bitcast <16 x i8> %palignr656 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %309, <2 x i64> %312)
  %add.ptr657 = getelementptr inbounds i8, i8* %dst.addr.24, i64 64
  %313 = bitcast i8* %add.ptr657 to <2 x i64>*
  %314 = bitcast <2 x i64> %call638 to <16 x i8>
  %315 = bitcast <2 x i64> %call635 to <16 x i8>
  %palignr658 = shufflevector <16 x i8> %315, <16 x i8> %314, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %316 = bitcast <16 x i8> %palignr658 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %313, <2 x i64> %316)
  %add.ptr659 = getelementptr inbounds i8, i8* %dst.addr.24, i64 80
  %317 = bitcast i8* %add.ptr659 to <2 x i64>*
  %318 = bitcast <2 x i64> %call641 to <16 x i8>
  %319 = bitcast <2 x i64> %call638 to <16 x i8>
  %palignr660 = shufflevector <16 x i8> %319, <16 x i8> %318, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %320 = bitcast <16 x i8> %palignr660 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %317, <2 x i64> %320)
  %add.ptr661 = getelementptr inbounds i8, i8* %dst.addr.24, i64 96
  %321 = bitcast i8* %add.ptr661 to <2 x i64>*
  %322 = bitcast <2 x i64> %call644 to <16 x i8>
  %323 = bitcast <2 x i64> %call641 to <16 x i8>
  %palignr662 = shufflevector <16 x i8> %323, <16 x i8> %322, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %324 = bitcast <16 x i8> %palignr662 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %321, <2 x i64> %324)
  %add.ptr663 = getelementptr inbounds i8, i8* %dst.addr.24, i64 112
  %325 = bitcast i8* %add.ptr663 to <2 x i64>*
  %326 = bitcast <2 x i64> %call647 to <16 x i8>
  %327 = bitcast <2 x i64> %call644 to <16 x i8>
  %palignr664 = shufflevector <16 x i8> %327, <16 x i8> %326, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %328 = bitcast <16 x i8> %palignr664 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %325, <2 x i64> %328)
  %add.ptr665 = getelementptr inbounds i8, i8* %dst.addr.24, i64 128
  br label %while.cond616

while.end666:                                     ; preds = %while.cond616
  %conv667 = trunc i64 %n.addr.24 to i32
  %sub668 = sub i64 %n.addr.24, 16
  %add669 = add i64 %sub668, 6
  %and670 = and i64 %add669, 127
  %add671 = add i64 %and670, 16
  %sub672 = sub i64 %add671, 6
  %conv673 = sext i32 %conv667 to i64
  %sub674 = sub i64 %conv673, %sub672
  %conv675 = trunc i64 %sub674 to i32
  %idx.ext676 = sext i32 %conv675 to i64
  %add.ptr677 = getelementptr inbounds i8, i8* %src.addr.24, i64 %idx.ext676
  %idx.ext678 = sext i32 %conv675 to i64
  %add.ptr679 = getelementptr inbounds i8, i8* %dst.addr.24, i64 %idx.ext678
  %cmp680 = icmp uge i64 %sub672, 42
  br i1 %cmp680, label %if.then682, label %if.end717

if.then682:                                       ; preds = %while.end666
  br label %while.cond683

while.cond683:                                    ; preds = %while.body686, %if.then682
  %n.addr.25 = phi i64 [ %sub672, %if.then682 ], [ %sub690, %while.body686 ]
  %src.addr.25 = phi i8* [ %add.ptr677, %if.then682 ], [ %add.ptr697, %while.body686 ]
  %dst.addr.25 = phi i8* [ %add.ptr679, %if.then682 ], [ %add.ptr702, %while.body686 ]
  %cmp684 = icmp uge i64 %n.addr.25, 42
  br i1 %cmp684, label %while.body686, label %while.end703

while.body686:                                    ; preds = %while.cond683
  %add.ptr687 = getelementptr inbounds i8, i8* %src.addr.25, i64 -6
  %add.ptr688 = getelementptr inbounds i8, i8* %add.ptr687, i64 0
  %329 = bitcast i8* %add.ptr688 to <2 x i64>*
  %call689 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %329)
  %sub690 = sub i64 %n.addr.25, 32
  %add.ptr691 = getelementptr inbounds i8, i8* %src.addr.25, i64 -6
  %add.ptr692 = getelementptr inbounds i8, i8* %add.ptr691, i64 16
  %330 = bitcast i8* %add.ptr692 to <2 x i64>*
  %call693 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %330)
  %add.ptr694 = getelementptr inbounds i8, i8* %src.addr.25, i64 -6
  %add.ptr695 = getelementptr inbounds i8, i8* %add.ptr694, i64 32
  %331 = bitcast i8* %add.ptr695 to <2 x i64>*
  %call696 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %331)
  %add.ptr697 = getelementptr inbounds i8, i8* %src.addr.25, i64 32
  %add.ptr698 = getelementptr inbounds i8, i8* %dst.addr.25, i64 0
  %332 = bitcast i8* %add.ptr698 to <2 x i64>*
  %333 = bitcast <2 x i64> %call693 to <16 x i8>
  %334 = bitcast <2 x i64> %call689 to <16 x i8>
  %palignr699 = shufflevector <16 x i8> %334, <16 x i8> %333, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %335 = bitcast <16 x i8> %palignr699 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %332, <2 x i64> %335)
  %add.ptr700 = getelementptr inbounds i8, i8* %dst.addr.25, i64 16
  %336 = bitcast i8* %add.ptr700 to <2 x i64>*
  %337 = bitcast <2 x i64> %call696 to <16 x i8>
  %338 = bitcast <2 x i64> %call693 to <16 x i8>
  %palignr701 = shufflevector <16 x i8> %338, <16 x i8> %337, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %339 = bitcast <16 x i8> %palignr701 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %336, <2 x i64> %339)
  %add.ptr702 = getelementptr inbounds i8, i8* %dst.addr.25, i64 32
  br label %while.cond683

while.end703:                                     ; preds = %while.cond683
  %conv704 = trunc i64 %n.addr.25 to i32
  %sub705 = sub i64 %n.addr.25, 16
  %add706 = add i64 %sub705, 6
  %and707 = and i64 %add706, 31
  %add708 = add i64 %and707, 16
  %sub709 = sub i64 %add708, 6
  %conv710 = sext i32 %conv704 to i64
  %sub711 = sub i64 %conv710, %sub709
  %conv712 = trunc i64 %sub711 to i32
  %idx.ext713 = sext i32 %conv712 to i64
  %add.ptr714 = getelementptr inbounds i8, i8* %src.addr.25, i64 %idx.ext713
  %idx.ext715 = sext i32 %conv712 to i64
  %add.ptr716 = getelementptr inbounds i8, i8* %dst.addr.25, i64 %idx.ext715
  br label %if.end717

if.end717:                                        ; preds = %while.end703, %while.end666
  %n.addr.26 = phi i64 [ %sub709, %while.end703 ], [ %sub672, %while.end666 ]
  %src.addr.26 = phi i8* [ %add.ptr714, %while.end703 ], [ %add.ptr677, %while.end666 ]
  %dst.addr.26 = phi i8* [ %add.ptr716, %while.end703 ], [ %add.ptr679, %while.end666 ]
  br label %sw.epilog

sw.bb718:                                         ; preds = %if.end103
  br label %while.cond720

while.cond720:                                    ; preds = %while.body723, %sw.bb718
  %n.addr.27 = phi i64 [ %n.addr.7, %sw.bb718 ], [ %sub727, %while.body723 ]
  %src.addr.27 = phi i8* [ %src.addr.7, %sw.bb718 ], [ %add.ptr752, %while.body723 ]
  %dst.addr.27 = phi i8* [ %dst.addr.7, %sw.bb718 ], [ %add.ptr769, %while.body723 ]
  %cmp721 = icmp uge i64 %n.addr.27, 137
  br i1 %cmp721, label %while.body723, label %while.end770

while.body723:                                    ; preds = %while.cond720
  %add.ptr724 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr725 = getelementptr inbounds i8, i8* %add.ptr724, i64 0
  %340 = bitcast i8* %add.ptr725 to <2 x i64>*
  %call726 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %340)
  %sub727 = sub i64 %n.addr.27, 128
  %add.ptr728 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr729 = getelementptr inbounds i8, i8* %add.ptr728, i64 16
  %341 = bitcast i8* %add.ptr729 to <2 x i64>*
  %call730 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %341)
  %add.ptr731 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr732 = getelementptr inbounds i8, i8* %add.ptr731, i64 32
  %342 = bitcast i8* %add.ptr732 to <2 x i64>*
  %call733 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %342)
  %add.ptr734 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr735 = getelementptr inbounds i8, i8* %add.ptr734, i64 48
  %343 = bitcast i8* %add.ptr735 to <2 x i64>*
  %call736 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %343)
  %add.ptr737 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr738 = getelementptr inbounds i8, i8* %add.ptr737, i64 64
  %344 = bitcast i8* %add.ptr738 to <2 x i64>*
  %call739 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %344)
  %add.ptr740 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr741 = getelementptr inbounds i8, i8* %add.ptr740, i64 80
  %345 = bitcast i8* %add.ptr741 to <2 x i64>*
  %call742 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %345)
  %add.ptr743 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr744 = getelementptr inbounds i8, i8* %add.ptr743, i64 96
  %346 = bitcast i8* %add.ptr744 to <2 x i64>*
  %call745 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %346)
  %add.ptr746 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr747 = getelementptr inbounds i8, i8* %add.ptr746, i64 112
  %347 = bitcast i8* %add.ptr747 to <2 x i64>*
  %call748 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %347)
  %add.ptr749 = getelementptr inbounds i8, i8* %src.addr.27, i64 -7
  %add.ptr750 = getelementptr inbounds i8, i8* %add.ptr749, i64 128
  %348 = bitcast i8* %add.ptr750 to <2 x i64>*
  %call751 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %348)
  %add.ptr752 = getelementptr inbounds i8, i8* %src.addr.27, i64 128
  %add.ptr753 = getelementptr inbounds i8, i8* %dst.addr.27, i64 0
  %349 = bitcast i8* %add.ptr753 to <2 x i64>*
  %350 = bitcast <2 x i64> %call730 to <16 x i8>
  %351 = bitcast <2 x i64> %call726 to <16 x i8>
  %palignr754 = shufflevector <16 x i8> %351, <16 x i8> %350, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %352 = bitcast <16 x i8> %palignr754 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %349, <2 x i64> %352)
  %add.ptr755 = getelementptr inbounds i8, i8* %dst.addr.27, i64 16
  %353 = bitcast i8* %add.ptr755 to <2 x i64>*
  %354 = bitcast <2 x i64> %call733 to <16 x i8>
  %355 = bitcast <2 x i64> %call730 to <16 x i8>
  %palignr756 = shufflevector <16 x i8> %355, <16 x i8> %354, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %356 = bitcast <16 x i8> %palignr756 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %353, <2 x i64> %356)
  %add.ptr757 = getelementptr inbounds i8, i8* %dst.addr.27, i64 32
  %357 = bitcast i8* %add.ptr757 to <2 x i64>*
  %358 = bitcast <2 x i64> %call736 to <16 x i8>
  %359 = bitcast <2 x i64> %call733 to <16 x i8>
  %palignr758 = shufflevector <16 x i8> %359, <16 x i8> %358, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %360 = bitcast <16 x i8> %palignr758 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %357, <2 x i64> %360)
  %add.ptr759 = getelementptr inbounds i8, i8* %dst.addr.27, i64 48
  %361 = bitcast i8* %add.ptr759 to <2 x i64>*
  %362 = bitcast <2 x i64> %call739 to <16 x i8>
  %363 = bitcast <2 x i64> %call736 to <16 x i8>
  %palignr760 = shufflevector <16 x i8> %363, <16 x i8> %362, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %364 = bitcast <16 x i8> %palignr760 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %361, <2 x i64> %364)
  %add.ptr761 = getelementptr inbounds i8, i8* %dst.addr.27, i64 64
  %365 = bitcast i8* %add.ptr761 to <2 x i64>*
  %366 = bitcast <2 x i64> %call742 to <16 x i8>
  %367 = bitcast <2 x i64> %call739 to <16 x i8>
  %palignr762 = shufflevector <16 x i8> %367, <16 x i8> %366, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %368 = bitcast <16 x i8> %palignr762 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %365, <2 x i64> %368)
  %add.ptr763 = getelementptr inbounds i8, i8* %dst.addr.27, i64 80
  %369 = bitcast i8* %add.ptr763 to <2 x i64>*
  %370 = bitcast <2 x i64> %call745 to <16 x i8>
  %371 = bitcast <2 x i64> %call742 to <16 x i8>
  %palignr764 = shufflevector <16 x i8> %371, <16 x i8> %370, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %372 = bitcast <16 x i8> %palignr764 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %369, <2 x i64> %372)
  %add.ptr765 = getelementptr inbounds i8, i8* %dst.addr.27, i64 96
  %373 = bitcast i8* %add.ptr765 to <2 x i64>*
  %374 = bitcast <2 x i64> %call748 to <16 x i8>
  %375 = bitcast <2 x i64> %call745 to <16 x i8>
  %palignr766 = shufflevector <16 x i8> %375, <16 x i8> %374, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %376 = bitcast <16 x i8> %palignr766 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %373, <2 x i64> %376)
  %add.ptr767 = getelementptr inbounds i8, i8* %dst.addr.27, i64 112
  %377 = bitcast i8* %add.ptr767 to <2 x i64>*
  %378 = bitcast <2 x i64> %call751 to <16 x i8>
  %379 = bitcast <2 x i64> %call748 to <16 x i8>
  %palignr768 = shufflevector <16 x i8> %379, <16 x i8> %378, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %380 = bitcast <16 x i8> %palignr768 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %377, <2 x i64> %380)
  %add.ptr769 = getelementptr inbounds i8, i8* %dst.addr.27, i64 128
  br label %while.cond720

while.end770:                                     ; preds = %while.cond720
  %conv771 = trunc i64 %n.addr.27 to i32
  %sub772 = sub i64 %n.addr.27, 16
  %add773 = add i64 %sub772, 7
  %and774 = and i64 %add773, 127
  %add775 = add i64 %and774, 16
  %sub776 = sub i64 %add775, 7
  %conv777 = sext i32 %conv771 to i64
  %sub778 = sub i64 %conv777, %sub776
  %conv779 = trunc i64 %sub778 to i32
  %idx.ext780 = sext i32 %conv779 to i64
  %add.ptr781 = getelementptr inbounds i8, i8* %src.addr.27, i64 %idx.ext780
  %idx.ext782 = sext i32 %conv779 to i64
  %add.ptr783 = getelementptr inbounds i8, i8* %dst.addr.27, i64 %idx.ext782
  %cmp784 = icmp uge i64 %sub776, 41
  br i1 %cmp784, label %if.then786, label %if.end821

if.then786:                                       ; preds = %while.end770
  br label %while.cond787

while.cond787:                                    ; preds = %while.body790, %if.then786
  %n.addr.28 = phi i64 [ %sub776, %if.then786 ], [ %sub794, %while.body790 ]
  %src.addr.28 = phi i8* [ %add.ptr781, %if.then786 ], [ %add.ptr801, %while.body790 ]
  %dst.addr.28 = phi i8* [ %add.ptr783, %if.then786 ], [ %add.ptr806, %while.body790 ]
  %cmp788 = icmp uge i64 %n.addr.28, 41
  br i1 %cmp788, label %while.body790, label %while.end807

while.body790:                                    ; preds = %while.cond787
  %add.ptr791 = getelementptr inbounds i8, i8* %src.addr.28, i64 -7
  %add.ptr792 = getelementptr inbounds i8, i8* %add.ptr791, i64 0
  %381 = bitcast i8* %add.ptr792 to <2 x i64>*
  %call793 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %381)
  %sub794 = sub i64 %n.addr.28, 32
  %add.ptr795 = getelementptr inbounds i8, i8* %src.addr.28, i64 -7
  %add.ptr796 = getelementptr inbounds i8, i8* %add.ptr795, i64 16
  %382 = bitcast i8* %add.ptr796 to <2 x i64>*
  %call797 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %382)
  %add.ptr798 = getelementptr inbounds i8, i8* %src.addr.28, i64 -7
  %add.ptr799 = getelementptr inbounds i8, i8* %add.ptr798, i64 32
  %383 = bitcast i8* %add.ptr799 to <2 x i64>*
  %call800 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %383)
  %add.ptr801 = getelementptr inbounds i8, i8* %src.addr.28, i64 32
  %add.ptr802 = getelementptr inbounds i8, i8* %dst.addr.28, i64 0
  %384 = bitcast i8* %add.ptr802 to <2 x i64>*
  %385 = bitcast <2 x i64> %call797 to <16 x i8>
  %386 = bitcast <2 x i64> %call793 to <16 x i8>
  %palignr803 = shufflevector <16 x i8> %386, <16 x i8> %385, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %387 = bitcast <16 x i8> %palignr803 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %384, <2 x i64> %387)
  %add.ptr804 = getelementptr inbounds i8, i8* %dst.addr.28, i64 16
  %388 = bitcast i8* %add.ptr804 to <2 x i64>*
  %389 = bitcast <2 x i64> %call800 to <16 x i8>
  %390 = bitcast <2 x i64> %call797 to <16 x i8>
  %palignr805 = shufflevector <16 x i8> %390, <16 x i8> %389, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %391 = bitcast <16 x i8> %palignr805 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %388, <2 x i64> %391)
  %add.ptr806 = getelementptr inbounds i8, i8* %dst.addr.28, i64 32
  br label %while.cond787

while.end807:                                     ; preds = %while.cond787
  %conv808 = trunc i64 %n.addr.28 to i32
  %sub809 = sub i64 %n.addr.28, 16
  %add810 = add i64 %sub809, 7
  %and811 = and i64 %add810, 31
  %add812 = add i64 %and811, 16
  %sub813 = sub i64 %add812, 7
  %conv814 = sext i32 %conv808 to i64
  %sub815 = sub i64 %conv814, %sub813
  %conv816 = trunc i64 %sub815 to i32
  %idx.ext817 = sext i32 %conv816 to i64
  %add.ptr818 = getelementptr inbounds i8, i8* %src.addr.28, i64 %idx.ext817
  %idx.ext819 = sext i32 %conv816 to i64
  %add.ptr820 = getelementptr inbounds i8, i8* %dst.addr.28, i64 %idx.ext819
  br label %if.end821

if.end821:                                        ; preds = %while.end807, %while.end770
  %n.addr.29 = phi i64 [ %sub813, %while.end807 ], [ %sub776, %while.end770 ]
  %src.addr.29 = phi i8* [ %add.ptr818, %while.end807 ], [ %add.ptr781, %while.end770 ]
  %dst.addr.29 = phi i8* [ %add.ptr820, %while.end807 ], [ %add.ptr783, %while.end770 ]
  br label %sw.epilog

sw.bb822:                                         ; preds = %if.end103
  br label %while.cond824

while.cond824:                                    ; preds = %while.body827, %sw.bb822
  %n.addr.30 = phi i64 [ %n.addr.7, %sw.bb822 ], [ %sub831, %while.body827 ]
  %src.addr.30 = phi i8* [ %src.addr.7, %sw.bb822 ], [ %add.ptr856, %while.body827 ]
  %dst.addr.30 = phi i8* [ %dst.addr.7, %sw.bb822 ], [ %add.ptr873, %while.body827 ]
  %cmp825 = icmp uge i64 %n.addr.30, 136
  br i1 %cmp825, label %while.body827, label %while.end874

while.body827:                                    ; preds = %while.cond824
  %add.ptr828 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr829 = getelementptr inbounds i8, i8* %add.ptr828, i64 0
  %392 = bitcast i8* %add.ptr829 to <2 x i64>*
  %call830 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %392)
  %sub831 = sub i64 %n.addr.30, 128
  %add.ptr832 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr833 = getelementptr inbounds i8, i8* %add.ptr832, i64 16
  %393 = bitcast i8* %add.ptr833 to <2 x i64>*
  %call834 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %393)
  %add.ptr835 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr836 = getelementptr inbounds i8, i8* %add.ptr835, i64 32
  %394 = bitcast i8* %add.ptr836 to <2 x i64>*
  %call837 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %394)
  %add.ptr838 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr839 = getelementptr inbounds i8, i8* %add.ptr838, i64 48
  %395 = bitcast i8* %add.ptr839 to <2 x i64>*
  %call840 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %395)
  %add.ptr841 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr842 = getelementptr inbounds i8, i8* %add.ptr841, i64 64
  %396 = bitcast i8* %add.ptr842 to <2 x i64>*
  %call843 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %396)
  %add.ptr844 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr845 = getelementptr inbounds i8, i8* %add.ptr844, i64 80
  %397 = bitcast i8* %add.ptr845 to <2 x i64>*
  %call846 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %397)
  %add.ptr847 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr848 = getelementptr inbounds i8, i8* %add.ptr847, i64 96
  %398 = bitcast i8* %add.ptr848 to <2 x i64>*
  %call849 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %398)
  %add.ptr850 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr851 = getelementptr inbounds i8, i8* %add.ptr850, i64 112
  %399 = bitcast i8* %add.ptr851 to <2 x i64>*
  %call852 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %399)
  %add.ptr853 = getelementptr inbounds i8, i8* %src.addr.30, i64 -8
  %add.ptr854 = getelementptr inbounds i8, i8* %add.ptr853, i64 128
  %400 = bitcast i8* %add.ptr854 to <2 x i64>*
  %call855 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %400)
  %add.ptr856 = getelementptr inbounds i8, i8* %src.addr.30, i64 128
  %add.ptr857 = getelementptr inbounds i8, i8* %dst.addr.30, i64 0
  %401 = bitcast i8* %add.ptr857 to <2 x i64>*
  %402 = bitcast <2 x i64> %call834 to <16 x i8>
  %403 = bitcast <2 x i64> %call830 to <16 x i8>
  %palignr858 = shufflevector <16 x i8> %403, <16 x i8> %402, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %404 = bitcast <16 x i8> %palignr858 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %401, <2 x i64> %404)
  %add.ptr859 = getelementptr inbounds i8, i8* %dst.addr.30, i64 16
  %405 = bitcast i8* %add.ptr859 to <2 x i64>*
  %406 = bitcast <2 x i64> %call837 to <16 x i8>
  %407 = bitcast <2 x i64> %call834 to <16 x i8>
  %palignr860 = shufflevector <16 x i8> %407, <16 x i8> %406, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %408 = bitcast <16 x i8> %palignr860 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %405, <2 x i64> %408)
  %add.ptr861 = getelementptr inbounds i8, i8* %dst.addr.30, i64 32
  %409 = bitcast i8* %add.ptr861 to <2 x i64>*
  %410 = bitcast <2 x i64> %call840 to <16 x i8>
  %411 = bitcast <2 x i64> %call837 to <16 x i8>
  %palignr862 = shufflevector <16 x i8> %411, <16 x i8> %410, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %412 = bitcast <16 x i8> %palignr862 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %409, <2 x i64> %412)
  %add.ptr863 = getelementptr inbounds i8, i8* %dst.addr.30, i64 48
  %413 = bitcast i8* %add.ptr863 to <2 x i64>*
  %414 = bitcast <2 x i64> %call843 to <16 x i8>
  %415 = bitcast <2 x i64> %call840 to <16 x i8>
  %palignr864 = shufflevector <16 x i8> %415, <16 x i8> %414, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %416 = bitcast <16 x i8> %palignr864 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %413, <2 x i64> %416)
  %add.ptr865 = getelementptr inbounds i8, i8* %dst.addr.30, i64 64
  %417 = bitcast i8* %add.ptr865 to <2 x i64>*
  %418 = bitcast <2 x i64> %call846 to <16 x i8>
  %419 = bitcast <2 x i64> %call843 to <16 x i8>
  %palignr866 = shufflevector <16 x i8> %419, <16 x i8> %418, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %420 = bitcast <16 x i8> %palignr866 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %417, <2 x i64> %420)
  %add.ptr867 = getelementptr inbounds i8, i8* %dst.addr.30, i64 80
  %421 = bitcast i8* %add.ptr867 to <2 x i64>*
  %422 = bitcast <2 x i64> %call849 to <16 x i8>
  %423 = bitcast <2 x i64> %call846 to <16 x i8>
  %palignr868 = shufflevector <16 x i8> %423, <16 x i8> %422, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %424 = bitcast <16 x i8> %palignr868 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %421, <2 x i64> %424)
  %add.ptr869 = getelementptr inbounds i8, i8* %dst.addr.30, i64 96
  %425 = bitcast i8* %add.ptr869 to <2 x i64>*
  %426 = bitcast <2 x i64> %call852 to <16 x i8>
  %427 = bitcast <2 x i64> %call849 to <16 x i8>
  %palignr870 = shufflevector <16 x i8> %427, <16 x i8> %426, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %428 = bitcast <16 x i8> %palignr870 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %425, <2 x i64> %428)
  %add.ptr871 = getelementptr inbounds i8, i8* %dst.addr.30, i64 112
  %429 = bitcast i8* %add.ptr871 to <2 x i64>*
  %430 = bitcast <2 x i64> %call855 to <16 x i8>
  %431 = bitcast <2 x i64> %call852 to <16 x i8>
  %palignr872 = shufflevector <16 x i8> %431, <16 x i8> %430, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %432 = bitcast <16 x i8> %palignr872 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %429, <2 x i64> %432)
  %add.ptr873 = getelementptr inbounds i8, i8* %dst.addr.30, i64 128
  br label %while.cond824

while.end874:                                     ; preds = %while.cond824
  %conv875 = trunc i64 %n.addr.30 to i32
  %sub876 = sub i64 %n.addr.30, 16
  %add877 = add i64 %sub876, 8
  %and878 = and i64 %add877, 127
  %add879 = add i64 %and878, 16
  %sub880 = sub i64 %add879, 8
  %conv881 = sext i32 %conv875 to i64
  %sub882 = sub i64 %conv881, %sub880
  %conv883 = trunc i64 %sub882 to i32
  %idx.ext884 = sext i32 %conv883 to i64
  %add.ptr885 = getelementptr inbounds i8, i8* %src.addr.30, i64 %idx.ext884
  %idx.ext886 = sext i32 %conv883 to i64
  %add.ptr887 = getelementptr inbounds i8, i8* %dst.addr.30, i64 %idx.ext886
  %cmp888 = icmp uge i64 %sub880, 40
  br i1 %cmp888, label %if.then890, label %if.end925

if.then890:                                       ; preds = %while.end874
  br label %while.cond891

while.cond891:                                    ; preds = %while.body894, %if.then890
  %n.addr.31 = phi i64 [ %sub880, %if.then890 ], [ %sub898, %while.body894 ]
  %src.addr.31 = phi i8* [ %add.ptr885, %if.then890 ], [ %add.ptr905, %while.body894 ]
  %dst.addr.31 = phi i8* [ %add.ptr887, %if.then890 ], [ %add.ptr910, %while.body894 ]
  %cmp892 = icmp uge i64 %n.addr.31, 40
  br i1 %cmp892, label %while.body894, label %while.end911

while.body894:                                    ; preds = %while.cond891
  %add.ptr895 = getelementptr inbounds i8, i8* %src.addr.31, i64 -8
  %add.ptr896 = getelementptr inbounds i8, i8* %add.ptr895, i64 0
  %433 = bitcast i8* %add.ptr896 to <2 x i64>*
  %call897 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %433)
  %sub898 = sub i64 %n.addr.31, 32
  %add.ptr899 = getelementptr inbounds i8, i8* %src.addr.31, i64 -8
  %add.ptr900 = getelementptr inbounds i8, i8* %add.ptr899, i64 16
  %434 = bitcast i8* %add.ptr900 to <2 x i64>*
  %call901 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %434)
  %add.ptr902 = getelementptr inbounds i8, i8* %src.addr.31, i64 -8
  %add.ptr903 = getelementptr inbounds i8, i8* %add.ptr902, i64 32
  %435 = bitcast i8* %add.ptr903 to <2 x i64>*
  %call904 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %435)
  %add.ptr905 = getelementptr inbounds i8, i8* %src.addr.31, i64 32
  %add.ptr906 = getelementptr inbounds i8, i8* %dst.addr.31, i64 0
  %436 = bitcast i8* %add.ptr906 to <2 x i64>*
  %437 = bitcast <2 x i64> %call901 to <16 x i8>
  %438 = bitcast <2 x i64> %call897 to <16 x i8>
  %palignr907 = shufflevector <16 x i8> %438, <16 x i8> %437, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %439 = bitcast <16 x i8> %palignr907 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %436, <2 x i64> %439)
  %add.ptr908 = getelementptr inbounds i8, i8* %dst.addr.31, i64 16
  %440 = bitcast i8* %add.ptr908 to <2 x i64>*
  %441 = bitcast <2 x i64> %call904 to <16 x i8>
  %442 = bitcast <2 x i64> %call901 to <16 x i8>
  %palignr909 = shufflevector <16 x i8> %442, <16 x i8> %441, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %443 = bitcast <16 x i8> %palignr909 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %440, <2 x i64> %443)
  %add.ptr910 = getelementptr inbounds i8, i8* %dst.addr.31, i64 32
  br label %while.cond891

while.end911:                                     ; preds = %while.cond891
  %conv912 = trunc i64 %n.addr.31 to i32
  %sub913 = sub i64 %n.addr.31, 16
  %add914 = add i64 %sub913, 8
  %and915 = and i64 %add914, 31
  %add916 = add i64 %and915, 16
  %sub917 = sub i64 %add916, 8
  %conv918 = sext i32 %conv912 to i64
  %sub919 = sub i64 %conv918, %sub917
  %conv920 = trunc i64 %sub919 to i32
  %idx.ext921 = sext i32 %conv920 to i64
  %add.ptr922 = getelementptr inbounds i8, i8* %src.addr.31, i64 %idx.ext921
  %idx.ext923 = sext i32 %conv920 to i64
  %add.ptr924 = getelementptr inbounds i8, i8* %dst.addr.31, i64 %idx.ext923
  br label %if.end925

if.end925:                                        ; preds = %while.end911, %while.end874
  %n.addr.32 = phi i64 [ %sub917, %while.end911 ], [ %sub880, %while.end874 ]
  %src.addr.32 = phi i8* [ %add.ptr922, %while.end911 ], [ %add.ptr885, %while.end874 ]
  %dst.addr.32 = phi i8* [ %add.ptr924, %while.end911 ], [ %add.ptr887, %while.end874 ]
  br label %sw.epilog

sw.bb926:                                         ; preds = %if.end103
  br label %while.cond928

while.cond928:                                    ; preds = %while.body931, %sw.bb926
  %n.addr.33 = phi i64 [ %n.addr.7, %sw.bb926 ], [ %sub935, %while.body931 ]
  %src.addr.33 = phi i8* [ %src.addr.7, %sw.bb926 ], [ %add.ptr960, %while.body931 ]
  %dst.addr.33 = phi i8* [ %dst.addr.7, %sw.bb926 ], [ %add.ptr977, %while.body931 ]
  %cmp929 = icmp uge i64 %n.addr.33, 135
  br i1 %cmp929, label %while.body931, label %while.end978

while.body931:                                    ; preds = %while.cond928
  %add.ptr932 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr933 = getelementptr inbounds i8, i8* %add.ptr932, i64 0
  %444 = bitcast i8* %add.ptr933 to <2 x i64>*
  %call934 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %444)
  %sub935 = sub i64 %n.addr.33, 128
  %add.ptr936 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr937 = getelementptr inbounds i8, i8* %add.ptr936, i64 16
  %445 = bitcast i8* %add.ptr937 to <2 x i64>*
  %call938 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %445)
  %add.ptr939 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr940 = getelementptr inbounds i8, i8* %add.ptr939, i64 32
  %446 = bitcast i8* %add.ptr940 to <2 x i64>*
  %call941 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %446)
  %add.ptr942 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr943 = getelementptr inbounds i8, i8* %add.ptr942, i64 48
  %447 = bitcast i8* %add.ptr943 to <2 x i64>*
  %call944 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %447)
  %add.ptr945 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr946 = getelementptr inbounds i8, i8* %add.ptr945, i64 64
  %448 = bitcast i8* %add.ptr946 to <2 x i64>*
  %call947 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %448)
  %add.ptr948 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr949 = getelementptr inbounds i8, i8* %add.ptr948, i64 80
  %449 = bitcast i8* %add.ptr949 to <2 x i64>*
  %call950 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %449)
  %add.ptr951 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr952 = getelementptr inbounds i8, i8* %add.ptr951, i64 96
  %450 = bitcast i8* %add.ptr952 to <2 x i64>*
  %call953 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %450)
  %add.ptr954 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr955 = getelementptr inbounds i8, i8* %add.ptr954, i64 112
  %451 = bitcast i8* %add.ptr955 to <2 x i64>*
  %call956 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %451)
  %add.ptr957 = getelementptr inbounds i8, i8* %src.addr.33, i64 -9
  %add.ptr958 = getelementptr inbounds i8, i8* %add.ptr957, i64 128
  %452 = bitcast i8* %add.ptr958 to <2 x i64>*
  %call959 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %452)
  %add.ptr960 = getelementptr inbounds i8, i8* %src.addr.33, i64 128
  %add.ptr961 = getelementptr inbounds i8, i8* %dst.addr.33, i64 0
  %453 = bitcast i8* %add.ptr961 to <2 x i64>*
  %454 = bitcast <2 x i64> %call938 to <16 x i8>
  %455 = bitcast <2 x i64> %call934 to <16 x i8>
  %palignr962 = shufflevector <16 x i8> %455, <16 x i8> %454, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %456 = bitcast <16 x i8> %palignr962 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %453, <2 x i64> %456)
  %add.ptr963 = getelementptr inbounds i8, i8* %dst.addr.33, i64 16
  %457 = bitcast i8* %add.ptr963 to <2 x i64>*
  %458 = bitcast <2 x i64> %call941 to <16 x i8>
  %459 = bitcast <2 x i64> %call938 to <16 x i8>
  %palignr964 = shufflevector <16 x i8> %459, <16 x i8> %458, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %460 = bitcast <16 x i8> %palignr964 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %457, <2 x i64> %460)
  %add.ptr965 = getelementptr inbounds i8, i8* %dst.addr.33, i64 32
  %461 = bitcast i8* %add.ptr965 to <2 x i64>*
  %462 = bitcast <2 x i64> %call944 to <16 x i8>
  %463 = bitcast <2 x i64> %call941 to <16 x i8>
  %palignr966 = shufflevector <16 x i8> %463, <16 x i8> %462, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %464 = bitcast <16 x i8> %palignr966 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %461, <2 x i64> %464)
  %add.ptr967 = getelementptr inbounds i8, i8* %dst.addr.33, i64 48
  %465 = bitcast i8* %add.ptr967 to <2 x i64>*
  %466 = bitcast <2 x i64> %call947 to <16 x i8>
  %467 = bitcast <2 x i64> %call944 to <16 x i8>
  %palignr968 = shufflevector <16 x i8> %467, <16 x i8> %466, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %468 = bitcast <16 x i8> %palignr968 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %465, <2 x i64> %468)
  %add.ptr969 = getelementptr inbounds i8, i8* %dst.addr.33, i64 64
  %469 = bitcast i8* %add.ptr969 to <2 x i64>*
  %470 = bitcast <2 x i64> %call950 to <16 x i8>
  %471 = bitcast <2 x i64> %call947 to <16 x i8>
  %palignr970 = shufflevector <16 x i8> %471, <16 x i8> %470, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %472 = bitcast <16 x i8> %palignr970 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %469, <2 x i64> %472)
  %add.ptr971 = getelementptr inbounds i8, i8* %dst.addr.33, i64 80
  %473 = bitcast i8* %add.ptr971 to <2 x i64>*
  %474 = bitcast <2 x i64> %call953 to <16 x i8>
  %475 = bitcast <2 x i64> %call950 to <16 x i8>
  %palignr972 = shufflevector <16 x i8> %475, <16 x i8> %474, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %476 = bitcast <16 x i8> %palignr972 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %473, <2 x i64> %476)
  %add.ptr973 = getelementptr inbounds i8, i8* %dst.addr.33, i64 96
  %477 = bitcast i8* %add.ptr973 to <2 x i64>*
  %478 = bitcast <2 x i64> %call956 to <16 x i8>
  %479 = bitcast <2 x i64> %call953 to <16 x i8>
  %palignr974 = shufflevector <16 x i8> %479, <16 x i8> %478, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %480 = bitcast <16 x i8> %palignr974 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %477, <2 x i64> %480)
  %add.ptr975 = getelementptr inbounds i8, i8* %dst.addr.33, i64 112
  %481 = bitcast i8* %add.ptr975 to <2 x i64>*
  %482 = bitcast <2 x i64> %call959 to <16 x i8>
  %483 = bitcast <2 x i64> %call956 to <16 x i8>
  %palignr976 = shufflevector <16 x i8> %483, <16 x i8> %482, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %484 = bitcast <16 x i8> %palignr976 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %481, <2 x i64> %484)
  %add.ptr977 = getelementptr inbounds i8, i8* %dst.addr.33, i64 128
  br label %while.cond928

while.end978:                                     ; preds = %while.cond928
  %conv979 = trunc i64 %n.addr.33 to i32
  %sub980 = sub i64 %n.addr.33, 16
  %add981 = add i64 %sub980, 9
  %and982 = and i64 %add981, 127
  %add983 = add i64 %and982, 16
  %sub984 = sub i64 %add983, 9
  %conv985 = sext i32 %conv979 to i64
  %sub986 = sub i64 %conv985, %sub984
  %conv987 = trunc i64 %sub986 to i32
  %idx.ext988 = sext i32 %conv987 to i64
  %add.ptr989 = getelementptr inbounds i8, i8* %src.addr.33, i64 %idx.ext988
  %idx.ext990 = sext i32 %conv987 to i64
  %add.ptr991 = getelementptr inbounds i8, i8* %dst.addr.33, i64 %idx.ext990
  %cmp992 = icmp uge i64 %sub984, 39
  br i1 %cmp992, label %if.then994, label %if.end1029

if.then994:                                       ; preds = %while.end978
  br label %while.cond995

while.cond995:                                    ; preds = %while.body998, %if.then994
  %n.addr.34 = phi i64 [ %sub984, %if.then994 ], [ %sub1002, %while.body998 ]
  %src.addr.34 = phi i8* [ %add.ptr989, %if.then994 ], [ %add.ptr1009, %while.body998 ]
  %dst.addr.34 = phi i8* [ %add.ptr991, %if.then994 ], [ %add.ptr1014, %while.body998 ]
  %cmp996 = icmp uge i64 %n.addr.34, 39
  br i1 %cmp996, label %while.body998, label %while.end1015

while.body998:                                    ; preds = %while.cond995
  %add.ptr999 = getelementptr inbounds i8, i8* %src.addr.34, i64 -9
  %add.ptr1000 = getelementptr inbounds i8, i8* %add.ptr999, i64 0
  %485 = bitcast i8* %add.ptr1000 to <2 x i64>*
  %call1001 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %485)
  %sub1002 = sub i64 %n.addr.34, 32
  %add.ptr1003 = getelementptr inbounds i8, i8* %src.addr.34, i64 -9
  %add.ptr1004 = getelementptr inbounds i8, i8* %add.ptr1003, i64 16
  %486 = bitcast i8* %add.ptr1004 to <2 x i64>*
  %call1005 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %486)
  %add.ptr1006 = getelementptr inbounds i8, i8* %src.addr.34, i64 -9
  %add.ptr1007 = getelementptr inbounds i8, i8* %add.ptr1006, i64 32
  %487 = bitcast i8* %add.ptr1007 to <2 x i64>*
  %call1008 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %487)
  %add.ptr1009 = getelementptr inbounds i8, i8* %src.addr.34, i64 32
  %add.ptr1010 = getelementptr inbounds i8, i8* %dst.addr.34, i64 0
  %488 = bitcast i8* %add.ptr1010 to <2 x i64>*
  %489 = bitcast <2 x i64> %call1005 to <16 x i8>
  %490 = bitcast <2 x i64> %call1001 to <16 x i8>
  %palignr1011 = shufflevector <16 x i8> %490, <16 x i8> %489, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %491 = bitcast <16 x i8> %palignr1011 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %488, <2 x i64> %491)
  %add.ptr1012 = getelementptr inbounds i8, i8* %dst.addr.34, i64 16
  %492 = bitcast i8* %add.ptr1012 to <2 x i64>*
  %493 = bitcast <2 x i64> %call1008 to <16 x i8>
  %494 = bitcast <2 x i64> %call1005 to <16 x i8>
  %palignr1013 = shufflevector <16 x i8> %494, <16 x i8> %493, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %495 = bitcast <16 x i8> %palignr1013 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %492, <2 x i64> %495)
  %add.ptr1014 = getelementptr inbounds i8, i8* %dst.addr.34, i64 32
  br label %while.cond995

while.end1015:                                    ; preds = %while.cond995
  %conv1016 = trunc i64 %n.addr.34 to i32
  %sub1017 = sub i64 %n.addr.34, 16
  %add1018 = add i64 %sub1017, 9
  %and1019 = and i64 %add1018, 31
  %add1020 = add i64 %and1019, 16
  %sub1021 = sub i64 %add1020, 9
  %conv1022 = sext i32 %conv1016 to i64
  %sub1023 = sub i64 %conv1022, %sub1021
  %conv1024 = trunc i64 %sub1023 to i32
  %idx.ext1025 = sext i32 %conv1024 to i64
  %add.ptr1026 = getelementptr inbounds i8, i8* %src.addr.34, i64 %idx.ext1025
  %idx.ext1027 = sext i32 %conv1024 to i64
  %add.ptr1028 = getelementptr inbounds i8, i8* %dst.addr.34, i64 %idx.ext1027
  br label %if.end1029

if.end1029:                                       ; preds = %while.end1015, %while.end978
  %n.addr.35 = phi i64 [ %sub1021, %while.end1015 ], [ %sub984, %while.end978 ]
  %src.addr.35 = phi i8* [ %add.ptr1026, %while.end1015 ], [ %add.ptr989, %while.end978 ]
  %dst.addr.35 = phi i8* [ %add.ptr1028, %while.end1015 ], [ %add.ptr991, %while.end978 ]
  br label %sw.epilog

sw.bb1030:                                        ; preds = %if.end103
  br label %while.cond1032

while.cond1032:                                   ; preds = %while.body1035, %sw.bb1030
  %n.addr.36 = phi i64 [ %n.addr.7, %sw.bb1030 ], [ %sub1039, %while.body1035 ]
  %src.addr.36 = phi i8* [ %src.addr.7, %sw.bb1030 ], [ %add.ptr1064, %while.body1035 ]
  %dst.addr.36 = phi i8* [ %dst.addr.7, %sw.bb1030 ], [ %add.ptr1081, %while.body1035 ]
  %cmp1033 = icmp uge i64 %n.addr.36, 134
  br i1 %cmp1033, label %while.body1035, label %while.end1082

while.body1035:                                   ; preds = %while.cond1032
  %add.ptr1036 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1037 = getelementptr inbounds i8, i8* %add.ptr1036, i64 0
  %496 = bitcast i8* %add.ptr1037 to <2 x i64>*
  %call1038 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %496)
  %sub1039 = sub i64 %n.addr.36, 128
  %add.ptr1040 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1041 = getelementptr inbounds i8, i8* %add.ptr1040, i64 16
  %497 = bitcast i8* %add.ptr1041 to <2 x i64>*
  %call1042 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %497)
  %add.ptr1043 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1044 = getelementptr inbounds i8, i8* %add.ptr1043, i64 32
  %498 = bitcast i8* %add.ptr1044 to <2 x i64>*
  %call1045 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %498)
  %add.ptr1046 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1047 = getelementptr inbounds i8, i8* %add.ptr1046, i64 48
  %499 = bitcast i8* %add.ptr1047 to <2 x i64>*
  %call1048 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %499)
  %add.ptr1049 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1050 = getelementptr inbounds i8, i8* %add.ptr1049, i64 64
  %500 = bitcast i8* %add.ptr1050 to <2 x i64>*
  %call1051 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %500)
  %add.ptr1052 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1053 = getelementptr inbounds i8, i8* %add.ptr1052, i64 80
  %501 = bitcast i8* %add.ptr1053 to <2 x i64>*
  %call1054 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %501)
  %add.ptr1055 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1056 = getelementptr inbounds i8, i8* %add.ptr1055, i64 96
  %502 = bitcast i8* %add.ptr1056 to <2 x i64>*
  %call1057 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %502)
  %add.ptr1058 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1059 = getelementptr inbounds i8, i8* %add.ptr1058, i64 112
  %503 = bitcast i8* %add.ptr1059 to <2 x i64>*
  %call1060 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %503)
  %add.ptr1061 = getelementptr inbounds i8, i8* %src.addr.36, i64 -10
  %add.ptr1062 = getelementptr inbounds i8, i8* %add.ptr1061, i64 128
  %504 = bitcast i8* %add.ptr1062 to <2 x i64>*
  %call1063 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %504)
  %add.ptr1064 = getelementptr inbounds i8, i8* %src.addr.36, i64 128
  %add.ptr1065 = getelementptr inbounds i8, i8* %dst.addr.36, i64 0
  %505 = bitcast i8* %add.ptr1065 to <2 x i64>*
  %506 = bitcast <2 x i64> %call1042 to <16 x i8>
  %507 = bitcast <2 x i64> %call1038 to <16 x i8>
  %palignr1066 = shufflevector <16 x i8> %507, <16 x i8> %506, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %508 = bitcast <16 x i8> %palignr1066 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %505, <2 x i64> %508)
  %add.ptr1067 = getelementptr inbounds i8, i8* %dst.addr.36, i64 16
  %509 = bitcast i8* %add.ptr1067 to <2 x i64>*
  %510 = bitcast <2 x i64> %call1045 to <16 x i8>
  %511 = bitcast <2 x i64> %call1042 to <16 x i8>
  %palignr1068 = shufflevector <16 x i8> %511, <16 x i8> %510, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %512 = bitcast <16 x i8> %palignr1068 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %509, <2 x i64> %512)
  %add.ptr1069 = getelementptr inbounds i8, i8* %dst.addr.36, i64 32
  %513 = bitcast i8* %add.ptr1069 to <2 x i64>*
  %514 = bitcast <2 x i64> %call1048 to <16 x i8>
  %515 = bitcast <2 x i64> %call1045 to <16 x i8>
  %palignr1070 = shufflevector <16 x i8> %515, <16 x i8> %514, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %516 = bitcast <16 x i8> %palignr1070 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %513, <2 x i64> %516)
  %add.ptr1071 = getelementptr inbounds i8, i8* %dst.addr.36, i64 48
  %517 = bitcast i8* %add.ptr1071 to <2 x i64>*
  %518 = bitcast <2 x i64> %call1051 to <16 x i8>
  %519 = bitcast <2 x i64> %call1048 to <16 x i8>
  %palignr1072 = shufflevector <16 x i8> %519, <16 x i8> %518, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %520 = bitcast <16 x i8> %palignr1072 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %517, <2 x i64> %520)
  %add.ptr1073 = getelementptr inbounds i8, i8* %dst.addr.36, i64 64
  %521 = bitcast i8* %add.ptr1073 to <2 x i64>*
  %522 = bitcast <2 x i64> %call1054 to <16 x i8>
  %523 = bitcast <2 x i64> %call1051 to <16 x i8>
  %palignr1074 = shufflevector <16 x i8> %523, <16 x i8> %522, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %524 = bitcast <16 x i8> %palignr1074 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %521, <2 x i64> %524)
  %add.ptr1075 = getelementptr inbounds i8, i8* %dst.addr.36, i64 80
  %525 = bitcast i8* %add.ptr1075 to <2 x i64>*
  %526 = bitcast <2 x i64> %call1057 to <16 x i8>
  %527 = bitcast <2 x i64> %call1054 to <16 x i8>
  %palignr1076 = shufflevector <16 x i8> %527, <16 x i8> %526, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %528 = bitcast <16 x i8> %palignr1076 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %525, <2 x i64> %528)
  %add.ptr1077 = getelementptr inbounds i8, i8* %dst.addr.36, i64 96
  %529 = bitcast i8* %add.ptr1077 to <2 x i64>*
  %530 = bitcast <2 x i64> %call1060 to <16 x i8>
  %531 = bitcast <2 x i64> %call1057 to <16 x i8>
  %palignr1078 = shufflevector <16 x i8> %531, <16 x i8> %530, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %532 = bitcast <16 x i8> %palignr1078 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %529, <2 x i64> %532)
  %add.ptr1079 = getelementptr inbounds i8, i8* %dst.addr.36, i64 112
  %533 = bitcast i8* %add.ptr1079 to <2 x i64>*
  %534 = bitcast <2 x i64> %call1063 to <16 x i8>
  %535 = bitcast <2 x i64> %call1060 to <16 x i8>
  %palignr1080 = shufflevector <16 x i8> %535, <16 x i8> %534, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %536 = bitcast <16 x i8> %palignr1080 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %533, <2 x i64> %536)
  %add.ptr1081 = getelementptr inbounds i8, i8* %dst.addr.36, i64 128
  br label %while.cond1032

while.end1082:                                    ; preds = %while.cond1032
  %conv1083 = trunc i64 %n.addr.36 to i32
  %sub1084 = sub i64 %n.addr.36, 16
  %add1085 = add i64 %sub1084, 10
  %and1086 = and i64 %add1085, 127
  %add1087 = add i64 %and1086, 16
  %sub1088 = sub i64 %add1087, 10
  %conv1089 = sext i32 %conv1083 to i64
  %sub1090 = sub i64 %conv1089, %sub1088
  %conv1091 = trunc i64 %sub1090 to i32
  %idx.ext1092 = sext i32 %conv1091 to i64
  %add.ptr1093 = getelementptr inbounds i8, i8* %src.addr.36, i64 %idx.ext1092
  %idx.ext1094 = sext i32 %conv1091 to i64
  %add.ptr1095 = getelementptr inbounds i8, i8* %dst.addr.36, i64 %idx.ext1094
  %cmp1096 = icmp uge i64 %sub1088, 38
  br i1 %cmp1096, label %if.then1098, label %if.end1133

if.then1098:                                      ; preds = %while.end1082
  br label %while.cond1099

while.cond1099:                                   ; preds = %while.body1102, %if.then1098
  %n.addr.37 = phi i64 [ %sub1088, %if.then1098 ], [ %sub1106, %while.body1102 ]
  %src.addr.37 = phi i8* [ %add.ptr1093, %if.then1098 ], [ %add.ptr1113, %while.body1102 ]
  %dst.addr.37 = phi i8* [ %add.ptr1095, %if.then1098 ], [ %add.ptr1118, %while.body1102 ]
  %cmp1100 = icmp uge i64 %n.addr.37, 38
  br i1 %cmp1100, label %while.body1102, label %while.end1119

while.body1102:                                   ; preds = %while.cond1099
  %add.ptr1103 = getelementptr inbounds i8, i8* %src.addr.37, i64 -10
  %add.ptr1104 = getelementptr inbounds i8, i8* %add.ptr1103, i64 0
  %537 = bitcast i8* %add.ptr1104 to <2 x i64>*
  %call1105 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %537)
  %sub1106 = sub i64 %n.addr.37, 32
  %add.ptr1107 = getelementptr inbounds i8, i8* %src.addr.37, i64 -10
  %add.ptr1108 = getelementptr inbounds i8, i8* %add.ptr1107, i64 16
  %538 = bitcast i8* %add.ptr1108 to <2 x i64>*
  %call1109 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %538)
  %add.ptr1110 = getelementptr inbounds i8, i8* %src.addr.37, i64 -10
  %add.ptr1111 = getelementptr inbounds i8, i8* %add.ptr1110, i64 32
  %539 = bitcast i8* %add.ptr1111 to <2 x i64>*
  %call1112 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %539)
  %add.ptr1113 = getelementptr inbounds i8, i8* %src.addr.37, i64 32
  %add.ptr1114 = getelementptr inbounds i8, i8* %dst.addr.37, i64 0
  %540 = bitcast i8* %add.ptr1114 to <2 x i64>*
  %541 = bitcast <2 x i64> %call1109 to <16 x i8>
  %542 = bitcast <2 x i64> %call1105 to <16 x i8>
  %palignr1115 = shufflevector <16 x i8> %542, <16 x i8> %541, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %543 = bitcast <16 x i8> %palignr1115 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %540, <2 x i64> %543)
  %add.ptr1116 = getelementptr inbounds i8, i8* %dst.addr.37, i64 16
  %544 = bitcast i8* %add.ptr1116 to <2 x i64>*
  %545 = bitcast <2 x i64> %call1112 to <16 x i8>
  %546 = bitcast <2 x i64> %call1109 to <16 x i8>
  %palignr1117 = shufflevector <16 x i8> %546, <16 x i8> %545, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %547 = bitcast <16 x i8> %palignr1117 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %544, <2 x i64> %547)
  %add.ptr1118 = getelementptr inbounds i8, i8* %dst.addr.37, i64 32
  br label %while.cond1099

while.end1119:                                    ; preds = %while.cond1099
  %conv1120 = trunc i64 %n.addr.37 to i32
  %sub1121 = sub i64 %n.addr.37, 16
  %add1122 = add i64 %sub1121, 10
  %and1123 = and i64 %add1122, 31
  %add1124 = add i64 %and1123, 16
  %sub1125 = sub i64 %add1124, 10
  %conv1126 = sext i32 %conv1120 to i64
  %sub1127 = sub i64 %conv1126, %sub1125
  %conv1128 = trunc i64 %sub1127 to i32
  %idx.ext1129 = sext i32 %conv1128 to i64
  %add.ptr1130 = getelementptr inbounds i8, i8* %src.addr.37, i64 %idx.ext1129
  %idx.ext1131 = sext i32 %conv1128 to i64
  %add.ptr1132 = getelementptr inbounds i8, i8* %dst.addr.37, i64 %idx.ext1131
  br label %if.end1133

if.end1133:                                       ; preds = %while.end1119, %while.end1082
  %n.addr.38 = phi i64 [ %sub1125, %while.end1119 ], [ %sub1088, %while.end1082 ]
  %src.addr.38 = phi i8* [ %add.ptr1130, %while.end1119 ], [ %add.ptr1093, %while.end1082 ]
  %dst.addr.38 = phi i8* [ %add.ptr1132, %while.end1119 ], [ %add.ptr1095, %while.end1082 ]
  br label %sw.epilog

sw.bb1134:                                        ; preds = %if.end103
  br label %while.cond1136

while.cond1136:                                   ; preds = %while.body1139, %sw.bb1134
  %n.addr.39 = phi i64 [ %n.addr.7, %sw.bb1134 ], [ %sub1143, %while.body1139 ]
  %src.addr.39 = phi i8* [ %src.addr.7, %sw.bb1134 ], [ %add.ptr1168, %while.body1139 ]
  %dst.addr.39 = phi i8* [ %dst.addr.7, %sw.bb1134 ], [ %add.ptr1185, %while.body1139 ]
  %cmp1137 = icmp uge i64 %n.addr.39, 133
  br i1 %cmp1137, label %while.body1139, label %while.end1186

while.body1139:                                   ; preds = %while.cond1136
  %add.ptr1140 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1141 = getelementptr inbounds i8, i8* %add.ptr1140, i64 0
  %548 = bitcast i8* %add.ptr1141 to <2 x i64>*
  %call1142 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %548)
  %sub1143 = sub i64 %n.addr.39, 128
  %add.ptr1144 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1145 = getelementptr inbounds i8, i8* %add.ptr1144, i64 16
  %549 = bitcast i8* %add.ptr1145 to <2 x i64>*
  %call1146 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %549)
  %add.ptr1147 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1148 = getelementptr inbounds i8, i8* %add.ptr1147, i64 32
  %550 = bitcast i8* %add.ptr1148 to <2 x i64>*
  %call1149 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %550)
  %add.ptr1150 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1151 = getelementptr inbounds i8, i8* %add.ptr1150, i64 48
  %551 = bitcast i8* %add.ptr1151 to <2 x i64>*
  %call1152 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %551)
  %add.ptr1153 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1154 = getelementptr inbounds i8, i8* %add.ptr1153, i64 64
  %552 = bitcast i8* %add.ptr1154 to <2 x i64>*
  %call1155 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %552)
  %add.ptr1156 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1157 = getelementptr inbounds i8, i8* %add.ptr1156, i64 80
  %553 = bitcast i8* %add.ptr1157 to <2 x i64>*
  %call1158 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %553)
  %add.ptr1159 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1160 = getelementptr inbounds i8, i8* %add.ptr1159, i64 96
  %554 = bitcast i8* %add.ptr1160 to <2 x i64>*
  %call1161 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %554)
  %add.ptr1162 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1163 = getelementptr inbounds i8, i8* %add.ptr1162, i64 112
  %555 = bitcast i8* %add.ptr1163 to <2 x i64>*
  %call1164 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %555)
  %add.ptr1165 = getelementptr inbounds i8, i8* %src.addr.39, i64 -11
  %add.ptr1166 = getelementptr inbounds i8, i8* %add.ptr1165, i64 128
  %556 = bitcast i8* %add.ptr1166 to <2 x i64>*
  %call1167 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %556)
  %add.ptr1168 = getelementptr inbounds i8, i8* %src.addr.39, i64 128
  %add.ptr1169 = getelementptr inbounds i8, i8* %dst.addr.39, i64 0
  %557 = bitcast i8* %add.ptr1169 to <2 x i64>*
  %558 = bitcast <2 x i64> %call1146 to <16 x i8>
  %559 = bitcast <2 x i64> %call1142 to <16 x i8>
  %palignr1170 = shufflevector <16 x i8> %559, <16 x i8> %558, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %560 = bitcast <16 x i8> %palignr1170 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %557, <2 x i64> %560)
  %add.ptr1171 = getelementptr inbounds i8, i8* %dst.addr.39, i64 16
  %561 = bitcast i8* %add.ptr1171 to <2 x i64>*
  %562 = bitcast <2 x i64> %call1149 to <16 x i8>
  %563 = bitcast <2 x i64> %call1146 to <16 x i8>
  %palignr1172 = shufflevector <16 x i8> %563, <16 x i8> %562, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %564 = bitcast <16 x i8> %palignr1172 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %561, <2 x i64> %564)
  %add.ptr1173 = getelementptr inbounds i8, i8* %dst.addr.39, i64 32
  %565 = bitcast i8* %add.ptr1173 to <2 x i64>*
  %566 = bitcast <2 x i64> %call1152 to <16 x i8>
  %567 = bitcast <2 x i64> %call1149 to <16 x i8>
  %palignr1174 = shufflevector <16 x i8> %567, <16 x i8> %566, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %568 = bitcast <16 x i8> %palignr1174 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %565, <2 x i64> %568)
  %add.ptr1175 = getelementptr inbounds i8, i8* %dst.addr.39, i64 48
  %569 = bitcast i8* %add.ptr1175 to <2 x i64>*
  %570 = bitcast <2 x i64> %call1155 to <16 x i8>
  %571 = bitcast <2 x i64> %call1152 to <16 x i8>
  %palignr1176 = shufflevector <16 x i8> %571, <16 x i8> %570, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %572 = bitcast <16 x i8> %palignr1176 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %569, <2 x i64> %572)
  %add.ptr1177 = getelementptr inbounds i8, i8* %dst.addr.39, i64 64
  %573 = bitcast i8* %add.ptr1177 to <2 x i64>*
  %574 = bitcast <2 x i64> %call1158 to <16 x i8>
  %575 = bitcast <2 x i64> %call1155 to <16 x i8>
  %palignr1178 = shufflevector <16 x i8> %575, <16 x i8> %574, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %576 = bitcast <16 x i8> %palignr1178 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %573, <2 x i64> %576)
  %add.ptr1179 = getelementptr inbounds i8, i8* %dst.addr.39, i64 80
  %577 = bitcast i8* %add.ptr1179 to <2 x i64>*
  %578 = bitcast <2 x i64> %call1161 to <16 x i8>
  %579 = bitcast <2 x i64> %call1158 to <16 x i8>
  %palignr1180 = shufflevector <16 x i8> %579, <16 x i8> %578, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %580 = bitcast <16 x i8> %palignr1180 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %577, <2 x i64> %580)
  %add.ptr1181 = getelementptr inbounds i8, i8* %dst.addr.39, i64 96
  %581 = bitcast i8* %add.ptr1181 to <2 x i64>*
  %582 = bitcast <2 x i64> %call1164 to <16 x i8>
  %583 = bitcast <2 x i64> %call1161 to <16 x i8>
  %palignr1182 = shufflevector <16 x i8> %583, <16 x i8> %582, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %584 = bitcast <16 x i8> %palignr1182 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %581, <2 x i64> %584)
  %add.ptr1183 = getelementptr inbounds i8, i8* %dst.addr.39, i64 112
  %585 = bitcast i8* %add.ptr1183 to <2 x i64>*
  %586 = bitcast <2 x i64> %call1167 to <16 x i8>
  %587 = bitcast <2 x i64> %call1164 to <16 x i8>
  %palignr1184 = shufflevector <16 x i8> %587, <16 x i8> %586, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %588 = bitcast <16 x i8> %palignr1184 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %585, <2 x i64> %588)
  %add.ptr1185 = getelementptr inbounds i8, i8* %dst.addr.39, i64 128
  br label %while.cond1136

while.end1186:                                    ; preds = %while.cond1136
  %conv1187 = trunc i64 %n.addr.39 to i32
  %sub1188 = sub i64 %n.addr.39, 16
  %add1189 = add i64 %sub1188, 11
  %and1190 = and i64 %add1189, 127
  %add1191 = add i64 %and1190, 16
  %sub1192 = sub i64 %add1191, 11
  %conv1193 = sext i32 %conv1187 to i64
  %sub1194 = sub i64 %conv1193, %sub1192
  %conv1195 = trunc i64 %sub1194 to i32
  %idx.ext1196 = sext i32 %conv1195 to i64
  %add.ptr1197 = getelementptr inbounds i8, i8* %src.addr.39, i64 %idx.ext1196
  %idx.ext1198 = sext i32 %conv1195 to i64
  %add.ptr1199 = getelementptr inbounds i8, i8* %dst.addr.39, i64 %idx.ext1198
  %cmp1200 = icmp uge i64 %sub1192, 37
  br i1 %cmp1200, label %if.then1202, label %if.end1237

if.then1202:                                      ; preds = %while.end1186
  br label %while.cond1203

while.cond1203:                                   ; preds = %while.body1206, %if.then1202
  %n.addr.40 = phi i64 [ %sub1192, %if.then1202 ], [ %sub1210, %while.body1206 ]
  %src.addr.40 = phi i8* [ %add.ptr1197, %if.then1202 ], [ %add.ptr1217, %while.body1206 ]
  %dst.addr.40 = phi i8* [ %add.ptr1199, %if.then1202 ], [ %add.ptr1222, %while.body1206 ]
  %cmp1204 = icmp uge i64 %n.addr.40, 37
  br i1 %cmp1204, label %while.body1206, label %while.end1223

while.body1206:                                   ; preds = %while.cond1203
  %add.ptr1207 = getelementptr inbounds i8, i8* %src.addr.40, i64 -11
  %add.ptr1208 = getelementptr inbounds i8, i8* %add.ptr1207, i64 0
  %589 = bitcast i8* %add.ptr1208 to <2 x i64>*
  %call1209 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %589)
  %sub1210 = sub i64 %n.addr.40, 32
  %add.ptr1211 = getelementptr inbounds i8, i8* %src.addr.40, i64 -11
  %add.ptr1212 = getelementptr inbounds i8, i8* %add.ptr1211, i64 16
  %590 = bitcast i8* %add.ptr1212 to <2 x i64>*
  %call1213 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %590)
  %add.ptr1214 = getelementptr inbounds i8, i8* %src.addr.40, i64 -11
  %add.ptr1215 = getelementptr inbounds i8, i8* %add.ptr1214, i64 32
  %591 = bitcast i8* %add.ptr1215 to <2 x i64>*
  %call1216 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %591)
  %add.ptr1217 = getelementptr inbounds i8, i8* %src.addr.40, i64 32
  %add.ptr1218 = getelementptr inbounds i8, i8* %dst.addr.40, i64 0
  %592 = bitcast i8* %add.ptr1218 to <2 x i64>*
  %593 = bitcast <2 x i64> %call1213 to <16 x i8>
  %594 = bitcast <2 x i64> %call1209 to <16 x i8>
  %palignr1219 = shufflevector <16 x i8> %594, <16 x i8> %593, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %595 = bitcast <16 x i8> %palignr1219 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %592, <2 x i64> %595)
  %add.ptr1220 = getelementptr inbounds i8, i8* %dst.addr.40, i64 16
  %596 = bitcast i8* %add.ptr1220 to <2 x i64>*
  %597 = bitcast <2 x i64> %call1216 to <16 x i8>
  %598 = bitcast <2 x i64> %call1213 to <16 x i8>
  %palignr1221 = shufflevector <16 x i8> %598, <16 x i8> %597, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %599 = bitcast <16 x i8> %palignr1221 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %596, <2 x i64> %599)
  %add.ptr1222 = getelementptr inbounds i8, i8* %dst.addr.40, i64 32
  br label %while.cond1203

while.end1223:                                    ; preds = %while.cond1203
  %conv1224 = trunc i64 %n.addr.40 to i32
  %sub1225 = sub i64 %n.addr.40, 16
  %add1226 = add i64 %sub1225, 11
  %and1227 = and i64 %add1226, 31
  %add1228 = add i64 %and1227, 16
  %sub1229 = sub i64 %add1228, 11
  %conv1230 = sext i32 %conv1224 to i64
  %sub1231 = sub i64 %conv1230, %sub1229
  %conv1232 = trunc i64 %sub1231 to i32
  %idx.ext1233 = sext i32 %conv1232 to i64
  %add.ptr1234 = getelementptr inbounds i8, i8* %src.addr.40, i64 %idx.ext1233
  %idx.ext1235 = sext i32 %conv1232 to i64
  %add.ptr1236 = getelementptr inbounds i8, i8* %dst.addr.40, i64 %idx.ext1235
  br label %if.end1237

if.end1237:                                       ; preds = %while.end1223, %while.end1186
  %n.addr.41 = phi i64 [ %sub1229, %while.end1223 ], [ %sub1192, %while.end1186 ]
  %src.addr.41 = phi i8* [ %add.ptr1234, %while.end1223 ], [ %add.ptr1197, %while.end1186 ]
  %dst.addr.41 = phi i8* [ %add.ptr1236, %while.end1223 ], [ %add.ptr1199, %while.end1186 ]
  br label %sw.epilog

sw.bb1238:                                        ; preds = %if.end103
  br label %while.cond1240

while.cond1240:                                   ; preds = %while.body1243, %sw.bb1238
  %n.addr.42 = phi i64 [ %n.addr.7, %sw.bb1238 ], [ %sub1247, %while.body1243 ]
  %src.addr.42 = phi i8* [ %src.addr.7, %sw.bb1238 ], [ %add.ptr1272, %while.body1243 ]
  %dst.addr.42 = phi i8* [ %dst.addr.7, %sw.bb1238 ], [ %add.ptr1289, %while.body1243 ]
  %cmp1241 = icmp uge i64 %n.addr.42, 132
  br i1 %cmp1241, label %while.body1243, label %while.end1290

while.body1243:                                   ; preds = %while.cond1240
  %add.ptr1244 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1245 = getelementptr inbounds i8, i8* %add.ptr1244, i64 0
  %600 = bitcast i8* %add.ptr1245 to <2 x i64>*
  %call1246 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %600)
  %sub1247 = sub i64 %n.addr.42, 128
  %add.ptr1248 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1249 = getelementptr inbounds i8, i8* %add.ptr1248, i64 16
  %601 = bitcast i8* %add.ptr1249 to <2 x i64>*
  %call1250 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %601)
  %add.ptr1251 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1252 = getelementptr inbounds i8, i8* %add.ptr1251, i64 32
  %602 = bitcast i8* %add.ptr1252 to <2 x i64>*
  %call1253 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %602)
  %add.ptr1254 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1255 = getelementptr inbounds i8, i8* %add.ptr1254, i64 48
  %603 = bitcast i8* %add.ptr1255 to <2 x i64>*
  %call1256 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %603)
  %add.ptr1257 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1258 = getelementptr inbounds i8, i8* %add.ptr1257, i64 64
  %604 = bitcast i8* %add.ptr1258 to <2 x i64>*
  %call1259 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %604)
  %add.ptr1260 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1261 = getelementptr inbounds i8, i8* %add.ptr1260, i64 80
  %605 = bitcast i8* %add.ptr1261 to <2 x i64>*
  %call1262 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %605)
  %add.ptr1263 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1264 = getelementptr inbounds i8, i8* %add.ptr1263, i64 96
  %606 = bitcast i8* %add.ptr1264 to <2 x i64>*
  %call1265 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %606)
  %add.ptr1266 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1267 = getelementptr inbounds i8, i8* %add.ptr1266, i64 112
  %607 = bitcast i8* %add.ptr1267 to <2 x i64>*
  %call1268 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %607)
  %add.ptr1269 = getelementptr inbounds i8, i8* %src.addr.42, i64 -12
  %add.ptr1270 = getelementptr inbounds i8, i8* %add.ptr1269, i64 128
  %608 = bitcast i8* %add.ptr1270 to <2 x i64>*
  %call1271 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %608)
  %add.ptr1272 = getelementptr inbounds i8, i8* %src.addr.42, i64 128
  %add.ptr1273 = getelementptr inbounds i8, i8* %dst.addr.42, i64 0
  %609 = bitcast i8* %add.ptr1273 to <2 x i64>*
  %610 = bitcast <2 x i64> %call1250 to <16 x i8>
  %611 = bitcast <2 x i64> %call1246 to <16 x i8>
  %palignr1274 = shufflevector <16 x i8> %611, <16 x i8> %610, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %612 = bitcast <16 x i8> %palignr1274 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %609, <2 x i64> %612)
  %add.ptr1275 = getelementptr inbounds i8, i8* %dst.addr.42, i64 16
  %613 = bitcast i8* %add.ptr1275 to <2 x i64>*
  %614 = bitcast <2 x i64> %call1253 to <16 x i8>
  %615 = bitcast <2 x i64> %call1250 to <16 x i8>
  %palignr1276 = shufflevector <16 x i8> %615, <16 x i8> %614, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %616 = bitcast <16 x i8> %palignr1276 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %613, <2 x i64> %616)
  %add.ptr1277 = getelementptr inbounds i8, i8* %dst.addr.42, i64 32
  %617 = bitcast i8* %add.ptr1277 to <2 x i64>*
  %618 = bitcast <2 x i64> %call1256 to <16 x i8>
  %619 = bitcast <2 x i64> %call1253 to <16 x i8>
  %palignr1278 = shufflevector <16 x i8> %619, <16 x i8> %618, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %620 = bitcast <16 x i8> %palignr1278 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %617, <2 x i64> %620)
  %add.ptr1279 = getelementptr inbounds i8, i8* %dst.addr.42, i64 48
  %621 = bitcast i8* %add.ptr1279 to <2 x i64>*
  %622 = bitcast <2 x i64> %call1259 to <16 x i8>
  %623 = bitcast <2 x i64> %call1256 to <16 x i8>
  %palignr1280 = shufflevector <16 x i8> %623, <16 x i8> %622, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %624 = bitcast <16 x i8> %palignr1280 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %621, <2 x i64> %624)
  %add.ptr1281 = getelementptr inbounds i8, i8* %dst.addr.42, i64 64
  %625 = bitcast i8* %add.ptr1281 to <2 x i64>*
  %626 = bitcast <2 x i64> %call1262 to <16 x i8>
  %627 = bitcast <2 x i64> %call1259 to <16 x i8>
  %palignr1282 = shufflevector <16 x i8> %627, <16 x i8> %626, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %628 = bitcast <16 x i8> %palignr1282 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %625, <2 x i64> %628)
  %add.ptr1283 = getelementptr inbounds i8, i8* %dst.addr.42, i64 80
  %629 = bitcast i8* %add.ptr1283 to <2 x i64>*
  %630 = bitcast <2 x i64> %call1265 to <16 x i8>
  %631 = bitcast <2 x i64> %call1262 to <16 x i8>
  %palignr1284 = shufflevector <16 x i8> %631, <16 x i8> %630, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %632 = bitcast <16 x i8> %palignr1284 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %629, <2 x i64> %632)
  %add.ptr1285 = getelementptr inbounds i8, i8* %dst.addr.42, i64 96
  %633 = bitcast i8* %add.ptr1285 to <2 x i64>*
  %634 = bitcast <2 x i64> %call1268 to <16 x i8>
  %635 = bitcast <2 x i64> %call1265 to <16 x i8>
  %palignr1286 = shufflevector <16 x i8> %635, <16 x i8> %634, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %636 = bitcast <16 x i8> %palignr1286 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %633, <2 x i64> %636)
  %add.ptr1287 = getelementptr inbounds i8, i8* %dst.addr.42, i64 112
  %637 = bitcast i8* %add.ptr1287 to <2 x i64>*
  %638 = bitcast <2 x i64> %call1271 to <16 x i8>
  %639 = bitcast <2 x i64> %call1268 to <16 x i8>
  %palignr1288 = shufflevector <16 x i8> %639, <16 x i8> %638, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %640 = bitcast <16 x i8> %palignr1288 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %637, <2 x i64> %640)
  %add.ptr1289 = getelementptr inbounds i8, i8* %dst.addr.42, i64 128
  br label %while.cond1240

while.end1290:                                    ; preds = %while.cond1240
  %conv1291 = trunc i64 %n.addr.42 to i32
  %sub1292 = sub i64 %n.addr.42, 16
  %add1293 = add i64 %sub1292, 12
  %and1294 = and i64 %add1293, 127
  %add1295 = add i64 %and1294, 16
  %sub1296 = sub i64 %add1295, 12
  %conv1297 = sext i32 %conv1291 to i64
  %sub1298 = sub i64 %conv1297, %sub1296
  %conv1299 = trunc i64 %sub1298 to i32
  %idx.ext1300 = sext i32 %conv1299 to i64
  %add.ptr1301 = getelementptr inbounds i8, i8* %src.addr.42, i64 %idx.ext1300
  %idx.ext1302 = sext i32 %conv1299 to i64
  %add.ptr1303 = getelementptr inbounds i8, i8* %dst.addr.42, i64 %idx.ext1302
  %cmp1304 = icmp uge i64 %sub1296, 36
  br i1 %cmp1304, label %if.then1306, label %if.end1341

if.then1306:                                      ; preds = %while.end1290
  br label %while.cond1307

while.cond1307:                                   ; preds = %while.body1310, %if.then1306
  %n.addr.43 = phi i64 [ %sub1296, %if.then1306 ], [ %sub1314, %while.body1310 ]
  %src.addr.43 = phi i8* [ %add.ptr1301, %if.then1306 ], [ %add.ptr1321, %while.body1310 ]
  %dst.addr.43 = phi i8* [ %add.ptr1303, %if.then1306 ], [ %add.ptr1326, %while.body1310 ]
  %cmp1308 = icmp uge i64 %n.addr.43, 36
  br i1 %cmp1308, label %while.body1310, label %while.end1327

while.body1310:                                   ; preds = %while.cond1307
  %add.ptr1311 = getelementptr inbounds i8, i8* %src.addr.43, i64 -12
  %add.ptr1312 = getelementptr inbounds i8, i8* %add.ptr1311, i64 0
  %641 = bitcast i8* %add.ptr1312 to <2 x i64>*
  %call1313 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %641)
  %sub1314 = sub i64 %n.addr.43, 32
  %add.ptr1315 = getelementptr inbounds i8, i8* %src.addr.43, i64 -12
  %add.ptr1316 = getelementptr inbounds i8, i8* %add.ptr1315, i64 16
  %642 = bitcast i8* %add.ptr1316 to <2 x i64>*
  %call1317 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %642)
  %add.ptr1318 = getelementptr inbounds i8, i8* %src.addr.43, i64 -12
  %add.ptr1319 = getelementptr inbounds i8, i8* %add.ptr1318, i64 32
  %643 = bitcast i8* %add.ptr1319 to <2 x i64>*
  %call1320 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %643)
  %add.ptr1321 = getelementptr inbounds i8, i8* %src.addr.43, i64 32
  %add.ptr1322 = getelementptr inbounds i8, i8* %dst.addr.43, i64 0
  %644 = bitcast i8* %add.ptr1322 to <2 x i64>*
  %645 = bitcast <2 x i64> %call1317 to <16 x i8>
  %646 = bitcast <2 x i64> %call1313 to <16 x i8>
  %palignr1323 = shufflevector <16 x i8> %646, <16 x i8> %645, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %647 = bitcast <16 x i8> %palignr1323 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %644, <2 x i64> %647)
  %add.ptr1324 = getelementptr inbounds i8, i8* %dst.addr.43, i64 16
  %648 = bitcast i8* %add.ptr1324 to <2 x i64>*
  %649 = bitcast <2 x i64> %call1320 to <16 x i8>
  %650 = bitcast <2 x i64> %call1317 to <16 x i8>
  %palignr1325 = shufflevector <16 x i8> %650, <16 x i8> %649, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %651 = bitcast <16 x i8> %palignr1325 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %648, <2 x i64> %651)
  %add.ptr1326 = getelementptr inbounds i8, i8* %dst.addr.43, i64 32
  br label %while.cond1307

while.end1327:                                    ; preds = %while.cond1307
  %conv1328 = trunc i64 %n.addr.43 to i32
  %sub1329 = sub i64 %n.addr.43, 16
  %add1330 = add i64 %sub1329, 12
  %and1331 = and i64 %add1330, 31
  %add1332 = add i64 %and1331, 16
  %sub1333 = sub i64 %add1332, 12
  %conv1334 = sext i32 %conv1328 to i64
  %sub1335 = sub i64 %conv1334, %sub1333
  %conv1336 = trunc i64 %sub1335 to i32
  %idx.ext1337 = sext i32 %conv1336 to i64
  %add.ptr1338 = getelementptr inbounds i8, i8* %src.addr.43, i64 %idx.ext1337
  %idx.ext1339 = sext i32 %conv1336 to i64
  %add.ptr1340 = getelementptr inbounds i8, i8* %dst.addr.43, i64 %idx.ext1339
  br label %if.end1341

if.end1341:                                       ; preds = %while.end1327, %while.end1290
  %n.addr.44 = phi i64 [ %sub1333, %while.end1327 ], [ %sub1296, %while.end1290 ]
  %src.addr.44 = phi i8* [ %add.ptr1338, %while.end1327 ], [ %add.ptr1301, %while.end1290 ]
  %dst.addr.44 = phi i8* [ %add.ptr1340, %while.end1327 ], [ %add.ptr1303, %while.end1290 ]
  br label %sw.epilog

sw.bb1342:                                        ; preds = %if.end103
  br label %while.cond1344

while.cond1344:                                   ; preds = %while.body1347, %sw.bb1342
  %n.addr.45 = phi i64 [ %n.addr.7, %sw.bb1342 ], [ %sub1351, %while.body1347 ]
  %src.addr.45 = phi i8* [ %src.addr.7, %sw.bb1342 ], [ %add.ptr1376, %while.body1347 ]
  %dst.addr.45 = phi i8* [ %dst.addr.7, %sw.bb1342 ], [ %add.ptr1393, %while.body1347 ]
  %cmp1345 = icmp uge i64 %n.addr.45, 131
  br i1 %cmp1345, label %while.body1347, label %while.end1394

while.body1347:                                   ; preds = %while.cond1344
  %add.ptr1348 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1349 = getelementptr inbounds i8, i8* %add.ptr1348, i64 0
  %652 = bitcast i8* %add.ptr1349 to <2 x i64>*
  %call1350 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %652)
  %sub1351 = sub i64 %n.addr.45, 128
  %add.ptr1352 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1353 = getelementptr inbounds i8, i8* %add.ptr1352, i64 16
  %653 = bitcast i8* %add.ptr1353 to <2 x i64>*
  %call1354 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %653)
  %add.ptr1355 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1356 = getelementptr inbounds i8, i8* %add.ptr1355, i64 32
  %654 = bitcast i8* %add.ptr1356 to <2 x i64>*
  %call1357 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %654)
  %add.ptr1358 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1359 = getelementptr inbounds i8, i8* %add.ptr1358, i64 48
  %655 = bitcast i8* %add.ptr1359 to <2 x i64>*
  %call1360 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %655)
  %add.ptr1361 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1362 = getelementptr inbounds i8, i8* %add.ptr1361, i64 64
  %656 = bitcast i8* %add.ptr1362 to <2 x i64>*
  %call1363 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %656)
  %add.ptr1364 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1365 = getelementptr inbounds i8, i8* %add.ptr1364, i64 80
  %657 = bitcast i8* %add.ptr1365 to <2 x i64>*
  %call1366 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %657)
  %add.ptr1367 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1368 = getelementptr inbounds i8, i8* %add.ptr1367, i64 96
  %658 = bitcast i8* %add.ptr1368 to <2 x i64>*
  %call1369 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %658)
  %add.ptr1370 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1371 = getelementptr inbounds i8, i8* %add.ptr1370, i64 112
  %659 = bitcast i8* %add.ptr1371 to <2 x i64>*
  %call1372 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %659)
  %add.ptr1373 = getelementptr inbounds i8, i8* %src.addr.45, i64 -13
  %add.ptr1374 = getelementptr inbounds i8, i8* %add.ptr1373, i64 128
  %660 = bitcast i8* %add.ptr1374 to <2 x i64>*
  %call1375 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %660)
  %add.ptr1376 = getelementptr inbounds i8, i8* %src.addr.45, i64 128
  %add.ptr1377 = getelementptr inbounds i8, i8* %dst.addr.45, i64 0
  %661 = bitcast i8* %add.ptr1377 to <2 x i64>*
  %662 = bitcast <2 x i64> %call1354 to <16 x i8>
  %663 = bitcast <2 x i64> %call1350 to <16 x i8>
  %palignr1378 = shufflevector <16 x i8> %663, <16 x i8> %662, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %664 = bitcast <16 x i8> %palignr1378 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %661, <2 x i64> %664)
  %add.ptr1379 = getelementptr inbounds i8, i8* %dst.addr.45, i64 16
  %665 = bitcast i8* %add.ptr1379 to <2 x i64>*
  %666 = bitcast <2 x i64> %call1357 to <16 x i8>
  %667 = bitcast <2 x i64> %call1354 to <16 x i8>
  %palignr1380 = shufflevector <16 x i8> %667, <16 x i8> %666, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %668 = bitcast <16 x i8> %palignr1380 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %665, <2 x i64> %668)
  %add.ptr1381 = getelementptr inbounds i8, i8* %dst.addr.45, i64 32
  %669 = bitcast i8* %add.ptr1381 to <2 x i64>*
  %670 = bitcast <2 x i64> %call1360 to <16 x i8>
  %671 = bitcast <2 x i64> %call1357 to <16 x i8>
  %palignr1382 = shufflevector <16 x i8> %671, <16 x i8> %670, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %672 = bitcast <16 x i8> %palignr1382 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %669, <2 x i64> %672)
  %add.ptr1383 = getelementptr inbounds i8, i8* %dst.addr.45, i64 48
  %673 = bitcast i8* %add.ptr1383 to <2 x i64>*
  %674 = bitcast <2 x i64> %call1363 to <16 x i8>
  %675 = bitcast <2 x i64> %call1360 to <16 x i8>
  %palignr1384 = shufflevector <16 x i8> %675, <16 x i8> %674, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %676 = bitcast <16 x i8> %palignr1384 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %673, <2 x i64> %676)
  %add.ptr1385 = getelementptr inbounds i8, i8* %dst.addr.45, i64 64
  %677 = bitcast i8* %add.ptr1385 to <2 x i64>*
  %678 = bitcast <2 x i64> %call1366 to <16 x i8>
  %679 = bitcast <2 x i64> %call1363 to <16 x i8>
  %palignr1386 = shufflevector <16 x i8> %679, <16 x i8> %678, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %680 = bitcast <16 x i8> %palignr1386 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %677, <2 x i64> %680)
  %add.ptr1387 = getelementptr inbounds i8, i8* %dst.addr.45, i64 80
  %681 = bitcast i8* %add.ptr1387 to <2 x i64>*
  %682 = bitcast <2 x i64> %call1369 to <16 x i8>
  %683 = bitcast <2 x i64> %call1366 to <16 x i8>
  %palignr1388 = shufflevector <16 x i8> %683, <16 x i8> %682, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %684 = bitcast <16 x i8> %palignr1388 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %681, <2 x i64> %684)
  %add.ptr1389 = getelementptr inbounds i8, i8* %dst.addr.45, i64 96
  %685 = bitcast i8* %add.ptr1389 to <2 x i64>*
  %686 = bitcast <2 x i64> %call1372 to <16 x i8>
  %687 = bitcast <2 x i64> %call1369 to <16 x i8>
  %palignr1390 = shufflevector <16 x i8> %687, <16 x i8> %686, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %688 = bitcast <16 x i8> %palignr1390 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %685, <2 x i64> %688)
  %add.ptr1391 = getelementptr inbounds i8, i8* %dst.addr.45, i64 112
  %689 = bitcast i8* %add.ptr1391 to <2 x i64>*
  %690 = bitcast <2 x i64> %call1375 to <16 x i8>
  %691 = bitcast <2 x i64> %call1372 to <16 x i8>
  %palignr1392 = shufflevector <16 x i8> %691, <16 x i8> %690, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %692 = bitcast <16 x i8> %palignr1392 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %689, <2 x i64> %692)
  %add.ptr1393 = getelementptr inbounds i8, i8* %dst.addr.45, i64 128
  br label %while.cond1344

while.end1394:                                    ; preds = %while.cond1344
  %conv1395 = trunc i64 %n.addr.45 to i32
  %sub1396 = sub i64 %n.addr.45, 16
  %add1397 = add i64 %sub1396, 13
  %and1398 = and i64 %add1397, 127
  %add1399 = add i64 %and1398, 16
  %sub1400 = sub i64 %add1399, 13
  %conv1401 = sext i32 %conv1395 to i64
  %sub1402 = sub i64 %conv1401, %sub1400
  %conv1403 = trunc i64 %sub1402 to i32
  %idx.ext1404 = sext i32 %conv1403 to i64
  %add.ptr1405 = getelementptr inbounds i8, i8* %src.addr.45, i64 %idx.ext1404
  %idx.ext1406 = sext i32 %conv1403 to i64
  %add.ptr1407 = getelementptr inbounds i8, i8* %dst.addr.45, i64 %idx.ext1406
  %cmp1408 = icmp uge i64 %sub1400, 35
  br i1 %cmp1408, label %if.then1410, label %if.end1445

if.then1410:                                      ; preds = %while.end1394
  br label %while.cond1411

while.cond1411:                                   ; preds = %while.body1414, %if.then1410
  %n.addr.46 = phi i64 [ %sub1400, %if.then1410 ], [ %sub1418, %while.body1414 ]
  %src.addr.46 = phi i8* [ %add.ptr1405, %if.then1410 ], [ %add.ptr1425, %while.body1414 ]
  %dst.addr.46 = phi i8* [ %add.ptr1407, %if.then1410 ], [ %add.ptr1430, %while.body1414 ]
  %cmp1412 = icmp uge i64 %n.addr.46, 35
  br i1 %cmp1412, label %while.body1414, label %while.end1431

while.body1414:                                   ; preds = %while.cond1411
  %add.ptr1415 = getelementptr inbounds i8, i8* %src.addr.46, i64 -13
  %add.ptr1416 = getelementptr inbounds i8, i8* %add.ptr1415, i64 0
  %693 = bitcast i8* %add.ptr1416 to <2 x i64>*
  %call1417 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %693)
  %sub1418 = sub i64 %n.addr.46, 32
  %add.ptr1419 = getelementptr inbounds i8, i8* %src.addr.46, i64 -13
  %add.ptr1420 = getelementptr inbounds i8, i8* %add.ptr1419, i64 16
  %694 = bitcast i8* %add.ptr1420 to <2 x i64>*
  %call1421 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %694)
  %add.ptr1422 = getelementptr inbounds i8, i8* %src.addr.46, i64 -13
  %add.ptr1423 = getelementptr inbounds i8, i8* %add.ptr1422, i64 32
  %695 = bitcast i8* %add.ptr1423 to <2 x i64>*
  %call1424 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %695)
  %add.ptr1425 = getelementptr inbounds i8, i8* %src.addr.46, i64 32
  %add.ptr1426 = getelementptr inbounds i8, i8* %dst.addr.46, i64 0
  %696 = bitcast i8* %add.ptr1426 to <2 x i64>*
  %697 = bitcast <2 x i64> %call1421 to <16 x i8>
  %698 = bitcast <2 x i64> %call1417 to <16 x i8>
  %palignr1427 = shufflevector <16 x i8> %698, <16 x i8> %697, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %699 = bitcast <16 x i8> %palignr1427 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %696, <2 x i64> %699)
  %add.ptr1428 = getelementptr inbounds i8, i8* %dst.addr.46, i64 16
  %700 = bitcast i8* %add.ptr1428 to <2 x i64>*
  %701 = bitcast <2 x i64> %call1424 to <16 x i8>
  %702 = bitcast <2 x i64> %call1421 to <16 x i8>
  %palignr1429 = shufflevector <16 x i8> %702, <16 x i8> %701, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %703 = bitcast <16 x i8> %palignr1429 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %700, <2 x i64> %703)
  %add.ptr1430 = getelementptr inbounds i8, i8* %dst.addr.46, i64 32
  br label %while.cond1411

while.end1431:                                    ; preds = %while.cond1411
  %conv1432 = trunc i64 %n.addr.46 to i32
  %sub1433 = sub i64 %n.addr.46, 16
  %add1434 = add i64 %sub1433, 13
  %and1435 = and i64 %add1434, 31
  %add1436 = add i64 %and1435, 16
  %sub1437 = sub i64 %add1436, 13
  %conv1438 = sext i32 %conv1432 to i64
  %sub1439 = sub i64 %conv1438, %sub1437
  %conv1440 = trunc i64 %sub1439 to i32
  %idx.ext1441 = sext i32 %conv1440 to i64
  %add.ptr1442 = getelementptr inbounds i8, i8* %src.addr.46, i64 %idx.ext1441
  %idx.ext1443 = sext i32 %conv1440 to i64
  %add.ptr1444 = getelementptr inbounds i8, i8* %dst.addr.46, i64 %idx.ext1443
  br label %if.end1445

if.end1445:                                       ; preds = %while.end1431, %while.end1394
  %n.addr.47 = phi i64 [ %sub1437, %while.end1431 ], [ %sub1400, %while.end1394 ]
  %src.addr.47 = phi i8* [ %add.ptr1442, %while.end1431 ], [ %add.ptr1405, %while.end1394 ]
  %dst.addr.47 = phi i8* [ %add.ptr1444, %while.end1431 ], [ %add.ptr1407, %while.end1394 ]
  br label %sw.epilog

sw.bb1446:                                        ; preds = %if.end103
  br label %while.cond1448

while.cond1448:                                   ; preds = %while.body1451, %sw.bb1446
  %n.addr.48 = phi i64 [ %n.addr.7, %sw.bb1446 ], [ %sub1455, %while.body1451 ]
  %src.addr.48 = phi i8* [ %src.addr.7, %sw.bb1446 ], [ %add.ptr1480, %while.body1451 ]
  %dst.addr.48 = phi i8* [ %dst.addr.7, %sw.bb1446 ], [ %add.ptr1497, %while.body1451 ]
  %cmp1449 = icmp uge i64 %n.addr.48, 130
  br i1 %cmp1449, label %while.body1451, label %while.end1498

while.body1451:                                   ; preds = %while.cond1448
  %add.ptr1452 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1453 = getelementptr inbounds i8, i8* %add.ptr1452, i64 0
  %704 = bitcast i8* %add.ptr1453 to <2 x i64>*
  %call1454 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %704)
  %sub1455 = sub i64 %n.addr.48, 128
  %add.ptr1456 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1457 = getelementptr inbounds i8, i8* %add.ptr1456, i64 16
  %705 = bitcast i8* %add.ptr1457 to <2 x i64>*
  %call1458 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %705)
  %add.ptr1459 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1460 = getelementptr inbounds i8, i8* %add.ptr1459, i64 32
  %706 = bitcast i8* %add.ptr1460 to <2 x i64>*
  %call1461 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %706)
  %add.ptr1462 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1463 = getelementptr inbounds i8, i8* %add.ptr1462, i64 48
  %707 = bitcast i8* %add.ptr1463 to <2 x i64>*
  %call1464 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %707)
  %add.ptr1465 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1466 = getelementptr inbounds i8, i8* %add.ptr1465, i64 64
  %708 = bitcast i8* %add.ptr1466 to <2 x i64>*
  %call1467 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %708)
  %add.ptr1468 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1469 = getelementptr inbounds i8, i8* %add.ptr1468, i64 80
  %709 = bitcast i8* %add.ptr1469 to <2 x i64>*
  %call1470 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %709)
  %add.ptr1471 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1472 = getelementptr inbounds i8, i8* %add.ptr1471, i64 96
  %710 = bitcast i8* %add.ptr1472 to <2 x i64>*
  %call1473 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %710)
  %add.ptr1474 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1475 = getelementptr inbounds i8, i8* %add.ptr1474, i64 112
  %711 = bitcast i8* %add.ptr1475 to <2 x i64>*
  %call1476 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %711)
  %add.ptr1477 = getelementptr inbounds i8, i8* %src.addr.48, i64 -14
  %add.ptr1478 = getelementptr inbounds i8, i8* %add.ptr1477, i64 128
  %712 = bitcast i8* %add.ptr1478 to <2 x i64>*
  %call1479 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %712)
  %add.ptr1480 = getelementptr inbounds i8, i8* %src.addr.48, i64 128
  %add.ptr1481 = getelementptr inbounds i8, i8* %dst.addr.48, i64 0
  %713 = bitcast i8* %add.ptr1481 to <2 x i64>*
  %714 = bitcast <2 x i64> %call1458 to <16 x i8>
  %715 = bitcast <2 x i64> %call1454 to <16 x i8>
  %palignr1482 = shufflevector <16 x i8> %715, <16 x i8> %714, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %716 = bitcast <16 x i8> %palignr1482 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %713, <2 x i64> %716)
  %add.ptr1483 = getelementptr inbounds i8, i8* %dst.addr.48, i64 16
  %717 = bitcast i8* %add.ptr1483 to <2 x i64>*
  %718 = bitcast <2 x i64> %call1461 to <16 x i8>
  %719 = bitcast <2 x i64> %call1458 to <16 x i8>
  %palignr1484 = shufflevector <16 x i8> %719, <16 x i8> %718, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %720 = bitcast <16 x i8> %palignr1484 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %717, <2 x i64> %720)
  %add.ptr1485 = getelementptr inbounds i8, i8* %dst.addr.48, i64 32
  %721 = bitcast i8* %add.ptr1485 to <2 x i64>*
  %722 = bitcast <2 x i64> %call1464 to <16 x i8>
  %723 = bitcast <2 x i64> %call1461 to <16 x i8>
  %palignr1486 = shufflevector <16 x i8> %723, <16 x i8> %722, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %724 = bitcast <16 x i8> %palignr1486 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %721, <2 x i64> %724)
  %add.ptr1487 = getelementptr inbounds i8, i8* %dst.addr.48, i64 48
  %725 = bitcast i8* %add.ptr1487 to <2 x i64>*
  %726 = bitcast <2 x i64> %call1467 to <16 x i8>
  %727 = bitcast <2 x i64> %call1464 to <16 x i8>
  %palignr1488 = shufflevector <16 x i8> %727, <16 x i8> %726, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %728 = bitcast <16 x i8> %palignr1488 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %725, <2 x i64> %728)
  %add.ptr1489 = getelementptr inbounds i8, i8* %dst.addr.48, i64 64
  %729 = bitcast i8* %add.ptr1489 to <2 x i64>*
  %730 = bitcast <2 x i64> %call1470 to <16 x i8>
  %731 = bitcast <2 x i64> %call1467 to <16 x i8>
  %palignr1490 = shufflevector <16 x i8> %731, <16 x i8> %730, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %732 = bitcast <16 x i8> %palignr1490 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %729, <2 x i64> %732)
  %add.ptr1491 = getelementptr inbounds i8, i8* %dst.addr.48, i64 80
  %733 = bitcast i8* %add.ptr1491 to <2 x i64>*
  %734 = bitcast <2 x i64> %call1473 to <16 x i8>
  %735 = bitcast <2 x i64> %call1470 to <16 x i8>
  %palignr1492 = shufflevector <16 x i8> %735, <16 x i8> %734, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %736 = bitcast <16 x i8> %palignr1492 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %733, <2 x i64> %736)
  %add.ptr1493 = getelementptr inbounds i8, i8* %dst.addr.48, i64 96
  %737 = bitcast i8* %add.ptr1493 to <2 x i64>*
  %738 = bitcast <2 x i64> %call1476 to <16 x i8>
  %739 = bitcast <2 x i64> %call1473 to <16 x i8>
  %palignr1494 = shufflevector <16 x i8> %739, <16 x i8> %738, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %740 = bitcast <16 x i8> %palignr1494 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %737, <2 x i64> %740)
  %add.ptr1495 = getelementptr inbounds i8, i8* %dst.addr.48, i64 112
  %741 = bitcast i8* %add.ptr1495 to <2 x i64>*
  %742 = bitcast <2 x i64> %call1479 to <16 x i8>
  %743 = bitcast <2 x i64> %call1476 to <16 x i8>
  %palignr1496 = shufflevector <16 x i8> %743, <16 x i8> %742, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %744 = bitcast <16 x i8> %palignr1496 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %741, <2 x i64> %744)
  %add.ptr1497 = getelementptr inbounds i8, i8* %dst.addr.48, i64 128
  br label %while.cond1448

while.end1498:                                    ; preds = %while.cond1448
  %conv1499 = trunc i64 %n.addr.48 to i32
  %sub1500 = sub i64 %n.addr.48, 16
  %add1501 = add i64 %sub1500, 14
  %and1502 = and i64 %add1501, 127
  %add1503 = add i64 %and1502, 16
  %sub1504 = sub i64 %add1503, 14
  %conv1505 = sext i32 %conv1499 to i64
  %sub1506 = sub i64 %conv1505, %sub1504
  %conv1507 = trunc i64 %sub1506 to i32
  %idx.ext1508 = sext i32 %conv1507 to i64
  %add.ptr1509 = getelementptr inbounds i8, i8* %src.addr.48, i64 %idx.ext1508
  %idx.ext1510 = sext i32 %conv1507 to i64
  %add.ptr1511 = getelementptr inbounds i8, i8* %dst.addr.48, i64 %idx.ext1510
  %cmp1512 = icmp uge i64 %sub1504, 34
  br i1 %cmp1512, label %if.then1514, label %if.end1549

if.then1514:                                      ; preds = %while.end1498
  br label %while.cond1515

while.cond1515:                                   ; preds = %while.body1518, %if.then1514
  %n.addr.49 = phi i64 [ %sub1504, %if.then1514 ], [ %sub1522, %while.body1518 ]
  %src.addr.49 = phi i8* [ %add.ptr1509, %if.then1514 ], [ %add.ptr1529, %while.body1518 ]
  %dst.addr.49 = phi i8* [ %add.ptr1511, %if.then1514 ], [ %add.ptr1534, %while.body1518 ]
  %cmp1516 = icmp uge i64 %n.addr.49, 34
  br i1 %cmp1516, label %while.body1518, label %while.end1535

while.body1518:                                   ; preds = %while.cond1515
  %add.ptr1519 = getelementptr inbounds i8, i8* %src.addr.49, i64 -14
  %add.ptr1520 = getelementptr inbounds i8, i8* %add.ptr1519, i64 0
  %745 = bitcast i8* %add.ptr1520 to <2 x i64>*
  %call1521 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %745)
  %sub1522 = sub i64 %n.addr.49, 32
  %add.ptr1523 = getelementptr inbounds i8, i8* %src.addr.49, i64 -14
  %add.ptr1524 = getelementptr inbounds i8, i8* %add.ptr1523, i64 16
  %746 = bitcast i8* %add.ptr1524 to <2 x i64>*
  %call1525 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %746)
  %add.ptr1526 = getelementptr inbounds i8, i8* %src.addr.49, i64 -14
  %add.ptr1527 = getelementptr inbounds i8, i8* %add.ptr1526, i64 32
  %747 = bitcast i8* %add.ptr1527 to <2 x i64>*
  %call1528 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %747)
  %add.ptr1529 = getelementptr inbounds i8, i8* %src.addr.49, i64 32
  %add.ptr1530 = getelementptr inbounds i8, i8* %dst.addr.49, i64 0
  %748 = bitcast i8* %add.ptr1530 to <2 x i64>*
  %749 = bitcast <2 x i64> %call1525 to <16 x i8>
  %750 = bitcast <2 x i64> %call1521 to <16 x i8>
  %palignr1531 = shufflevector <16 x i8> %750, <16 x i8> %749, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %751 = bitcast <16 x i8> %palignr1531 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %748, <2 x i64> %751)
  %add.ptr1532 = getelementptr inbounds i8, i8* %dst.addr.49, i64 16
  %752 = bitcast i8* %add.ptr1532 to <2 x i64>*
  %753 = bitcast <2 x i64> %call1528 to <16 x i8>
  %754 = bitcast <2 x i64> %call1525 to <16 x i8>
  %palignr1533 = shufflevector <16 x i8> %754, <16 x i8> %753, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %755 = bitcast <16 x i8> %palignr1533 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %752, <2 x i64> %755)
  %add.ptr1534 = getelementptr inbounds i8, i8* %dst.addr.49, i64 32
  br label %while.cond1515

while.end1535:                                    ; preds = %while.cond1515
  %conv1536 = trunc i64 %n.addr.49 to i32
  %sub1537 = sub i64 %n.addr.49, 16
  %add1538 = add i64 %sub1537, 14
  %and1539 = and i64 %add1538, 31
  %add1540 = add i64 %and1539, 16
  %sub1541 = sub i64 %add1540, 14
  %conv1542 = sext i32 %conv1536 to i64
  %sub1543 = sub i64 %conv1542, %sub1541
  %conv1544 = trunc i64 %sub1543 to i32
  %idx.ext1545 = sext i32 %conv1544 to i64
  %add.ptr1546 = getelementptr inbounds i8, i8* %src.addr.49, i64 %idx.ext1545
  %idx.ext1547 = sext i32 %conv1544 to i64
  %add.ptr1548 = getelementptr inbounds i8, i8* %dst.addr.49, i64 %idx.ext1547
  br label %if.end1549

if.end1549:                                       ; preds = %while.end1535, %while.end1498
  %n.addr.50 = phi i64 [ %sub1541, %while.end1535 ], [ %sub1504, %while.end1498 ]
  %src.addr.50 = phi i8* [ %add.ptr1546, %while.end1535 ], [ %add.ptr1509, %while.end1498 ]
  %dst.addr.50 = phi i8* [ %add.ptr1548, %while.end1535 ], [ %add.ptr1511, %while.end1498 ]
  br label %sw.epilog

sw.bb1550:                                        ; preds = %if.end103
  br label %while.cond1552

while.cond1552:                                   ; preds = %while.body1555, %sw.bb1550
  %n.addr.51 = phi i64 [ %n.addr.7, %sw.bb1550 ], [ %sub1559, %while.body1555 ]
  %src.addr.51 = phi i8* [ %src.addr.7, %sw.bb1550 ], [ %add.ptr1584, %while.body1555 ]
  %dst.addr.51 = phi i8* [ %dst.addr.7, %sw.bb1550 ], [ %add.ptr1601, %while.body1555 ]
  %cmp1553 = icmp uge i64 %n.addr.51, 129
  br i1 %cmp1553, label %while.body1555, label %while.end1602

while.body1555:                                   ; preds = %while.cond1552
  %add.ptr1556 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1557 = getelementptr inbounds i8, i8* %add.ptr1556, i64 0
  %756 = bitcast i8* %add.ptr1557 to <2 x i64>*
  %call1558 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %756)
  %sub1559 = sub i64 %n.addr.51, 128
  %add.ptr1560 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1561 = getelementptr inbounds i8, i8* %add.ptr1560, i64 16
  %757 = bitcast i8* %add.ptr1561 to <2 x i64>*
  %call1562 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %757)
  %add.ptr1563 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1564 = getelementptr inbounds i8, i8* %add.ptr1563, i64 32
  %758 = bitcast i8* %add.ptr1564 to <2 x i64>*
  %call1565 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %758)
  %add.ptr1566 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1567 = getelementptr inbounds i8, i8* %add.ptr1566, i64 48
  %759 = bitcast i8* %add.ptr1567 to <2 x i64>*
  %call1568 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %759)
  %add.ptr1569 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1570 = getelementptr inbounds i8, i8* %add.ptr1569, i64 64
  %760 = bitcast i8* %add.ptr1570 to <2 x i64>*
  %call1571 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %760)
  %add.ptr1572 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1573 = getelementptr inbounds i8, i8* %add.ptr1572, i64 80
  %761 = bitcast i8* %add.ptr1573 to <2 x i64>*
  %call1574 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %761)
  %add.ptr1575 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1576 = getelementptr inbounds i8, i8* %add.ptr1575, i64 96
  %762 = bitcast i8* %add.ptr1576 to <2 x i64>*
  %call1577 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %762)
  %add.ptr1578 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1579 = getelementptr inbounds i8, i8* %add.ptr1578, i64 112
  %763 = bitcast i8* %add.ptr1579 to <2 x i64>*
  %call1580 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %763)
  %add.ptr1581 = getelementptr inbounds i8, i8* %src.addr.51, i64 -15
  %add.ptr1582 = getelementptr inbounds i8, i8* %add.ptr1581, i64 128
  %764 = bitcast i8* %add.ptr1582 to <2 x i64>*
  %call1583 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %764)
  %add.ptr1584 = getelementptr inbounds i8, i8* %src.addr.51, i64 128
  %add.ptr1585 = getelementptr inbounds i8, i8* %dst.addr.51, i64 0
  %765 = bitcast i8* %add.ptr1585 to <2 x i64>*
  %766 = bitcast <2 x i64> %call1562 to <16 x i8>
  %767 = bitcast <2 x i64> %call1558 to <16 x i8>
  %palignr1586 = shufflevector <16 x i8> %767, <16 x i8> %766, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %768 = bitcast <16 x i8> %palignr1586 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %765, <2 x i64> %768)
  %add.ptr1587 = getelementptr inbounds i8, i8* %dst.addr.51, i64 16
  %769 = bitcast i8* %add.ptr1587 to <2 x i64>*
  %770 = bitcast <2 x i64> %call1565 to <16 x i8>
  %771 = bitcast <2 x i64> %call1562 to <16 x i8>
  %palignr1588 = shufflevector <16 x i8> %771, <16 x i8> %770, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %772 = bitcast <16 x i8> %palignr1588 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %769, <2 x i64> %772)
  %add.ptr1589 = getelementptr inbounds i8, i8* %dst.addr.51, i64 32
  %773 = bitcast i8* %add.ptr1589 to <2 x i64>*
  %774 = bitcast <2 x i64> %call1568 to <16 x i8>
  %775 = bitcast <2 x i64> %call1565 to <16 x i8>
  %palignr1590 = shufflevector <16 x i8> %775, <16 x i8> %774, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %776 = bitcast <16 x i8> %palignr1590 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %773, <2 x i64> %776)
  %add.ptr1591 = getelementptr inbounds i8, i8* %dst.addr.51, i64 48
  %777 = bitcast i8* %add.ptr1591 to <2 x i64>*
  %778 = bitcast <2 x i64> %call1571 to <16 x i8>
  %779 = bitcast <2 x i64> %call1568 to <16 x i8>
  %palignr1592 = shufflevector <16 x i8> %779, <16 x i8> %778, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %780 = bitcast <16 x i8> %palignr1592 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %777, <2 x i64> %780)
  %add.ptr1593 = getelementptr inbounds i8, i8* %dst.addr.51, i64 64
  %781 = bitcast i8* %add.ptr1593 to <2 x i64>*
  %782 = bitcast <2 x i64> %call1574 to <16 x i8>
  %783 = bitcast <2 x i64> %call1571 to <16 x i8>
  %palignr1594 = shufflevector <16 x i8> %783, <16 x i8> %782, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %784 = bitcast <16 x i8> %palignr1594 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %781, <2 x i64> %784)
  %add.ptr1595 = getelementptr inbounds i8, i8* %dst.addr.51, i64 80
  %785 = bitcast i8* %add.ptr1595 to <2 x i64>*
  %786 = bitcast <2 x i64> %call1577 to <16 x i8>
  %787 = bitcast <2 x i64> %call1574 to <16 x i8>
  %palignr1596 = shufflevector <16 x i8> %787, <16 x i8> %786, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %788 = bitcast <16 x i8> %palignr1596 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %785, <2 x i64> %788)
  %add.ptr1597 = getelementptr inbounds i8, i8* %dst.addr.51, i64 96
  %789 = bitcast i8* %add.ptr1597 to <2 x i64>*
  %790 = bitcast <2 x i64> %call1580 to <16 x i8>
  %791 = bitcast <2 x i64> %call1577 to <16 x i8>
  %palignr1598 = shufflevector <16 x i8> %791, <16 x i8> %790, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %792 = bitcast <16 x i8> %palignr1598 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %789, <2 x i64> %792)
  %add.ptr1599 = getelementptr inbounds i8, i8* %dst.addr.51, i64 112
  %793 = bitcast i8* %add.ptr1599 to <2 x i64>*
  %794 = bitcast <2 x i64> %call1583 to <16 x i8>
  %795 = bitcast <2 x i64> %call1580 to <16 x i8>
  %palignr1600 = shufflevector <16 x i8> %795, <16 x i8> %794, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %796 = bitcast <16 x i8> %palignr1600 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %793, <2 x i64> %796)
  %add.ptr1601 = getelementptr inbounds i8, i8* %dst.addr.51, i64 128
  br label %while.cond1552

while.end1602:                                    ; preds = %while.cond1552
  %conv1603 = trunc i64 %n.addr.51 to i32
  %sub1604 = sub i64 %n.addr.51, 16
  %add1605 = add i64 %sub1604, 15
  %and1606 = and i64 %add1605, 127
  %add1607 = add i64 %and1606, 16
  %sub1608 = sub i64 %add1607, 15
  %conv1609 = sext i32 %conv1603 to i64
  %sub1610 = sub i64 %conv1609, %sub1608
  %conv1611 = trunc i64 %sub1610 to i32
  %idx.ext1612 = sext i32 %conv1611 to i64
  %add.ptr1613 = getelementptr inbounds i8, i8* %src.addr.51, i64 %idx.ext1612
  %idx.ext1614 = sext i32 %conv1611 to i64
  %add.ptr1615 = getelementptr inbounds i8, i8* %dst.addr.51, i64 %idx.ext1614
  %cmp1616 = icmp uge i64 %sub1608, 33
  br i1 %cmp1616, label %if.then1618, label %if.end1653

if.then1618:                                      ; preds = %while.end1602
  br label %while.cond1619

while.cond1619:                                   ; preds = %while.body1622, %if.then1618
  %n.addr.52 = phi i64 [ %sub1608, %if.then1618 ], [ %sub1626, %while.body1622 ]
  %src.addr.52 = phi i8* [ %add.ptr1613, %if.then1618 ], [ %add.ptr1633, %while.body1622 ]
  %dst.addr.52 = phi i8* [ %add.ptr1615, %if.then1618 ], [ %add.ptr1638, %while.body1622 ]
  %cmp1620 = icmp uge i64 %n.addr.52, 33
  br i1 %cmp1620, label %while.body1622, label %while.end1639

while.body1622:                                   ; preds = %while.cond1619
  %add.ptr1623 = getelementptr inbounds i8, i8* %src.addr.52, i64 -15
  %add.ptr1624 = getelementptr inbounds i8, i8* %add.ptr1623, i64 0
  %797 = bitcast i8* %add.ptr1624 to <2 x i64>*
  %call1625 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %797)
  %sub1626 = sub i64 %n.addr.52, 32
  %add.ptr1627 = getelementptr inbounds i8, i8* %src.addr.52, i64 -15
  %add.ptr1628 = getelementptr inbounds i8, i8* %add.ptr1627, i64 16
  %798 = bitcast i8* %add.ptr1628 to <2 x i64>*
  %call1629 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %798)
  %add.ptr1630 = getelementptr inbounds i8, i8* %src.addr.52, i64 -15
  %add.ptr1631 = getelementptr inbounds i8, i8* %add.ptr1630, i64 32
  %799 = bitcast i8* %add.ptr1631 to <2 x i64>*
  %call1632 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %799)
  %add.ptr1633 = getelementptr inbounds i8, i8* %src.addr.52, i64 32
  %add.ptr1634 = getelementptr inbounds i8, i8* %dst.addr.52, i64 0
  %800 = bitcast i8* %add.ptr1634 to <2 x i64>*
  %801 = bitcast <2 x i64> %call1629 to <16 x i8>
  %802 = bitcast <2 x i64> %call1625 to <16 x i8>
  %palignr1635 = shufflevector <16 x i8> %802, <16 x i8> %801, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %803 = bitcast <16 x i8> %palignr1635 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %800, <2 x i64> %803)
  %add.ptr1636 = getelementptr inbounds i8, i8* %dst.addr.52, i64 16
  %804 = bitcast i8* %add.ptr1636 to <2 x i64>*
  %805 = bitcast <2 x i64> %call1632 to <16 x i8>
  %806 = bitcast <2 x i64> %call1629 to <16 x i8>
  %palignr1637 = shufflevector <16 x i8> %806, <16 x i8> %805, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %807 = bitcast <16 x i8> %palignr1637 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %804, <2 x i64> %807)
  %add.ptr1638 = getelementptr inbounds i8, i8* %dst.addr.52, i64 32
  br label %while.cond1619

while.end1639:                                    ; preds = %while.cond1619
  %conv1640 = trunc i64 %n.addr.52 to i32
  %sub1641 = sub i64 %n.addr.52, 16
  %add1642 = add i64 %sub1641, 15
  %and1643 = and i64 %add1642, 31
  %add1644 = add i64 %and1643, 16
  %sub1645 = sub i64 %add1644, 15
  %conv1646 = sext i32 %conv1640 to i64
  %sub1647 = sub i64 %conv1646, %sub1645
  %conv1648 = trunc i64 %sub1647 to i32
  %idx.ext1649 = sext i32 %conv1648 to i64
  %add.ptr1650 = getelementptr inbounds i8, i8* %src.addr.52, i64 %idx.ext1649
  %idx.ext1651 = sext i32 %conv1648 to i64
  %add.ptr1652 = getelementptr inbounds i8, i8* %dst.addr.52, i64 %idx.ext1651
  br label %if.end1653

if.end1653:                                       ; preds = %while.end1639, %while.end1602
  %n.addr.53 = phi i64 [ %sub1645, %while.end1639 ], [ %sub1608, %while.end1602 ]
  %src.addr.53 = phi i8* [ %add.ptr1650, %while.end1639 ], [ %add.ptr1613, %while.end1602 ]
  %dst.addr.53 = phi i8* [ %add.ptr1652, %while.end1639 ], [ %add.ptr1615, %while.end1602 ]
  br label %sw.epilog

sw.default:                                       ; preds = %if.end103
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end1653, %if.end1549, %if.end1445, %if.end1341, %if.end1237, %if.end1133, %if.end1029, %if.end925, %if.end821, %if.end717, %if.end613, %if.end509, %if.end405, %if.end301, %if.end197
  %n.addr.54 = phi i64 [ %n.addr.7, %sw.default ], [ %n.addr.53, %if.end1653 ], [ %n.addr.50, %if.end1549 ], [ %n.addr.47, %if.end1445 ], [ %n.addr.44, %if.end1341 ], [ %n.addr.41, %if.end1237 ], [ %n.addr.38, %if.end1133 ], [ %n.addr.35, %if.end1029 ], [ %n.addr.32, %if.end925 ], [ %n.addr.29, %if.end821 ], [ %n.addr.26, %if.end717 ], [ %n.addr.23, %if.end613 ], [ %n.addr.20, %if.end509 ], [ %n.addr.17, %if.end405 ], [ %n.addr.14, %if.end301 ], [ %n.addr.11, %if.end197 ]
  %src.addr.54 = phi i8* [ %src.addr.7, %sw.default ], [ %src.addr.53, %if.end1653 ], [ %src.addr.50, %if.end1549 ], [ %src.addr.47, %if.end1445 ], [ %src.addr.44, %if.end1341 ], [ %src.addr.41, %if.end1237 ], [ %src.addr.38, %if.end1133 ], [ %src.addr.35, %if.end1029 ], [ %src.addr.32, %if.end925 ], [ %src.addr.29, %if.end821 ], [ %src.addr.26, %if.end717 ], [ %src.addr.23, %if.end613 ], [ %src.addr.20, %if.end509 ], [ %src.addr.17, %if.end405 ], [ %src.addr.14, %if.end301 ], [ %src.addr.11, %if.end197 ]
  %dst.addr.54 = phi i8* [ %dst.addr.7, %sw.default ], [ %dst.addr.53, %if.end1653 ], [ %dst.addr.50, %if.end1549 ], [ %dst.addr.47, %if.end1445 ], [ %dst.addr.44, %if.end1341 ], [ %dst.addr.41, %if.end1237 ], [ %dst.addr.38, %if.end1133 ], [ %dst.addr.35, %if.end1029 ], [ %dst.addr.32, %if.end925 ], [ %dst.addr.29, %if.end821 ], [ %dst.addr.26, %if.end717 ], [ %dst.addr.23, %if.end613 ], [ %dst.addr.20, %if.end509 ], [ %dst.addr.17, %if.end405 ], [ %dst.addr.14, %if.end301 ], [ %dst.addr.11, %if.end197 ]
  br label %COPY_BLOCK_64_BACK15

cleanup:                                          ; preds = %if.end86, %if.then74, %if.then35, %if.then28, %if.then21, %if.end18
  ret i8* %dst
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov16(i8* %dst, i8* %src) #1 {
entry:
  %0 = bitcast i8* %src to <2 x i64>*
  %call = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %0)
  %1 = bitcast i8* %dst to <2 x i64>*
  call void @_mm_storeu_si128(<2 x i64>* %1, <2 x i64> %call)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov32(i8* %dst, i8* %src) #1 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %dst, i64 0
  %add.ptr1 = getelementptr inbounds i8, i8* %src, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %add.ptr2 = getelementptr inbounds i8, i8* %dst, i64 16
  %add.ptr3 = getelementptr inbounds i8, i8* %src, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov64(i8* %dst, i8* %src) #1 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %dst, i64 0
  %add.ptr1 = getelementptr inbounds i8, i8* %src, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %add.ptr2 = getelementptr inbounds i8, i8* %dst, i64 16
  %add.ptr3 = getelementptr inbounds i8, i8* %src, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %add.ptr4 = getelementptr inbounds i8, i8* %dst, i64 32
  %add.ptr5 = getelementptr inbounds i8, i8* %src, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %add.ptr6 = getelementptr inbounds i8, i8* %dst, i64 48
  %add.ptr7 = getelementptr inbounds i8, i8* %src, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal <2 x i64> @_mm_loadu_si128(<2 x i64>* %__p) #10 {
entry:
  %0 = bitcast <2 x i64>* %__p to %struct.__loadu_si128*
  %__v = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %0, i32 0, i32 0
  %1 = load <2 x i64>, <2 x i64>* %__v, align 1, !tbaa !2
  ret <2 x i64> %1
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @_mm_storeu_si128(<2 x i64>* %__p, <2 x i64> %__b) #10 {
entry:
  %0 = bitcast <2 x i64>* %__p to %struct.__storeu_si128*
  %__v = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %0, i32 0, i32 0
  store <2 x i64> %__b, <2 x i64>* %__v, align 1, !tbaa !2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov128(i8* %dst, i8* %src) #1 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %dst, i64 0
  %add.ptr1 = getelementptr inbounds i8, i8* %src, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %add.ptr2 = getelementptr inbounds i8, i8* %dst, i64 16
  %add.ptr3 = getelementptr inbounds i8, i8* %src, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %add.ptr4 = getelementptr inbounds i8, i8* %dst, i64 32
  %add.ptr5 = getelementptr inbounds i8, i8* %src, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %add.ptr6 = getelementptr inbounds i8, i8* %dst, i64 48
  %add.ptr7 = getelementptr inbounds i8, i8* %src, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %add.ptr8 = getelementptr inbounds i8, i8* %dst, i64 64
  %add.ptr9 = getelementptr inbounds i8, i8* %src, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %add.ptr10 = getelementptr inbounds i8, i8* %dst, i64 80
  %add.ptr11 = getelementptr inbounds i8, i8* %src, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %add.ptr12 = getelementptr inbounds i8, i8* %dst, i64 96
  %add.ptr13 = getelementptr inbounds i8, i8* %src, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %add.ptr14 = getelementptr inbounds i8, i8* %dst, i64 112
  %add.ptr15 = getelementptr inbounds i8, i8* %src, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov256(i8* %dst, i8* %src) #1 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %dst, i64 0
  %add.ptr1 = getelementptr inbounds i8, i8* %src, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %add.ptr2 = getelementptr inbounds i8, i8* %dst, i64 16
  %add.ptr3 = getelementptr inbounds i8, i8* %src, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %add.ptr4 = getelementptr inbounds i8, i8* %dst, i64 32
  %add.ptr5 = getelementptr inbounds i8, i8* %src, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %add.ptr6 = getelementptr inbounds i8, i8* %dst, i64 48
  %add.ptr7 = getelementptr inbounds i8, i8* %src, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %add.ptr8 = getelementptr inbounds i8, i8* %dst, i64 64
  %add.ptr9 = getelementptr inbounds i8, i8* %src, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %add.ptr10 = getelementptr inbounds i8, i8* %dst, i64 80
  %add.ptr11 = getelementptr inbounds i8, i8* %src, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %add.ptr12 = getelementptr inbounds i8, i8* %dst, i64 96
  %add.ptr13 = getelementptr inbounds i8, i8* %src, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %add.ptr14 = getelementptr inbounds i8, i8* %dst, i64 112
  %add.ptr15 = getelementptr inbounds i8, i8* %src, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  %add.ptr16 = getelementptr inbounds i8, i8* %dst, i64 128
  %add.ptr17 = getelementptr inbounds i8, i8* %src, i64 128
  call void @rte_mov16(i8* %add.ptr16, i8* %add.ptr17)
  %add.ptr18 = getelementptr inbounds i8, i8* %dst, i64 144
  %add.ptr19 = getelementptr inbounds i8, i8* %src, i64 144
  call void @rte_mov16(i8* %add.ptr18, i8* %add.ptr19)
  %add.ptr20 = getelementptr inbounds i8, i8* %dst, i64 160
  %add.ptr21 = getelementptr inbounds i8, i8* %src, i64 160
  call void @rte_mov16(i8* %add.ptr20, i8* %add.ptr21)
  %add.ptr22 = getelementptr inbounds i8, i8* %dst, i64 176
  %add.ptr23 = getelementptr inbounds i8, i8* %src, i64 176
  call void @rte_mov16(i8* %add.ptr22, i8* %add.ptr23)
  %add.ptr24 = getelementptr inbounds i8, i8* %dst, i64 192
  %add.ptr25 = getelementptr inbounds i8, i8* %src, i64 192
  call void @rte_mov16(i8* %add.ptr24, i8* %add.ptr25)
  %add.ptr26 = getelementptr inbounds i8, i8* %dst, i64 208
  %add.ptr27 = getelementptr inbounds i8, i8* %src, i64 208
  call void @rte_mov16(i8* %add.ptr26, i8* %add.ptr27)
  %add.ptr28 = getelementptr inbounds i8, i8* %dst, i64 224
  %add.ptr29 = getelementptr inbounds i8, i8* %src, i64 224
  call void @rte_mov16(i8* %add.ptr28, i8* %add.ptr29)
  %add.ptr30 = getelementptr inbounds i8, i8* %dst, i64 240
  %add.ptr31 = getelementptr inbounds i8, i8* %src, i64 240
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr31)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @dma_write(i64 %addr, i64 %len, i8* %buf) #1 {
entry:
  %add = add i64 %addr, %len
  %cmp = icmp uge i64 %add, %addr
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %add1 = add i64 %addr, %len
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 57, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.dma_write, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %0 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %addr
  %call = call i8* @rte_memcpy(i8* %add.ptr, i8* %buf, i64 %len)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @network_buf_buf(%struct.network_buf_handle* %bh) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 1
  %1 = load i8*, i8** %buf_addr, align 64, !tbaa !62
  ret i8* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i16 @t_beui16(i16 zeroext %x) #1 {
entry:
  %retval = alloca %struct.beui16, align 1
  %0 = call i16 @llvm.bswap.i16(i16 %x)
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  store i16 %0, i16* %x1, align 1, !tbaa !66
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  %1 = load i16, i16* %coerce.dive, align 1
  ret i16 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @t_beui32(i32 %x) #1 {
entry:
  %retval = alloca %struct.beui32, align 1
  %0 = call i32 @llvm.bswap.i32(i32 %x)
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  store i32 %0, i32* %x1, align 1, !tbaa !39
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  %1 = load i32, i32* %coerce.dive, align 1
  ret i32 %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @tcp_checksums(%struct.network_buf_handle* %nbh, %struct.pkt_tcp* %p, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 7
  store i16 0, i16* %chksum, align 1, !tbaa !51
  %ip2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 1
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %0 = load i32, i32* %coerce.dive3, align 1
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %1 = load i32, i32* %coerce.dive4, align 1
  %call = call zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %nbh, %struct.ip_hdr* %ip2, i32 %0, i32 %1, i16 zeroext %l3_paylen)
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %p, i32 0, i32 2
  %chksum5 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 6
  store i16 %call, i16* %chksum5, align 1, !tbaa !54
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @tx_send(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i16 zeroext %off, i16 zeroext %len) #1 {
entry:
  %tx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 10
  %0 = load i16, i16* %tx_num, align 8, !tbaa !123
  %conv = zext i16 %0 to i32
  %cmp = icmp uge i32 %conv, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.26, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %entry
  call void @network_buf_setoff(%struct.network_buf_handle* %nbh, i16 zeroext %off)
  call void @network_buf_setlen(%struct.network_buf_handle* %nbh, i16 zeroext %len)
  %tx_handles = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 9
  %idxprom = zext i32 %conv to i64
  %arrayidx = getelementptr inbounds [32 x %struct.network_buf_handle*], [32 x %struct.network_buf_handle*]* %tx_handles, i64 0, i64 %idxprom
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %arrayidx, align 8, !tbaa !5
  %add = add i32 %conv, 1
  %conv2 = trunc i32 %add to i16
  %tx_num3 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %ctx, i32 0, i32 10
  store i16 %conv2, i16* %tx_num3, align 8, !tbaa !123
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %nbh, %struct.ip_hdr* %iph, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  %0 = bitcast %struct.ip_hdr* %iph to i8*
  %coerce.dive2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %1 = load i32, i32* %coerce.dive2, align 1
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %2 = load i32, i32* %coerce.dive3, align 1
  %call = call zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %nbh, i8 zeroext 14, i8 zeroext 20, i8* %0, i32 %1, i32 %2, i8 zeroext 6, i16 zeroext %l3_paylen)
  ret i16 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %bh, i8 zeroext %l2l, i8 zeroext %l3l, i8* %ip_hdr, i32 %ip_s.coerce, i32 %ip_d.coerce, i8 zeroext %ip_proto, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %conv = zext i8 %l2l to i32
  %conv2 = zext i8 %l3l to i32
  %shl = shl i32 %conv2, 7
  %or = or i32 %conv, %shl
  %conv3 = zext i32 %or to i64
  %1 = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 22
  %tx_offload = bitcast %union.anon.18* %1 to i64*
  store i64 %conv3, i64* %tx_offload, align 8, !tbaa !2
  %ol_flags = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 8
  store i64 58546795155816448, i64* %ol_flags, align 8, !tbaa !124
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %2 = load i32, i32* %coerce.dive4, align 1
  %coerce.dive5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %3 = load i32, i32* %coerce.dive5, align 1
  %call = call zeroext i16 @network_ip_phdr_xsum(i32 %2, i32 %3, i8 zeroext %ip_proto, i16 zeroext %l3_paylen)
  ret i16 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_ip_phdr_xsum(i32 %ip_src.coerce, i32 %ip_dst.coerce, i8 zeroext %proto, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_src = alloca %struct.beui32, align 1
  %ip_dst = alloca %struct.beui32, align 1
  %coerce = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  store i32 %ip_src.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  store i32 %ip_dst.coerce, i32* %coerce.dive1, align 1
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %0 = load i32, i32* %x, align 1, !tbaa !39
  %and = and i32 %0, 65535
  %add = add i32 0, %and
  %x2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %1 = load i32, i32* %x2, align 1, !tbaa !39
  %shr = lshr i32 %1, 16
  %and3 = and i32 %shr, 65535
  %add4 = add i32 %add, %and3
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %2 = load i32, i32* %x5, align 1, !tbaa !39
  %and6 = and i32 %2, 65535
  %add7 = add i32 %add4, %and6
  %x8 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %3 = load i32, i32* %x8, align 1, !tbaa !39
  %shr9 = lshr i32 %3, 16
  %and10 = and i32 %shr9, 65535
  %add11 = add i32 %add7, %and10
  %conv = zext i8 %proto to i16
  %conv12 = zext i16 %conv to i32
  %shl = shl i32 %conv12, 8
  %add13 = add i32 %add11, %shl
  %call = call i16 @t_beui16(i16 zeroext %l3_paylen)
  %coerce.dive14 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  store i16 %call, i16* %coerce.dive14, align 1
  %x15 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  %4 = load i16, i16* %x15, align 1, !tbaa !66
  %conv16 = zext i16 %4 to i32
  %add17 = add i32 %add13, %conv16
  %and18 = and i32 %add17, -65536
  %shr19 = lshr i32 %and18, 16
  %and20 = and i32 %add17, 65535
  %add21 = add i32 %shr19, %and20
  %and22 = and i32 %add21, -65536
  %shr23 = lshr i32 %and22, 16
  %and24 = and i32 %add21, 65535
  %add25 = add i32 %shr23, %and24
  %conv26 = trunc i32 %add25 to i16
  ret i16 %conv26
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @network_buf_setoff(%struct.network_buf_handle* %bh, i16 zeroext %off) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 4
  store i16 %off, i16* %data_off, align 16, !tbaa !64
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @network_buf_setlen(%struct.network_buf_handle* %bh, i16 zeroext %len) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 12
  store i16 %len, i16* %data_len, align 8, !tbaa !65
  %conv = zext i16 %len to i32
  %pkt_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 11
  store i32 %conv, i32* %pkt_len, align 4, !tbaa !125
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_off(%struct.network_buf_handle* %bh) #1 {
entry:
  %0 = bitcast %struct.network_buf_handle* %bh to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %0, i32 0, i32 4
  %1 = load i16, i16* %data_off, align 16, !tbaa !64
  ret i16 %1
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0 (trunk 341799)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !3, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !3, i64 0}
!9 = !{i32 3752906}
!10 = !{!11, !12, i64 16}
!11 = !{!"flextcp_pl_flowst", !12, i64 0, !12, i64 8, !12, i64 16, !8, i64 24, !8, i64 28, !13, i64 32, !13, i64 36, !14, i64 40, !14, i64 42, !16, i64 44, !15, i64 50, !15, i64 52, !15, i64 54, !8, i64 56, !8, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !8, i64 104, !8, i64 108, !15, i64 112, !15, i64 114, !8, i64 116, !8, i64 120, !8, i64 124, !8, i64 128, !8, i64 132}
!12 = !{!"long", !3, i64 0}
!13 = !{!"beui32", !8, i64 0}
!14 = !{!"beui16", !15, i64 0}
!15 = !{!"short", !3, i64 0}
!16 = !{!"eth_addr", !3, i64 0}
!17 = !{!11, !8, i64 92}
!18 = !{!11, !15, i64 52}
!19 = !{!20, !15, i64 80}
!20 = !{!"dataplane_context", !21, i64 0, !22, i64 16, !6, i64 72, !15, i64 80, !8, i64 84, !25, i64 88, !3, i64 136, !3, i64 648, !15, i64 680, !3, i64 688, !15, i64 944, !8, i64 948, !3, i64 952, !15, i64 1976, !15, i64 1978, !12, i64 1984, !12, i64 1992}
!21 = !{!"network_thread", !6, i64 0, !15, i64 8}
!22 = !{!"qman_thread", !6, i64 0, !3, i64 8, !8, i64 24, !8, i64 28, !8, i64 32, !8, i64 36, !23, i64 40, !24, i64 48}
!23 = !{!"utils_rng", !12, i64 0}
!24 = !{!"_Bool", !3, i64 0}
!25 = !{!"rte_epoll_event", !8, i64 0, !8, i64 4, !8, i64 8, !26, i64 16}
!26 = !{!"rte_epoll_data", !8, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!27 = !{!20, !6, i64 72}
!28 = !{!11, !12, i64 8}
!29 = !{!11, !8, i64 128}
!30 = !{!11, !8, i64 96}
!31 = !{!11, !8, i64 60}
!32 = !{!11, !8, i64 68}
!33 = !{!11, !8, i64 28}
!34 = !{!11, !8, i64 88}
!35 = !{!11, !8, i64 100}
!36 = !{!11, !8, i64 104}
!37 = !{i32 3849058, i32 3849072, i32 3849104, i32 3849132, i32 3849148, i32 3849161, i32 3849177, i32 3849206, i32 3849223, i32 3849240}
!38 = !{!11, !8, i64 72}
!39 = !{!13, !8, i64 0}
!40 = !{i64 0, i64 6, !2}
!41 = !{i64 0, i64 2, !42}
!42 = !{!15, !15, i64 0}
!43 = !{!44, !3, i64 14}
!44 = !{!"pkt_tcp", !45, i64 0, !46, i64 14, !47, i64 34}
!45 = !{!"eth_hdr", !16, i64 0, !16, i64 6, !14, i64 12}
!46 = !{!"ip_hdr", !3, i64 0, !3, i64 1, !14, i64 2, !14, i64 4, !14, i64 6, !3, i64 8, !3, i64 9, !15, i64 10, !13, i64 12, !13, i64 16}
!47 = !{!"tcp_hdr", !14, i64 0, !14, i64 2, !13, i64 4, !13, i64 8, !15, i64 12, !14, i64 14, !15, i64 16, !14, i64 18}
!48 = !{!44, !3, i64 15}
!49 = !{!44, !3, i64 22}
!50 = !{!44, !3, i64 23}
!51 = !{!44, !15, i64 24}
!52 = !{i64 0, i64 4, !7}
!53 = !{!44, !15, i64 46}
!54 = !{!44, !15, i64 50}
!55 = !{!56, !3, i64 0}
!56 = !{!"tcp_timestamp_opt", !3, i64 0, !3, i64 1, !13, i64 2, !13, i64 6}
!57 = !{!56, !3, i64 1}
!58 = !{i32 3849456}
!59 = !{!11, !8, i64 108}
!60 = !{!61, !6, i64 0}
!61 = !{!"tcp_opts", !6, i64 0}
!62 = !{!63, !6, i64 0}
!63 = !{!"rte_mbuf", !3, i64 0, !6, i64 0, !3, i64 8, !3, i64 16, !15, i64 16, !3, i64 18, !15, i64 20, !15, i64 22, !12, i64 24, !3, i64 32, !3, i64 32, !8, i64 36, !15, i64 40, !15, i64 42, !3, i64 44, !15, i64 52, !15, i64 54, !12, i64 56, !3, i64 64, !3, i64 64, !6, i64 72, !6, i64 80, !3, i64 88, !15, i64 96, !15, i64 98, !8, i64 100}
!64 = !{!63, !15, i64 16}
!65 = !{!63, !15, i64 40}
!66 = !{!14, !15, i64 0}
!67 = !{!11, !8, i64 64}
!68 = !{!11, !15, i64 114}
!69 = !{!11, !8, i64 116}
!70 = !{!11, !8, i64 120}
!71 = !{!11, !8, i64 76}
!72 = !{!11, !8, i64 84}
!73 = !{!11, !8, i64 80}
!74 = !{!11, !8, i64 124}
!75 = !{!11, !8, i64 132}
!76 = !{!11, !15, i64 50}
!77 = !{!78, !8, i64 24}
!78 = !{!"flextcp_pl_appctx", !12, i64 0, !12, i64 8, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !8, i64 44}
!79 = !{!80, !15, i64 0}
!80 = !{!"flextcp_pl_appst", !15, i64 0, !3, i64 2}
!81 = !{!12, !12, i64 0}
!82 = !{!11, !8, i64 24}
!83 = !{!11, !12, i64 0}
!84 = !{!11, !15, i64 112}
!85 = !{!20, !15, i64 680}
!86 = !{!87, !3, i64 31}
!87 = !{!"flextcp_pl_arx", !3, i64 0, !3, i64 31}
!88 = !{!11, !15, i64 54}
!89 = !{!90, !8, i64 0}
!90 = !{!"flextcp_pl_flowhte", !8, i64 0, !8, i64 4}
!91 = !{i32 -2143328954}
!92 = !{!90, !8, i64 4}
!93 = !{i32 -2143328920}
!94 = !{!11, !8, i64 32}
!95 = !{!44, !8, i64 30}
!96 = !{!11, !8, i64 36}
!97 = !{!44, !8, i64 26}
!98 = !{!11, !15, i64 40}
!99 = !{!44, !15, i64 36}
!100 = !{!11, !15, i64 42}
!101 = !{!44, !15, i64 34}
!102 = !{!103, !15, i64 8}
!103 = !{!"flow_key", !13, i64 0, !13, i64 4, !14, i64 8, !14, i64 10}
!104 = !{!103, !15, i64 10}
!105 = !{!103, !8, i64 0}
!106 = !{!103, !8, i64 4}
!107 = !{!108, !8, i64 136}
!108 = !{!"rte_ring", !3, i64 0, !8, i64 32, !6, i64 40, !8, i64 48, !8, i64 52, !8, i64 56, !109, i64 128, !109, i64 256}
!109 = !{!"rte_ring_headtail", !8, i64 0, !8, i64 4, !8, i64 8}
!110 = !{!108, !8, i64 48}
!111 = !{!108, !8, i64 52}
!112 = !{i32 -2145957072}
!113 = !{!108, !8, i64 56}
!114 = !{!108, !8, i64 128}
!115 = !{i32 -2145958204}
!116 = !{!108, !8, i64 260}
!117 = !{!109, !8, i64 4}
!118 = !{i32 -2145981376}
!119 = !{i32 3817552}
!120 = !{i32 3817045}
!121 = !{i32 3816837}
!122 = !{i32 3816629}
!123 = !{!20, !15, i64 944}
!124 = !{!63, !12, i64 24}
!125 = !{!63, !8, i64 36}
