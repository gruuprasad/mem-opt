; ModuleID = 'tas/fast/fast_flows.c'
source_filename = "tas/fast/fast_flows.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.flextcp_pl_mem = type { [16 x [16 x %struct.flextcp_pl_appctx]], [131072 x %struct.flextcp_pl_flowst], [262144 x %struct.flextcp_pl_flowhte], [16 x %struct.flextcp_pl_appctx], [8 x %struct.flextcp_pl_appst], [4096 x i8] }
%struct.flextcp_pl_flowst = type { i64, i64, i64, i32, i32, %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16, %struct.eth_addr, i16, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, [56 x i8] }
%struct.beui32 = type { i32 }
%struct.beui16 = type { i16 }
%struct.eth_addr = type { [6 x i8] }
%struct.flextcp_pl_flowhte = type { i32, i32 }
%struct.flextcp_pl_appctx = type { i64, i64, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.flextcp_pl_appst = type { i16, [31 x i16] }
%struct.dataplane_context = type { %struct.network_thread, %struct.qman_thread, %struct.rte_ring*, i16, i32, %struct.rte_epoll_event, [16 x %struct.flextcp_pl_arx], [16 x i16], i16, [32 x %struct.network_buf_handle*], i16, i32, [128 x %struct.network_buf_handle*], i16, i16, i64, i64 }
%struct.network_thread = type { %struct.rte_mempool*, i16 }
%struct.rte_mempool = type { [32 x i8], %union.anon, i8*, %struct.rte_memzone*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.rte_mempool_cache*, i32, %struct.rte_mempool_objhdr_list, i32, %struct.rte_mempool_memhdr_list, [40 x i8] }
%union.anon = type { i8* }
%struct.rte_memzone = type <{ [32 x i8], %union.anon.0, %union.anon.1, i64, i64, i32, i32, i32 }>
%union.anon.0 = type { i64 }
%union.anon.1 = type { i8* }
%struct.rte_mempool_cache = type { i32, i32, i32, [1536 x i8*], [48 x i8] }
%struct.rte_mempool_objhdr_list = type { %struct.rte_mempool_objhdr*, %struct.rte_mempool_objhdr** }
%struct.rte_mempool_objhdr = type { %struct.anon, %struct.rte_mempool*, %union.anon.2 }
%struct.anon = type { %struct.rte_mempool_objhdr* }
%union.anon.2 = type { i64 }
%struct.rte_mempool_memhdr_list = type { %struct.rte_mempool_memhdr*, %struct.rte_mempool_memhdr** }
%struct.rte_mempool_memhdr = type { %struct.anon.3, %struct.rte_mempool*, i8*, %union.anon.4, i64, void (%struct.rte_mempool_memhdr*, i8*)*, i8* }
%struct.anon.3 = type { %struct.rte_mempool_memhdr* }
%union.anon.4 = type { i64 }
%struct.qman_thread = type { %struct.queue*, [4 x i32], i32, i32, i32, i32, %struct.utils_rng, i8 }
%struct.queue = type opaque
%struct.utils_rng = type { i64 }
%struct.rte_ring = type { [32 x i8], i32, %struct.rte_memzone*, i32, i32, i32, [68 x i8], %struct.rte_ring_headtail, [116 x i8], %struct.rte_ring_headtail, [116 x i8] }
%struct.rte_ring_headtail = type { i32, i32, i32 }
%struct.rte_epoll_event = type { i32, i32, i32, %struct.rte_epoll_data }
%struct.rte_epoll_data = type { i32, i8*, void (i32, i8*)*, i8* }
%struct.flextcp_pl_arx = type { %union.anon.5, i8 }
%union.anon.5 = type { [31 x i8] }
%struct.network_buf_handle = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ether_addr = type { [6 x i8] }
%struct.obj_hdr = type { %struct.beui32, %struct.beui16, i8, i8, [0 x i8] }
%struct.pkt_tcp = type <{ %struct.eth_hdr, %struct.ip_hdr, %struct.tcp_hdr }>
%struct.eth_hdr = type { %struct.eth_addr, %struct.eth_addr, %struct.beui16 }
%struct.ip_hdr = type { i8, i8, %struct.beui16, %struct.beui16, %struct.beui16, i8, i8, i16, %struct.beui32, %struct.beui32 }
%struct.tcp_hdr = type { %struct.beui16, %struct.beui16, %struct.beui32, %struct.beui32, i16, %struct.beui16, i16, %struct.beui16 }
%struct.tcp_timestamp_opt = type <{ i8, i8, %struct.beui32, %struct.beui32 }>
%struct.tcp_opts = type { %struct.tcp_timestamp_opt* }
%struct.rte_mbuf = type { [0 x i8*], i8*, %union.anon.6, [0 x i64], i16, %union.anon.7, i16, i16, i64, [0 x i8*], %union.anon.8, i32, i16, i16, %union.anon.12, i16, i16, i64, [0 x i8*], %union.anon.17, %struct.rte_mempool*, %struct.rte_mbuf*, %union.anon.18, i16, i16, i32, [24 x i8] }
%union.anon.6 = type { i64 }
%union.anon.7 = type { %struct.rte_atomic16_t }
%struct.rte_atomic16_t = type { i16 }
%union.anon.8 = type { i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %union.anon.14, i32 }
%union.anon.14 = type { i32 }
%union.anon.17 = type { i8* }
%union.anon.18 = type { i64 }
%struct.flextcp_pl_arx_connupdate = type <{ i64, i32, i32, i32, i8 }>
%struct.flow_key = type { %struct.beui32, %struct.beui32, %struct.beui16, %struct.beui16 }
%union.anon.20 = type { i64 }
%union.anon.21 = type { i64 }
%struct.__loadu_si128 = type { <2 x i64> }
%struct.__storeu_si128 = type { <2 x i64> }

@fp_state = external dso_local global %struct.flextcp_pl_mem*, align 8
@ctxs = external dso_local global %struct.dataplane_context**, align 8
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [42 x i8] c"fast_flows_qman: rte_ring_enqueue failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"flast_flows_qman: qman_set clear failed, UNEXPECTED\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"fast_flows_qman: bump not on object boundary\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"fast_flows_qman: header does not fit in first segment\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"flast_flows_qman: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"len > 0\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"tas/fast/fast_flows.c\00", align 1
@__PRETTY_FUNCTION__.fast_flows_qman = private unnamed_addr constant [97 x i8] c"int fast_flows_qman(struct dataplane_context *, uint32_t, struct network_buf_handle *, uint32_t)\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"fast_flows_qman_fwd: qman_set failed, UNEXPECTED\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"batch_arg\00", section "llvm.metadata"
@.str.9 = private unnamed_addr constant [22 x i8] c"tas/fast/fast_flows.c\00", section "llvm.metadata"
@.str.10 = private unnamed_addr constant [49 x i8] c"dma_krx_pkt_fastpath: slowpath because of state\0A\00", align 1
@.str.11 = private unnamed_addr constant [53 x i8] c"fast_flows_packet: ignored fin because out of order\0A\00", align 1
@.str.12 = private unnamed_addr constant [50 x i8] c"fast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"flast_flows_packet: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"tas_batch_maker\00", section "llvm.metadata"
@.str.15 = private unnamed_addr constant [53 x i8] c"fast_flows_bump: tx bump while TX is already closed\0A\00", align 1
@.str.16 = private unnamed_addr constant [44 x i8] c"fast_flows_bump: tx eos without dummy byte\0A\00", align 1
@.str.17 = private unnamed_addr constant [49 x i8] c"flast_flows_bump: qman_set 1 failed, UNEXPECTED\0A\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"expensive\00", section "llvm.metadata"
@.str.19 = private unnamed_addr constant [10 x i8] c"tas_batch\00", section "llvm.metadata"
@crc32_alg = internal global i8 1, align 1
@.str.20 = private unnamed_addr constant [57 x i8] c"addr + len >= addr && addr + len <= FLEXNIC_DMA_MEM_SIZE\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"tas/fast/dma.h\00", align 1
@__PRETTY_FUNCTION__.dma_pointer = private unnamed_addr constant [37 x i8] c"void *dma_pointer(uintptr_t, size_t)\00", align 1
@tas_shm = external dso_local global i8*, align 8
@.str.22 = private unnamed_addr constant [35 x i8] c"hlen=%u opts_len=%u len=%u so=%zu\0A\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"parse_options: opt_avail=%u kind=%u off=%u\0A\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"parse_options: opt_len=%u so=%zu\0A\00", align 1
@crc32c_tables = internal constant [8 x [256 x i32]] [[256 x i32] [i32 0, i32 -227835133, i32 -516198153, i32 324072436, i32 -946170081, i32 904991772, i32 648144872, i32 -724933397, i32 -1965467441, i32 2024987596, i32 1809983544, i32 -1719030981, i32 1296289744, i32 -1087877933, i32 -1401372889, i32 1578318884, i32 274646895, i32 -499825556, i32 -244992104, i32 51262619, i32 -675000208, i32 632279923, i32 922689671, i32 -996891772, i32 -1702387808, i32 1760304291, i32 2075979607, i32 -1982370732, i32 1562183871, i32 -1351185476, i32 -1138329528, i32 1313733451, i32 549293790, i32 -757723683, i32 -1048117719, i32 871202090, i32 -416867903, i32 357341890, i32 102525238, i32 -193467851, i32 -1436232175, i32 1477399826, i32 1264559846, i32 -1187764763, i32 1845379342, i32 -1617575411, i32 -1933233671, i32 2125378298, i32 820201905, i32 -1031222606, i32 -774358714, i32 598981189, i32 -143008082, i32 85089709, i32 373468761, i32 -467063462, i32 -1170599554, i32 1213305469, i32 1526817161, i32 -1452612982, i32 2107672161, i32 -1882520222, i32 -1667500394, i32 1861252501, i32 1098587580, i32 -1290756417, i32 -1606390453, i32 1378610760, i32 -2032039261, i32 1955203488, i32 1742404180, i32 -1783531177, i32 -878557837, i32 969524848, i32 714683780, i32 -655182201, i32 205050476, i32 -28094097, i32 -318528869, i32 526918040, i32 1361435347, i32 -1555146288, i32 -1340167644, i32 1114974503, i32 -1765847604, i32 1691668175, i32 2005155131, i32 -2047885768, i32 -604208612, i32 697762079, i32 986182379, i32 -928222744, i32 476452099, i32 -301099520, i32 -44210700, i32 255256311, i32 1640403810, i32 -1817374623, i32 -2130844779, i32 1922457750, i32 -1503918979, i32 1412925310, i32 1197962378, i32 -1257441399, i32 -350237779, i32 427051182, i32 170179418, i32 -129025959, i32 746937522, i32 -554770511, i32 -843174843, i32 1070968646, i32 1905808397, i32 -2081171698, i32 -1868356358, i32 1657317369, i32 -1241332974, i32 1147748369, i32 1463399397, i32 -1521340186, i32 -79622974, i32 153784257, i32 444234805, i32 -401473738, i32 1021025245, i32 -827320098, i32 -572462294, i32 797665321, i32 -2097792136, i32 1889384571, i32 1674398607, i32 -1851340660, i32 1164749927, i32 -1224265884, i32 -1537745776, i32 1446797203, i32 137323447, i32 -96149324, i32 -384560320, i32 461344835, i32 -810158936, i32 1037989803, i32 781091935, i32 -588970148, i32 -1834419177, i32 1623424788, i32 1939049696, i32 -2114449437, i32 1429367560, i32 -1487280117, i32 -1274471425, i32 1180866812, i32 410100952, i32 -367384613, i32 -112536529, i32 186734380, i32 -538233913, i32 763408580, i32 1053836080, i32 -860110797, i32 -1572096602, i32 1344288421, i32 1131464017, i32 -1323612590, i32 1708204729, i32 -1749376582, i32 -2065018290, i32 1988219213, i32 680717673, i32 -621187478, i32 -911630946, i32 1002577565, i32 -284657034, i32 493091189, i32 238226049, i32 -61306494, i32 -1307217207, i32 1082061258, i32 1395524158, i32 -1589280451, i32 1972364758, i32 -2015074603, i32 -1800104671, i32 1725896226, i32 952904198, i32 -894981883, i32 -638100751, i32 731699698, i32 -11092711, i32 222117402, i32 510512622, i32 -335130899, i32 -1014159676, i32 837199303, i32 582374963, i32 -790768336, i32 68661723, i32 -159632680, i32 -450051796, i32 390545967, i32 1230274059, i32 -1153434360, i32 -1469116676, i32 1510247935, i32 -1899042540, i32 2091215383, i32 1878366691, i32 -1650582816, i32 -741088853, i32 565732008, i32 854102364, i32 -1065151905, i32 340358836, i32 -433916489, i32 -177076669, i32 119113024, i32 1493875044, i32 -1419691417, i32 -1204696685, i32 1247431312, i32 -1634718085, i32 1828433272, i32 2141937292, i32 -1916740209, i32 -483350502, i32 291187481, i32 34330861, i32 -262120466, i32 615137029, i32 -691946490, i32 -980332558, i32 939183345, i32 1776939221, i32 -1685949482, i32 -1999470558, i32 2058945313, i32 -1368168502, i32 1545135305, i32 1330124605, i32 -1121741762, i32 -210866315, i32 17165430, i32 307568514, i32 -532767615, i32 888469610, i32 -962626711, i32 -707819363, i32 665062302, i32 2042050490, i32 -1948470087, i32 -1735637171, i32 1793573966, i32 -1104306011, i32 1279665062, i32 1595330642, i32 -1384295599], [256 x i32] [i32 0, i32 329422967, i32 658845934, i32 887597209, i32 1317691868, i32 1562966443, i32 1775194418, i32 2054015301, i32 -1659583560, i32 -1900651569, i32 -1169034410, i32 -1443665119, i32 -744578460, i32 -1069794797, i32 -186936694, i32 -411497731, i32 1069937025, i32 744974838, i32 411091311, i32 186800408, i32 1901039709, i32 1659701290, i32 1443537075, i32 1168652484, i32 -1563348423, i32 -1317819826, i32 -2053897513, i32 -1774806368, i32 -329559067, i32 -406638, i32 -887201013, i32 -658703492, i32 2139874050, i32 1814657909, i32 1489949676, i32 1265388443, i32 822182622, i32 581114537, i32 373600816, i32 98970183, i32 -492887878, i32 -247613235, i32 -975564716, i32 -696743901, i32 -1407893146, i32 -1078470383, i32 -1957662328, i32 -1728910849, i32 1078858371, i32 1408010996, i32 1728782957, i32 1957280282, i32 247755615, i32 493284136, i32 696337329, i32 975428550, i32 -581250757, i32 -822589108, i32 -98573867, i32 -373458526, i32 -1815039769, i32 -2140002160, i32 -1265270775, i32 -1489561474, i32 -15219196, i32 -323658125, i32 -665651478, i32 -873435491, i32 -1315067944, i32 -1572913233, i32 -1764190410, i32 -2055598271, i32 1644365244, i32 1906417099, i32 1162229074, i32 1457827109, i32 747201632, i32 1059847191, i32 197940366, i32 409914617, i32 -1059965051, i32 -747589646, i32 -409532565, i32 -197812452, i32 -1906813351, i32 -1644507602, i32 -1457690953, i32 -1161822528, i32 1573319741, i32 1315204170, i32 2055455955, i32 1763794084, i32 323786209, i32 15601046, i32 873047311, i32 665533816, i32 -2137250554, i32 -1824604815, i32 -1478945304, i32 -1266971233, i32 -837401382, i32 -575349587, i32 -380406732, i32 -84808637, i32 495511230, i32 237665993, i32 986568272, i32 695160359, i32 1392674658, i32 1084235541, i32 1950857100, i32 1743073275, i32 -1084631929, i32 -1392816912, i32 -1742936983, i32 -1950450658, i32 -237783717, i32 -495899348, i32 -694778443, i32 -986440254, i32 575477567, i32 837783368, i32 84420561, i32 380288934, i32 1825011427, i32 2137386644, i32 1266828813, i32 1478549114, i32 -71042311, i32 -396270962, i32 -595146217, i32 -819703200, i32 -1253467355, i32 -1494547630, i32 -1844663349, i32 -2119289924, i32 1725380929, i32 1970643254, i32 1100089775, i32 1378914776, i32 677206173, i32 1006616810, i32 253257843, i32 482013188, i32 -1006236808, i32 -677080305, i32 -482133098, i32 -253647903, i32 -1970509148, i32 -1724976429, i32 -1379313078, i32 -1100234179, i32 1494403264, i32 1253068983, i32 2119694382, i32 1844797529, i32 395880732, i32 70922603, i32 819829234, i32 595526021, i32 -2075649541, i32 -1746239092, i32 -1559418603, i32 -1330663070, i32 -893224921, i32 -647962544, i32 -309901111, i32 -31076162, i32 425515587, i32 184435252, i32 1041885869, i32 767259354, i32 1473690527, i32 1148462056, i32 1888717681, i32 1664160518, i32 -1148327814, i32 -1473286131, i32 -1664558956, i32 -1888861981, i32 -184055386, i32 -425389615, i32 -767379128, i32 -1042276033, i32 647572418, i32 893105077, i32 31202092, i32 310281051, i32 1746094622, i32 2075251305, i32 1331067632, i32 1559552647, i32 81018109, i32 393651338, i32 596708371, i32 808686692, i32 1247698209, i32 1509737814, i32 1830514127, i32 2126116280, i32 -1715404987, i32 -1973262542, i32 -1098526805, i32 -1389930532, i32 -682975591, i32 -991426834, i32 -267407753, i32 -475187712, i32 991022460, i32 682841355, i32 475331986, i32 267806181, i32 1973136544, i32 1715025111, i32 1390320718, i32 1098646585, i32 -1509617980, i32 -1247308109, i32 -2126496214, i32 -1830640035, i32 -393253096, i32 -80873617, i32 -808820746, i32 -597112959, i32 2069880831, i32 1761429384, i32 1545269009, i32 1337489254, i32 903200291, i32 645342804, i32 311463629, i32 20059834, i32 -431285177, i32 -169245648, i32 -1056035671, i32 -760433442, i32 -1463714405, i32 -1151080980, i32 -1887154827, i32 -1675176702, i32 1150955134, i32 1463334409, i32 1675566736, i32 1887274727, i32 168841122, i32 431151061, i32 760577868, i32 1056433979, i32 -644944442, i32 -903055951, i32 -20194008, i32 -311868065, i32 -1761309670, i32 -2069490579, i32 -1337869068, i32 -1545395069], [256 x i32] [i32 0, i32 -1522429314, i32 1332695565, i32 -366034829, i32 -1629576166, i32 1000289892, i32 -776866281, i32 1961911401, i32 944848581, i32 -1659851589, i32 2000579784, i32 -763363658, i32 -1500538145, i32 63834273, i32 -371144494, i32 1285642924, i32 1889697162, i32 -706482188, i32 1070411655, i32 -1702052359, i32 -293807728, i32 1262308334, i32 -1592554595, i32 72489443, i32 1223902031, i32 -307048143, i32 127668546, i32 -1562541252, i32 -701634731, i32 1936487723, i32 -1723681448, i32 1006839590, i32 -515572972, i32 1141205354, i32 -1372870375, i32 191511399, i32 2140823310, i32 -623129232, i32 821366019, i32 -1783324803, i32 -652884527, i32 2085902255, i32 -1770350628, i32 859506082, i32 1204511179, i32 -494210123, i32 144978886, i32 -1377459784, i32 -1847163234, i32 883365088, i32 -561392493, i32 2076722925, i32 255337092, i32 -1434865414, i32 1079472265, i32 -451484937, i32 -1447577509, i32 217459237, i32 -421991850, i32 1134131240, i32 929635393, i32 -1842835905, i32 2013679180, i32 -582493134, i32 -949649191, i32 1646531239, i32 -2012556588, i32 759906474, i32 1505436867, i32 -50678083, i32 383022798, i32 -1282022224, i32 -13320676, i32 1517628514, i32 -1336153071, i32 354057839, i32 1642732038, i32 -995391368, i32 780486667, i32 -1950033291, i32 -1211630253, i32 310800173, i32 -123162786, i32 1575566624, i32 689527113, i32 -1940337865, i32 1719012164, i32 -1019766470, i32 -1885944938, i32 718754280, i32 -1057386085, i32 1706558437, i32 289957772, i32 -1274415630, i32 1579627905, i32 -77158401, i32 639728589, i32 -2090800717, i32 1766730176, i32 -871384130, i32 -1191190569, i32 499010985, i32 -141521446, i32 1389436836, i32 510674184, i32 -1154361482, i32 1360992005, i32 -195132037, i32 -2136022766, i32 636449644, i32 -809389281, i32 1786782049, i32 1451427399, i32 -205351879, i32 434918474, i32 -1129462220, i32 -933387683, i32 1830563875, i32 -2026704816, i32 577987118, i32 1859270786, i32 -879514884, i32 566061711, i32 -2063795983, i32 -267608936, i32 1431113446, i32 -1083978091, i32 438459627, i32 -1960347837, i32 778495293, i32 -1001904818, i32 1628026672, i32 368694105, i32 -1330101977, i32 1519812948, i32 -2682070, i32 -1284093562, i32 372759544, i32 -65463413, i32 1498974709, i32 766045596, i32 -1997963294, i32 1657257873, i32 -947507729, i32 -75167031, i32 1589942455, i32 -1259710268, i32 296471226, i32 1700507347, i32 -1072022355, i32 708115678, i32 -1888129376, i32 -1009503220, i32 1721083506, i32 -1933875711, i32 704312447, i32 1560973334, i32 -129301912, i32 308658715, i32 -1222356891, i32 1784908887, i32 -819847639, i32 621600346, i32 -2142417884, i32 -188929971, i32 1375517235, i32 -1143834048, i32 513009726, i32 1379054226, i32 -143449876, i32 492691615, i32 -1206095135, i32 -856942968, i32 1772979446, i32 -2088549243, i32 650303227, i32 448917981, i32 -1082104925, i32 1437508560, i32 -252759634, i32 -2078321209, i32 559859641, i32 -881850422, i32 1848743348, i32 579915544, i32 -2016322202, i32 1845468437, i32 -927068309, i32 -1135711486, i32 420477308, i32 -215926513, i32 1449175921, i32 1279457178, i32 -385653276, i32 53323159, i32 -1502857239, i32 -761506944, i32 2011021822, i32 -1645018739, i32 951227379, i32 1947453791, i32 -783131871, i32 998021970, i32 -1640167124, i32 -355635899, i32 1334640443, i32 -1516093624, i32 14921014, i32 1021348368, i32 -1717495698, i32 1938806813, i32 -691123613, i32 -1572983286, i32 125811828, i32 -313426937, i32 1209069177, i32 78755029, i32 -1578096981, i32 1272899288, i32 -291539802, i32 -1703997233, i32 1060012721, i32 -721403198, i32 1883361468, i32 -1392112498, i32 138911472, i32 -496411005, i32 1193856253, i32 869836948, i32 -1768342806, i32 2092432025, i32 -638162713, i32 -1789447605, i32 806789173, i32 -633839546, i32 2138698296, i32 193566289, i32 -1362623441, i32 1155974236, i32 -509127134, i32 -576425724, i32 2028331898, i32 -1832180983, i32 931836279, i32 1132123422, i32 -432322720, i32 202737427, i32 -1454107283, i32 -436908095, i32 1085595071, i32 -1432740404, i32 266047410, i32 2066475995, i32 -563447387, i32 876919254, i32 -1861932120], [256 x i32] [i32 0, i32 -582636872, i32 -1083759743, i32 1646430521, i32 2065838579, i32 -1503159477, i32 -1002106254, i32 419477706, i32 -163290138, i32 721537374, i32 1227047015, i32 -1805194529, i32 -1922674155, i32 1344534701, i32 838955412, i32 -280700116, i32 -379276995, i32 874584965, i32 1443074748, i32 -1958332412, i32 -1840873266, i32 1325607542, i32 757179215, i32 -261879305, i32 522244827, i32 -1033537437, i32 -1605897894, i32 2097306594, i32 1677910824, i32 -1186510448, i32 -614088535, i32 102787601, i32 -685435765, i32 174112307, i32 1749169930, i32 -1257792078, i32 -1408817800, i32 1900187584, i32 325060345, i32 -836391871, i32 560035693, i32 -64692779, i32 -1643752212, i32 1128529492, i32 1514358430, i32 -2029589466, i32 -450599649, i32 945934247, i32 1044489654, i32 -486273266, i32 -2128181705, i32 1550003343, i32 1164153925, i32 -1742323971, i32 -100354108, i32 658578812, i32 -939145648, i32 356543720, i32 2002970065, i32 -1440264343, i32 -1289226333, i32 1851940123, i32 205575202, i32 -788169062, i32 -1415159833, i32 1994650975, i32 348224614, i32 -914041122, i32 -796627436, i32 230802604, i32 1877167509, i32 -1297684691, i32 1575107585, i32 -2136500551, i32 -494592128, i32 1069593912, i32 650120690, i32 -75126966, i32 -1717096845, i32 1155695819, i32 1120071386, i32 -1618525086, i32 -39465637, i32 551577571, i32 971038505, i32 -458918511, i32 -2037908312, i32 1539462672, i32 -1266250436, i32 1774397316, i32 199339709, i32 -693894139, i32 -811287345, i32 316741239, i32 1891868494, i32 -1383713290, i32 2088979308, i32 -1580801580, i32 -1008441107, i32 513917525, i32 128023199, i32 -622538713, i32 -1194960610, i32 1703146406, i32 -1966659446, i32 1468170802, i32 899681035, i32 -387604045, i32 -236643975, i32 748729281, i32 1317157624, i32 -1815637952, i32 -1779959215, i32 1218597097, i32 713087440, i32 -138054808, i32 -289027166, i32 864051482, i32 1369630755, i32 -1931001189, i32 1671666103, i32 -1092209905, i32 -591087050, i32 25235598, i32 411150404, i32 -977009924, i32 -1478063163, i32 2057511293, i32 1386268991, i32 -1880792185, i32 -305665346, i32 813842438, i32 696449228, i32 -188263820, i32 -1763321011, i32 1268806133, i32 -1528517927, i32 2040594529, i32 461605208, i32 -960093216, i32 -540632278, i32 42152338, i32 1621211307, i32 -1109126637, i32 -1144752126, i32 1719784122, i32 77814659, i32 -639176389, i32 -1058649615, i32 497279817, i32 2139187824, i32 -1564163896, i32 1300241380, i32 -1866092196, i32 -219727771, i32 799183581, i32 916597271, i32 -337149777, i32 -1983575658, i32 1417716526, i32 -2054824524, i32 1489008396, i32 987954741, i32 -408464243, i32 -22549433, i32 602031871, i32 1103155142, i32 -1668979330, i32 1942077010, i32 -1367075606, i32 -861495853, i32 300103531, i32 149131169, i32 -710531815, i32 -1216041952, i32 1791035032, i32 1826712713, i32 -1314601423, i32 -746172664, i32 247719344, i32 398679418, i32 -897124414, i32 -1465614597, i32 1977734211, i32 -1700458641, i32 1205904855, i32 633482478, i32 -125335978, i32 -511230308, i32 1019384868, i32 1591745821, i32 -2086291547, i32 -117008680, i32 608386144, i32 1180808537, i32 -1692131359, i32 -2111527125, i32 1600195987, i32 1027835050, i32 -536465902, i32 256046398, i32 -771268730, i32 -1339697473, i32 1835039751, i32 1952498893, i32 -1457164683, i32 -888674484, i32 373444084, i32 274868197, i32 -853045923, i32 -1358625692, i32 1916841692, i32 1799362070, i32 -1241138002, i32 -735627881, i32 157458223, i32 -433699837, i32 996404923, i32 1497458562, i32 -2080060102, i32 -1660652048, i32 1078058824, i32 576935537, i32 -14222135, i32 774079059, i32 -211408661, i32 -1857773102, i32 1275136874, i32 1426174880, i32 -2008803048, i32 -362377183, i32 925055641, i32 -664280651, i32 86133517, i32 1728102964, i32 -1169856372, i32 -1555705786, i32 2113960702, i32 472052679, i32 -1050191489, i32 -951635090, i32 436378070, i32 2015367407, i32 -1520059817, i32 -1134230883, i32 1629530149, i32 50471196, i32 -565736540, i32 822300808, i32 -330892752, i32 -1906019575, i32 1394727345, i32 1243701627, i32 -1755001917, i32 -179944710, i32 671344706], [256 x i32] [i32 0, i32 940666796, i32 1881333592, i32 1211347188, i32 -532300112, i32 -665530084, i32 -1872272920, i32 -1468658108, i32 -983102575, i32 -42572739, i32 -1253714743, i32 -1923826843, i32 623031585, i32 489937549, i32 1426090617, i32 1829832149, i32 -1893572141, i32 -1221390721, i32 -16728437, i32 -955133657, i32 1869078371, i32 1467396303, i32 524615739, i32 659845015, i32 1246063170, i32 1918109166, i32 979875098, i32 41343670, i32 -1442786062, i32 -1844331682, i32 -635302998, i32 -499948538, i32 464041303, i32 599382779, i32 1804233231, i32 1402668451, i32 -68351001, i32 -1006869429, i32 -1949313857, i32 -1277248749, i32 -556810554, i32 -421605014, i32 -1360174690, i32 -1761866190, i32 1049231478, i32 110850010, i32 1319690030, i32 1991880834, i32 -1802840956, i32 -1399080152, i32 -458748964, i32 -591829904, i32 1959750196, i32 1289618840, i32 82687340, i32 1023204032, i32 1374543637, i32 1778167993, i32 567214157, i32 434008033, i32 -1314365019, i32 -1984360951, i32 -1047871747, i32 -107228847, i32 928082606, i32 255853826, i32 1198765558, i32 2137184858, i32 -686500834, i32 -284836942, i32 -1489630394, i32 -1624808214, i32 -231317185, i32 -903410029, i32 -2112569753, i32 -1174023733, i32 309583759, i32 711110691, i32 1649475799, i32 1514172283, i32 -1200419971, i32 -2141035311, i32 -934161371, i32 -264193143, i32 1479980493, i32 1613224545, i32 672426645, i32 268764473, i32 2098462956, i32 1157984064, i32 221700020, i32 891793432, i32 -1655587236, i32 -1522478608, i32 -311205628, i32 -714994008, i32 754573305, i32 350793813, i32 1557856417, i32 1690988301, i32 -860069559, i32 -189985051, i32 -1130447343, i32 -2070949443, i32 -375466904, i32 -779109436, i32 -1715729616, i32 -1582472036, i32 165374680, i32 835323252, i32 2046408064, i32 1105779244, i32 -1545880022, i32 -1681206906, i32 -738631310, i32 -337113378, i32 1134428314, i32 2072997686, i32 868016066, i32 195932270, i32 1723643323, i32 1588451863, i32 379480803, i32 781124943, i32 -2030499061, i32 -1092066137, i32 -153365421, i32 -825574401, i32 1856165212, i32 1454619376, i32 511707652, i32 647062952, i32 -1897436180, i32 -1225391040, i32 -20597580, i32 -959128808, i32 -1413095731, i32 -1814777503, i32 -605617771, i32 -470389191, i32 1266704509, i32 1938886609, i32 1000521509, i32 62115977, i32 -511658865, i32 -644752605, i32 -1851626537, i32 -1447885701, i32 29690431, i32 970220947, i32 1911018855, i32 1240906443, i32 619167518, i32 485937330, i32 1422221382, i32 1825837034, i32 -996015698, i32 -55349758, i32 -1266622730, i32 -1936608934, i32 1963614219, i32 1293619111, i32 86556499, i32 1027199231, i32 -1789927749, i32 -1386303209, i32 -445840925, i32 -579047857, i32 -1335006310, i32 -2005138378, i32 -1068518206, i32 -128001170, i32 1344853290, i32 1748613766, i32 537528946, i32 404448734, i32 -98041384, i32 -1036423564, i32 -1978999168, i32 -1306808020, i32 443400040, i32 578605252, i32 1783586864, i32 1381896092, i32 1062144585, i32 123626981, i32 1332598033, i32 2004662973, i32 -552946439, i32 -417604779, i32 -1356305503, i32 -1757871091, i32 1509146610, i32 1642254430, i32 701587626, i32 297799430, i32 -1179254462, i32 -2119733522, i32 -912990694, i32 -242896458, i32 -1667976093, i32 -1534731313, i32 -323589317, i32 -727251817, i32 2094074579, i32 1153459583, i32 217306507, i32 887274023, i32 -690889183, i32 -289361523, i32 -1494023815, i32 -1629327659, i32 915693713, i32 243601213, i32 1186381769, i32 2124927077, i32 330749360, i32 732412444, i32 1670646504, i32 1535468868, i32 -202151168, i32 -874380116, i32 -2083408808, i32 -1144988684, i32 1113262757, i32 2051695881, i32 846845437, i32 174635601, i32 -1575046123, i32 -1710236743, i32 -767792307, i32 -366148383, i32 -2026110668, i32 -1087541608, i32 -148971924, i32 -821055040, i32 1736032132, i32 1600704552, i32 391864540, i32 793382768, i32 -847680650, i32 -177732390, i32 -1118063570, i32 -2058691710, i32 758961606, i32 355318378, i32 1562249886, i32 1695507762, i32 136208615, i32 806293323, i32 2017247167, i32 1076744211, i32 -396632489, i32 -800411141, i32 -1736900337, i32 -1603768669], [256 x i32] [i32 0, i32 -282039527, i32 -611540797, i32 884788186, i32 -1292552329, i32 1573215342, i32 1769576372, i32 -2041971539, i32 1611012127, i32 -1892257018, i32 -1148536612, i32 1421530053, i32 -755814552, i32 1036207217, i32 159354795, i32 -430971726, i32 -1072943042, i32 792484647, i32 461410557, i32 -189727772, i32 1928922953, i32 -1647743920, i32 -1451907190, i32 1178979475, i32 -1609947103, i32 1329218360, i32 2072414434, i32 -1799953413, i32 318709590, i32 -36735921, i32 -915161195, i32 641979532, i32 -2047601011, i32 1791262100, i32 1584969294, i32 -1320624809, i32 922821114, i32 -667858205, i32 -326270663, i32 62777888, i32 -437121390, i32 180512139, i32 1048489553, i32 -783366840, i32 1460091365, i32 -1204333828, i32 -1937008346, i32 1673261631, i32 1173890739, i32 -1429713494, i32 -1636530576, i32 1900342633, i32 -150138428, i32 406682333, i32 746696967, i32 -1011754466, i32 637419180, i32 -892447307, i32 -26042769, i32 289600886, i32 -1760884261, i32 2017157826, i32 1283959064, i32 -1548238335, i32 235166699, i32 -516673294, i32 -712443096, i32 985174065, i32 -1125028708, i32 1405159301, i32 1736297567, i32 -2008176826, i32 1845642228, i32 -2127419155, i32 -1248926921, i32 1522436142, i32 -587762557, i32 868687770, i32 125555776, i32 -397688999, i32 -838308907, i32 557318348, i32 361024278, i32 -88825841, i32 2096979106, i32 -1815267397, i32 -1485702047, i32 1212258168, i32 -1374784566, i32 1094588627, i32 1971507977, i32 -1699563504, i32 486229181, i32 -204787804, i32 -948444034, i32 675778407, i32 -1947185818, i32 1690314367, i32 1350364581, i32 -1085503812, i32 956660241, i32 -701165304, i32 -494282030, i32 230273483, i32 -336177799, i32 80100960, i32 813364666, i32 -548757853, i32 1493393934, i32 -1238169321, i32 -2104507699, i32 1841277396, i32 1274838360, i32 -1530128831, i32 -1871651429, i32 2134947458, i32 -116831697, i32 372842806, i32 579201772, i32 -843742731, i32 737830215, i32 -993391010, i32 -260651644, i32 524725917, i32 -1727049168, i32 1983854889, i32 1115943667, i32 -1380738582, i32 470333398, i32 -214377265, i32 -947644651, i32 682916876, i32 -1359118175, i32 1104014264, i32 1970348130, i32 -1706996869, i32 2081337289, i32 -1824602928, i32 -1484648694, i32 1219650579, i32 -822372162, i32 567014311, i32 360134781, i32 -95988892, i32 -603682840, i32 859106545, i32 126363435, i32 -390575054, i32 1861333151, i32 -2118001786, i32 -1250095012, i32 1515027269, i32 -1140678665, i32 1395848430, i32 1737375540, i32 -2000792531, i32 251111552, i32 -507001959, i32 -713357245, i32 978019162, i32 -1711496869, i32 1993132610, i32 1114636696, i32 -1388287359, i32 722048556, i32 -1002832587, i32 -259705105, i32 531979766, i32 -101009084, i32 382390877, i32 578165127, i32 -851021154, i32 1259310643, i32 -1539316438, i32 -1870450960, i32 2142455273, i32 1508938085, i32 -1228866948, i32 -2105790042, i32 1833720511, i32 -351951342, i32 70634763, i32 814286545, i32 -541495864, i32 972458362, i32 -691608989, i32 -495310407, i32 222970528, i32 -1962689011, i32 1681118484, i32 1351556814, i32 -1077971497, i32 302836797, i32 -46364892, i32 -914338562, i32 649078759, i32 -1594238134, i32 1338617939, i32 2071296905, i32 -1807413104, i32 1913320482, i32 -1657102533, i32 -1450814239, i32 1186349048, i32 -1056980139, i32 802138188, i32 460546966, i32 -196933489, i32 -771695613, i32 1026602778, i32 160201920, i32 -423880743, i32 1626729332, i32 -1882881939, i32 -1149678665, i32 1414078638, i32 -1308179428, i32 1563864837, i32 1770677471, i32 -2034626618, i32 15987563, i32 -272394126, i32 -612412504, i32 877607089, i32 -1745290576, i32 2026410409, i32 1282693747, i32 -1555811990, i32 621661639, i32 -901929250, i32 -25072380, i32 296814109, i32 -134290769, i32 416188854, i32 745685612, i32 -1019074187, i32 1158403544, i32 -1438925119, i32 -1635289829, i32 1907826178, i32 1475660430, i32 -1195073129, i32 -1938265523, i32 1665663316, i32 -452854279, i32 171022048, i32 1049451834, i32 -776128989, i32 938660497, i32 -658327160, i32 -327257518, i32 55449931, i32 -2063079962, i32 1782025983, i32 1586185509, i32 -1313132996], [256 x i32] [i32 0, i32 1745038536, i32 -804890224, i32 -1207601832, i32 -1511995951, i32 -840701671, i32 1978047553, i32 501592201, i32 1311636819, i32 640602523, i32 -1641306941, i32 -165115893, i32 -338872190, i32 -2083646390, i32 1003184402, i32 1405636058, i32 -1671693658, i32 -195504530, i32 1281205046, i32 610177022, i32 968572791, i32 1371018175, i32 -373463321, i32 -2118235601, i32 -764016651, i32 -1166726339, i32 40918629, i32 1785950893, i32 2006368804, i32 529919724, i32 -1483695180, i32 -812402820, i32 1029407677, i32 1431875445, i32 -312616403, i32 -2057373979, i32 -1732557204, i32 -256349532, i32 1220354044, i32 549335860, i32 1937145582, i32 460673574, i32 -1552930946, i32 -881652810, i32 -694764737, i32 -1097492489, i32 110158511, i32 1855180391, i32 -1593804517, i32 -922528301, i32 1896226955, i32 419761219, i32 81837258, i32 1826852866, i32 -723065510, i32 -1125791342, i32 -282229688, i32 -2026985344, i32 1059839448, i32 1462300944, i32 1254965657, i32 583953745, i32 -1697966071, i32 -221760319, i32 2058815354, i32 313797554, i32 -1431216406, i32 -1028492766, i32 -547896661, i32 -1219170717, i32 257006395, i32 1733474291, i32 882571817, i32 1553585889, i32 -459496519, i32 -1935700111, i32 -1854259208, i32 -109505744, i32 1098671720, i32 696208032, i32 -420676132, i32 -1896885996, i32 921347148, i32 1592363140, i32 1124874253, i32 722408645, i32 -1828036195, i32 -83276459, i32 -1463746417, i32 -1061016505, i32 2026330399, i32 281310679, i32 220317022, i32 1696786838, i32 -584606514, i32 -1255886842, i32 1206682823, i32 804235279, i32 -1746215593, i32 -1445473, i32 -502513386, i32 -1978700322, i32 839522438, i32 1510552654, i32 163674516, i32 1640125788, i32 -641261564, i32 -1312551732, i32 -1407075259, i32 -1004367731, i32 2082989525, i32 337955101, i32 -608731551, i32 -1280027991, i32 196159473, i32 1672612665, i32 2119678896, i32 374642552, i32 -1370365408, i32 -967651608, i32 -1785035982, i32 -40259590, i32 1167907490, i32 765458026, i32 813319907, i32 1484352043, i32 -528736397, i32 -2004929605, i32 -177336588, i32 -1653792196, i32 627595108, i32 1298889644, i32 1351535397, i32 948824045, i32 -2138533195, i32 -393494915, i32 -1153174617, i32 -750723217, i32 1799727671, i32 54953727, i32 514012790, i32 1990204094, i32 -828018714, i32 -1499053266, i32 1765143634, i32 20371610, i32 -1187795518, i32 -785350390, i32 -858443389, i32 -1529471669, i32 483616787, i32 1959806171, i32 655886593, i32 1327179209, i32 -149008239, i32 -1625457575, i32 -2097623856, i32 -352591848, i32 1392416064, i32 989706632, i32 -936014519, i32 -1607032447, i32 406050009, i32 1882257425, i32 1842694296, i32 97936464, i32 -1110241016, i32 -707772992, i32 -2045218790, i32 -300196654, i32 1444817290, i32 1042089282, i32 603502027, i32 1274779907, i32 -201397157, i32 -1677868909, i32 1416525807, i32 1013799719, i32 -2073547137, i32 -328531273, i32 -242306498, i32 -1718771978, i32 562621358, i32 1233897318, i32 440634044, i32 1916839540, i32 -901393620, i32 -1572405276, i32 -1079816339, i32 -677354587, i32 1873090301, i32 128334389, i32 -1881601650, i32 -405134010, i32 1608470558, i32 937196758, i32 708430943, i32 1111154839, i32 -96496177, i32 -1841514233, i32 -1040911139, i32 -1443375083, i32 301116749, i32 2045870469, i32 1679044876, i32 202841540, i32 -1273861988, i32 -602848172, i32 327349032, i32 2072109024, i32 -1014715720, i32 -1417181584, i32 -1235077383, i32 -564061647, i32 1717858153, i32 241648545, i32 1571753595, i32 900473523, i32 -1918281749, i32 -441812189, i32 -128988246, i32 -1874008222, i32 675910202, i32 1078640370, i32 -1300067789, i32 -629037317, i32 1652872099, i32 176684907, i32 392318946, i32 2137088810, i32 -949741966, i32 -1352189254, i32 -55609504, i32 -1800643672, i32 749285104, i32 1151992376, i32 1498395313, i32 827104889, i32 -1991644383, i32 -515192855, i32 786002069, i32 1188715613, i32 -18929403, i32 -1763965491, i32 -1959152316, i32 -482698868, i32 1530916052, i32 859619356, i32 1626639814, i32 150446350, i32 -1326263210, i32 -655230818, i32 -988526569, i32 -1390975777, i32 353505671, i32 2098281807], [256 x i32] [i32 0, i32 1228700967, i32 -1837565362, i32 -616265879, i32 555582061, i32 1747058506, i32 -1285195741, i32 -94829308, i32 1111164122, i32 185039357, i32 -800850284, i32 -1719696461, i32 1663469239, i32 706411408, i32 -245465863, i32 -1201536546, i32 -2072639052, i32 -850758509, i32 370078714, i32 1597148893, i32 -1519678503, i32 -329779458, i32 924021143, i32 2117012656, i32 -968028818, i32 -1888391095, i32 1412822816, i32 487164423, i32 -414150909, i32 -1368591836, i32 1965585741, i32 1007945834, i32 218129817, i32 1144789182, i32 -1619484713, i32 -700128528, i32 740157428, i32 1696701139, i32 -1100669510, i32 -145137507, i32 1329291587, i32 101129316, i32 -582771955, i32 -1803557334, i32 1848042286, i32 656055817, i32 -60941984, i32 -1251843001, i32 -1988727763, i32 -1068887798, i32 453940835, i32 1379068740, i32 -1469321664, i32 -514354329, i32 974328846, i32 1932486953, i32 -884119305, i32 -2106518064, i32 1496683193, i32 269086622, i32 -363795814, i32 -1553164355, i32 2015891668, i32 823422451, i32 436259634, i32 1396487701, i32 -2005388932, i32 -1052488613, i32 991775071, i32 1914778744, i32 -1452952815, i32 -530985418, i32 1480314856, i32 285717199, i32 -901565018, i32 -2088810367, i32 2032553349, i32 807022754, i32 -346114101, i32 -1570583828, i32 -1636384122, i32 -682967135, i32 202258632, i32 1160922607, i32 -1083490069, i32 -162054708, i32 756267685, i32 1680852866, i32 -598882724, i32 -1787708549, i32 1312111634, i32 118047029, i32 -45071311, i32 -1267975914, i32 1864941183, i32 638894936, i32 385920683, i32 1581044620, i32 -2055711515, i32 -867948094, i32 907881670, i32 2132890081, i32 -1536829816, i32 -312890449, i32 1429973617, i32 470275926, i32 -951889857, i32 -1904268008, i32 1948657692, i32 1025135931, i32 -429993390, i32 -1352487051, i32 -1820940513, i32 -632628680, i32 17718609, i32 1211244662, i32 -1301600910, i32 -78161835, i32 538173244, i32 1764729371, i32 -783440955, i32 -1737367838, i32 1127569803, i32 168371372, i32 -263183960, i32 -1184080753, i32 1646844902, i32 722773697, i32 872519268, i32 2101209923, i32 -1501991894, i32 -280686323, i32 354161673, i32 1545627950, i32 -2023428537, i32 -833055904, i32 1983550142, i32 1057419161, i32 -465409808, i32 -1384245801, i32 1462178003, i32 505114100, i32 -983569763, i32 -1939630150, i32 -1334337584, i32 -112467209, i32 571434398, i32 1798510777, i32 -1855316547, i32 -665427814, i32 51570675, i32 1244568276, i32 -229860598, i32 -1150228947, i32 1614045508, i32 688397411, i32 -749659801, i32 -1704106944, i32 1093264169, i32 135634446, i32 956429309, i32 1883082458, i32 -1418131021, i32 -498764652, i32 404517264, i32 1361054903, i32 -1973122082, i32 -1017579783, i32 2067461927, i32 839289344, i32 -381547159, i32 -1602326450, i32 1512535370, i32 320538733, i32 -933261564, i32 -2124156381, i32 -1116210615, i32 -196376722, i32 789512199, i32 1714650400, i32 -1670744028, i32 -715782909, i32 236094058, i32 1194262349, i32 -11731309, i32 -1234140236, i32 1832125661, i32 604535290, i32 -565084930, i32 -1754463783, i32 1277789872, i32 85326743, i32 771841366, i32 1732059249, i32 -1132878056, i32 -179971521, i32 253550395, i32 1176543772, i32 -1654381195, i32 -732407726, i32 1815763340, i32 621159595, i32 -29187134, i32 -1216422171, i32 1294457825, i32 68921030, i32 -547413585, i32 -1771873144, i32 -1435020062, i32 -481613371, i32 940551852, i32 1899221899, i32 -1955932529, i32 -1034507352, i32 420621505, i32 1345212902, i32 -397651912, i32 -1586483937, i32 2050271862, i32 856217425, i32 -917384619, i32 -2140295310, i32 1529423899, i32 303387964, i32 587282639, i32 1782400488, i32 -1317420415, i32 -129646682, i32 35437218, i32 1260439429, i32 -1872477972, i32 -648528437, i32 1631206421, i32 671498546, i32 -213727653, i32 -1166099588, i32 1076346488, i32 152814431, i32 -765508554, i32 -1687996143, i32 -1485360773, i32 -297055140, i32 890227509, i32 2083763730, i32 -2039827690, i32 -816394703, i32 336742744, i32 1563309183, i32 -447990367, i32 -1401927546, i32 1999949807, i32 1040757448, i32 -1001277492, i32 -1922184469, i32 1445547394, i32 521482405]], align 16
@__PRETTY_FUNCTION__.dma_read = private unnamed_addr constant [41 x i8] c"void dma_read(uintptr_t, size_t, void *)\00", align 1
@__PRETTY_FUNCTION__.dma_write = private unnamed_addr constant [48 x i8] c"void dma_write(uintptr_t, size_t, const void *)\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"pos < fs->rx_len\00", align 1
@__PRETTY_FUNCTION__.flow_rx_seq_write = private unnamed_addr constant [85 x i8] c"void flow_rx_seq_write(struct flextcp_pl_flowst *, uint32_t, uint16_t, const void *)\00", align 1
@eth_addr = external dso_local global %struct.ether_addr, align 1
@.str.26 = private unnamed_addr constant [43 x i8] c"tx_send: transmit buffer full, unexpected\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @rte_hash_crc_init_alg, i8* null }]
@llvm.global.annotations = appending global [2 x { i8*, i8*, i8*, i32 }] [{ i8*, i8*, i8*, i32 } { i8* bitcast (i32 (%struct.dataplane_context*, %struct.network_buf_handle*, i8*, %struct.tcp_opts*, i32)* @fast_flows_packet to i8*), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 328 }, { i8*, i8*, i8*, i32 } { i8* bitcast (void (%struct.dataplane_context*, %struct.network_buf_handle**, i8**, i16)* @fast_flows_packet_fss to i8*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1012 }], section "llvm.metadata"
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @rte_hash_crc_init_alg to i8*)], section "llvm.metadata"

; Function Attrs: nounwind uwtable
define internal void @rte_hash_crc_init_alg() #0 {
entry:
  call void @rte_hash_crc_set_alg(i8 zeroext 6)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_hash_crc_set_alg(i8 zeroext %alg) #1 {
entry:
  %alg.addr = alloca i8, align 1
  store i8 %alg, i8* %alg.addr, align 1, !tbaa !2
  %0 = load i8, i8* %alg.addr, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @rte_cpu_get_flag_enabled(i32 83)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i8 2, i8* %alg.addr, align 1, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %1 = load i8, i8* %alg.addr, align 1, !tbaa !2
  store i8 %1, i8* @crc32_alg, align 1, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_qman_pf(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queues.addr = alloca i32*, align 8
  %n.addr = alloca i16, align 2
  %i = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32* %queues, i32** %queues.addr, align 8, !tbaa !5
  store i16 %n, i16* %n.addr, align 2, !tbaa !7
  %0 = bitcast i16* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #6
  store i16 0, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i16, i16* %i, align 2, !tbaa !7
  %conv = zext i16 %1 to i32
  %2 = load i16, i16* %n.addr, align 2, !tbaa !7
  %conv1 = zext i16 %2 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %3, i32 0, i32 1
  %4 = load i32*, i32** %queues.addr, align 8, !tbaa !5
  %5 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom = zext i16 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4, !tbaa !9
  %idxprom3 = zext i32 %6 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  %7 = bitcast %struct.flextcp_pl_flowst* %arrayidx4 to i8*
  call void @rte_prefetch0(i8* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i16, i16* %i, align 2, !tbaa !7
  %inc = add i16 %8, 1
  store i16 %inc, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = bitcast i16* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %9) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_prefetch0(i8* %p) #1 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !5
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !5
  call void asm sideeffect "prefetcht0 $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %0) #6, !srcloc !11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_qman_pfbufs(%struct.dataplane_context* %ctx, i32* %queues, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queues.addr = alloca i32*, align 8
  %n.addr = alloca i16, align 2
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %i = alloca i16, align 2
  %p = alloca i8*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32* %queues, i32** %queues.addr, align 8, !tbaa !5
  store i16 %n, i16* %n.addr, align 2, !tbaa !7
  %0 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast i16* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #6
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  store i16 0, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i16, i16* %i, align 2, !tbaa !7
  %conv = zext i16 %3 to i32
  %4 = load i16, i16* %n.addr, align 2, !tbaa !7
  %conv1 = zext i16 %4 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %5, i32 0, i32 1
  %6 = load i32*, i32** %queues.addr, align 8, !tbaa !5
  %7 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom = zext i16 %7 to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4, !tbaa !9
  %idxprom3 = zext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom3
  store %struct.flextcp_pl_flowst* %arrayidx4, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 2
  %10 = load i64, i64* %tx_base, align 16, !tbaa !12
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 22
  %12 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %conv5 = zext i32 %12 to i64
  %add = add i64 %10, %conv5
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  store i8* %call, i8** %p, align 8, !tbaa !5
  %13 = load i8*, i8** %p, align 8, !tbaa !5
  call void @rte_prefetch0(i8* %13)
  %14 = load i8*, i8** %p, align 8, !tbaa !5
  %add.ptr = getelementptr i8, i8* %14, i64 64
  call void @rte_prefetch0(i8* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i16, i16* %i, align 2, !tbaa !7
  %inc = add i16 %15, 1
  store i16 %inc, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #6
  %17 = bitcast i16* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %17) #6
  %18 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dma_pointer(i64 %addr, i64 %len) #1 {
entry:
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  store i64 %addr, i64* %addr.addr, align 8, !tbaa !19
  store i64 %len, i64* %len.addr, align 8, !tbaa !19
  %0 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %1 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %4 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 74, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.dma_pointer, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %6 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6
  ret i8* %add.ptr
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_qman(%struct.dataplane_context* %ctx, i32 %queue, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %queue.addr = alloca i32, align 4
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts.addr = alloca i32, align 4
  %flow_id = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %oh = alloca %struct.obj_hdr, align 1
  %avail = alloca i32, align 4
  %len = alloca i32, align 4
  %tx_pos = alloca i32, align 4
  %tx_seq = alloca i32, align 4
  %ack = alloca i32, align 4
  %rx_wnd = alloca i32, align 4
  %hdrlen = alloca i32, align 4
  %objlen = alloca i32, align 4
  %new_core = alloca i16, align 2
  %fin = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32 %queue, i32* %queue.addr, align 4, !tbaa !9
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store i32 %ts, i32* %ts.addr, align 4, !tbaa !9
  %0 = bitcast i32* %flow_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %queue.addr, align 4, !tbaa !9
  store i32 %1, i32* %flow_id, align 4, !tbaa !9
  %2 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %3 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %3, i32 0, i32 1
  %4 = load i32, i32* %flow_id, align 4, !tbaa !9
  %idxprom = zext i32 %4 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %5 = bitcast %struct.obj_hdr* %oh to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %6 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #6
  %7 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #6
  %8 = bitcast i32* %tx_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #6
  %9 = bitcast i32* %tx_seq to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #6
  %10 = bitcast i32* %ack to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #6
  %11 = bitcast i32* %rx_wnd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #6
  %12 = bitcast i32* %hdrlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #6
  %13 = bitcast i32* %objlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #6
  %14 = bitcast i16* %new_core to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %14) #6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %fin) #6
  %15 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #6
  store i32 0, i32* %ret, align 4, !tbaa !9
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %17 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flow_group_steering = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %17, i32 0, i32 5
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %flow_group = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 11
  %19 = load i16, i16* %flow_group, align 4, !tbaa !20
  %idxprom1 = zext i16 %19 to i64
  %arrayidx2 = getelementptr inbounds [4096 x i8], [4096 x i8]* %flow_group_steering, i64 0, i64 %idxprom1
  %20 = load i8, i8* %arrayidx2, align 1, !tbaa !2
  %conv = zext i8 %20 to i16
  store i16 %conv, i16* %new_core, align 2, !tbaa !7
  %21 = load i16, i16* %new_core, align 2, !tbaa !7
  %conv3 = zext i16 %21 to i32
  %22 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %22, i32 0, i32 3
  %23 = load i16, i16* %id, align 8, !tbaa !21
  %conv4 = zext i16 %23 to i32
  %cmp = icmp ne i32 %conv3, %conv4
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %24 = load %struct.dataplane_context**, %struct.dataplane_context*** @ctxs, align 8, !tbaa !5
  %25 = load i16, i16* %new_core, align 2, !tbaa !7
  %idxprom6 = zext i16 %25 to i64
  %arrayidx7 = getelementptr inbounds %struct.dataplane_context*, %struct.dataplane_context** %24, i64 %idxprom6
  %26 = load %struct.dataplane_context*, %struct.dataplane_context** %arrayidx7, align 8, !tbaa !5
  %qman_fwd_ring = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %26, i32 0, i32 2
  %27 = load %struct.rte_ring*, %struct.rte_ring** %qman_fwd_ring, align 8, !tbaa !29
  %28 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %29 = bitcast %struct.flextcp_pl_flowst* %28 to i8*
  %call = call i32 @rte_ring_enqueue(%struct.rte_ring* %27, i8* %29)
  %cmp8 = icmp ne i32 %call, 0
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %if.then
  %31 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %31, i32 0, i32 1
  %32 = load i32, i32* %flow_id, align 4, !tbaa !9
  %call12 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %32, i32 0, i32 0, i16 zeroext 0, i8 zeroext 11)
  %cmp13 = icmp ne i32 %call12, 0
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end17:                                         ; preds = %if.end
  %34 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %kctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %34, i32 0, i32 3
  %35 = load i16, i16* %new_core, align 2, !tbaa !7
  %idxprom18 = zext i16 %35 to i64
  %arrayidx19 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %kctx, i64 0, i64 %idxprom18
  %36 = load i32, i32* %ts.addr, align 4, !tbaa !9
  call void @util_flexnic_kick(%struct.flextcp_pl_appctx* %arrayidx19, i32 %36)
  store i32 -1, i32* %ret, align 4, !tbaa !9
  br label %unlock

if.end20:                                         ; preds = %entry
  %37 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call21 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %37, i32* null)
  store i32 %call21, i32* %avail, align 4, !tbaa !9
  %38 = load i32, i32* %avail, align 4, !tbaa !9
  %cmp22 = icmp eq i32 %38, 0
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end20
  store i32 -1, i32* %ret, align 4, !tbaa !9
  br label %unlock

if.end25:                                         ; preds = %if.end20
  %39 = load i32, i32* %avail, align 4, !tbaa !9
  %cmp26 = icmp ult i32 1448, %39
  br i1 %cmp26, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end25
  br label %cond.end

cond.false:                                       ; preds = %if.end25
  %40 = load i32, i32* %avail, align 4, !tbaa !9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1448, %cond.true ], [ %40, %cond.false ]
  store i32 %cond, i32* %len, align 4, !tbaa !9
  %41 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %41, i32 0, i32 1
  %42 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %42, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then28, label %if.end70

if.then28:                                        ; preds = %cond.end
  %43 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %43, i32 0, i32 32
  %44 = load i32, i32* %tx_objrem, align 64, !tbaa !31
  %cmp29 = icmp eq i32 %44, 0
  br i1 %cmp29, label %if.then31, label %if.end49

if.then31:                                        ; preds = %if.then28
  %45 = load i32, i32* %len, align 4, !tbaa !9
  %conv32 = zext i32 %45 to i64
  %cmp33 = icmp ult i64 %conv32, 8
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.then31
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end37:                                         ; preds = %if.then31
  %47 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %48 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %48, i32 0, i32 22
  %49 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %50 = bitcast %struct.obj_hdr* %oh to i8*
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %47, i32 %49, i16 zeroext 8, i8* %50)
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 3
  %51 = load i8, i8* %dstlen, align 1, !tbaa !2
  %conv38 = zext i8 %51 to i64
  %add = add i64 8, %conv38
  %conv39 = trunc i64 %add to i32
  store i32 %conv39, i32* %hdrlen, align 4, !tbaa !9
  %52 = load i32, i32* %hdrlen, align 4, !tbaa !9
  %len40 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %oh, i32 0, i32 0
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %len40, i32 0, i32 0
  %53 = load i32, i32* %coerce.dive, align 1
  %call41 = call i32 @f_beui32(i32 %53)
  %add42 = add i32 %52, %call41
  store i32 %add42, i32* %objlen, align 4, !tbaa !9
  %54 = load i32, i32* %len, align 4, !tbaa !9
  %55 = load i32, i32* %hdrlen, align 4, !tbaa !9
  %cmp43 = icmp ult i32 %54, %55
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end37
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end47:                                         ; preds = %if.end37
  %57 = load i32, i32* %objlen, align 4, !tbaa !9
  %58 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_objrem48 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %58, i32 0, i32 32
  store i32 %57, i32* %tx_objrem48, align 64, !tbaa !31
  br label %if.end49

if.end49:                                         ; preds = %if.end47, %if.then28
  %59 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_objrem50 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %59, i32 0, i32 32
  %60 = load i32, i32* %tx_objrem50, align 64, !tbaa !31
  %61 = load i32, i32* %len, align 4, !tbaa !9
  %cmp51 = icmp ult i32 %60, %61
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %if.end49
  %62 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_objrem54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %62, i32 0, i32 32
  %63 = load i32, i32* %tx_objrem54, align 64, !tbaa !31
  br label %cond.end56

cond.false55:                                     ; preds = %if.end49
  %64 = load i32, i32* %len, align 4, !tbaa !9
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %63, %cond.true53 ], [ %64, %cond.false55 ]
  store i32 %cond57, i32* %len, align 4, !tbaa !9
  %65 = load i32, i32* %len, align 4, !tbaa !9
  %66 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_objrem58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %66, i32 0, i32 32
  %67 = load i32, i32* %tx_objrem58, align 64, !tbaa !31
  %sub = sub i32 %67, %65
  store i32 %sub, i32* %tx_objrem58, align 64, !tbaa !31
  %68 = load i32, i32* %avail, align 4, !tbaa !9
  %69 = load i32, i32* %len, align 4, !tbaa !9
  %cmp59 = icmp ugt i32 %68, %69
  br i1 %cmp59, label %if.then61, label %if.end69

if.then61:                                        ; preds = %cond.end56
  %70 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman62 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %70, i32 0, i32 1
  %71 = load i32, i32* %flow_id, align 4, !tbaa !9
  %call63 = call i32 @qman_set(%struct.qman_thread* %qman62, i32 %71, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp64 = icmp ne i32 %call63, 0
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then61
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end68:                                         ; preds = %if.then61
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %cond.end56
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %cond.end
  %73 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %73, i32 0, i32 23
  %74 = load i32, i32* %tx_next_seq, align 32, !tbaa !32
  store i32 %74, i32* %tx_seq, align 4, !tbaa !9
  %75 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos71 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %75, i32 0, i32 22
  %76 = load i32, i32* %tx_next_pos71, align 4, !tbaa !18
  store i32 %76, i32* %tx_pos, align 4, !tbaa !9
  %77 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %77, i32 0, i32 14
  %78 = load i32, i32* %rx_avail, align 4, !tbaa !33
  store i32 %78, i32* %rx_wnd, align 4, !tbaa !9
  %79 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %79, i32 0, i32 16
  %80 = load i32, i32* %rx_next_seq, align 4, !tbaa !34
  store i32 %80, i32* %ack, align 4, !tbaa !9
  %81 = load i32, i32* %len, align 4, !tbaa !9
  %82 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_seq72 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %82, i32 0, i32 23
  %83 = load i32, i32* %tx_next_seq72, align 32, !tbaa !32
  %add73 = add i32 %83, %81
  store i32 %add73, i32* %tx_next_seq72, align 32, !tbaa !32
  %84 = load i32, i32* %len, align 4, !tbaa !9
  %85 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos74 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %85, i32 0, i32 22
  %86 = load i32, i32* %tx_next_pos74, align 4, !tbaa !18
  %add75 = add i32 %86, %84
  store i32 %add75, i32* %tx_next_pos74, align 4, !tbaa !18
  %87 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos76 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %87, i32 0, i32 22
  %88 = load i32, i32* %tx_next_pos76, align 4, !tbaa !18
  %89 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %89, i32 0, i32 4
  %90 = load i32, i32* %tx_len, align 4, !tbaa !35
  %cmp77 = icmp uge i32 %88, %90
  br i1 %cmp77, label %if.then79, label %if.end83

if.then79:                                        ; preds = %if.end70
  %91 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_len80 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %91, i32 0, i32 4
  %92 = load i32, i32* %tx_len80, align 4, !tbaa !35
  %93 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos81 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %93, i32 0, i32 22
  %94 = load i32, i32* %tx_next_pos81, align 4, !tbaa !18
  %sub82 = sub i32 %94, %92
  store i32 %sub82, i32* %tx_next_pos81, align 4, !tbaa !18
  br label %if.end83

if.end83:                                         ; preds = %if.then79, %if.end70
  %95 = load i32, i32* %len, align 4, !tbaa !9
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 21
  %97 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %add84 = add i32 %97, %95
  store i32 %add84, i32* %tx_sent, align 8, !tbaa !36
  %98 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp85 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %98, i32 0, i32 1
  %99 = load i64, i64* %rx_base_sp85, align 8, !tbaa !30
  %and86 = and i64 %99, 16
  %cmp87 = icmp eq i64 %and86, 16
  br i1 %cmp87, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end83
  %100 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos89 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %100, i32 0, i32 22
  %101 = load i32, i32* %tx_next_pos89, align 4, !tbaa !18
  %102 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %102, i32 0, i32 24
  %103 = load i32, i32* %tx_head, align 4, !tbaa !37
  %cmp90 = icmp eq i32 %101, %103
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end83
  %104 = phi i1 [ false, %if.end83 ], [ %cmp90, %land.rhs ]
  %land.ext = zext i1 %104 to i32
  %conv92 = trunc i32 %land.ext to i8
  store i8 %conv92, i8* %fin, align 1, !tbaa !2
  %105 = load i8, i8* %fin, align 1, !tbaa !2
  %tobool93 = icmp ne i8 %105, 0
  br i1 %tobool93, label %if.then94, label %if.end99

if.then94:                                        ; preds = %land.end
  %106 = load i32, i32* %len, align 4, !tbaa !9
  %cmp95 = icmp ugt i32 %106, 0
  br i1 %cmp95, label %if.then97, label %if.else

if.then97:                                        ; preds = %if.then94
  br label %if.end98

if.else:                                          ; preds = %if.then94
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i32 242, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @__PRETTY_FUNCTION__.fast_flows_qman, i32 0, i32 0)) #11
  unreachable

if.end98:                                         ; preds = %if.then97
  %107 = load i32, i32* %len, align 4, !tbaa !9
  %dec = add i32 %107, -1
  store i32 %dec, i32* %len, align 4, !tbaa !9
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %land.end
  %108 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %109 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %110 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %111 = load i32, i32* %tx_seq, align 4, !tbaa !9
  %112 = load i32, i32* %ack, align 4, !tbaa !9
  %113 = load i32, i32* %rx_wnd, align 4, !tbaa !9
  %114 = load i32, i32* %len, align 4, !tbaa !9
  %conv100 = trunc i32 %114 to i16
  %115 = load i32, i32* %tx_pos, align 4, !tbaa !9
  %116 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %116, i32 0, i32 25
  %117 = load i32, i32* %tx_next_ts, align 8, !tbaa !38
  %118 = load i32, i32* %ts.addr, align 4, !tbaa !9
  %119 = load i8, i8* %fin, align 1, !tbaa !2
  call void @flow_tx_segment(%struct.dataplane_context* %108, %struct.network_buf_handle* %109, %struct.flextcp_pl_flowst* %110, i32 %111, i32 %112, i32 %113, i16 zeroext %conv100, i32 %115, i32 %117, i32 %118, i8 zeroext %119)
  br label %unlock

unlock:                                           ; preds = %if.end99, %if.then24, %if.end17
  %120 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock101 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %120, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock101)
  %121 = load i32, i32* %ret, align 4, !tbaa !9
  %122 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %122) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %fin) #6
  %123 = bitcast i16* %new_core to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %123) #6
  %124 = bitcast i32* %objlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %124) #6
  %125 = bitcast i32* %hdrlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %125) #6
  %126 = bitcast i32* %rx_wnd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %126) #6
  %127 = bitcast i32* %ack to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %127) #6
  %128 = bitcast i32* %tx_seq to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %128) #6
  %129 = bitcast i32* %tx_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %129) #6
  %130 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %130) #6
  %131 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %131) #6
  %132 = bitcast %struct.obj_hdr* %oh to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %132) #6
  %133 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %133) #6
  %134 = bitcast i32* %flow_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %134) #6
  ret i32 %121
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @util_spin_lock(i32* %sl) #1 {
entry:
  %sl.addr = alloca i32*, align 8
  %lock_val = alloca i32, align 4
  store i32* %sl, i32** %sl.addr, align 8, !tbaa !5
  %0 = bitcast i32* %lock_val to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  store i32 1, i32* %lock_val, align 4, !tbaa !9
  %1 = load i32*, i32** %sl.addr, align 8, !tbaa !5
  %2 = load i32, i32* %lock_val, align 4, !tbaa !9
  %3 = call i32 asm sideeffect "1:\0Axchg $0, $1\0Atest $1, $1\0Ajz 3f\0A2:\0Apause\0Acmpl $$0, $0\0Ajnz 2b\0Ajmp 1b\0A3:\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1, i32 %2) #6, !srcloc !39
  store i32 %3, i32* %lock_val, align 4, !tbaa !9
  %4 = bitcast i32* %lock_val to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #6
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @rte_ring_enqueue(%struct.rte_ring* %r, i8* %obj) #3 {
entry:
  %r.addr = alloca %struct.rte_ring*, align 8
  %obj.addr = alloca i8*, align 8
  store %struct.rte_ring* %r, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  store i8* %obj, i8** %obj.addr, align 8, !tbaa !5
  %0 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %call = call i32 @rte_ring_enqueue_bulk(%struct.rte_ring* %0, i8** %obj.addr, i32 1, i32* null)
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 -105
  ret i32 %cond
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

declare dso_local i32 @qman_set(%struct.qman_thread*, i32, i32, i32, i16 zeroext, i8 zeroext) #4

declare dso_local void @util_flexnic_kick(%struct.flextcp_pl_appctx*, i32) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_txavail(%struct.flextcp_pl_flowst* %fs, i32* %phead) #1 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %phead.addr = alloca i32*, align 8
  %buf_avail = alloca i32, align 4
  %fc_avail = alloca i32, align 4
  %head = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32* %phead, i32** %phead.addr, align 8, !tbaa !5
  %0 = bitcast i32* %buf_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %fc_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  %2 = bitcast i32* %head to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = load i32*, i32** %phead.addr, align 8, !tbaa !5
  %cmp = icmp ne i32* %3, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32*, i32** %phead.addr, align 8, !tbaa !5
  %5 = load i32, i32* %4, align 4, !tbaa !9
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 24
  %7 = load i32, i32* %tx_head, align 4, !tbaa !37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %7, %cond.false ]
  store i32 %cond, i32* %head, align 4, !tbaa !9
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 22
  %9 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %10 = load i32, i32* %head, align 4, !tbaa !9
  %cmp1 = icmp ule i32 %9, %10
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %11 = load i32, i32* %head, align 4, !tbaa !9
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 22
  %13 = load i32, i32* %tx_next_pos2, align 4, !tbaa !18
  %sub = sub i32 %11, %13
  store i32 %sub, i32* %buf_avail, align 4, !tbaa !9
  br label %if.end

if.else:                                          ; preds = %cond.end
  %14 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %14, i32 0, i32 4
  %15 = load i32, i32* %tx_len, align 4, !tbaa !35
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 22
  %17 = load i32, i32* %tx_next_pos3, align 4, !tbaa !18
  %sub4 = sub i32 %15, %17
  %18 = load i32, i32* %head, align 4, !tbaa !9
  %add = add i32 %sub4, %18
  store i32 %add, i32* %buf_avail, align 4, !tbaa !9
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %19, i32 0, i32 17
  %20 = load i32, i32* %rx_remote_avail, align 8, !tbaa !40
  %21 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %21, i32 0, i32 21
  %22 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %sub5 = sub i32 %20, %22
  store i32 %sub5, i32* %fc_avail, align 4, !tbaa !9
  %23 = load i32, i32* %fc_avail, align 4, !tbaa !9
  %24 = load i32, i32* %buf_avail, align 4, !tbaa !9
  %cmp6 = icmp ult i32 %23, %24
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.end
  %25 = load i32, i32* %fc_avail, align 4, !tbaa !9
  br label %cond.end9

cond.false8:                                      ; preds = %if.end
  %26 = load i32, i32* %buf_avail, align 4, !tbaa !9
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ %25, %cond.true7 ], [ %26, %cond.false8 ]
  %27 = bitcast i32* %head to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #6
  %28 = bitcast i32* %fc_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #6
  %29 = bitcast i32* %buf_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #6
  ret i32 %cond10
}

; Function Attrs: nounwind uwtable
define internal void @flow_tx_read(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %dst) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pos.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %dst.addr = alloca i8*, align 8
  %part = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %pos, i32* %pos.addr, align 4, !tbaa !9
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  %0 = bitcast i32* %part to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %2 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv = zext i16 %2 to i32
  %add = add i32 %1, %conv
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 4
  %4 = load i32, i32* %tx_len, align 4, !tbaa !35
  %cmp = icmp ule i32 %add, %4
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_base = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 2
  %6 = load i64, i64* %tx_base, align 16, !tbaa !12
  %7 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %conv3 = zext i32 %7 to i64
  %add4 = add i64 %6, %conv3
  %8 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv5 = zext i16 %8 to i64
  %9 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  call void @dma_read(i64 %add4, i64 %conv5, i8* %9)
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 4
  %11 = load i32, i32* %tx_len6, align 4, !tbaa !35
  %12 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %sub = sub i32 %11, %12
  store i32 %sub, i32* %part, align 4, !tbaa !9
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_base7 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 2
  %14 = load i64, i64* %tx_base7, align 16, !tbaa !12
  %15 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %conv8 = zext i32 %15 to i64
  %add9 = add i64 %14, %conv8
  %16 = load i32, i32* %part, align 4, !tbaa !9
  %conv10 = zext i32 %16 to i64
  %17 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  call void @dma_read(i64 %add9, i64 %conv10, i8* %17)
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_base11 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 2
  %19 = load i64, i64* %tx_base11, align 16, !tbaa !12
  %20 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv12 = zext i16 %20 to i32
  %21 = load i32, i32* %part, align 4, !tbaa !9
  %sub13 = sub i32 %conv12, %21
  %conv14 = zext i32 %sub13 to i64
  %22 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %23 = load i32, i32* %part, align 4, !tbaa !9
  %idx.ext = zext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %idx.ext
  call void @dma_read(i64 %19, i64 %conv14, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = bitcast i32* %part to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @f_beui32(i32 %x.coerce) #1 {
entry:
  %x = alloca %struct.beui32, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  store i32 %x.coerce, i32* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %x, i32 0, i32 0
  %0 = load i32, i32* %x1, align 1, !tbaa !41
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %1
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: nounwind uwtable
define internal void @flow_tx_segment(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, %struct.flextcp_pl_flowst* %fs, i32 %seq, i32 %ack, i32 %rxwnd, i16 zeroext %payload, i32 %payload_pos, i32 %ts_echo, i32 %ts_my, i8 zeroext %fin) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %seq.addr = alloca i32, align 4
  %ack.addr = alloca i32, align 4
  %rxwnd.addr = alloca i32, align 4
  %payload.addr = alloca i16, align 2
  %payload_pos.addr = alloca i32, align 4
  %ts_echo.addr = alloca i32, align 4
  %ts_my.addr = alloca i32, align 4
  %fin.addr = alloca i8, align 1
  %hdrs_len = alloca i16, align 2
  %optlen = alloca i16, align 2
  %fin_fl = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %opt_ts = alloca %struct.tcp_timestamp_opt*, align 8
  %tmp = alloca %struct.beui16, align 1
  %tmp7 = alloca %struct.beui16, align 1
  %tmp15 = alloca %struct.beui16, align 1
  %tmp19 = alloca %struct.beui16, align 1
  %tmp43 = alloca %struct.beui32, align 1
  %tmp47 = alloca %struct.beui32, align 1
  %tmp59 = alloca %struct.beui16, align 1
  %tmp69 = alloca %struct.beui16, align 1
  %tmp74 = alloca %struct.beui32, align 1
  %tmp77 = alloca %struct.beui32, align 1
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %seq, i32* %seq.addr, align 4, !tbaa !9
  store i32 %ack, i32* %ack.addr, align 4, !tbaa !9
  store i32 %rxwnd, i32* %rxwnd.addr, align 4, !tbaa !9
  store i16 %payload, i16* %payload.addr, align 2, !tbaa !7
  store i32 %payload_pos, i32* %payload_pos.addr, align 4, !tbaa !9
  store i32 %ts_echo, i32* %ts_echo.addr, align 4, !tbaa !9
  store i32 %ts_my, i32* %ts_my.addr, align 4, !tbaa !9
  store i8 %fin, i8* %fin.addr, align 1, !tbaa !2
  %0 = bitcast i16* %hdrs_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #6
  %1 = bitcast i16* %optlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #6
  %2 = bitcast i16* %fin_fl to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #6
  %3 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  %4 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %call = call i8* @network_buf_buf(%struct.network_buf_handle* %4)
  %5 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %5, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %6 = bitcast %struct.tcp_timestamp_opt** %opt_ts to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #6
  store i16 12, i16* %optlen, align 2, !tbaa !7
  %7 = load i16, i16* %optlen, align 2, !tbaa !7
  %conv = zext i16 %7 to i64
  %add = add i64 54, %conv
  %conv1 = trunc i64 %add to i16
  store i16 %conv1, i16* %hdrs_len, align 2, !tbaa !7
  %8 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %8, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 0
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %remote_mac = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 9
  %10 = bitcast %struct.eth_addr* %dest to i8*
  %11 = bitcast %struct.eth_addr* %remote_mac to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 4 %11, i64 6, i1 false), !tbaa.struct !42
  %12 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %12, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %13 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds (%struct.ether_addr, %struct.ether_addr* @eth_addr, i32 0, i32 0, i32 0), i64 6, i1 false)
  %14 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth3 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %14, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth3, i32 0, i32 2
  %15 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %15) #6
  %call4 = call i16 @t_beui16(i16 zeroext 2048)
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp, i32 0, i32 0
  store i16 %call4, i16* %coerce.dive, align 1
  %16 = bitcast %struct.beui16* %type to i8*
  %17 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %17, i64 2, i1 false), !tbaa.struct !43
  %18 = bitcast %struct.beui16* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %18) #6
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 0
  store i8 69, i8* %_v_hl, align 1, !tbaa !44
  %20 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %20, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip5, i32 0, i32 1
  store i8 0, i8* %_tos, align 1, !tbaa !49
  %21 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip6 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %21, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip6, i32 0, i32 2
  %22 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %22) #6
  %23 = load i16, i16* %hdrs_len, align 2, !tbaa !7
  %conv8 = zext i16 %23 to i64
  %sub = sub i64 %conv8, 14
  %24 = load i16, i16* %payload.addr, align 2, !tbaa !7
  %conv9 = zext i16 %24 to i64
  %add10 = add i64 %sub, %conv9
  %conv11 = trunc i64 %add10 to i16
  %call12 = call i16 @t_beui16(i16 zeroext %conv11)
  %coerce.dive13 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp7, i32 0, i32 0
  store i16 %call12, i16* %coerce.dive13, align 1
  %25 = bitcast %struct.beui16* %len to i8*
  %26 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %26, i64 2, i1 false), !tbaa.struct !43
  %27 = bitcast %struct.beui16* %tmp7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %27) #6
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip14 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 1
  %id = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip14, i32 0, i32 3
  %29 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %29) #6
  %call16 = call i16 @t_beui16(i16 zeroext 3)
  %coerce.dive17 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp15, i32 0, i32 0
  store i16 %call16, i16* %coerce.dive17, align 1
  %30 = bitcast %struct.beui16* %id to i8*
  %31 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 2, i1 false), !tbaa.struct !43
  %32 = bitcast %struct.beui16* %tmp15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %32) #6
  %33 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %33, i32 0, i32 1
  %offset = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 4
  %34 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %34) #6
  %call20 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive21 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp19, i32 0, i32 0
  store i16 %call20, i16* %coerce.dive21, align 1
  %35 = bitcast %struct.beui16* %offset to i8*
  %36 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %36, i64 2, i1 false), !tbaa.struct !43
  %37 = bitcast %struct.beui16* %tmp19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %37) #6
  %38 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %38, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip22, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1, !tbaa !50
  %39 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip23 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %39, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip23, i32 0, i32 6
  store i8 6, i8* %proto, align 1, !tbaa !51
  %40 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip24 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %40, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip24, i32 0, i32 7
  store i16 0, i16* %chksum, align 1, !tbaa !52
  %41 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %41, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %42 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %local_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %42, i32 0, i32 5
  %43 = bitcast %struct.beui32* %src26 to i8*
  %44 = bitcast %struct.beui32* %local_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 32 %44, i64 4, i1 false), !tbaa.struct !53
  %45 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip27 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %45, i32 0, i32 1
  %dest28 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip27, i32 0, i32 9
  %46 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %remote_ip = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %46, i32 0, i32 6
  %47 = bitcast %struct.beui32* %dest28 to i8*
  %48 = bitcast %struct.beui32* %remote_ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 4 %48, i64 4, i1 false), !tbaa.struct !53
  %49 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %49, i32 0, i32 1
  %50 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %50, 8
  %cmp = icmp eq i64 %and, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %51 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip30 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %51, i32 0, i32 1
  %_tos31 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip30, i32 0, i32 1
  %52 = load i8, i8* %_tos31, align 1, !tbaa !49
  %conv32 = zext i8 %52 to i32
  %and33 = and i32 %conv32, 4092
  %or = or i32 %and33, 2
  %conv34 = trunc i32 %or to i8
  %53 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip35 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %53, i32 0, i32 1
  %_tos36 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip35, i32 0, i32 1
  store i8 %conv34, i8* %_tos36, align 1, !tbaa !49
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %54 = load i8, i8* %fin.addr, align 1, !tbaa !2
  %conv37 = zext i8 %54 to i32
  %tobool = icmp ne i32 %conv37, 0
  %55 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %conv38 = trunc i32 %cond to i16
  store i16 %conv38, i16* %fin_fl, align 2, !tbaa !7
  %56 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %56, i32 0, i32 2
  %src39 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %57 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %local_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %57, i32 0, i32 7
  %58 = bitcast %struct.beui16* %src39 to i8*
  %59 = bitcast %struct.beui16* %local_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 8 %59, i64 2, i1 false), !tbaa.struct !43
  %60 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp40 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %60, i32 0, i32 2
  %dest41 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp40, i32 0, i32 1
  %61 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %remote_port = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %61, i32 0, i32 8
  %62 = bitcast %struct.beui16* %dest41 to i8*
  %63 = bitcast %struct.beui16* %remote_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 2 %63, i64 2, i1 false), !tbaa.struct !43
  %64 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %64, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 2
  %65 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %65) #6
  %66 = load i32, i32* %seq.addr, align 4, !tbaa !9
  %call44 = call i32 @t_beui32(i32 %66)
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp43, i32 0, i32 0
  store i32 %call44, i32* %coerce.dive45, align 1
  %67 = bitcast %struct.beui32* %seqno to i8*
  %68 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %68, i64 4, i1 false), !tbaa.struct !53
  %69 = bitcast %struct.beui32* %tmp43 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %69) #6
  %70 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp46 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %70, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp46, i32 0, i32 3
  %71 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %71) #6
  %72 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %call48 = call i32 @t_beui32(i32 %72)
  %coerce.dive49 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp47, i32 0, i32 0
  store i32 %call48, i32* %coerce.dive49, align 1
  %73 = bitcast %struct.beui32* %ackno to i8*
  %74 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %74, i64 4, i1 false), !tbaa.struct !53
  %75 = bitcast %struct.beui32* %tmp47 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %75) #6
  %76 = load i16, i16* %optlen, align 2, !tbaa !7
  %conv50 = zext i16 %76 to i32
  %div = sdiv i32 %conv50, 4
  %add51 = add nsw i32 5, %div
  %shl = shl i32 %add51, 12
  %77 = load i16, i16* %fin_fl, align 2, !tbaa !7
  %conv52 = zext i16 %77 to i32
  %or53 = or i32 24, %conv52
  %or54 = or i32 %shl, %or53
  %conv55 = trunc i32 %or54 to i16
  %call56 = call zeroext i16 @__bswap_16(i16 zeroext %conv55)
  %78 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp57 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %78, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp57, i32 0, i32 4
  store i16 %call56, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !54
  %79 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp58 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %79, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp58, i32 0, i32 5
  %80 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %80) #6
  %81 = load i32, i32* %rxwnd.addr, align 4, !tbaa !9
  %cmp60 = icmp ult i32 %81, 65535
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %82 = load i32, i32* %rxwnd.addr, align 4, !tbaa !9
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi i32 [ %82, %cond.true ], [ 65535, %cond.false ]
  %conv63 = trunc i32 %cond62 to i16
  %call64 = call i16 @t_beui16(i16 zeroext %conv63)
  %coerce.dive65 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp59, i32 0, i32 0
  store i16 %call64, i16* %coerce.dive65, align 1
  %83 = bitcast %struct.beui16* %wnd to i8*
  %84 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* align 1 %84, i64 2, i1 false), !tbaa.struct !43
  %85 = bitcast %struct.beui16* %tmp59 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %85) #6
  %86 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp66 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %86, i32 0, i32 2
  %chksum67 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp66, i32 0, i32 6
  store i16 0, i16* %chksum67, align 1, !tbaa !55
  %87 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp68 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %87, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp68, i32 0, i32 7
  %88 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %88) #6
  %call70 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive71 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp69, i32 0, i32 0
  store i16 %call70, i16* %coerce.dive71, align 1
  %89 = bitcast %struct.beui16* %urgp to i8*
  %90 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 2, i1 false), !tbaa.struct !43
  %91 = bitcast %struct.beui16* %tmp69 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %91) #6
  %92 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %92, i64 1
  %93 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  %94 = load i16, i16* %optlen, align 2, !tbaa !7
  %conv72 = zext i16 %94 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 0, i64 %conv72, i1 false)
  %95 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %add.ptr73 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %95, i64 1
  %96 = bitcast %struct.pkt_tcp* %add.ptr73 to %struct.tcp_timestamp_opt*
  store %struct.tcp_timestamp_opt* %96, %struct.tcp_timestamp_opt** %opt_ts, align 8, !tbaa !5
  %97 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8, !tbaa !5
  %kind = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %97, i32 0, i32 0
  store i8 8, i8* %kind, align 1, !tbaa !56
  %98 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8, !tbaa !5
  %length = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %98, i32 0, i32 1
  store i8 10, i8* %length, align 1, !tbaa !58
  %99 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8, !tbaa !5
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %99, i32 0, i32 2
  %100 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %100) #6
  %101 = load i32, i32* %ts_my.addr, align 4, !tbaa !9
  %call75 = call i32 @t_beui32(i32 %101)
  %coerce.dive76 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp74, i32 0, i32 0
  store i32 %call75, i32* %coerce.dive76, align 1
  %102 = bitcast %struct.beui32* %ts_val to i8*
  %103 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %102, i8* align 1 %103, i64 4, i1 false), !tbaa.struct !53
  %104 = bitcast %struct.beui32* %tmp74 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %104) #6
  %105 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %opt_ts, align 8, !tbaa !5
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %105, i32 0, i32 3
  %106 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %106) #6
  %107 = load i32, i32* %ts_echo.addr, align 4, !tbaa !9
  %call78 = call i32 @t_beui32(i32 %107)
  %coerce.dive79 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp77, i32 0, i32 0
  store i32 %call78, i32* %coerce.dive79, align 1
  %108 = bitcast %struct.beui32* %ts_ecr to i8*
  %109 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %109, i64 4, i1 false), !tbaa.struct !53
  %110 = bitcast %struct.beui32* %tmp77 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %110) #6
  %111 = load i16, i16* %payload.addr, align 2, !tbaa !7
  %conv80 = zext i16 %111 to i32
  %cmp81 = icmp sgt i32 %conv80, 0
  br i1 %cmp81, label %if.then83, label %if.end86

if.then83:                                        ; preds = %cond.end
  %112 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %113 = load i32, i32* %payload_pos.addr, align 4, !tbaa !9
  %114 = load i16, i16* %payload.addr, align 2, !tbaa !7
  %115 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %116 = bitcast %struct.pkt_tcp* %115 to i8*
  %117 = load i16, i16* %hdrs_len, align 2, !tbaa !7
  %conv84 = zext i16 %117 to i32
  %idx.ext = sext i32 %conv84 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %116, i64 %idx.ext
  call void @flow_tx_read(%struct.flextcp_pl_flowst* %112, i32 %113, i16 zeroext %114, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then83, %cond.end
  %118 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %119 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %120 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %local_ip87 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %120, i32 0, i32 5
  %121 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %remote_ip88 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %121, i32 0, i32 6
  %122 = load i16, i16* %hdrs_len, align 2, !tbaa !7
  %conv89 = zext i16 %122 to i64
  %sub90 = sub i64 %conv89, 34
  %123 = load i16, i16* %payload.addr, align 2, !tbaa !7
  %conv91 = zext i16 %123 to i64
  %add92 = add i64 %sub90, %conv91
  %conv93 = trunc i64 %add92 to i16
  %coerce.dive94 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip87, i32 0, i32 0
  %124 = load i32, i32* %coerce.dive94, align 32
  %coerce.dive95 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip88, i32 0, i32 0
  %125 = load i32, i32* %coerce.dive95, align 4
  call void @tcp_checksums(%struct.network_buf_handle* %118, %struct.pkt_tcp* %119, i32 %124, i32 %125, i16 zeroext %conv93)
  %126 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %127 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %128 = load i16, i16* %hdrs_len, align 2, !tbaa !7
  %conv96 = zext i16 %128 to i32
  %129 = load i16, i16* %payload.addr, align 2, !tbaa !7
  %conv97 = zext i16 %129 to i32
  %add98 = add nsw i32 %conv96, %conv97
  %conv99 = trunc i32 %add98 to i16
  call void @tx_send(%struct.dataplane_context* %126, %struct.network_buf_handle* %127, i16 zeroext 0, i16 zeroext %conv99)
  %130 = bitcast %struct.tcp_timestamp_opt** %opt_ts to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %130) #6
  %131 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %131) #6
  %132 = bitcast i16* %fin_fl to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %132) #6
  %133 = bitcast i16* %optlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %133) #6
  %134 = bitcast i16* %hdrs_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %134) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @util_spin_unlock(i32* %sl) #1 {
entry:
  %sl.addr = alloca i32*, align 8
  %unlock_val = alloca i32, align 4
  store i32* %sl, i32** %sl.addr, align 8, !tbaa !5
  %0 = bitcast i32* %unlock_val to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  store i32 0, i32* %unlock_val, align 4, !tbaa !9
  %1 = load i32*, i32** %sl.addr, align 8, !tbaa !5
  %2 = load i32, i32* %unlock_val, align 4, !tbaa !9
  %3 = call i32 asm sideeffect "xchg $0, $1\0A", "=*m,=q,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %1, i32 %2) #6, !srcloc !59
  store i32 %3, i32* %unlock_val, align 4, !tbaa !9
  %4 = bitcast i32* %unlock_val to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_qman_fwd(%struct.dataplane_context* %ctx, %struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %avail = alloca i32, align 4
  %flow_id = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %0 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i16* %flow_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #6
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %3 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %3, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  store i16 %conv, i16* %flow_id, align 2, !tbaa !7
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %5, i32* null)
  store i32 %call, i32* %avail, align 4, !tbaa !9
  %6 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %6, i32 0, i32 1
  %7 = load i16, i16* %flow_id, align 2, !tbaa !7
  %conv1 = zext i16 %7 to i32
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 26
  %9 = load i32, i32* %tx_rate, align 4, !tbaa !60
  %10 = load i32, i32* %avail, align 4, !tbaa !9
  %call2 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %conv1, i32 %9, i32 %10, i16 zeroext 1448, i8 zeroext 11)
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %entry
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %lock5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock5)
  %13 = bitcast i16* %flow_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %13) #6
  %14 = bitcast i32* %avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #6
  ret i32 0
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_parse(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, %struct.tcp_opts* %tos, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbhs.addr = alloca %struct.network_buf_handle**, align 8
  %fss.addr = alloca i8**, align 8
  %tos.addr = alloca %struct.tcp_opts*, align 8
  %n.addr = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %i = alloca i16, align 2
  %len = alloca i16, align 2
  %cond = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.network_buf_handle** %nbhs, %struct.network_buf_handle*** %nbhs.addr, align 8, !tbaa !5
  store i8** %fss, i8*** %fss.addr, align 8, !tbaa !5
  store %struct.tcp_opts* %tos, %struct.tcp_opts** %tos.addr, align 8, !tbaa !5
  store i16 %n, i16* %n.addr, align 2, !tbaa !7
  %0 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast i16* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #6
  %2 = bitcast i16* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #6
  store i16 0, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i16, i16* %i, align 2, !tbaa !7
  %conv = zext i16 %3 to i32
  %4 = load i16, i16* %n.addr, align 2, !tbaa !7
  %conv1 = zext i16 %4 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %6 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom = zext i16 %6 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8, !tbaa !5
  %cmp3 = icmp eq i8* %7, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8, !tbaa !5
  %9 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom5 = zext i16 %9 to i64
  %arrayidx6 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %8, i64 %idxprom5
  %10 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx6, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %10)
  %11 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %11, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %12 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8, !tbaa !5
  %13 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom7 = zext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %12, i64 %idxprom7
  %14 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx8, align 8, !tbaa !5
  %call9 = call zeroext i16 @network_buf_len(%struct.network_buf_handle* %14)
  store i16 %call9, i16* %len, align 2, !tbaa !7
  %15 = bitcast i32* %cond to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #6
  %16 = load i16, i16* %len, align 2, !tbaa !7
  %conv10 = zext i16 %16 to i64
  %cmp11 = icmp ult i64 %conv10, 54
  %conv12 = zext i1 %cmp11 to i32
  %17 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %17, i32 0, i32 0
  %type = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %type, i32 0, i32 0
  %18 = load i16, i16* %coerce.dive, align 1
  %call13 = call zeroext i16 @f_beui16(i16 %18)
  %conv14 = zext i16 %call13 to i32
  %cmp15 = icmp ne i32 %conv14, 2048
  %conv16 = zext i1 %cmp15 to i32
  %or = or i32 %conv12, %conv16
  %19 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %19, i32 0, i32 1
  %proto = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 6
  %20 = load i8, i8* %proto, align 1, !tbaa !51
  %conv17 = zext i8 %20 to i32
  %cmp18 = icmp ne i32 %conv17, 6
  %conv19 = zext i1 %cmp18 to i32
  %or20 = or i32 %or, %conv19
  %21 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip21 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %21, i32 0, i32 1
  %_v_hl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip21, i32 0, i32 0
  %22 = load i8, i8* %_v_hl, align 1, !tbaa !44
  %conv22 = zext i8 %22 to i32
  %shr = ashr i32 %conv22, 4
  %cmp23 = icmp ne i32 %shr, 4
  %conv24 = zext i1 %cmp23 to i32
  %or25 = or i32 %or20, %conv24
  %23 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %23, i32 0, i32 1
  %_v_hl27 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 0
  %24 = load i8, i8* %_v_hl27, align 1, !tbaa !44
  %conv28 = zext i8 %24 to i32
  %and = and i32 %conv28, 15
  %cmp29 = icmp ne i32 %and, 5
  %conv30 = zext i1 %cmp29 to i32
  %or31 = or i32 %or25, %conv30
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %26 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !54
  %call32 = call zeroext i16 @__bswap_16(i16 zeroext %26)
  %conv33 = zext i16 %call32 to i32
  %shr34 = ashr i32 %conv33, 12
  %cmp35 = icmp slt i32 %shr34, 5
  %conv36 = zext i1 %cmp35 to i32
  %or37 = or i32 %or31, %conv36
  %27 = load i16, i16* %len, align 2, !tbaa !7
  %conv38 = zext i16 %27 to i64
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip39 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 1
  %len40 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip39, i32 0, i32 2
  %coerce.dive41 = getelementptr inbounds %struct.beui16, %struct.beui16* %len40, i32 0, i32 0
  %29 = load i16, i16* %coerce.dive41, align 1
  %call42 = call zeroext i16 @f_beui16(i16 %29)
  %conv43 = zext i16 %call42 to i64
  %add = add i64 %conv43, 14
  %cmp44 = icmp ult i64 %conv38, %add
  %conv45 = zext i1 %cmp44 to i32
  %or46 = or i32 %or37, %conv45
  %30 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %31 = load i16, i16* %len, align 2, !tbaa !7
  %32 = load %struct.tcp_opts*, %struct.tcp_opts** %tos.addr, align 8, !tbaa !5
  %33 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom47 = zext i16 %33 to i64
  %arrayidx48 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %32, i64 %idxprom47
  %call49 = call i32 @tcp_parse_options(%struct.pkt_tcp* %30, i16 zeroext %31, %struct.tcp_opts* %arrayidx48)
  %cmp50 = icmp ne i32 %call49, 0
  %conv51 = zext i1 %cmp50 to i32
  %or52 = or i32 %or46, %conv51
  %34 = load %struct.tcp_opts*, %struct.tcp_opts** %tos.addr, align 8, !tbaa !5
  %35 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom53 = zext i16 %35 to i64
  %arrayidx54 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %34, i64 %idxprom53
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %arrayidx54, i32 0, i32 0
  %36 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts, align 8, !tbaa !61
  %cmp55 = icmp eq %struct.tcp_timestamp_opt* %36, null
  %conv56 = zext i1 %cmp55 to i32
  %or57 = or i32 %or52, %conv56
  store i32 %or57, i32* %cond, align 4, !tbaa !9
  %37 = load i32, i32* %cond, align 4, !tbaa !9
  %tobool = icmp ne i32 %37, 0
  br i1 %tobool, label %if.then58, label %if.end61

if.then58:                                        ; preds = %if.end
  %38 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %39 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom59 = zext i16 %39 to i64
  %arrayidx60 = getelementptr inbounds i8*, i8** %38, i64 %idxprom59
  store i8* null, i8** %arrayidx60, align 8, !tbaa !5
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %if.end
  %40 = bitcast i32* %cond to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #6
  br label %for.inc

for.inc:                                          ; preds = %if.end61, %if.then
  %41 = load i16, i16* %i, align 2, !tbaa !7
  %inc = add i16 %41, 1
  store i16 %inc, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = bitcast i16* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %42) #6
  %43 = bitcast i16* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %43) #6
  %44 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @network_buf_bufoff(%struct.network_buf_handle* %bh) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %mb = alloca %struct.rte_mbuf*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %0 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %2 = bitcast %struct.network_buf_handle* %1 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %2, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %3 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %3, i32 0, i32 1
  %4 = load i8*, i8** %buf_addr, align 64, !tbaa !63
  %5 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %5, i32 0, i32 4
  %6 = load i16, i16* %data_off, align 16, !tbaa !65
  %conv = zext i16 %6 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr i8, i8* %4, i64 %idx.ext
  %7 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #6
  ret i8* %add.ptr
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_len(%struct.network_buf_handle* %bh) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 12
  %2 = load i16, i16* %data_len, align 8, !tbaa !66
  ret i16 %2
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @f_beui16(i16 %x.coerce) #1 {
entry:
  %x = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  store i16 %x.coerce, i16* %coerce.dive, align 1
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %x, i32 0, i32 0
  %0 = load i16, i16* %x1, align 1, !tbaa !67
  %1 = call i16 @llvm.bswap.i16(i16 %0)
  ret i16 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @__bswap_16(i16 zeroext %__bsx) #1 {
entry:
  %__bsx.addr = alloca i16, align 2
  store i16 %__bsx, i16* %__bsx.addr, align 2, !tbaa !7
  %0 = load i16, i16* %__bsx.addr, align 2, !tbaa !7
  %conv = zext i16 %0 to i32
  %shr = ashr i32 %conv, 8
  %and = and i32 %shr, 255
  %1 = load i16, i16* %__bsx.addr, align 2, !tbaa !7
  %conv1 = zext i16 %1 to i32
  %and2 = and i32 %conv1, 255
  %shl = shl i32 %and2, 8
  %or = or i32 %and, %shl
  %conv3 = trunc i32 %or to i16
  ret i16 %conv3
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_parse_options(%struct.pkt_tcp* %p, i16 zeroext %len, %struct.tcp_opts* %opts) #1 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.pkt_tcp*, align 8
  %len.addr = alloca i16, align 2
  %opts.addr = alloca %struct.tcp_opts*, align 8
  %opt = alloca i8*, align 8
  %opts_len = alloca i16, align 2
  %off = alloca i16, align 2
  %opt_kind = alloca i8, align 1
  %opt_len = alloca i8, align 1
  %opt_avail = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.pkt_tcp* %p, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  store %struct.tcp_opts* %opts, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %0 = bitcast i8** %opt to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %1, i64 1
  %2 = bitcast %struct.pkt_tcp* %add.ptr to i8*
  store i8* %2, i8** %opt, align 8, !tbaa !5
  %3 = bitcast i16* %opts_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3) #6
  %4 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %4, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %5 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !54
  %call = call zeroext i16 @__bswap_16(i16 zeroext %5)
  %conv = zext i16 %call to i32
  %shr = ashr i32 %conv, 12
  %mul = mul nsw i32 %shr, 4
  %sub = sub nsw i32 %mul, 20
  %conv1 = trunc i32 %sub to i16
  store i16 %conv1, i16* %opts_len, align 2, !tbaa !7
  %6 = bitcast i16* %off to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %6) #6
  store i16 0, i16* %off, align 2, !tbaa !7
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %opt_kind) #6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %opt_len) #6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %opt_avail) #6
  %7 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %7, i32 0, i32 0
  store %struct.tcp_timestamp_opt* null, %struct.tcp_timestamp_opt** %ts, align 8, !tbaa !61
  %8 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %tcp2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %8, i32 0, i32 2
  %_hdrlen_rsvd_flags3 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp2, i32 0, i32 4
  %9 = load i16, i16* %_hdrlen_rsvd_flags3, align 1, !tbaa !54
  %call4 = call zeroext i16 @__bswap_16(i16 zeroext %9)
  %conv5 = zext i16 %call4 to i32
  %shr6 = ashr i32 %conv5, 12
  %cmp = icmp slt i32 %shr6, 5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %10 = load i16, i16* %opts_len, align 2, !tbaa !7
  %conv8 = zext i16 %10 to i64
  %11 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv9 = zext i16 %11 to i64
  %sub10 = sub i64 %conv9, 54
  %cmp11 = icmp ugt i64 %conv8, %sub10
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %13 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %tcp13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %13, i32 0, i32 2
  %_hdrlen_rsvd_flags14 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp13, i32 0, i32 4
  %14 = load i16, i16* %_hdrlen_rsvd_flags14, align 1, !tbaa !54
  %call15 = call zeroext i16 @__bswap_16(i16 zeroext %14)
  %conv16 = zext i16 %call15 to i32
  %shr17 = ashr i32 %conv16, 12
  %15 = load i16, i16* %opts_len, align 2, !tbaa !7
  %conv18 = zext i16 %15 to i32
  %16 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv19 = zext i16 %16 to i32
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.22, i32 0, i32 0), i32 %shr17, i32 %conv18, i32 %conv19, i64 54)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %if.end66, %if.end
  %17 = load i16, i16* %off, align 2, !tbaa !7
  %conv21 = zext i16 %17 to i32
  %18 = load i16, i16* %opts_len, align 2, !tbaa !7
  %conv22 = zext i16 %18 to i32
  %cmp23 = icmp slt i32 %conv21, %conv22
  br i1 %cmp23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load i8*, i8** %opt, align 8, !tbaa !5
  %20 = load i16, i16* %off, align 2, !tbaa !7
  %idxprom = zext i16 %20 to i64
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 %idxprom
  %21 = load i8, i8* %arrayidx, align 1, !tbaa !2
  store i8 %21, i8* %opt_kind, align 1, !tbaa !2
  %22 = load i16, i16* %opts_len, align 2, !tbaa !7
  %conv25 = zext i16 %22 to i32
  %23 = load i16, i16* %off, align 2, !tbaa !7
  %conv26 = zext i16 %23 to i32
  %sub27 = sub nsw i32 %conv25, %conv26
  %conv28 = trunc i32 %sub27 to i8
  store i8 %conv28, i8* %opt_avail, align 1, !tbaa !2
  %24 = load i8, i8* %opt_kind, align 1, !tbaa !2
  %conv29 = zext i8 %24 to i32
  %cmp30 = icmp eq i32 %conv29, 0
  br i1 %cmp30, label %if.then32, label %if.else

if.then32:                                        ; preds = %while.body
  br label %while.end

if.else:                                          ; preds = %while.body
  %25 = load i8, i8* %opt_kind, align 1, !tbaa !2
  %conv33 = zext i8 %25 to i32
  %cmp34 = icmp eq i32 %conv33, 1
  br i1 %cmp34, label %if.then36, label %if.else37

if.then36:                                        ; preds = %if.else
  store i8 1, i8* %opt_len, align 1, !tbaa !2
  br label %if.end65

if.else37:                                        ; preds = %if.else
  %26 = load i8, i8* %opt_avail, align 1, !tbaa !2
  %conv38 = zext i8 %26 to i32
  %cmp39 = icmp slt i32 %conv38, 2
  br i1 %cmp39, label %if.then41, label %if.end46

if.then41:                                        ; preds = %if.else37
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %28 = load i8, i8* %opt_avail, align 1, !tbaa !2
  %conv42 = zext i8 %28 to i32
  %29 = load i8, i8* %opt_kind, align 1, !tbaa !2
  %conv43 = zext i8 %29 to i32
  %30 = load i16, i16* %off, align 2, !tbaa !7
  %conv44 = zext i16 %30 to i32
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0), i32 %conv42, i32 %conv43, i32 %conv44)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end46:                                         ; preds = %if.else37
  %31 = load i8*, i8** %opt, align 8, !tbaa !5
  %32 = load i16, i16* %off, align 2, !tbaa !7
  %conv47 = zext i16 %32 to i32
  %add = add nsw i32 %conv47, 1
  %idxprom48 = sext i32 %add to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %31, i64 %idxprom48
  %33 = load i8, i8* %arrayidx49, align 1, !tbaa !2
  store i8 %33, i8* %opt_len, align 1, !tbaa !2
  %34 = load i8, i8* %opt_kind, align 1, !tbaa !2
  %conv50 = zext i8 %34 to i32
  %cmp51 = icmp eq i32 %conv50, 8
  br i1 %cmp51, label %if.then53, label %if.end64

if.then53:                                        ; preds = %if.end46
  %35 = load i8, i8* %opt_len, align 1, !tbaa !2
  %conv54 = zext i8 %35 to i64
  %cmp55 = icmp ne i64 %conv54, 10
  br i1 %cmp55, label %if.then57, label %if.end60

if.then57:                                        ; preds = %if.then53
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %37 = load i8, i8* %opt_len, align 1, !tbaa !2
  %conv58 = zext i8 %37 to i32
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.24, i32 0, i32 0), i32 %conv58, i64 10)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end60:                                         ; preds = %if.then53
  %38 = load i8*, i8** %opt, align 8, !tbaa !5
  %39 = load i16, i16* %off, align 2, !tbaa !7
  %conv61 = zext i16 %39 to i32
  %idx.ext = sext i32 %conv61 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %38, i64 %idx.ext
  %40 = bitcast i8* %add.ptr62 to %struct.tcp_timestamp_opt*
  %41 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts63 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %41, i32 0, i32 0
  store %struct.tcp_timestamp_opt* %40, %struct.tcp_timestamp_opt** %ts63, align 8, !tbaa !61
  br label %if.end64

if.end64:                                         ; preds = %if.end60, %if.end46
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then36
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  %42 = load i8, i8* %opt_len, align 1, !tbaa !2
  %conv67 = zext i8 %42 to i32
  %43 = load i16, i16* %off, align 2, !tbaa !7
  %conv68 = zext i16 %43 to i32
  %add69 = add nsw i32 %conv68, %conv67
  %conv70 = trunc i32 %add69 to i16
  store i16 %conv70, i16* %off, align 2, !tbaa !7
  br label %while.cond

while.end:                                        ; preds = %if.then32, %while.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then57, %if.then41, %if.then
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %opt_avail) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %opt_len) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %opt_kind) #6
  %44 = bitcast i16* %off to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %44) #6
  %45 = bitcast i16* %opts_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %45) #6
  %46 = bitcast i8** %opt to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #6
  %47 = load i32, i32* %retval, align 4
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_pfbufs(%struct.dataplane_context* %ctx, i8** %fss, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %fss.addr = alloca i8**, align 8
  %n.addr = alloca i16, align 2
  %i = alloca i16, align 2
  %rx_base = alloca i64, align 8
  %p = alloca i8*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i8** %fss, i8*** %fss.addr, align 8, !tbaa !5
  store i16 %n, i16* %n.addr, align 2, !tbaa !7
  %0 = bitcast i16* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #6
  %1 = bitcast i64* %rx_base to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %3 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  store i16 0, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i16, i16* %i, align 2, !tbaa !7
  %conv = zext i16 %4 to i32
  %5 = load i16, i16* %n.addr, align 2, !tbaa !7
  %conv1 = zext i16 %5 to i32
  %cmp = icmp slt i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %7 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom = zext i16 %7 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8, !tbaa !5
  %cmp3 = icmp eq i8* %8, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %9 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %10 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom5 = zext i16 %10 to i64
  %arrayidx6 = getelementptr inbounds i8*, i8** %9, i64 %idxprom5
  %11 = load i8*, i8** %arrayidx6, align 8, !tbaa !5
  %12 = bitcast i8* %11 to %struct.flextcp_pl_flowst*
  store %struct.flextcp_pl_flowst* %12, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 1
  %14 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %14, -64
  store i64 %and, i64* %rx_base, align 8, !tbaa !19
  %15 = load i64, i64* %rx_base, align 8, !tbaa !19
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 15
  %17 = load i32, i32* %rx_next_pos, align 64, !tbaa !68
  %conv7 = zext i32 %17 to i64
  %add = add i64 %15, %conv7
  %call = call i8* @dma_pointer(i64 %add, i64 1)
  store i8* %call, i8** %p, align 8, !tbaa !5
  %18 = load i8*, i8** %p, align 8, !tbaa !5
  call void @rte_prefetch0(i8* %18)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %19 = load i16, i16* %i, align 2, !tbaa !7
  %inc = add i16 %19, 1
  store i16 %inc, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #6
  %21 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #6
  %22 = bitcast i64* %rx_base to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #6
  %23 = bitcast i16* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %23) #6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_packet(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i8* %fsp, %struct.tcp_opts* %opts, i32 %ts) #0 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %fsp.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.tcp_opts*, align 8
  %ts.addr = alloca i32, align 4
  %p = alloca %struct.pkt_tcp*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %appst = alloca %struct.flextcp_pl_appst*, align 8
  %payload_bytes = alloca i32, align 4
  %payload_off = alloca i32, align 4
  %seq = alloca i32, align 4
  %ack = alloca i32, align 4
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  %orig_payload = alloca i32, align 4
  %rx_bump = alloca i32, align 4
  %tx_bump = alloca i32, align 4
  %i = alloca i32, align 4
  %rx_pos = alloca i32, align 4
  %rtt = alloca i32, align 4
  %no_permanent_sp = alloca i32, align 4
  %tcp_extra_hlen = alloca i16, align 2
  %trim_start = alloca i16, align 2
  %trim_end = alloca i16, align 2
  %flow_id = alloca i16, align 2
  %oh = alloca %struct.obj_hdr*, align 8
  %trigger_ack = alloca i32, align 4
  %fin_bump = alloca i32, align 4
  %steer_id = alloca i64, align 8
  %type = alloca i16, align 2
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store i8* %fsp, i8** %fsp.addr, align 8, !tbaa !5
  %fsp.addr1 = bitcast i8** %fsp.addr to i8*
  call void @llvm.var.annotation(i8* %fsp.addr1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 329)
  store %struct.tcp_opts* %opts, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %opts.addr2 = bitcast %struct.tcp_opts** %opts.addr to i8*
  call void @llvm.var.annotation(i8* %opts.addr2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 329)
  store i32 %ts, i32* %ts.addr, align 4, !tbaa !9
  %0 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %1)
  %2 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %2, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %3 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  %4 = load i8*, i8** %fsp.addr, align 8, !tbaa !5
  %5 = bitcast i8* %4 to %struct.flextcp_pl_flowst*
  store %struct.flextcp_pl_flowst* %5, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %6 = bitcast %struct.flextcp_pl_appst** %appst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #6
  store %struct.flextcp_pl_appst* null, %struct.flextcp_pl_appst** %appst, align 8, !tbaa !5
  %7 = bitcast i32* %payload_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #6
  %8 = bitcast i32* %payload_off to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #6
  %9 = bitcast i32* %seq to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #6
  %10 = bitcast i32* %ack to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #6
  %11 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #6
  %12 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #6
  %13 = bitcast i32* %orig_payload to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #6
  %14 = bitcast i32* %rx_bump to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #6
  store i32 0, i32* %rx_bump, align 4, !tbaa !9
  %15 = bitcast i32* %tx_bump to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #6
  store i32 0, i32* %tx_bump, align 4, !tbaa !9
  %16 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #6
  %17 = bitcast i32* %rx_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #6
  %18 = bitcast i32* %rtt to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #6
  %19 = bitcast i32* %no_permanent_sp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #6
  store i32 0, i32* %no_permanent_sp, align 4, !tbaa !9
  %20 = bitcast i16* %tcp_extra_hlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %20) #6
  %21 = bitcast i16* %trim_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %21) #6
  %22 = bitcast i16* %trim_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %22) #6
  %23 = bitcast i16* %flow_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %23) #6
  %24 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %25 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %25, i32 0, i32 1
  %arraydecay = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.flextcp_pl_flowst* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.flextcp_pl_flowst* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 192
  %conv = trunc i64 %sub.ptr.div to i16
  store i16 %conv, i16* %flow_id, align 2, !tbaa !7
  %26 = bitcast %struct.obj_hdr** %oh to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #6
  %27 = bitcast i32* %trigger_ack to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #6
  store i32 0, i32* %trigger_ack, align 4, !tbaa !9
  %28 = bitcast i32* %fin_bump to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #6
  store i32 0, i32* %fin_bump, align 4, !tbaa !9
  %29 = bitcast i64* %steer_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #6
  %30 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %30, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 4
  %31 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !54
  %call3 = call zeroext i16 @__bswap_16(i16 zeroext %31)
  %conv4 = zext i16 %call3 to i32
  %shr = ashr i32 %conv4, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv5 = trunc i32 %mul to i16
  store i16 %conv5, i16* %tcp_extra_hlen, align 2, !tbaa !7
  %32 = load i16, i16* %tcp_extra_hlen, align 2, !tbaa !7
  %conv6 = zext i16 %32 to i64
  %add = add i64 54, %conv6
  %conv7 = trunc i64 %add to i32
  store i32 %conv7, i32* %payload_off, align 4, !tbaa !9
  %33 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %33, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 2
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %len, i32 0, i32 0
  %34 = load i16, i16* %coerce.dive, align 1
  %call8 = call zeroext i16 @f_beui16(i16 %34)
  %conv9 = zext i16 %call8 to i64
  %35 = load i16, i16* %tcp_extra_hlen, align 2, !tbaa !7
  %conv10 = zext i16 %35 to i64
  %add11 = add i64 40, %conv10
  %sub12 = sub i64 %conv9, %add11
  %conv13 = trunc i64 %sub12 to i32
  store i32 %conv13, i32* %payload_bytes, align 4, !tbaa !9
  %36 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  store i32 %36, i32* %orig_payload, align 4, !tbaa !9
  %37 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %37, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %38 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %38, i32 0, i32 1
  %39 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %39, 1
  %cmp = icmp ne i64 %and, 0
  %conv14 = zext i1 %cmp to i32
  %conv15 = sext i32 %conv14 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10, i32 0, i32 0))
  br label %slowpath

if.end:                                           ; preds = %entry
  %41 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp17 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %41, i32 0, i32 2
  %_hdrlen_rsvd_flags18 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp17, i32 0, i32 4
  %42 = load i16, i16* %_hdrlen_rsvd_flags18, align 1, !tbaa !54
  %call19 = call zeroext i16 @__bswap_16(i16 zeroext %42)
  %conv20 = zext i16 %call19 to i32
  %and21 = and i32 %conv20, 511
  %and22 = and i32 %and21, -218
  %cmp23 = icmp ne i32 %and22, 0
  %conv24 = zext i1 %cmp23 to i32
  %conv25 = sext i32 %conv24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %if.then28, label %if.end39

if.then28:                                        ; preds = %if.end
  %43 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp29 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %43, i32 0, i32 2
  %_hdrlen_rsvd_flags30 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp29, i32 0, i32 4
  %44 = load i16, i16* %_hdrlen_rsvd_flags30, align 1, !tbaa !54
  %call31 = call zeroext i16 @__bswap_16(i16 zeroext %44)
  %conv32 = zext i16 %call31 to i32
  %and33 = and i32 %conv32, 511
  %and34 = and i32 %and33, 2
  %cmp35 = icmp ne i32 %and34, 0
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then28
  store i32 1, i32* %no_permanent_sp, align 4, !tbaa !9
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.then28
  br label %slowpath

if.end39:                                         ; preds = %if.end
  %45 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call40 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %45, i32* null)
  store i32 %call40, i32* %old_avail, align 4, !tbaa !9
  %46 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp41 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %46, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp41, i32 0, i32 2
  %coerce.dive42 = getelementptr inbounds %struct.beui32, %struct.beui32* %seqno, i32 0, i32 0
  %47 = load i32, i32* %coerce.dive42, align 1
  %call43 = call i32 @f_beui32(i32 %47)
  store i32 %call43, i32* %seq, align 4, !tbaa !9
  %48 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp44 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %48, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp44, i32 0, i32 3
  %coerce.dive45 = getelementptr inbounds %struct.beui32, %struct.beui32* %ackno, i32 0, i32 0
  %49 = load i32, i32* %coerce.dive45, align 1
  %call46 = call i32 @f_beui32(i32 %49)
  store i32 %call46, i32* %ack, align 4, !tbaa !9
  %50 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %50, i32 0, i32 15
  %51 = load i32, i32* %rx_next_pos, align 64, !tbaa !68
  store i32 %51, i32* %rx_pos, align 4, !tbaa !9
  %52 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %cmp47 = icmp ugt i32 %52, 0
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end39
  store i32 1, i32* %trigger_ack, align 4, !tbaa !9
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.end39
  %53 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp51 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %53, i32 0, i32 2
  %_hdrlen_rsvd_flags52 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp51, i32 0, i32 4
  %54 = load i16, i16* %_hdrlen_rsvd_flags52, align 1, !tbaa !54
  %call53 = call zeroext i16 @__bswap_16(i16 zeroext %54)
  %conv54 = zext i16 %call53 to i32
  %and55 = and i32 %conv54, 511
  %and56 = and i32 %and55, 16
  %cmp57 = icmp eq i32 %and56, 16
  br i1 %cmp57, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.end50
  %55 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %cnt_rx_acks = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %55, i32 0, i32 28
  %56 = load i16, i16* %cnt_rx_acks, align 2, !tbaa !69
  %inc = add i16 %56, 1
  store i16 %inc, i16* %cnt_rx_acks, align 2, !tbaa !69
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %if.end50
  %57 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp61 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %57, i32 0, i32 2
  %_hdrlen_rsvd_flags62 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp61, i32 0, i32 4
  %58 = load i16, i16* %_hdrlen_rsvd_flags62, align 1, !tbaa !54
  %call63 = call zeroext i16 @__bswap_16(i16 zeroext %58)
  %conv64 = zext i16 %call63 to i32
  %and65 = and i32 %conv64, 511
  %and66 = and i32 %and65, 16
  %cmp67 = icmp eq i32 %and66, 16
  br i1 %cmp67, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end60
  %59 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %60 = load i32, i32* %ack, align 4, !tbaa !9
  %call69 = call i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %59, i32 %60, i32* %tx_bump)
  %cmp70 = icmp eq i32 %call69, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end60
  %61 = phi i1 [ false, %if.end60 ], [ %cmp70, %land.rhs ]
  %land.ext = zext i1 %61 to i32
  %conv72 = sext i32 %land.ext to i64
  %expval73 = call i64 @llvm.expect.i64(i64 %conv72, i64 1)
  %tobool74 = icmp ne i64 %expval73, 0
  br i1 %tobool74, label %if.then75, label %if.end134

if.then75:                                        ; preds = %land.end
  %62 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %63 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %cnt_rx_ack_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %63, i32 0, i32 29
  %64 = load i32, i32* %cnt_rx_ack_bytes, align 4, !tbaa !70
  %add76 = add i32 %64, %62
  store i32 %add76, i32* %cnt_rx_ack_bytes, align 4, !tbaa !70
  %65 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp77 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %65, i32 0, i32 2
  %_hdrlen_rsvd_flags78 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp77, i32 0, i32 4
  %66 = load i16, i16* %_hdrlen_rsvd_flags78, align 1, !tbaa !54
  %call79 = call zeroext i16 @__bswap_16(i16 zeroext %66)
  %conv80 = zext i16 %call79 to i32
  %and81 = and i32 %conv80, 511
  %and82 = and i32 %and81, 64
  %cmp83 = icmp eq i32 %and82, 64
  br i1 %cmp83, label %if.then85, label %if.end87

if.then85:                                        ; preds = %if.then75
  %67 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %68 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %cnt_rx_ecn_bytes = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %68, i32 0, i32 30
  %69 = load i32, i32* %cnt_rx_ecn_bytes, align 8, !tbaa !71
  %add86 = add i32 %69, %67
  store i32 %add86, i32* %cnt_rx_ecn_bytes, align 8, !tbaa !71
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %if.then75
  %70 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %71 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %71, i32 0, i32 21
  %72 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %cmp88 = icmp ule i32 %70, %72
  %conv89 = zext i1 %cmp88 to i32
  %conv90 = sext i32 %conv89 to i64
  %expval91 = call i64 @llvm.expect.i64(i64 %conv90, i64 1)
  %tobool92 = icmp ne i64 %expval91, 0
  br i1 %tobool92, label %if.then93, label %if.else

if.then93:                                        ; preds = %if.end87
  %73 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %74 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent94 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %74, i32 0, i32 21
  %75 = load i32, i32* %tx_sent94, align 8, !tbaa !36
  %sub95 = sub i32 %75, %73
  store i32 %sub95, i32* %tx_sent94, align 8, !tbaa !36
  br label %if.end111

if.else:                                          ; preds = %if.end87
  %76 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %77 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent96 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %77, i32 0, i32 21
  %78 = load i32, i32* %tx_sent96, align 8, !tbaa !36
  %sub97 = sub i32 %76, %78
  %79 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %79, i32 0, i32 23
  %80 = load i32, i32* %tx_next_seq, align 32, !tbaa !32
  %add98 = add i32 %80, %sub97
  store i32 %add98, i32* %tx_next_seq, align 32, !tbaa !32
  %81 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %82 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent99 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %82, i32 0, i32 21
  %83 = load i32, i32* %tx_sent99, align 8, !tbaa !36
  %sub100 = sub i32 %81, %83
  %84 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %84, i32 0, i32 22
  %85 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %add101 = add i32 %85, %sub100
  store i32 %add101, i32* %tx_next_pos, align 4, !tbaa !18
  %86 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos102 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %86, i32 0, i32 22
  %87 = load i32, i32* %tx_next_pos102, align 4, !tbaa !18
  %88 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %88, i32 0, i32 4
  %89 = load i32, i32* %tx_len, align 4, !tbaa !35
  %cmp103 = icmp uge i32 %87, %89
  br i1 %cmp103, label %if.then105, label %if.end109

if.then105:                                       ; preds = %if.else
  %90 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_len106 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %90, i32 0, i32 4
  %91 = load i32, i32* %tx_len106, align 4, !tbaa !35
  %92 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_pos107 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %92, i32 0, i32 22
  %93 = load i32, i32* %tx_next_pos107, align 4, !tbaa !18
  %sub108 = sub i32 %93, %91
  store i32 %sub108, i32* %tx_next_pos107, align 4, !tbaa !18
  br label %if.end109

if.end109:                                        ; preds = %if.then105, %if.else
  %94 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent110 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %94, i32 0, i32 21
  store i32 0, i32* %tx_sent110, align 8, !tbaa !36
  br label %if.end111

if.end111:                                        ; preds = %if.end109, %if.then93
  %95 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %cmp112 = icmp ne i32 %95, 0
  %conv113 = zext i1 %cmp112 to i32
  %conv114 = sext i32 %conv113 to i64
  %expval115 = call i64 @llvm.expect.i64(i64 %conv114, i64 0)
  %tobool116 = icmp ne i64 %expval115, 0
  br i1 %tobool116, label %if.then117, label %if.else118

if.then117:                                       ; preds = %if.end111
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4, !tbaa !72
  br label %if.end133

if.else118:                                       ; preds = %if.end111
  %97 = load i32, i32* %orig_payload, align 4, !tbaa !9
  %cmp119 = icmp eq i32 %97, 0
  br i1 %cmp119, label %land.rhs121, label %land.end126

land.rhs121:                                      ; preds = %if.else118
  %98 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_dupack_cnt122 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %98, i32 0, i32 18
  %99 = load i32, i32* %rx_dupack_cnt122, align 4, !tbaa !72
  %inc123 = add i32 %99, 1
  store i32 %inc123, i32* %rx_dupack_cnt122, align 4, !tbaa !72
  %cmp124 = icmp uge i32 %inc123, 3
  br label %land.end126

land.end126:                                      ; preds = %land.rhs121, %if.else118
  %100 = phi i1 [ false, %if.else118 ], [ %cmp124, %land.rhs121 ]
  %land.ext127 = zext i1 %100 to i32
  %conv128 = sext i32 %land.ext127 to i64
  %expval129 = call i64 @llvm.expect.i64(i64 %conv128, i64 0)
  %tobool130 = icmp ne i64 %expval129, 0
  br i1 %tobool130, label %if.then131, label %if.end132

if.then131:                                       ; preds = %land.end126
  %101 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %101)
  br label %unlock

if.end132:                                        ; preds = %land.end126
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.then117
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %land.end
  %102 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %103 = load i32, i32* %seq, align 4, !tbaa !9
  %104 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv135 = trunc i32 %104 to i16
  %call136 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %102, i32 %103, i16 zeroext %conv135, i16* %trim_start, i16* %trim_end)
  %cmp137 = icmp ne i32 %call136, 0
  %conv138 = zext i1 %cmp137 to i32
  %conv139 = sext i32 %conv138 to i64
  %expval140 = call i64 @llvm.expect.i64(i64 %conv139, i64 0)
  %tobool141 = icmp ne i64 %expval140, 0
  br i1 %tobool141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end134
  br label %unlock

if.end143:                                        ; preds = %if.end134
  %105 = load i16, i16* %trim_start, align 2, !tbaa !7
  %conv144 = zext i16 %105 to i32
  %106 = load i16, i16* %trim_end, align 2, !tbaa !7
  %conv145 = zext i16 %106 to i32
  %add146 = add nsw i32 %conv144, %conv145
  %107 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %sub147 = sub i32 %107, %add146
  store i32 %sub147, i32* %payload_bytes, align 4, !tbaa !9
  %108 = load i16, i16* %trim_start, align 2, !tbaa !7
  %conv148 = zext i16 %108 to i32
  %109 = load i32, i32* %payload_off, align 4, !tbaa !9
  %add149 = add i32 %109, %conv148
  store i32 %add149, i32* %payload_off, align 4, !tbaa !9
  %110 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %111 = bitcast %struct.pkt_tcp* %110 to i8*
  %112 = load i32, i32* %payload_off, align 4, !tbaa !9
  %idx.ext = zext i32 %112 to i64
  %add.ptr = getelementptr inbounds i8, i8* %111, i64 %idx.ext
  %113 = bitcast i8* %add.ptr to %struct.obj_hdr*
  store %struct.obj_hdr* %113, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %114 = load i16, i16* %trim_start, align 2, !tbaa !7
  %conv150 = zext i16 %114 to i32
  %115 = load i32, i32* %seq, align 4, !tbaa !9
  %add151 = add i32 %115, %conv150
  store i32 %add151, i32* %seq, align 4, !tbaa !9
  %116 = load i32, i32* %seq, align 4, !tbaa !9
  %117 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %117, i32 0, i32 16
  %118 = load i32, i32* %rx_next_seq, align 4, !tbaa !34
  %cmp152 = icmp ne i32 %116, %118
  %conv153 = zext i1 %cmp152 to i32
  %conv154 = sext i32 %conv153 to i64
  %expval155 = call i64 @llvm.expect.i64(i64 %conv154, i64 0)
  %tobool156 = icmp ne i64 %expval155, 0
  br i1 %tobool156, label %if.then157, label %if.end190

if.then157:                                       ; preds = %if.end143
  store i32 1, i32* %trigger_ack, align 4, !tbaa !9
  %119 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %cmp158 = icmp eq i32 %119, 0
  br i1 %cmp158, label %if.then160, label %if.end161

if.then160:                                       ; preds = %if.then157
  br label %unlock

if.end161:                                        ; preds = %if.then157
  %120 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %120, i32 0, i32 20
  %121 = load i32, i32* %rx_ooo_len, align 4, !tbaa !73
  %cmp162 = icmp eq i32 %121, 0
  br i1 %cmp162, label %if.then164, label %if.else167

if.then164:                                       ; preds = %if.end161
  %122 = load i32, i32* %seq, align 4, !tbaa !9
  %123 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %123, i32 0, i32 19
  store i32 %122, i32* %rx_ooo_start, align 16, !tbaa !74
  %124 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %125 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len165 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %125, i32 0, i32 20
  store i32 %124, i32* %rx_ooo_len165, align 4, !tbaa !73
  %126 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %127 = load i32, i32* %seq, align 4, !tbaa !9
  %128 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv166 = trunc i32 %128 to i16
  %129 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %130 = bitcast %struct.obj_hdr* %129 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %126, i32 %127, i16 zeroext %conv166, i8* %130)
  br label %if.end189

if.else167:                                       ; preds = %if.end161
  %131 = load i32, i32* %seq, align 4, !tbaa !9
  %132 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %add168 = add i32 %131, %132
  %133 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start169 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %133, i32 0, i32 19
  %134 = load i32, i32* %rx_ooo_start169, align 16, !tbaa !74
  %cmp170 = icmp eq i32 %add168, %134
  br i1 %cmp170, label %if.then172, label %if.else177

if.then172:                                       ; preds = %if.else167
  %135 = load i32, i32* %seq, align 4, !tbaa !9
  %136 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start173 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %136, i32 0, i32 19
  store i32 %135, i32* %rx_ooo_start173, align 16, !tbaa !74
  %137 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %138 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len174 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %138, i32 0, i32 20
  %139 = load i32, i32* %rx_ooo_len174, align 4, !tbaa !73
  %add175 = add i32 %139, %137
  store i32 %add175, i32* %rx_ooo_len174, align 4, !tbaa !73
  %140 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %141 = load i32, i32* %seq, align 4, !tbaa !9
  %142 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv176 = trunc i32 %142 to i16
  %143 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %144 = bitcast %struct.obj_hdr* %143 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %140, i32 %141, i16 zeroext %conv176, i8* %144)
  br label %if.end188

if.else177:                                       ; preds = %if.else167
  %145 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start178 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %145, i32 0, i32 19
  %146 = load i32, i32* %rx_ooo_start178, align 16, !tbaa !74
  %147 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len179 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %147, i32 0, i32 20
  %148 = load i32, i32* %rx_ooo_len179, align 4, !tbaa !73
  %add180 = add i32 %146, %148
  %149 = load i32, i32* %seq, align 4, !tbaa !9
  %cmp181 = icmp eq i32 %add180, %149
  br i1 %cmp181, label %if.then183, label %if.end187

if.then183:                                       ; preds = %if.else177
  %150 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %151 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len184 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %151, i32 0, i32 20
  %152 = load i32, i32* %rx_ooo_len184, align 4, !tbaa !73
  %add185 = add i32 %152, %150
  store i32 %add185, i32* %rx_ooo_len184, align 4, !tbaa !73
  %153 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %154 = load i32, i32* %seq, align 4, !tbaa !9
  %155 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv186 = trunc i32 %155 to i16
  %156 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %157 = bitcast %struct.obj_hdr* %156 to i8*
  call void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %153, i32 %154, i16 zeroext %conv186, i8* %157)
  br label %if.end187

if.end187:                                        ; preds = %if.then183, %if.else177
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then172
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then164
  br label %unlock

if.end190:                                        ; preds = %if.end143
  %158 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts191 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %158, i32 0, i32 0
  %159 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts191, align 8, !tbaa !61
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %159, i32 0, i32 2
  %coerce.dive192 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_val, i32 0, i32 0
  %160 = load i32, i32* %coerce.dive192, align 1
  %call193 = call i32 @f_beui32(i32 %160)
  %161 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %161, i32 0, i32 25
  store i32 %call193, i32* %tx_next_ts, align 8, !tbaa !38
  %162 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp194 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %162, i32 0, i32 2
  %_hdrlen_rsvd_flags195 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp194, i32 0, i32 4
  %163 = load i16, i16* %_hdrlen_rsvd_flags195, align 1, !tbaa !54
  %call196 = call zeroext i16 @__bswap_16(i16 zeroext %163)
  %conv197 = zext i16 %call196 to i32
  %and198 = and i32 %conv197, 511
  %and199 = and i32 %and198, 16
  %cmp200 = icmp eq i32 %and199, 16
  br i1 %cmp200, label %land.rhs202, label %land.end208

land.rhs202:                                      ; preds = %if.end190
  %164 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts203 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %164, i32 0, i32 0
  %165 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts203, align 8, !tbaa !61
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %165, i32 0, i32 3
  %coerce.dive204 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr, i32 0, i32 0
  %166 = load i32, i32* %coerce.dive204, align 1
  %call205 = call i32 @f_beui32(i32 %166)
  %cmp206 = icmp ne i32 %call205, 0
  br label %land.end208

land.end208:                                      ; preds = %land.rhs202, %if.end190
  %167 = phi i1 [ false, %if.end190 ], [ %cmp206, %land.rhs202 ]
  %land.ext209 = zext i1 %167 to i32
  %conv210 = sext i32 %land.ext209 to i64
  %expval211 = call i64 @llvm.expect.i64(i64 %conv210, i64 1)
  %tobool212 = icmp ne i64 %expval211, 0
  br i1 %tobool212, label %if.then213, label %if.end236

if.then213:                                       ; preds = %land.end208
  %168 = load i32, i32* %ts.addr, align 4, !tbaa !9
  %169 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts214 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %169, i32 0, i32 0
  %170 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts214, align 8, !tbaa !61
  %ts_ecr215 = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %170, i32 0, i32 3
  %coerce.dive216 = getelementptr inbounds %struct.beui32, %struct.beui32* %ts_ecr215, i32 0, i32 0
  %171 = load i32, i32* %coerce.dive216, align 1
  %call217 = call i32 @f_beui32(i32 %171)
  %sub218 = sub i32 %168, %call217
  store i32 %sub218, i32* %rtt, align 4, !tbaa !9
  %172 = load i32, i32* %rtt, align 4, !tbaa !9
  %cmp219 = icmp ult i32 %172, 100000
  br i1 %cmp219, label %if.then221, label %if.end235

if.then221:                                       ; preds = %if.then213
  %173 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rtt_est = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %173, i32 0, i32 31
  %174 = load i32, i32* %rtt_est, align 4, !tbaa !75
  %cmp222 = icmp ne i32 %174, 0
  %conv223 = zext i1 %cmp222 to i32
  %conv224 = sext i32 %conv223 to i64
  %expval225 = call i64 @llvm.expect.i64(i64 %conv224, i64 1)
  %tobool226 = icmp ne i64 %expval225, 0
  br i1 %tobool226, label %if.then227, label %if.else232

if.then227:                                       ; preds = %if.then221
  %175 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rtt_est228 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %175, i32 0, i32 31
  %176 = load i32, i32* %rtt_est228, align 4, !tbaa !75
  %mul229 = mul i32 %176, 7
  %177 = load i32, i32* %rtt, align 4, !tbaa !9
  %add230 = add i32 %mul229, %177
  %div = udiv i32 %add230, 8
  %178 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rtt_est231 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %178, i32 0, i32 31
  store i32 %div, i32* %rtt_est231, align 4, !tbaa !75
  br label %if.end234

if.else232:                                       ; preds = %if.then221
  %179 = load i32, i32* %rtt, align 4, !tbaa !9
  %180 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rtt_est233 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %180, i32 0, i32 31
  store i32 %179, i32* %rtt_est233, align 4, !tbaa !75
  br label %if.end234

if.end234:                                        ; preds = %if.else232, %if.then227
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.then213
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %land.end208
  %181 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp237 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %181, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp237, i32 0, i32 5
  %coerce.dive238 = getelementptr inbounds %struct.beui16, %struct.beui16* %wnd, i32 0, i32 0
  %182 = load i16, i16* %coerce.dive238, align 1
  %call239 = call zeroext i16 @f_beui16(i16 %182)
  %conv240 = zext i16 %call239 to i32
  %183 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_remote_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %183, i32 0, i32 17
  store i32 %conv240, i32* %rx_remote_avail, align 8, !tbaa !40
  %184 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp241 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %184, i32 0, i32 1
  %185 = load i64, i64* %rx_base_sp241, align 8, !tbaa !30
  %and242 = and i64 %185, 32
  %cmp243 = icmp eq i64 %and242, 32
  br i1 %cmp243, label %land.lhs.true, label %if.end248

land.lhs.true:                                    ; preds = %if.end236
  %186 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %cmp245 = icmp ugt i32 %186, 0
  br i1 %cmp245, label %if.then247, label %if.end248

if.then247:                                       ; preds = %land.lhs.true
  br label %unlock

if.end248:                                        ; preds = %land.lhs.true, %if.end236
  %187 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp249 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %187, i32 0, i32 1
  %188 = load i64, i64* %rx_base_sp249, align 8, !tbaa !30
  %and250 = and i64 %188, 2
  %expval251 = call i64 @llvm.expect.i64(i64 %and250, i64 0)
  %tobool252 = icmp ne i64 %expval251, 0
  br i1 %tobool252, label %if.then253, label %if.end327

if.then253:                                       ; preds = %if.end248
  %189 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_objrem = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %189, i32 0, i32 33
  %190 = load i32, i32* %rx_objrem, align 4, !tbaa !76
  %cmp254 = icmp eq i32 %190, 0
  br i1 %cmp254, label %land.lhs.true256, label %if.end319

land.lhs.true256:                                 ; preds = %if.then253
  %191 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %cmp257 = icmp ugt i32 %191, 0
  br i1 %cmp257, label %if.then259, label %if.end319

if.then259:                                       ; preds = %land.lhs.true256
  %192 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv260 = zext i32 %192 to i64
  %cmp261 = icmp ult i64 %conv260, 8
  br i1 %cmp261, label %if.then268, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then259
  %193 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv263 = zext i32 %193 to i64
  %194 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dstlen = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %194, i32 0, i32 3
  %195 = load i8, i8* %dstlen, align 1, !tbaa !2
  %conv264 = zext i8 %195 to i64
  %add265 = add i64 8, %conv264
  %cmp266 = icmp ult i64 %conv263, %add265
  br i1 %cmp266, label %if.then268, label %if.end269

if.then268:                                       ; preds = %lor.lhs.false, %if.then259
  br label %slowpath

if.end269:                                        ; preds = %lor.lhs.false
  %196 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %magic = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %196, i32 0, i32 1
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %magic, i32 0, i32 0
  store i16 0, i16* %x, align 1, !tbaa !67
  %197 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %appctx = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %197, i32 0, i32 0
  %198 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %id = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %198, i32 0, i32 3
  %199 = load i16, i16* %id, align 8, !tbaa !21
  %idxprom = zext i16 %199 to i64
  %arrayidx = getelementptr inbounds [16 x [16 x %struct.flextcp_pl_appctx]], [16 x [16 x %struct.flextcp_pl_appctx]]* %appctx, i64 0, i64 %idxprom
  %200 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %db_id = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %200, i32 0, i32 10
  %201 = load i16, i16* %db_id, align 2, !tbaa !77
  %idxprom270 = zext i16 %201 to i64
  %arrayidx271 = getelementptr inbounds [16 x %struct.flextcp_pl_appctx], [16 x %struct.flextcp_pl_appctx]* %arrayidx, i64 0, i64 %idxprom270
  %appst_id = getelementptr inbounds %struct.flextcp_pl_appctx, %struct.flextcp_pl_appctx* %arrayidx271, i32 0, i32 4
  %202 = load i32, i32* %appst_id, align 1, !tbaa !78
  store i32 %202, i32* %i, align 4, !tbaa !9
  %203 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %appst272 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %203, i32 0, i32 4
  %204 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom273 = zext i32 %204 to i64
  %arrayidx274 = getelementptr inbounds [8 x %struct.flextcp_pl_appst], [8 x %struct.flextcp_pl_appst]* %appst272, i64 0, i64 %idxprom273
  store %struct.flextcp_pl_appst* %arrayidx274, %struct.flextcp_pl_appst** %appst, align 8, !tbaa !5
  %205 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp275 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %205, i32 0, i32 1
  %206 = load i64, i64* %rx_base_sp275, align 8, !tbaa !30
  %and276 = and i64 %206, 4
  %cmp277 = icmp eq i64 %and276, 0
  br i1 %cmp277, label %if.then279, label %if.else285

if.then279:                                       ; preds = %if.end269
  %207 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dst = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %207, i32 0, i32 4
  %arraydecay280 = getelementptr inbounds [0 x i8], [0 x i8]* %dst, i32 0, i32 0
  %208 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dstlen281 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %208, i32 0, i32 3
  %209 = load i8, i8* %dstlen281, align 1, !tbaa !2
  %conv282 = zext i8 %209 to i32
  %call283 = call i32 @rte_hash_crc(i8* %arraydecay280, i32 %conv282, i32 0)
  store i32 %call283, i32* %i, align 4, !tbaa !9
  %210 = load i32, i32* %i, align 4, !tbaa !9
  %211 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8, !tbaa !5
  %ctx_num = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %211, i32 0, i32 0
  %212 = load i16, i16* %ctx_num, align 1, !tbaa !80
  %conv284 = zext i16 %212 to i32
  %rem = urem i32 %210, %conv284
  store i32 %rem, i32* %i, align 4, !tbaa !9
  br label %if.end303

if.else285:                                       ; preds = %if.end269
  store i64 0, i64* %steer_id, align 8, !tbaa !19
  %213 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dstlen286 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %213, i32 0, i32 3
  %214 = load i8, i8* %dstlen286, align 1, !tbaa !2
  %conv287 = zext i8 %214 to i32
  %cmp288 = icmp sgt i32 %conv287, 8
  br i1 %cmp288, label %if.then290, label %if.end291

if.then290:                                       ; preds = %if.else285
  br label %slowpath

if.end291:                                        ; preds = %if.else285
  %215 = bitcast i64* %steer_id to i8*
  %216 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dst292 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %216, i32 0, i32 4
  %arraydecay293 = getelementptr inbounds [0 x i8], [0 x i8]* %dst292, i32 0, i32 0
  %217 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dstlen294 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %217, i32 0, i32 3
  %218 = load i8, i8* %dstlen294, align 1, !tbaa !2
  %conv295 = zext i8 %218 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %215, i8* align 1 %arraydecay293, i64 %conv295, i1 false)
  %219 = load i64, i64* %steer_id, align 8, !tbaa !19
  %220 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8, !tbaa !5
  %ctx_num296 = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %220, i32 0, i32 0
  %221 = load i16, i16* %ctx_num296, align 1, !tbaa !80
  %conv297 = zext i16 %221 to i64
  %cmp298 = icmp uge i64 %219, %conv297
  br i1 %cmp298, label %if.then300, label %if.end301

if.then300:                                       ; preds = %if.end291
  br label %slowpath

if.end301:                                        ; preds = %if.end291
  %222 = load i64, i64* %steer_id, align 8, !tbaa !19
  %conv302 = trunc i64 %222 to i32
  store i32 %conv302, i32* %i, align 4, !tbaa !9
  br label %if.end303

if.end303:                                        ; preds = %if.end301, %if.then279
  %223 = load %struct.flextcp_pl_appst*, %struct.flextcp_pl_appst** %appst, align 8, !tbaa !5
  %ctx_ids = getelementptr inbounds %struct.flextcp_pl_appst, %struct.flextcp_pl_appst* %223, i32 0, i32 1
  %224 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom304 = zext i32 %224 to i64
  %arrayidx305 = getelementptr inbounds [31 x i16], [31 x i16]* %ctx_ids, i64 0, i64 %idxprom304
  %225 = load i16, i16* %arrayidx305, align 1, !tbaa !7
  %conv306 = zext i16 %225 to i32
  store i32 %conv306, i32* %i, align 4, !tbaa !9
  %226 = load i32, i32* %i, align 4, !tbaa !9
  %conv307 = trunc i32 %226 to i16
  %227 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %db_id308 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %227, i32 0, i32 10
  store i16 %conv307, i16* %db_id308, align 2, !tbaa !77
  %228 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %dstlen309 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %228, i32 0, i32 3
  %229 = load i8, i8* %dstlen309, align 1, !tbaa !2
  %conv310 = zext i8 %229 to i64
  %add311 = add i64 8, %conv310
  %230 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %len312 = getelementptr inbounds %struct.obj_hdr, %struct.obj_hdr* %230, i32 0, i32 0
  %coerce.dive313 = getelementptr inbounds %struct.beui32, %struct.beui32* %len312, i32 0, i32 0
  %231 = load i32, i32* %coerce.dive313, align 1
  %call314 = call i32 @f_beui32(i32 %231)
  %conv315 = zext i32 %call314 to i64
  %add316 = add i64 %add311, %conv315
  %conv317 = trunc i64 %add316 to i32
  %232 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_objrem318 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %232, i32 0, i32 33
  store i32 %conv317, i32* %rx_objrem318, align 4, !tbaa !76
  br label %if.end319

if.end319:                                        ; preds = %if.end303, %land.lhs.true256, %if.then253
  %233 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %234 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_objrem320 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %234, i32 0, i32 33
  %235 = load i32, i32* %rx_objrem320, align 4, !tbaa !76
  %cmp321 = icmp ugt i32 %233, %235
  br i1 %cmp321, label %if.then323, label %if.end324

if.then323:                                       ; preds = %if.end319
  br label %slowpath

if.end324:                                        ; preds = %if.end319
  %236 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %237 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_objrem325 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %237, i32 0, i32 33
  %238 = load i32, i32* %rx_objrem325, align 4, !tbaa !76
  %sub326 = sub i32 %238, %236
  store i32 %sub326, i32* %rx_objrem325, align 4, !tbaa !76
  br label %if.end327

if.end327:                                        ; preds = %if.end324, %if.end248
  %239 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %cmp328 = icmp ugt i32 %239, 0
  br i1 %cmp328, label %if.then330, label %if.end403

if.then330:                                       ; preds = %if.end327
  %240 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %241 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos331 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %241, i32 0, i32 15
  %242 = load i32, i32* %rx_next_pos331, align 64, !tbaa !68
  %243 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %conv332 = trunc i32 %243 to i16
  %244 = load %struct.obj_hdr*, %struct.obj_hdr** %oh, align 8, !tbaa !5
  %245 = bitcast %struct.obj_hdr* %244 to i8*
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %240, i32 %242, i16 zeroext %conv332, i8* %245)
  %246 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  store i32 %246, i32* %rx_bump, align 4, !tbaa !9
  %247 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %248 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %248, i32 0, i32 14
  %249 = load i32, i32* %rx_avail, align 4, !tbaa !33
  %sub333 = sub i32 %249, %247
  store i32 %sub333, i32* %rx_avail, align 4, !tbaa !33
  %250 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %251 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos334 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %251, i32 0, i32 15
  %252 = load i32, i32* %rx_next_pos334, align 64, !tbaa !68
  %add335 = add i32 %252, %250
  store i32 %add335, i32* %rx_next_pos334, align 64, !tbaa !68
  %253 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos336 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %253, i32 0, i32 15
  %254 = load i32, i32* %rx_next_pos336, align 64, !tbaa !68
  %255 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %255, i32 0, i32 3
  %256 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp337 = icmp uge i32 %254, %256
  br i1 %cmp337, label %if.then339, label %if.end343

if.then339:                                       ; preds = %if.then330
  %257 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len340 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %257, i32 0, i32 3
  %258 = load i32, i32* %rx_len340, align 8, !tbaa !82
  %259 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos341 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %259, i32 0, i32 15
  %260 = load i32, i32* %rx_next_pos341, align 64, !tbaa !68
  %sub342 = sub i32 %260, %258
  store i32 %sub342, i32* %rx_next_pos341, align 64, !tbaa !68
  br label %if.end343

if.end343:                                        ; preds = %if.then339, %if.then330
  %261 = load i32, i32* %payload_bytes, align 4, !tbaa !9
  %262 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq344 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %262, i32 0, i32 16
  %263 = load i32, i32* %rx_next_seq344, align 4, !tbaa !34
  %add345 = add i32 %263, %261
  store i32 %add345, i32* %rx_next_seq344, align 4, !tbaa !34
  store i32 1, i32* %trigger_ack, align 4, !tbaa !9
  %264 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len346 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %264, i32 0, i32 20
  %265 = load i32, i32* %rx_ooo_len346, align 4, !tbaa !73
  %cmp347 = icmp ne i32 %265, 0
  %conv348 = zext i1 %cmp347 to i32
  %conv349 = sext i32 %conv348 to i64
  %expval350 = call i64 @llvm.expect.i64(i64 %conv349, i64 0)
  %tobool351 = icmp ne i64 %expval350, 0
  br i1 %tobool351, label %if.then352, label %if.end402

if.then352:                                       ; preds = %if.end343
  %266 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %267 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start353 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %267, i32 0, i32 19
  %268 = load i32, i32* %rx_ooo_start353, align 16, !tbaa !74
  %269 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len354 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %269, i32 0, i32 20
  %270 = load i32, i32* %rx_ooo_len354, align 4, !tbaa !73
  %conv355 = trunc i32 %270 to i16
  %call356 = call i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %266, i32 %268, i16 zeroext %conv355, i16* %trim_start, i16* %trim_end)
  %cmp357 = icmp ne i32 %call356, 0
  br i1 %cmp357, label %if.then359, label %if.else361

if.then359:                                       ; preds = %if.then352
  %271 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len360 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %271, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len360, align 4, !tbaa !73
  br label %if.end401

if.else361:                                       ; preds = %if.then352
  %272 = load i16, i16* %trim_start, align 2, !tbaa !7
  %conv362 = zext i16 %272 to i32
  %273 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start363 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %273, i32 0, i32 19
  %274 = load i32, i32* %rx_ooo_start363, align 16, !tbaa !74
  %add364 = add i32 %274, %conv362
  store i32 %add364, i32* %rx_ooo_start363, align 16, !tbaa !74
  %275 = load i16, i16* %trim_start, align 2, !tbaa !7
  %conv365 = zext i16 %275 to i32
  %276 = load i16, i16* %trim_end, align 2, !tbaa !7
  %conv366 = zext i16 %276 to i32
  %add367 = add nsw i32 %conv365, %conv366
  %277 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len368 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %277, i32 0, i32 20
  %278 = load i32, i32* %rx_ooo_len368, align 4, !tbaa !73
  %sub369 = sub i32 %278, %add367
  store i32 %sub369, i32* %rx_ooo_len368, align 4, !tbaa !73
  %279 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len370 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %279, i32 0, i32 20
  %280 = load i32, i32* %rx_ooo_len370, align 4, !tbaa !73
  %cmp371 = icmp ugt i32 %280, 0
  br i1 %cmp371, label %land.lhs.true373, label %if.end400

land.lhs.true373:                                 ; preds = %if.else361
  %281 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_start374 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %281, i32 0, i32 19
  %282 = load i32, i32* %rx_ooo_start374, align 16, !tbaa !74
  %283 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq375 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %283, i32 0, i32 16
  %284 = load i32, i32* %rx_next_seq375, align 4, !tbaa !34
  %cmp376 = icmp eq i32 %282, %284
  br i1 %cmp376, label %if.then378, label %if.end400

if.then378:                                       ; preds = %land.lhs.true373
  %285 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len379 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %285, i32 0, i32 20
  %286 = load i32, i32* %rx_ooo_len379, align 4, !tbaa !73
  %287 = load i32, i32* %rx_bump, align 4, !tbaa !9
  %add380 = add i32 %287, %286
  store i32 %add380, i32* %rx_bump, align 4, !tbaa !9
  %288 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len381 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %288, i32 0, i32 20
  %289 = load i32, i32* %rx_ooo_len381, align 4, !tbaa !73
  %290 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail382 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %290, i32 0, i32 14
  %291 = load i32, i32* %rx_avail382, align 4, !tbaa !33
  %sub383 = sub i32 %291, %289
  store i32 %sub383, i32* %rx_avail382, align 4, !tbaa !33
  %292 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len384 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %292, i32 0, i32 20
  %293 = load i32, i32* %rx_ooo_len384, align 4, !tbaa !73
  %294 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos385 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %294, i32 0, i32 15
  %295 = load i32, i32* %rx_next_pos385, align 64, !tbaa !68
  %add386 = add i32 %295, %293
  store i32 %add386, i32* %rx_next_pos385, align 64, !tbaa !68
  %296 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos387 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %296, i32 0, i32 15
  %297 = load i32, i32* %rx_next_pos387, align 64, !tbaa !68
  %298 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len388 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %298, i32 0, i32 3
  %299 = load i32, i32* %rx_len388, align 8, !tbaa !82
  %cmp389 = icmp uge i32 %297, %299
  br i1 %cmp389, label %if.then391, label %if.end395

if.then391:                                       ; preds = %if.then378
  %300 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len392 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %300, i32 0, i32 3
  %301 = load i32, i32* %rx_len392, align 8, !tbaa !82
  %302 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos393 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %302, i32 0, i32 15
  %303 = load i32, i32* %rx_next_pos393, align 64, !tbaa !68
  %sub394 = sub i32 %303, %301
  store i32 %sub394, i32* %rx_next_pos393, align 64, !tbaa !68
  br label %if.end395

if.end395:                                        ; preds = %if.then391, %if.then378
  %304 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len396 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %304, i32 0, i32 20
  %305 = load i32, i32* %rx_ooo_len396, align 4, !tbaa !73
  %306 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq397 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %306, i32 0, i32 16
  %307 = load i32, i32* %rx_next_seq397, align 4, !tbaa !34
  %add398 = add i32 %307, %305
  store i32 %add398, i32* %rx_next_seq397, align 4, !tbaa !34
  %308 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len399 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %308, i32 0, i32 20
  store i32 0, i32* %rx_ooo_len399, align 4, !tbaa !73
  br label %if.end400

if.end400:                                        ; preds = %if.end395, %land.lhs.true373, %if.else361
  br label %if.end401

if.end401:                                        ; preds = %if.end400, %if.then359
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.end343
  br label %if.end403

if.end403:                                        ; preds = %if.end402, %if.end327
  %309 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp404 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %309, i32 0, i32 2
  %_hdrlen_rsvd_flags405 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp404, i32 0, i32 4
  %310 = load i16, i16* %_hdrlen_rsvd_flags405, align 1, !tbaa !54
  %call406 = call zeroext i16 @__bswap_16(i16 zeroext %310)
  %conv407 = zext i16 %call406 to i32
  %and408 = and i32 %conv407, 511
  %and409 = and i32 %and408, 1
  %cmp410 = icmp eq i32 %and409, 1
  br i1 %cmp410, label %land.lhs.true412, label %if.end435

land.lhs.true412:                                 ; preds = %if.end403
  %311 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp413 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %311, i32 0, i32 1
  %312 = load i64, i64* %rx_base_sp413, align 8, !tbaa !30
  %and414 = and i64 %312, 32
  %tobool415 = icmp ne i64 %and414, 0
  br i1 %tobool415, label %if.end435, label %if.then416

if.then416:                                       ; preds = %land.lhs.true412
  %313 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq417 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %313, i32 0, i32 16
  %314 = load i32, i32* %rx_next_seq417, align 4, !tbaa !34
  %315 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp418 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %315, i32 0, i32 2
  %seqno419 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp418, i32 0, i32 2
  %coerce.dive420 = getelementptr inbounds %struct.beui32, %struct.beui32* %seqno419, i32 0, i32 0
  %316 = load i32, i32* %coerce.dive420, align 1
  %call421 = call i32 @f_beui32(i32 %316)
  %317 = load i32, i32* %orig_payload, align 4, !tbaa !9
  %add422 = add i32 %call421, %317
  %cmp423 = icmp eq i32 %314, %add422
  br i1 %cmp423, label %land.lhs.true425, label %if.else432

land.lhs.true425:                                 ; preds = %if.then416
  %318 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_ooo_len426 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %318, i32 0, i32 20
  %319 = load i32, i32* %rx_ooo_len426, align 4, !tbaa !73
  %tobool427 = icmp ne i32 %319, 0
  br i1 %tobool427, label %if.else432, label %if.then428

if.then428:                                       ; preds = %land.lhs.true425
  store i32 1, i32* %fin_bump, align 4, !tbaa !9
  %320 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp429 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %320, i32 0, i32 1
  %321 = load i64, i64* %rx_base_sp429, align 8, !tbaa !30
  %or = or i64 %321, 32
  store i64 %or, i64* %rx_base_sp429, align 8, !tbaa !30
  %322 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq430 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %322, i32 0, i32 16
  %323 = load i32, i32* %rx_next_seq430, align 4, !tbaa !34
  %inc431 = add i32 %323, 1
  store i32 %inc431, i32* %rx_next_seq430, align 4, !tbaa !34
  store i32 1, i32* %trigger_ack, align 4, !tbaa !9
  br label %if.end434

if.else432:                                       ; preds = %land.lhs.true425, %if.then416
  %324 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call433 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %324, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end434

if.end434:                                        ; preds = %if.else432, %if.then428
  br label %if.end435

if.end435:                                        ; preds = %if.end434, %land.lhs.true412, %if.end403
  br label %unlock

unlock:                                           ; preds = %if.end435, %if.then247, %if.end189, %if.then160, %if.then142, %if.then131
  %325 = load i32, i32* %rx_bump, align 4, !tbaa !9
  %cmp436 = icmp ne i32 %325, 0
  br i1 %cmp436, label %lor.end, label %lor.lhs.false438

lor.lhs.false438:                                 ; preds = %unlock
  %326 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %cmp439 = icmp ne i32 %326, 0
  br i1 %cmp439, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false438
  %327 = load i32, i32* %fin_bump, align 4, !tbaa !9
  %tobool441 = icmp ne i32 %327, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false438, %unlock
  %328 = phi i1 [ true, %lor.lhs.false438 ], [ true, %unlock ], [ %tobool441, %lor.rhs ]
  %lor.ext = zext i1 %328 to i32
  %conv442 = sext i32 %lor.ext to i64
  %expval443 = call i64 @llvm.expect.i64(i64 %conv442, i64 1)
  %tobool444 = icmp ne i64 %expval443, 0
  br i1 %tobool444, label %if.then445, label %if.end459

if.then445:                                       ; preds = %lor.end
  %329 = bitcast i16* %type to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %329) #6
  %330 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp446 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %330, i32 0, i32 1
  %331 = load i64, i64* %rx_base_sp446, align 8, !tbaa !30
  %and447 = and i64 %331, 2
  %tobool448 = icmp ne i64 %and447, 0
  br i1 %tobool448, label %if.else450, label %if.then449

if.then449:                                       ; preds = %if.then445
  store i16 1, i16* %type, align 2, !tbaa !7
  br label %if.end451

if.else450:                                       ; preds = %if.then445
  store i16 2, i16* %type, align 2, !tbaa !7
  br label %if.end451

if.end451:                                        ; preds = %if.else450, %if.then449
  %332 = load i32, i32* %fin_bump, align 4, !tbaa !9
  %tobool452 = icmp ne i32 %332, 0
  br i1 %tobool452, label %if.then453, label %if.end457

if.then453:                                       ; preds = %if.end451
  %333 = load i16, i16* %type, align 2, !tbaa !7
  %conv454 = zext i16 %333 to i32
  %or455 = or i32 %conv454, 256
  %conv456 = trunc i32 %or455 to i16
  store i16 %conv456, i16* %type, align 2, !tbaa !7
  br label %if.end457

if.end457:                                        ; preds = %if.then453, %if.end451
  %334 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %335 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %db_id458 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %335, i32 0, i32 10
  %336 = load i16, i16* %db_id458, align 2, !tbaa !77
  %337 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %opaque = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %337, i32 0, i32 0
  %338 = load i64, i64* %opaque, align 64, !tbaa !83
  %339 = load i32, i32* %rx_bump, align 4, !tbaa !9
  %340 = load i32, i32* %rx_pos, align 4, !tbaa !9
  %341 = load i32, i32* %tx_bump, align 4, !tbaa !9
  %342 = load i16, i16* %type, align 2, !tbaa !7
  call void @arx_cache_add(%struct.dataplane_context* %334, i16 zeroext %336, i64 %338, i32 %339, i32 %340, i32 %341, i16 zeroext %342)
  %343 = bitcast i16* %type to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %343) #6
  br label %if.end459

if.end459:                                        ; preds = %if.end457, %lor.end
  %344 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call460 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %344, i32* null)
  store i32 %call460, i32* %new_avail, align 4, !tbaa !9
  %345 = load i32, i32* %new_avail, align 4, !tbaa !9
  %346 = load i32, i32* %old_avail, align 4, !tbaa !9
  %cmp461 = icmp ugt i32 %345, %346
  br i1 %cmp461, label %if.then463, label %if.end490

if.then463:                                       ; preds = %if.end459
  %347 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp464 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %347, i32 0, i32 1
  %348 = load i64, i64* %rx_base_sp464, align 8, !tbaa !30
  %and465 = and i64 %348, 2
  %tobool466 = icmp ne i64 %and465, 0
  br i1 %tobool466, label %if.else476, label %if.then467

if.then467:                                       ; preds = %if.then463
  %349 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %349, i32 0, i32 1
  %350 = load i16, i16* %flow_id, align 2, !tbaa !7
  %conv468 = zext i16 %350 to i32
  %351 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %351, i32 0, i32 26
  %352 = load i32, i32* %tx_rate, align 4, !tbaa !60
  %353 = load i32, i32* %new_avail, align 4, !tbaa !9
  %354 = load i32, i32* %old_avail, align 4, !tbaa !9
  %sub469 = sub i32 %353, %354
  %call470 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %conv468, i32 %352, i32 %sub469, i16 zeroext 1448, i8 zeroext 19)
  %cmp471 = icmp ne i32 %call470, 0
  br i1 %cmp471, label %if.then473, label %if.end475

if.then473:                                       ; preds = %if.then467
  %355 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call474 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %355, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end475:                                        ; preds = %if.then467
  br label %if.end489

if.else476:                                       ; preds = %if.then463
  %356 = load i32, i32* %old_avail, align 4, !tbaa !9
  %cmp477 = icmp eq i32 %356, 0
  br i1 %cmp477, label %if.then479, label %if.end488

if.then479:                                       ; preds = %if.else476
  %357 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman480 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %357, i32 0, i32 1
  %358 = load i16, i16* %flow_id, align 2, !tbaa !7
  %conv481 = zext i16 %358 to i32
  %call482 = call i32 @qman_set(%struct.qman_thread* %qman480, i32 %conv481, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp483 = icmp ne i32 %call482, 0
  br i1 %cmp483, label %if.then485, label %if.end487

if.then485:                                       ; preds = %if.then479
  %359 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call486 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %359, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end487:                                        ; preds = %if.then479
  br label %if.end488

if.end488:                                        ; preds = %if.end487, %if.else476
  br label %if.end489

if.end489:                                        ; preds = %if.end488, %if.end475
  br label %if.end490

if.end490:                                        ; preds = %if.end489, %if.end459
  %360 = load i32, i32* %trigger_ack, align 4, !tbaa !9
  %tobool491 = icmp ne i32 %360, 0
  br i1 %tobool491, label %if.then492, label %if.end498

if.then492:                                       ; preds = %if.end490
  %361 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %362 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_seq493 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %362, i32 0, i32 23
  %363 = load i32, i32* %tx_next_seq493, align 32, !tbaa !32
  %364 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq494 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %364, i32 0, i32 16
  %365 = load i32, i32* %rx_next_seq494, align 4, !tbaa !34
  %366 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail495 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %366, i32 0, i32 14
  %367 = load i32, i32* %rx_avail495, align 4, !tbaa !33
  %368 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_ts496 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %368, i32 0, i32 25
  %369 = load i32, i32* %tx_next_ts496, align 8, !tbaa !38
  %370 = load i32, i32* %ts.addr, align 4, !tbaa !9
  %371 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %372 = load %struct.tcp_opts*, %struct.tcp_opts** %opts.addr, align 8, !tbaa !5
  %ts497 = getelementptr inbounds %struct.tcp_opts, %struct.tcp_opts* %372, i32 0, i32 0
  %373 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts497, align 8, !tbaa !61
  call void @flow_tx_ack(%struct.dataplane_context* %361, i32 %363, i32 %365, i32 %367, i32 %369, i32 %370, %struct.network_buf_handle* %371, %struct.tcp_timestamp_opt* %373)
  br label %if.end498

if.end498:                                        ; preds = %if.then492, %if.end490
  %374 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock499 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %374, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock499)
  %375 = load i32, i32* %trigger_ack, align 4, !tbaa !9
  store i32 %375, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

slowpath:                                         ; preds = %if.then323, %if.then300, %if.then290, %if.then268, %if.end38, %if.then
  %376 = load i32, i32* %no_permanent_sp, align 4, !tbaa !9
  %tobool500 = icmp ne i32 %376, 0
  br i1 %tobool500, label %if.end504, label %if.then501

if.then501:                                       ; preds = %slowpath
  %377 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp502 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %377, i32 0, i32 1
  %378 = load i64, i64* %rx_base_sp502, align 8, !tbaa !30
  %or503 = or i64 %378, 1
  store i64 %or503, i64* %rx_base_sp502, align 8, !tbaa !30
  br label %if.end504

if.end504:                                        ; preds = %if.then501, %slowpath
  %379 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock505 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %379, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock505)
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end504, %if.end498
  %380 = bitcast i64* %steer_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %380) #6
  %381 = bitcast i32* %fin_bump to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %381) #6
  %382 = bitcast i32* %trigger_ack to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %382) #6
  %383 = bitcast %struct.obj_hdr** %oh to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %383) #6
  %384 = bitcast i16* %flow_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %384) #6
  %385 = bitcast i16* %trim_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %385) #6
  %386 = bitcast i16* %trim_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %386) #6
  %387 = bitcast i16* %tcp_extra_hlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %387) #6
  %388 = bitcast i32* %no_permanent_sp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %388) #6
  %389 = bitcast i32* %rtt to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %389) #6
  %390 = bitcast i32* %rx_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %390) #6
  %391 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %391) #6
  %392 = bitcast i32* %tx_bump to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %392) #6
  %393 = bitcast i32* %rx_bump to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %393) #6
  %394 = bitcast i32* %orig_payload to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %394) #6
  %395 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %395) #6
  %396 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %396) #6
  %397 = bitcast i32* %ack to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %397) #6
  %398 = bitcast i32* %seq to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %398) #6
  %399 = bitcast i32* %payload_off to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %399) #6
  %400 = bitcast i32* %payload_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %400) #6
  %401 = bitcast %struct.flextcp_pl_appst** %appst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %401) #6
  %402 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %402) #6
  %403 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %403) #6
  %404 = load i32, i32* %retval, align 4
  ret i32 %404
}

; Function Attrs: nounwind
declare void @llvm.var.annotation(i8*, i8*, i8*, i32) #6

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #7

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_valid_rxack(%struct.flextcp_pl_flowst* %fs, i32 %ack, i32* %bump) #1 {
entry:
  %retval = alloca i32, align 4
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %ack.addr = alloca i32, align 4
  %bump.addr = alloca i32*, align 8
  %fsack_a = alloca i32, align 4
  %fsack_b = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %ack, i32* %ack.addr, align 4, !tbaa !9
  store i32* %bump, i32** %bump.addr, align 8, !tbaa !5
  %0 = bitcast i32* %fsack_a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %1, i32 0, i32 23
  %2 = load i32, i32* %tx_next_seq, align 32, !tbaa !32
  %3 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %3, i32 0, i32 21
  %4 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %sub = sub i32 %2, %4
  store i32 %sub, i32* %fsack_a, align 4, !tbaa !9
  %5 = bitcast i32* %fsack_b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #6
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 23
  %7 = load i32, i32* %tx_next_seq1, align 32, !tbaa !32
  store i32 %7, i32* %fsack_b, align 4, !tbaa !9
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 22
  %9 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_head = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 24
  %11 = load i32, i32* %tx_head, align 4, !tbaa !37
  %cmp = icmp ule i32 %9, %11
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_head2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 24
  %13 = load i32, i32* %tx_head2, align 4, !tbaa !37
  %14 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %14, i32 0, i32 22
  %15 = load i32, i32* %tx_next_pos3, align 4, !tbaa !18
  %sub4 = sub i32 %13, %15
  %16 = load i32, i32* %fsack_b, align 4, !tbaa !9
  %add = add i32 %16, %sub4
  store i32 %add, i32* %fsack_b, align 4, !tbaa !9
  br label %if.end

if.else:                                          ; preds = %entry
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_head5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %17, i32 0, i32 24
  %18 = load i32, i32* %tx_head5, align 4, !tbaa !37
  %19 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %19, i32 0, i32 22
  %20 = load i32, i32* %tx_next_pos6, align 4, !tbaa !18
  %sub7 = sub i32 %18, %20
  %21 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %21, i32 0, i32 4
  %22 = load i32, i32* %tx_len, align 4, !tbaa !35
  %add8 = add i32 %sub7, %22
  %23 = load i32, i32* %fsack_b, align 4, !tbaa !9
  %add9 = add i32 %23, %add8
  store i32 %add9, i32* %fsack_b, align 4, !tbaa !9
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = load i32, i32* %fsack_a, align 4, !tbaa !9
  %25 = load i32, i32* %fsack_b, align 4, !tbaa !9
  %cmp10 = icmp ule i32 %24, %25
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end
  %26 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %27 = load i32, i32* %fsack_a, align 4, !tbaa !9
  %cmp12 = icmp ult i32 %26, %27
  br i1 %cmp12, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then11
  %28 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %29 = load i32, i32* %fsack_b, align 4, !tbaa !9
  %cmp13 = icmp ugt i32 %28, %29
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false, %if.then11
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %lor.lhs.false
  %30 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %31 = load i32, i32* %fsack_a, align 4, !tbaa !9
  %sub16 = sub i32 %30, %31
  %32 = load i32*, i32** %bump.addr, align 8, !tbaa !5
  store i32 %sub16, i32* %32, align 4, !tbaa !9
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else17:                                        ; preds = %if.end
  %33 = load i32, i32* %fsack_a, align 4, !tbaa !9
  %34 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %cmp18 = icmp ugt i32 %33, %34
  br i1 %cmp18, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %if.else17
  %35 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %36 = load i32, i32* %fsack_b, align 4, !tbaa !9
  %cmp19 = icmp ugt i32 %35, %36
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %land.lhs.true, %if.else17
  %37 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %38 = load i32, i32* %fsack_a, align 4, !tbaa !9
  %sub22 = sub i32 %37, %38
  %39 = load i32*, i32** %bump.addr, align 8, !tbaa !5
  store i32 %sub22, i32* %39, align 4, !tbaa !9
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.then20, %if.end15, %if.then14
  %40 = bitcast i32* %fsack_b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #6
  %41 = bitcast i32* %fsack_a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #6
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %fs) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %x = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %0 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_dupack_cnt = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %1, i32 0, i32 18
  store i32 0, i32* %rx_dupack_cnt, align 4, !tbaa !72
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 21
  %3 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %4 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %4, i32 0, i32 23
  %5 = load i32, i32* %tx_next_seq, align 32, !tbaa !32
  %sub = sub i32 %5, %3
  store i32 %sub, i32* %tx_next_seq, align 32, !tbaa !32
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 22
  %7 = load i32, i32* %tx_next_pos, align 4, !tbaa !18
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 21
  %9 = load i32, i32* %tx_sent1, align 8, !tbaa !36
  %cmp = icmp uge i32 %7, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent2 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 21
  %11 = load i32, i32* %tx_sent2, align 8, !tbaa !36
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 22
  %13 = load i32, i32* %tx_next_pos3, align 4, !tbaa !18
  %sub4 = sub i32 %13, %11
  store i32 %sub4, i32* %tx_next_pos3, align 4, !tbaa !18
  br label %if.end

if.else:                                          ; preds = %entry
  %14 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %14, i32 0, i32 21
  %15 = load i32, i32* %tx_sent5, align 8, !tbaa !36
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 22
  %17 = load i32, i32* %tx_next_pos6, align 4, !tbaa !18
  %sub7 = sub i32 %15, %17
  store i32 %sub7, i32* %x, align 4, !tbaa !9
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 4
  %19 = load i32, i32* %tx_len, align 4, !tbaa !35
  %20 = load i32, i32* %x, align 4, !tbaa !9
  %sub8 = sub i32 %19, %20
  %21 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_next_pos9 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %21, i32 0, i32 22
  store i32 %sub8, i32* %tx_next_pos9, align 4, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_sent10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %22, i32 0, i32 21
  store i32 0, i32* %tx_sent10, align 8, !tbaa !36
  %23 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %cnt_tx_drops = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %23, i32 0, i32 27
  %24 = load i16, i16* %cnt_tx_drops, align 16, !tbaa !84
  %conv = zext i16 %24 to i32
  %cmp11 = icmp eq i32 %conv, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %25 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %25, i32 0, i32 26
  %26 = load i32, i32* %tx_rate, align 4, !tbaa !60
  %div = udiv i32 %26, 2
  store i32 %div, i32* %tx_rate, align 4, !tbaa !60
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  %27 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %cnt_tx_drops15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %27, i32 0, i32 27
  %28 = load i16, i16* %cnt_tx_drops15, align 16, !tbaa !84
  %inc = add i16 %28, 1
  store i16 %inc, i16* %cnt_tx_drops15, align 16, !tbaa !84
  %29 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @tcp_trim_rxbuf(%struct.flextcp_pl_flowst* %fs, i32 %pkt_seq, i16 zeroext %pkt_bytes, i16* %trim_start, i16* %trim_end) #1 {
entry:
  %retval = alloca i32, align 4
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pkt_seq.addr = alloca i32, align 4
  %pkt_bytes.addr = alloca i16, align 2
  %trim_start.addr = alloca i16*, align 8
  %trim_end.addr = alloca i16*, align 8
  %pseq_a = alloca i32, align 4
  %pseq_b = alloca i32, align 4
  %sseq_a = alloca i32, align 4
  %sseq_b = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %pkt_seq, i32* %pkt_seq.addr, align 4, !tbaa !9
  store i16 %pkt_bytes, i16* %pkt_bytes.addr, align 2, !tbaa !7
  store i16* %trim_start, i16** %trim_start.addr, align 8, !tbaa !5
  store i16* %trim_end, i16** %trim_end.addr, align 8, !tbaa !5
  %0 = bitcast i32* %pseq_a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %pkt_seq.addr, align 4, !tbaa !9
  store i32 %1, i32* %pseq_a, align 4, !tbaa !9
  %2 = bitcast i32* %pseq_b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = load i32, i32* %pkt_seq.addr, align 4, !tbaa !9
  %4 = load i16, i16* %pkt_bytes.addr, align 2, !tbaa !7
  %conv = zext i16 %4 to i32
  %add = add i32 %3, %conv
  store i32 %add, i32* %pseq_b, align 4, !tbaa !9
  %5 = bitcast i32* %sseq_a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #6
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 16
  %7 = load i32, i32* %rx_next_seq, align 4, !tbaa !34
  store i32 %7, i32* %sseq_a, align 4, !tbaa !9
  %8 = bitcast i32* %sseq_b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #6
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_next_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 16
  %10 = load i32, i32* %rx_next_seq1, align 4, !tbaa !34
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 14
  %12 = load i32, i32* %rx_avail, align 4, !tbaa !33
  %add2 = add i32 %10, %12
  store i32 %add2, i32* %sseq_b, align 4, !tbaa !9
  %13 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %14 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %cmp = icmp ule i32 %13, %14
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %15 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %16 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp4 = icmp ule i32 %15, %16
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %17 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %18 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp6 = icmp ult i32 %17, %18
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %19 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %20 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp9 = icmp ugt i32 %19, %20
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end12:                                         ; preds = %if.end
  %21 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %22 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp13 = icmp ult i32 %21, %22
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end12
  %23 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %24 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %sub = sub i32 %23, %24
  br label %cond.end

cond.false:                                       ; preds = %if.end12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %conv15 = trunc i32 %cond to i16
  %25 = load i16*, i16** %trim_start.addr, align 8, !tbaa !5
  store i16 %conv15, i16* %25, align 2, !tbaa !7
  %26 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %27 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp16 = icmp ugt i32 %26, %27
  br i1 %cmp16, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end
  %28 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %29 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %sub19 = sub i32 %28, %29
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %sub19, %cond.true18 ], [ 0, %cond.false20 ]
  %conv23 = trunc i32 %cond22 to i16
  %30 = load i16*, i16** %trim_end.addr, align 8, !tbaa !5
  store i16 %conv23, i16* %30, align 2, !tbaa !7
  br label %if.end113

if.else:                                          ; preds = %land.lhs.true, %entry
  %31 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %32 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %cmp24 = icmp ule i32 %31, %32
  br i1 %cmp24, label %land.lhs.true26, label %if.else59

land.lhs.true26:                                  ; preds = %if.else
  %33 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %34 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp27 = icmp ugt i32 %33, %34
  br i1 %cmp27, label %if.then29, label %if.else59

if.then29:                                        ; preds = %land.lhs.true26
  %35 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %36 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp30 = icmp ugt i32 %35, %36
  br i1 %cmp30, label %land.lhs.true32, label %if.end36

land.lhs.true32:                                  ; preds = %if.then29
  %37 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %38 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp33 = icmp ult i32 %37, %38
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %land.lhs.true32
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end36:                                         ; preds = %land.lhs.true32, %if.then29
  %39 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %40 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp37 = icmp ugt i32 %39, %40
  br i1 %cmp37, label %land.lhs.true39, label %cond.false44

land.lhs.true39:                                  ; preds = %if.end36
  %41 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %42 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp40 = icmp ult i32 %41, %42
  br i1 %cmp40, label %cond.true42, label %cond.false44

cond.true42:                                      ; preds = %land.lhs.true39
  %43 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %44 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %sub43 = sub i32 %43, %44
  br label %cond.end45

cond.false44:                                     ; preds = %land.lhs.true39, %if.end36
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi i32 [ %sub43, %cond.true42 ], [ 0, %cond.false44 ]
  %conv47 = trunc i32 %cond46 to i16
  %45 = load i16*, i16** %trim_start.addr, align 8, !tbaa !5
  store i16 %conv47, i16* %45, align 2, !tbaa !7
  %46 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %47 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp48 = icmp uge i32 %46, %47
  br i1 %cmp48, label %land.lhs.true50, label %cond.false55

land.lhs.true50:                                  ; preds = %cond.end45
  %48 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %49 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp51 = icmp ult i32 %48, %49
  br i1 %cmp51, label %cond.true53, label %cond.false55

cond.true53:                                      ; preds = %land.lhs.true50
  %50 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %51 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %sub54 = sub i32 %50, %51
  br label %cond.end56

cond.false55:                                     ; preds = %land.lhs.true50, %cond.end45
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi i32 [ %sub54, %cond.true53 ], [ 0, %cond.false55 ]
  %conv58 = trunc i32 %cond57 to i16
  %52 = load i16*, i16** %trim_end.addr, align 8, !tbaa !5
  store i16 %conv58, i16* %52, align 2, !tbaa !7
  br label %if.end112

if.else59:                                        ; preds = %land.lhs.true26, %if.else
  %53 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %54 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %cmp60 = icmp ugt i32 %53, %54
  br i1 %cmp60, label %land.lhs.true62, label %if.else94

land.lhs.true62:                                  ; preds = %if.else59
  %55 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %56 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp63 = icmp ule i32 %55, %56
  br i1 %cmp63, label %if.then65, label %if.else94

if.then65:                                        ; preds = %land.lhs.true62
  %57 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %58 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp66 = icmp ugt i32 %57, %58
  br i1 %cmp66, label %land.lhs.true68, label %if.end72

land.lhs.true68:                                  ; preds = %if.then65
  %59 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %60 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp69 = icmp ult i32 %59, %60
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %land.lhs.true68
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end72:                                         ; preds = %land.lhs.true68, %if.then65
  %61 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %62 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %cmp73 = icmp ule i32 %61, %62
  br i1 %cmp73, label %cond.true77, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end72
  %63 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %64 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %cmp75 = icmp ugt i32 %63, %64
  br i1 %cmp75, label %cond.true77, label %cond.false79

cond.true77:                                      ; preds = %lor.lhs.false, %if.end72
  %65 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %66 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %sub78 = sub i32 %65, %66
  br label %cond.end80

cond.false79:                                     ; preds = %lor.lhs.false
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false79, %cond.true77
  %cond81 = phi i32 [ %sub78, %cond.true77 ], [ 0, %cond.false79 ]
  %conv82 = trunc i32 %cond81 to i16
  %67 = load i16*, i16** %trim_start.addr, align 8, !tbaa !5
  store i16 %conv82, i16* %67, align 2, !tbaa !7
  %68 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %69 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp83 = icmp ugt i32 %68, %69
  br i1 %cmp83, label %cond.true88, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %cond.end80
  %70 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %71 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %cmp86 = icmp uge i32 %70, %71
  br i1 %cmp86, label %cond.true88, label %cond.false90

cond.true88:                                      ; preds = %lor.lhs.false85, %cond.end80
  %72 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %73 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %sub89 = sub i32 %72, %73
  br label %cond.end91

cond.false90:                                     ; preds = %lor.lhs.false85
  br label %cond.end91

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi i32 [ %sub89, %cond.true88 ], [ 0, %cond.false90 ]
  %conv93 = trunc i32 %cond92 to i16
  %74 = load i16*, i16** %trim_end.addr, align 8, !tbaa !5
  store i16 %conv93, i16* %74, align 2, !tbaa !7
  br label %if.end111

if.else94:                                        ; preds = %land.lhs.true62, %if.else59
  %75 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %76 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %cmp95 = icmp ult i32 %75, %76
  br i1 %cmp95, label %cond.true97, label %cond.false99

cond.true97:                                      ; preds = %if.else94
  %77 = load i32, i32* %sseq_a, align 4, !tbaa !9
  %78 = load i32, i32* %pseq_a, align 4, !tbaa !9
  %sub98 = sub i32 %77, %78
  br label %cond.end100

cond.false99:                                     ; preds = %if.else94
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi i32 [ %sub98, %cond.true97 ], [ 0, %cond.false99 ]
  %conv102 = trunc i32 %cond101 to i16
  %79 = load i16*, i16** %trim_start.addr, align 8, !tbaa !5
  store i16 %conv102, i16* %79, align 2, !tbaa !7
  %80 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %81 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %cmp103 = icmp ugt i32 %80, %81
  br i1 %cmp103, label %cond.true105, label %cond.false107

cond.true105:                                     ; preds = %cond.end100
  %82 = load i32, i32* %pseq_b, align 4, !tbaa !9
  %83 = load i32, i32* %sseq_b, align 4, !tbaa !9
  %sub106 = sub i32 %82, %83
  br label %cond.end108

cond.false107:                                    ; preds = %cond.end100
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi i32 [ %sub106, %cond.true105 ], [ 0, %cond.false107 ]
  %conv110 = trunc i32 %cond109 to i16
  %84 = load i16*, i16** %trim_end.addr, align 8, !tbaa !5
  store i16 %conv110, i16* %84, align 2, !tbaa !7
  br label %if.end111

if.end111:                                        ; preds = %cond.end108, %cond.end91
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %cond.end56
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %cond.end21
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end113, %if.then71, %if.then35, %if.then11, %if.then8
  %85 = bitcast i32* %sseq_b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #6
  %86 = bitcast i32* %sseq_a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %86) #6
  %87 = bitcast i32* %pseq_b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %87) #6
  %88 = bitcast i32* %pseq_a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %88) #6
  %89 = load i32, i32* %retval, align 4
  ret i32 %89
}

; Function Attrs: nounwind uwtable
define internal void @flow_rx_seq_write(%struct.flextcp_pl_flowst* %fs, i32 %seq, i16 zeroext %len, i8* %src) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %seq.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %src.addr = alloca i8*, align 8
  %diff = alloca i32, align 4
  %pos = alloca i32, align 4
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %seq, i32* %seq.addr, align 4, !tbaa !9
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %seq.addr, align 4, !tbaa !9
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 16
  %3 = load i32, i32* %rx_next_seq, align 4, !tbaa !34
  %sub = sub i32 %1, %3
  store i32 %sub, i32* %diff, align 4, !tbaa !9
  %4 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #6
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 15
  %6 = load i32, i32* %rx_next_pos, align 64, !tbaa !68
  %7 = load i32, i32* %diff, align 4, !tbaa !9
  %add = add i32 %6, %7
  store i32 %add, i32* %pos, align 4, !tbaa !9
  %8 = load i32, i32* %pos, align 4, !tbaa !9
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %9, i32 0, i32 3
  %10 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp = icmp uge i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_len1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %11, i32 0, i32 3
  %12 = load i32, i32* %rx_len1, align 8, !tbaa !82
  %13 = load i32, i32* %pos, align 4, !tbaa !9
  %sub2 = sub i32 %13, %12
  store i32 %sub2, i32* %pos, align 4, !tbaa !9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %pos, align 4, !tbaa !9
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_len3 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %15, i32 0, i32 3
  %16 = load i32, i32* %rx_len3, align 8, !tbaa !82
  %cmp4 = icmp ult i32 %14, %16
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  br label %if.end6

if.else:                                          ; preds = %if.end
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i32 809, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__.flow_rx_seq_write, i32 0, i32 0)) #11
  unreachable

if.end6:                                          ; preds = %if.then5
  %17 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %18 = load i32, i32* %pos, align 4, !tbaa !9
  %19 = load i16, i16* %len.addr, align 2, !tbaa !7
  %20 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @flow_rx_write(%struct.flextcp_pl_flowst* %17, i32 %18, i16 zeroext %19, i8* %20)
  %21 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #6
  %22 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc(i8* %data, i32 %data_len, i32 %init_val) #1 {
entry:
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %pd = alloca i64, align 8
  store i8* %data, i8** %data.addr, align 8, !tbaa !5
  store i32 %data_len, i32* %data_len.addr, align 4, !tbaa !9
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i64* %pd to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !5
  %3 = ptrtoint i8* %2 to i64
  store i64 %3, i64* %pd, align 8, !tbaa !19
  store i32 0, i32* %i, align 4, !tbaa !9
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !tbaa !9
  %5 = load i32, i32* %data_len.addr, align 4, !tbaa !9
  %div = udiv i32 %5, 8
  %cmp = icmp ult i32 %4, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %pd, align 8, !tbaa !19
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !19
  %9 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call = call i32 @rte_hash_crc_8byte(i64 %8, i32 %9)
  store i32 %call, i32* %init_val.addr, align 4, !tbaa !9
  %10 = load i64, i64* %pd, align 8, !tbaa !19
  %add = add i64 %10, 8
  store i64 %add, i64* %pd, align 8, !tbaa !19
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !tbaa !9
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4, !tbaa !9
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %data_len.addr, align 4, !tbaa !9
  %and = and i32 %12, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load i64, i64* %pd, align 8, !tbaa !19
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4, !tbaa !9
  %16 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call1 = call i32 @rte_hash_crc_4byte(i32 %15, i32 %16)
  store i32 %call1, i32* %init_val.addr, align 4, !tbaa !9
  %17 = load i64, i64* %pd, align 8, !tbaa !19
  %add2 = add i64 %17, 4
  store i64 %add2, i64* %pd, align 8, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %18 = load i32, i32* %data_len.addr, align 4, !tbaa !9
  %and3 = and i32 %18, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %19 = load i64, i64* %pd, align 8, !tbaa !19
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20, align 2, !tbaa !7
  %22 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call6 = call i32 @rte_hash_crc_2byte(i16 zeroext %21, i32 %22)
  store i32 %call6, i32* %init_val.addr, align 4, !tbaa !9
  %23 = load i64, i64* %pd, align 8, !tbaa !19
  %add7 = add i64 %23, 2
  store i64 %add7, i64* %pd, align 8, !tbaa !19
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %24 = load i32, i32* %data_len.addr, align 4, !tbaa !9
  %and9 = and i32 %24, 1
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end8
  %25 = load i64, i64* %pd, align 8, !tbaa !19
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26, align 1, !tbaa !2
  %28 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call12 = call i32 @rte_hash_crc_1byte(i8 zeroext %27, i32 %28)
  store i32 %call12, i32* %init_val.addr, align 4, !tbaa !9
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end8
  %29 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %30 = bitcast i64* %pd to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #6
  %31 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #6
  ret i32 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: nounwind uwtable
define internal void @flow_rx_write(%struct.flextcp_pl_flowst* %fs, i32 %pos, i16 zeroext %len, i8* %src) #0 {
entry:
  %fs.addr = alloca %struct.flextcp_pl_flowst*, align 8
  %pos.addr = alloca i32, align 4
  %len.addr = alloca i16, align 2
  %src.addr = alloca i8*, align 8
  %part = alloca i32, align 4
  %rx_base = alloca i64, align 8
  store %struct.flextcp_pl_flowst* %fs, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  store i32 %pos, i32* %pos.addr, align 4, !tbaa !9
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = bitcast i32* %part to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i64* %rx_base to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %2 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %2, i32 0, i32 1
  %3 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %3, -64
  store i64 %and, i64* %rx_base, align 8, !tbaa !19
  %4 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %5 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv = zext i16 %5 to i32
  %add = add i32 %4, %conv
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %6, i32 0, i32 3
  %7 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp = icmp ule i32 %add, %7
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %rx_base, align 8, !tbaa !19
  %9 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %conv3 = zext i32 %9 to i64
  %add4 = add i64 %8, %conv3
  %10 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv5 = zext i16 %10 to i64
  %11 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @dma_write(i64 %add4, i64 %conv5, i8* %11)
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs.addr, align 8, !tbaa !5
  %rx_len6 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %12, i32 0, i32 3
  %13 = load i32, i32* %rx_len6, align 8, !tbaa !82
  %14 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %sub = sub i32 %13, %14
  store i32 %sub, i32* %part, align 4, !tbaa !9
  %15 = load i64, i64* %rx_base, align 8, !tbaa !19
  %16 = load i32, i32* %pos.addr, align 4, !tbaa !9
  %conv7 = zext i32 %16 to i64
  %add8 = add i64 %15, %conv7
  %17 = load i32, i32* %part, align 4, !tbaa !9
  %conv9 = zext i32 %17 to i64
  %18 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @dma_write(i64 %add8, i64 %conv9, i8* %18)
  %19 = load i64, i64* %rx_base, align 8, !tbaa !19
  %20 = load i16, i16* %len.addr, align 2, !tbaa !7
  %conv10 = zext i16 %20 to i32
  %21 = load i32, i32* %part, align 4, !tbaa !9
  %sub11 = sub i32 %conv10, %21
  %conv12 = zext i32 %sub11 to i64
  %22 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %23 = load i32, i32* %part, align 4, !tbaa !9
  %idx.ext = zext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %idx.ext
  call void @dma_write(i64 %19, i64 %conv12, i8* %add.ptr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = bitcast i64* %rx_base to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #6
  %25 = bitcast i32* %part to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @arx_cache_add(%struct.dataplane_context* %ctx, i16 zeroext %ctx_id, i64 %opaque, i32 %rx_bump, i32 %rx_pos, i32 %tx_bump, i16 zeroext %type_flags) #1 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %ctx_id.addr = alloca i16, align 2
  %opaque.addr = alloca i64, align 8
  %rx_bump.addr = alloca i32, align 4
  %rx_pos.addr = alloca i32, align 4
  %tx_bump.addr = alloca i32, align 4
  %type_flags.addr = alloca i16, align 2
  %id = alloca i16, align 2
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i16 %ctx_id, i16* %ctx_id.addr, align 2, !tbaa !7
  store i64 %opaque, i64* %opaque.addr, align 8, !tbaa !19
  store i32 %rx_bump, i32* %rx_bump.addr, align 4, !tbaa !9
  store i32 %rx_pos, i32* %rx_pos.addr, align 4, !tbaa !9
  store i32 %tx_bump, i32* %tx_bump.addr, align 4, !tbaa !9
  store i16 %type_flags, i16* %type_flags.addr, align 2, !tbaa !7
  %0 = bitcast i16* %id to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #6
  %1 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %1, i32 0, i32 8
  %2 = load i16, i16* %arx_num, align 8, !tbaa !85
  %inc = add i16 %2, 1
  store i16 %inc, i16* %arx_num, align 8, !tbaa !85
  store i16 %2, i16* %id, align 2, !tbaa !7
  %3 = load i16, i16* %ctx_id.addr, align 2, !tbaa !7
  %4 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_ctx = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %4, i32 0, i32 7
  %5 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom = zext i16 %5 to i64
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* %arx_ctx, i64 0, i64 %idxprom
  store i16 %3, i16* %arrayidx, align 2, !tbaa !7
  %6 = load i16, i16* %type_flags.addr, align 2, !tbaa !7
  %conv = zext i16 %6 to i32
  %and = and i32 %conv, 255
  %conv1 = trunc i32 %and to i8
  %7 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %7, i32 0, i32 6
  %8 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom2 = zext i16 %8 to i64
  %arrayidx3 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache, i64 0, i64 %idxprom2
  %type = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx3, i32 0, i32 1
  store volatile i8 %conv1, i8* %type, align 1, !tbaa !86
  %9 = load i64, i64* %opaque.addr, align 8, !tbaa !19
  %10 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache4 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %10, i32 0, i32 6
  %11 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom5 = zext i16 %11 to i64
  %arrayidx6 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache4, i64 0, i64 %idxprom5
  %msg = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx6, i32 0, i32 0
  %connupdate = bitcast %union.anon.5* %msg to %struct.flextcp_pl_arx_connupdate*
  %opaque7 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate, i32 0, i32 0
  store i64 %9, i64* %opaque7, align 8, !tbaa !2
  %12 = load i32, i32* %rx_bump.addr, align 4, !tbaa !9
  %13 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache8 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %13, i32 0, i32 6
  %14 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom9 = zext i16 %14 to i64
  %arrayidx10 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache8, i64 0, i64 %idxprom9
  %msg11 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx10, i32 0, i32 0
  %connupdate12 = bitcast %union.anon.5* %msg11 to %struct.flextcp_pl_arx_connupdate*
  %rx_bump13 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate12, i32 0, i32 1
  store i32 %12, i32* %rx_bump13, align 8, !tbaa !2
  %15 = load i32, i32* %rx_pos.addr, align 4, !tbaa !9
  %16 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache14 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %16, i32 0, i32 6
  %17 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom15 = zext i16 %17 to i64
  %arrayidx16 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache14, i64 0, i64 %idxprom15
  %msg17 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx16, i32 0, i32 0
  %connupdate18 = bitcast %union.anon.5* %msg17 to %struct.flextcp_pl_arx_connupdate*
  %rx_pos19 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate18, i32 0, i32 2
  store i32 %15, i32* %rx_pos19, align 4, !tbaa !2
  %18 = load i32, i32* %tx_bump.addr, align 4, !tbaa !9
  %19 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache20 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %19, i32 0, i32 6
  %20 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom21 = zext i16 %20 to i64
  %arrayidx22 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache20, i64 0, i64 %idxprom21
  %msg23 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx22, i32 0, i32 0
  %connupdate24 = bitcast %union.anon.5* %msg23 to %struct.flextcp_pl_arx_connupdate*
  %tx_bump25 = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate24, i32 0, i32 3
  store i32 %18, i32* %tx_bump25, align 8, !tbaa !2
  %21 = load i16, i16* %type_flags.addr, align 2, !tbaa !7
  %conv26 = zext i16 %21 to i32
  %shr = ashr i32 %conv26, 8
  %conv27 = trunc i32 %shr to i8
  %22 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %arx_cache28 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %22, i32 0, i32 6
  %23 = load i16, i16* %id, align 2, !tbaa !7
  %idxprom29 = zext i16 %23 to i64
  %arrayidx30 = getelementptr inbounds [16 x %struct.flextcp_pl_arx], [16 x %struct.flextcp_pl_arx]* %arx_cache28, i64 0, i64 %idxprom29
  %msg31 = getelementptr inbounds %struct.flextcp_pl_arx, %struct.flextcp_pl_arx* %arrayidx30, i32 0, i32 0
  %connupdate32 = bitcast %union.anon.5* %msg31 to %struct.flextcp_pl_arx_connupdate*
  %flags = getelementptr inbounds %struct.flextcp_pl_arx_connupdate, %struct.flextcp_pl_arx_connupdate* %connupdate32, i32 0, i32 4
  store i8 %conv27, i8* %flags, align 4, !tbaa !2
  %24 = bitcast i16* %id to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %24) #6
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @flow_tx_ack(%struct.dataplane_context* %ctx, i32 %seq, i32 %ack, i32 %rxwnd, i32 %echots, i32 %myts, %struct.network_buf_handle* %nbh, %struct.tcp_timestamp_opt* %ts_opt) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %seq.addr = alloca i32, align 4
  %ack.addr = alloca i32, align 4
  %rxwnd.addr = alloca i32, align 4
  %echots.addr = alloca i32, align 4
  %myts.addr = alloca i32, align 4
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts_opt.addr = alloca %struct.tcp_timestamp_opt*, align 8
  %p = alloca %struct.pkt_tcp*, align 8
  %eth = alloca %struct.eth_addr, align 1
  %ip = alloca %struct.beui32, align 1
  %port = alloca %struct.beui16, align 1
  %hdrlen = alloca i16, align 2
  %ecn_flags = alloca i16, align 2
  %tmp = alloca %struct.beui32, align 1
  %tmp39 = alloca %struct.beui32, align 1
  %tmp54 = alloca %struct.beui16, align 1
  %tmp61 = alloca %struct.beui16, align 1
  %tmp64 = alloca %struct.beui32, align 1
  %tmp67 = alloca %struct.beui32, align 1
  %tmp71 = alloca %struct.beui16, align 1
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32 %seq, i32* %seq.addr, align 4, !tbaa !9
  store i32 %ack, i32* %ack.addr, align 4, !tbaa !9
  store i32 %rxwnd, i32* %rxwnd.addr, align 4, !tbaa !9
  store i32 %echots, i32* %echots.addr, align 4, !tbaa !9
  store i32 %myts, i32* %myts.addr, align 4, !tbaa !9
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store %struct.tcp_timestamp_opt* %ts_opt, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8, !tbaa !5
  %0 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* %1) #6
  %2 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = bitcast %struct.beui16* %port to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3) #6
  %4 = bitcast i16* %hdrlen to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4) #6
  %5 = bitcast i16* %ecn_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %5) #6
  store i16 0, i16* %ecn_flags, align 2, !tbaa !7
  %6 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %6)
  %7 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %7, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %8 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth1 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %8, i32 0, i32 0
  %src = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth1, i32 0, i32 1
  %9 = bitcast %struct.eth_addr* %eth to i8*
  %10 = bitcast %struct.eth_addr* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 6, i1 false), !tbaa.struct !42
  %11 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %11, i32 0, i32 0
  %src3 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth2, i32 0, i32 1
  %12 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth4 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %12, i32 0, i32 0
  %dest = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth4, i32 0, i32 0
  %13 = bitcast %struct.eth_addr* %src3 to i8*
  %14 = bitcast %struct.eth_addr* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 6, i1 false), !tbaa.struct !42
  %15 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %eth5 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %15, i32 0, i32 0
  %dest6 = getelementptr inbounds %struct.eth_hdr, %struct.eth_hdr* %eth5, i32 0, i32 0
  %16 = bitcast %struct.eth_addr* %dest6 to i8*
  %17 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %17, i64 6, i1 false), !tbaa.struct !42
  %18 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip7 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %18, i32 0, i32 1
  %src8 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip7, i32 0, i32 8
  %19 = bitcast %struct.beui32* %ip to i8*
  %20 = bitcast %struct.beui32* %src8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %20, i64 4, i1 false), !tbaa.struct !53
  %21 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip9 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %21, i32 0, i32 1
  %src10 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip9, i32 0, i32 8
  %22 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip11 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %22, i32 0, i32 1
  %dest12 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip11, i32 0, i32 9
  %23 = bitcast %struct.beui32* %src10 to i8*
  %24 = bitcast %struct.beui32* %dest12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 4, i1 false), !tbaa.struct !53
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip13 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 1
  %dest14 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip13, i32 0, i32 9
  %26 = bitcast %struct.beui32* %dest14 to i8*
  %27 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 4, i1 false), !tbaa.struct !53
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 2
  %src15 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 0
  %29 = bitcast %struct.beui16* %port to i8*
  %30 = bitcast %struct.beui16* %src15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %30, i64 2, i1 false), !tbaa.struct !43
  %31 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp16 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %31, i32 0, i32 2
  %src17 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp16, i32 0, i32 0
  %32 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %32, i32 0, i32 2
  %dest19 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp18, i32 0, i32 1
  %33 = bitcast %struct.beui16* %src17 to i8*
  %34 = bitcast %struct.beui16* %dest19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 2, i1 false), !tbaa.struct !43
  %35 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp20 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %35, i32 0, i32 2
  %dest21 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp20, i32 0, i32 1
  %36 = bitcast %struct.beui16* %dest21 to i8*
  %37 = bitcast %struct.beui16* %port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 2, i1 false), !tbaa.struct !43
  %38 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp22 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %38, i32 0, i32 2
  %_hdrlen_rsvd_flags = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp22, i32 0, i32 4
  %39 = load i16, i16* %_hdrlen_rsvd_flags, align 1, !tbaa !54
  %call23 = call zeroext i16 @__bswap_16(i16 zeroext %39)
  %conv = zext i16 %call23 to i32
  %shr = ashr i32 %conv, 12
  %sub = sub nsw i32 %shr, 5
  %mul = mul nsw i32 %sub, 4
  %conv24 = sext i32 %mul to i64
  %add = add i64 54, %conv24
  %conv25 = trunc i64 %add to i16
  store i16 %conv25, i16* %hdrlen, align 2, !tbaa !7
  %40 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip26 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %40, i32 0, i32 1
  %_tos = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip26, i32 0, i32 1
  %41 = load i8, i8* %_tos, align 1, !tbaa !49
  %conv27 = zext i8 %41 to i32
  %and = and i32 %conv27, 3
  %cmp = icmp eq i32 %and, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i16 64, i16* %ecn_flags, align 2, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %42 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip29 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %42, i32 0, i32 1
  %_tos30 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip29, i32 0, i32 1
  %43 = load i8, i8* %_tos30, align 1, !tbaa !49
  %conv31 = zext i8 %43 to i32
  %and32 = and i32 %conv31, 4092
  %conv33 = trunc i32 %and32 to i8
  %44 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip34 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %44, i32 0, i32 1
  %_tos35 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip34, i32 0, i32 1
  store i8 %conv33, i8* %_tos35, align 1, !tbaa !49
  %45 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp36 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %45, i32 0, i32 2
  %seqno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp36, i32 0, i32 2
  %46 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #6
  %47 = load i32, i32* %seq.addr, align 4, !tbaa !9
  %call37 = call i32 @t_beui32(i32 %47)
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp, i32 0, i32 0
  store i32 %call37, i32* %coerce.dive, align 1
  %48 = bitcast %struct.beui32* %seqno to i8*
  %49 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %49, i64 4, i1 false), !tbaa.struct !53
  %50 = bitcast %struct.beui32* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #6
  %51 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp38 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %51, i32 0, i32 2
  %ackno = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp38, i32 0, i32 3
  %52 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %52) #6
  %53 = load i32, i32* %ack.addr, align 4, !tbaa !9
  %call40 = call i32 @t_beui32(i32 %53)
  %coerce.dive41 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp39, i32 0, i32 0
  store i32 %call40, i32* %coerce.dive41, align 1
  %54 = bitcast %struct.beui32* %ackno to i8*
  %55 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 4, i1 false), !tbaa.struct !53
  %56 = bitcast %struct.beui32* %tmp39 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #6
  %57 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp42 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %57, i32 0, i32 2
  %_hdrlen_rsvd_flags43 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp42, i32 0, i32 4
  %58 = load i16, i16* %_hdrlen_rsvd_flags43, align 1, !tbaa !54
  %call44 = call zeroext i16 @__bswap_16(i16 zeroext %58)
  %conv45 = zext i16 %call44 to i32
  %shr46 = ashr i32 %conv45, 12
  %shl = shl i32 %shr46, 12
  %59 = load i16, i16* %ecn_flags, align 2, !tbaa !7
  %conv47 = zext i16 %59 to i32
  %or = or i32 16, %conv47
  %or48 = or i32 %shl, %or
  %conv49 = trunc i32 %or48 to i16
  %call50 = call zeroext i16 @__bswap_16(i16 zeroext %conv49)
  %60 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp51 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %60, i32 0, i32 2
  %_hdrlen_rsvd_flags52 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp51, i32 0, i32 4
  store i16 %call50, i16* %_hdrlen_rsvd_flags52, align 1, !tbaa !54
  %61 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp53 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %61, i32 0, i32 2
  %wnd = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp53, i32 0, i32 5
  %62 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %62) #6
  %63 = load i32, i32* %rxwnd.addr, align 4, !tbaa !9
  %cmp55 = icmp ult i32 %63, 65535
  br i1 %cmp55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %64 = load i32, i32* %rxwnd.addr, align 4, !tbaa !9
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %64, %cond.true ], [ 65535, %cond.false ]
  %conv57 = trunc i32 %cond to i16
  %call58 = call i16 @t_beui16(i16 zeroext %conv57)
  %coerce.dive59 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp54, i32 0, i32 0
  store i16 %call58, i16* %coerce.dive59, align 1
  %65 = bitcast %struct.beui16* %wnd to i8*
  %66 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 2, i1 false), !tbaa.struct !43
  %67 = bitcast %struct.beui16* %tmp54 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %67) #6
  %68 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp60 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %68, i32 0, i32 2
  %urgp = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp60, i32 0, i32 7
  %69 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %69) #6
  %call62 = call i16 @t_beui16(i16 zeroext 0)
  %coerce.dive63 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp61, i32 0, i32 0
  store i16 %call62, i16* %coerce.dive63, align 1
  %70 = bitcast %struct.beui16* %urgp to i8*
  %71 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 2, i1 false), !tbaa.struct !43
  %72 = bitcast %struct.beui16* %tmp61 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %72) #6
  %73 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8, !tbaa !5
  %ts_val = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %73, i32 0, i32 2
  %74 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %74) #6
  %75 = load i32, i32* %myts.addr, align 4, !tbaa !9
  %call65 = call i32 @t_beui32(i32 %75)
  %coerce.dive66 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp64, i32 0, i32 0
  store i32 %call65, i32* %coerce.dive66, align 1
  %76 = bitcast %struct.beui32* %ts_val to i8*
  %77 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 4, i1 false), !tbaa.struct !53
  %78 = bitcast %struct.beui32* %tmp64 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %78) #6
  %79 = load %struct.tcp_timestamp_opt*, %struct.tcp_timestamp_opt** %ts_opt.addr, align 8, !tbaa !5
  %ts_ecr = getelementptr inbounds %struct.tcp_timestamp_opt, %struct.tcp_timestamp_opt* %79, i32 0, i32 3
  %80 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %80) #6
  %81 = load i32, i32* %echots.addr, align 4, !tbaa !9
  %call68 = call i32 @t_beui32(i32 %81)
  %coerce.dive69 = getelementptr inbounds %struct.beui32, %struct.beui32* %tmp67, i32 0, i32 0
  store i32 %call68, i32* %coerce.dive69, align 1
  %82 = bitcast %struct.beui32* %ts_ecr to i8*
  %83 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %83, i64 4, i1 false), !tbaa.struct !53
  %84 = bitcast %struct.beui32* %tmp67 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #6
  %85 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip70 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %85, i32 0, i32 1
  %len = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip70, i32 0, i32 2
  %86 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %86) #6
  %87 = load i16, i16* %hdrlen, align 2, !tbaa !7
  %conv72 = zext i16 %87 to i64
  %sub73 = sub i64 %conv72, 14
  %conv74 = trunc i64 %sub73 to i16
  %call75 = call i16 @t_beui16(i16 zeroext %conv74)
  %coerce.dive76 = getelementptr inbounds %struct.beui16, %struct.beui16* %tmp71, i32 0, i32 0
  store i16 %call75, i16* %coerce.dive76, align 1
  %88 = bitcast %struct.beui16* %len to i8*
  %89 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %89, i64 2, i1 false), !tbaa.struct !43
  %90 = bitcast %struct.beui16* %tmp71 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %90) #6
  %91 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip77 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %91, i32 0, i32 1
  %ttl = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip77, i32 0, i32 5
  store i8 -1, i8* %ttl, align 1, !tbaa !50
  %92 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %93 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %94 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip78 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %94, i32 0, i32 1
  %src79 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip78, i32 0, i32 8
  %95 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip80 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %95, i32 0, i32 1
  %dest81 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip80, i32 0, i32 9
  %96 = load i16, i16* %hdrlen, align 2, !tbaa !7
  %conv82 = zext i16 %96 to i64
  %sub83 = sub i64 %conv82, 34
  %conv84 = trunc i64 %sub83 to i16
  %coerce.dive85 = getelementptr inbounds %struct.beui32, %struct.beui32* %src79, i32 0, i32 0
  %97 = load i32, i32* %coerce.dive85, align 1
  %coerce.dive86 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest81, i32 0, i32 0
  %98 = load i32, i32* %coerce.dive86, align 1
  call void @tcp_checksums(%struct.network_buf_handle* %92, %struct.pkt_tcp* %93, i32 %97, i32 %98, i16 zeroext %conv84)
  %99 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %100 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %101 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %call87 = call zeroext i16 @network_buf_off(%struct.network_buf_handle* %101)
  %102 = load i16, i16* %hdrlen, align 2, !tbaa !7
  call void @tx_send(%struct.dataplane_context* %99, %struct.network_buf_handle* %100, i16 zeroext %call87, i16 zeroext %102)
  %103 = bitcast i16* %ecn_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %103) #6
  %104 = bitcast i16* %hdrlen to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %104) #6
  %105 = bitcast %struct.beui16* %port to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %105) #6
  %106 = bitcast %struct.beui32* %ip to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %106) #6
  %107 = bitcast %struct.eth_addr* %eth to i8*
  call void @llvm.lifetime.end.p0i8(i64 6, i8* %107) #6
  %108 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108) #6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fast_flows_bump(%struct.dataplane_context* %ctx, i32 %flow_id, i16 zeroext %bump_seq, i32 %rx_tail, i32 %tx_head, i8 zeroext %flags, %struct.network_buf_handle* %nbh, i32 %ts) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %flow_id.addr = alloca i32, align 4
  %bump_seq.addr = alloca i16, align 2
  %rx_tail.addr = alloca i32, align 4
  %tx_head.addr = alloca i32, align 4
  %flags.addr = alloca i8, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %ts.addr = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %tail = alloca i32, align 4
  %rx_avail_prev = alloca i32, align 4
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32 %flow_id, i32* %flow_id.addr, align 4, !tbaa !9
  store i16 %bump_seq, i16* %bump_seq.addr, align 2, !tbaa !7
  store i32 %rx_tail, i32* %rx_tail.addr, align 4, !tbaa !9
  store i32 %tx_head, i32* %tx_head.addr, align 4, !tbaa !9
  store i8 %flags, i8* %flags.addr, align 1, !tbaa !2
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store i32 %ts, i32* %ts.addr, align 4, !tbaa !9
  %0 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %1, i32 0, i32 1
  %2 = load i32, i32* %flow_id.addr, align 4, !tbaa !9
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %3 = bitcast i32* %tail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %4 = bitcast i32* %rx_avail_prev to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #6
  %5 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #6
  %6 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #6
  %7 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #6
  store i32 -1, i32* %ret, align 4, !tbaa !9
  %8 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %8, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %9 = load i16, i16* %bump_seq.addr, align 2, !tbaa !7
  %conv = zext i16 %9 to i32
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %bump_seq1 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %10, i32 0, i32 12
  %11 = load i16, i16* %bump_seq1, align 2, !tbaa !88
  %conv2 = zext i16 %11 to i32
  %cmp = icmp sge i32 %conv, %conv2
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %12 = load i16, i16* %bump_seq.addr, align 2, !tbaa !7
  %conv4 = zext i16 %12 to i32
  %13 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %bump_seq5 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %13, i32 0, i32 12
  %14 = load i16, i16* %bump_seq5, align 2, !tbaa !88
  %conv6 = zext i16 %14 to i32
  %sub = sub nsw i32 %conv4, %conv6
  %cmp7 = icmp sgt i32 %sub, 32767
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %15 = load i16, i16* %bump_seq.addr, align 2, !tbaa !7
  %conv9 = zext i16 %15 to i32
  %16 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %bump_seq10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %16, i32 0, i32 12
  %17 = load i16, i16* %bump_seq10, align 2, !tbaa !88
  %conv11 = zext i16 %17 to i32
  %cmp12 = icmp slt i32 %conv9, %conv11
  br i1 %cmp12, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %lor.lhs.false
  %18 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %bump_seq15 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %18, i32 0, i32 12
  %19 = load i16, i16* %bump_seq15, align 2, !tbaa !88
  %conv16 = zext i16 %19 to i32
  %cmp17 = icmp slt i32 %conv16, 49149
  br i1 %cmp17, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %land.lhs.true14
  %20 = load i16, i16* %bump_seq.addr, align 2, !tbaa !7
  %conv20 = zext i16 %20 to i32
  %cmp21 = icmp sgt i32 %conv20, 16383
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false19, %land.lhs.true14, %land.lhs.true
  br label %unlock

if.end:                                           ; preds = %lor.lhs.false19, %lor.lhs.false
  %21 = load i16, i16* %bump_seq.addr, align 2, !tbaa !7
  %22 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %bump_seq23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %22, i32 0, i32 12
  store i16 %21, i16* %bump_seq23, align 2, !tbaa !88
  %23 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %23, i32 0, i32 1
  %24 = load i64, i64* %rx_base_sp, align 8, !tbaa !30
  %and = and i64 %24, 16
  %cmp24 = icmp eq i64 %and, 16
  br i1 %cmp24, label %land.lhs.true26, label %if.else

land.lhs.true26:                                  ; preds = %if.end
  %25 = load i32, i32* %tx_head.addr, align 4, !tbaa !9
  %26 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_head27 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %26, i32 0, i32 24
  %27 = load i32, i32* %tx_head27, align 4, !tbaa !37
  %cmp28 = icmp ne i32 %25, %27
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %land.lhs.true26
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.15, i32 0, i32 0))
  %29 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_head31 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %29, i32 0, i32 24
  %30 = load i32, i32* %tx_head31, align 4, !tbaa !37
  store i32 %30, i32* %tx_head.addr, align 4, !tbaa !9
  br label %if.end46

if.else:                                          ; preds = %land.lhs.true26, %if.end
  %31 = load i8, i8* %flags.addr, align 1, !tbaa !2
  %conv32 = zext i8 %31 to i32
  %and33 = and i32 %conv32, 1
  %cmp34 = icmp eq i32 %and33, 1
  br i1 %cmp34, label %land.lhs.true36, label %if.end45

land.lhs.true36:                                  ; preds = %if.else
  %32 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp37 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %32, i32 0, i32 1
  %33 = load i64, i64* %rx_base_sp37, align 8, !tbaa !30
  %and38 = and i64 %33, 16
  %tobool = icmp ne i64 %and38, 0
  br i1 %tobool, label %if.end45, label %land.lhs.true39

land.lhs.true39:                                  ; preds = %land.lhs.true36
  %34 = load i32, i32* %tx_head.addr, align 4, !tbaa !9
  %35 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_head40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %35, i32 0, i32 24
  %36 = load i32, i32* %tx_head40, align 4, !tbaa !37
  %cmp41 = icmp eq i32 %34, %36
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %land.lhs.true39
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16, i32 0, i32 0))
  br label %unlock

if.end45:                                         ; preds = %land.lhs.true39, %land.lhs.true36, %if.else
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  %38 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call47 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %38, i32* null)
  store i32 %call47, i32* %old_avail, align 4, !tbaa !9
  %39 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call48 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %39, i32* %tx_head.addr)
  store i32 %call48, i32* %new_avail, align 4, !tbaa !9
  %40 = load i8, i8* %flags.addr, align 1, !tbaa !2
  %conv49 = zext i8 %40 to i32
  %and50 = and i32 %conv49, 1
  %cmp51 = icmp eq i32 %and50, 1
  br i1 %cmp51, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end46
  %41 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp54 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %41, i32 0, i32 1
  %42 = load i64, i64* %rx_base_sp54, align 8, !tbaa !30
  %and55 = and i64 %42, 16
  %tobool56 = icmp ne i64 %and55, 0
  br i1 %tobool56, label %if.end59, label %if.then57

if.then57:                                        ; preds = %land.lhs.true53
  %43 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp58 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %43, i32 0, i32 1
  %44 = load i64, i64* %rx_base_sp58, align 8, !tbaa !30
  %or = or i64 %44, 16
  store i64 %or, i64* %rx_base_sp58, align 8, !tbaa !30
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %land.lhs.true53, %if.end46
  %45 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_base_sp60 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %45, i32 0, i32 1
  %46 = load i64, i64* %rx_base_sp60, align 8, !tbaa !30
  %and61 = and i64 %46, 2
  %tobool62 = icmp ne i64 %and61, 0
  br i1 %tobool62, label %if.else75, label %if.then63

if.then63:                                        ; preds = %if.end59
  %47 = load i32, i32* %old_avail, align 4, !tbaa !9
  %48 = load i32, i32* %new_avail, align 4, !tbaa !9
  %cmp64 = icmp ult i32 %47, %48
  br i1 %cmp64, label %if.then66, label %if.end74

if.then66:                                        ; preds = %if.then63
  %49 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %49, i32 0, i32 1
  %50 = load i32, i32* %flow_id.addr, align 4, !tbaa !9
  %51 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %51, i32 0, i32 26
  %52 = load i32, i32* %tx_rate, align 4, !tbaa !60
  %53 = load i32, i32* %new_avail, align 4, !tbaa !9
  %54 = load i32, i32* %old_avail, align 4, !tbaa !9
  %sub67 = sub i32 %53, %54
  %call68 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %50, i32 %52, i32 %sub67, i16 zeroext 1448, i8 zeroext 19)
  %cmp69 = icmp ne i32 %call68, 0
  br i1 %cmp69, label %if.then71, label %if.end73

if.then71:                                        ; preds = %if.then66
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end73:                                         ; preds = %if.then66
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then63
  br label %if.end90

if.else75:                                        ; preds = %if.end59
  %56 = load i32, i32* %old_avail, align 4, !tbaa !9
  %cmp76 = icmp eq i32 %56, 0
  br i1 %cmp76, label %land.lhs.true78, label %if.end89

land.lhs.true78:                                  ; preds = %if.else75
  %57 = load i32, i32* %new_avail, align 4, !tbaa !9
  %cmp79 = icmp ne i32 %57, 0
  br i1 %cmp79, label %if.then81, label %if.end89

if.then81:                                        ; preds = %land.lhs.true78
  %58 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman82 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %58, i32 0, i32 1
  %59 = load i32, i32* %flow_id.addr, align 4, !tbaa !9
  %call83 = call i32 @qman_set(%struct.qman_thread* %qman82, i32 %59, i32 0, i32 1, i16 zeroext 1, i8 zeroext 19)
  %cmp84 = icmp ne i32 %call83, 0
  br i1 %cmp84, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.then81
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end88:                                         ; preds = %if.then81
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %land.lhs.true78, %if.else75
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end74
  %61 = load i32, i32* %tx_head.addr, align 4, !tbaa !9
  %62 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_head91 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %62, i32 0, i32 24
  store i32 %61, i32* %tx_head91, align 4, !tbaa !37
  %63 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_pos = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %63, i32 0, i32 15
  %64 = load i32, i32* %rx_next_pos, align 64, !tbaa !68
  %65 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %65, i32 0, i32 14
  %66 = load i32, i32* %rx_avail, align 4, !tbaa !33
  %add = add i32 %64, %66
  store i32 %add, i32* %tail, align 4, !tbaa !9
  %67 = load i32, i32* %tail, align 4, !tbaa !9
  %68 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %68, i32 0, i32 3
  %69 = load i32, i32* %rx_len, align 8, !tbaa !82
  %cmp92 = icmp uge i32 %67, %69
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %if.end90
  %70 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len95 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %70, i32 0, i32 3
  %71 = load i32, i32* %rx_len95, align 8, !tbaa !82
  %72 = load i32, i32* %tail, align 4, !tbaa !9
  %sub96 = sub i32 %72, %71
  store i32 %sub96, i32* %tail, align 4, !tbaa !9
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.end90
  %73 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail98 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %73, i32 0, i32 14
  %74 = load i32, i32* %rx_avail98, align 4, !tbaa !33
  store i32 %74, i32* %rx_avail_prev, align 4, !tbaa !9
  %75 = load i32, i32* %rx_tail.addr, align 4, !tbaa !9
  %76 = load i32, i32* %tail, align 4, !tbaa !9
  %cmp99 = icmp uge i32 %75, %76
  br i1 %cmp99, label %if.then101, label %if.else105

if.then101:                                       ; preds = %if.end97
  %77 = load i32, i32* %rx_tail.addr, align 4, !tbaa !9
  %78 = load i32, i32* %tail, align 4, !tbaa !9
  %sub102 = sub i32 %77, %78
  %79 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail103 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %79, i32 0, i32 14
  %80 = load i32, i32* %rx_avail103, align 4, !tbaa !33
  %add104 = add i32 %80, %sub102
  store i32 %add104, i32* %rx_avail103, align 4, !tbaa !33
  br label %if.end111

if.else105:                                       ; preds = %if.end97
  %81 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_len106 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %81, i32 0, i32 3
  %82 = load i32, i32* %rx_len106, align 8, !tbaa !82
  %83 = load i32, i32* %tail, align 4, !tbaa !9
  %sub107 = sub i32 %82, %83
  %84 = load i32, i32* %rx_tail.addr, align 4, !tbaa !9
  %add108 = add i32 %sub107, %84
  %85 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail109 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %85, i32 0, i32 14
  %86 = load i32, i32* %rx_avail109, align 4, !tbaa !33
  %add110 = add i32 %86, %add108
  store i32 %add110, i32* %rx_avail109, align 4, !tbaa !33
  br label %if.end111

if.end111:                                        ; preds = %if.else105, %if.then101
  %87 = load i32, i32* %new_avail, align 4, !tbaa !9
  %cmp112 = icmp eq i32 %87, 0
  br i1 %cmp112, label %land.lhs.true114, label %if.end123

land.lhs.true114:                                 ; preds = %if.end111
  %88 = load i32, i32* %rx_avail_prev, align 4, !tbaa !9
  %cmp115 = icmp eq i32 %88, 0
  br i1 %cmp115, label %land.lhs.true117, label %if.end123

land.lhs.true117:                                 ; preds = %land.lhs.true114
  %89 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail118 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %89, i32 0, i32 14
  %90 = load i32, i32* %rx_avail118, align 4, !tbaa !33
  %cmp119 = icmp ne i32 %90, 0
  br i1 %cmp119, label %if.then121, label %if.end123

if.then121:                                       ; preds = %land.lhs.true117
  %91 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %92 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %93 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %94 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %94, i32 0, i32 23
  %95 = load i32, i32* %tx_next_seq, align 32, !tbaa !32
  %96 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_next_seq = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %96, i32 0, i32 16
  %97 = load i32, i32* %rx_next_seq, align 4, !tbaa !34
  %98 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %rx_avail122 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %98, i32 0, i32 14
  %99 = load i32, i32* %rx_avail122, align 4, !tbaa !33
  %100 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_next_ts = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %100, i32 0, i32 25
  %101 = load i32, i32* %tx_next_ts, align 8, !tbaa !38
  %102 = load i32, i32* %ts.addr, align 4, !tbaa !9
  call void @flow_tx_segment(%struct.dataplane_context* %91, %struct.network_buf_handle* %92, %struct.flextcp_pl_flowst* %93, i32 %95, i32 %97, i32 %99, i16 zeroext 0, i32 0, i32 %101, i32 %102, i8 zeroext 0)
  store i32 0, i32* %ret, align 4, !tbaa !9
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %land.lhs.true117, %land.lhs.true114, %if.end111
  br label %unlock

unlock:                                           ; preds = %if.end123, %if.then43, %if.then
  %103 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock124 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %103, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock124)
  %104 = load i32, i32* %ret, align 4, !tbaa !9
  %105 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %105) #6
  %106 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %106) #6
  %107 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %107) #6
  %108 = bitcast i32* %rx_avail_prev to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %108) #6
  %109 = bitcast i32* %tail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #6
  %110 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %110) #6
  ret i32 %104
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_retransmit(%struct.dataplane_context* %ctx, i32 %flow_id) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %flow_id.addr = alloca i32, align 4
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  %old_avail = alloca i32, align 4
  %new_avail = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store i32 %flow_id, i32* %flow_id.addr, align 4, !tbaa !9
  %0 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %1, i32 0, i32 1
  %2 = load i32, i32* %flow_id.addr, align 4, !tbaa !9
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom
  store %struct.flextcp_pl_flowst* %arrayidx, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %3 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %4 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #6
  store i32 -1, i32* %new_avail, align 4, !tbaa !9
  %5 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %5, i32 0, i32 13
  call void @util_spin_lock(i32* %lock)
  %6 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %6, i32* null)
  store i32 %call, i32* %old_avail, align 4, !tbaa !9
  %7 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_sent = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %7, i32 0, i32 21
  %8 = load i32, i32* %tx_sent, align 8, !tbaa !36
  %cmp = icmp eq i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out

if.end:                                           ; preds = %entry
  %9 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  call void @flow_reset_retransmit(%struct.flextcp_pl_flowst* %9)
  %10 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %call1 = call i32 @tcp_txavail(%struct.flextcp_pl_flowst* %10, i32* null)
  store i32 %call1, i32* %new_avail, align 4, !tbaa !9
  %11 = load i32, i32* %new_avail, align 4, !tbaa !9
  %12 = load i32, i32* %old_avail, align 4, !tbaa !9
  %cmp2 = icmp ugt i32 %11, %12
  br i1 %cmp2, label %if.then3, label %if.end9

if.then3:                                         ; preds = %if.end
  %13 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %qman = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %13, i32 0, i32 1
  %14 = load i32, i32* %flow_id.addr, align 4, !tbaa !9
  %15 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %tx_rate = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %15, i32 0, i32 26
  %16 = load i32, i32* %tx_rate, align 4, !tbaa !60
  %17 = load i32, i32* %new_avail, align 4, !tbaa !9
  %18 = load i32, i32* %old_avail, align 4, !tbaa !9
  %sub = sub i32 %17, %18
  %call4 = call i32 @qman_set(%struct.qman_thread* %qman, i32 %14, i32 %16, i32 %sub, i16 zeroext 1448, i8 zeroext 19)
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.then3
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end8:                                          ; preds = %if.then3
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  br label %out

out:                                              ; preds = %if.end9, %if.then
  %20 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %lock10 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %20, i32 0, i32 13
  call void @util_spin_unlock(i32* %lock10)
  %21 = bitcast i32* %new_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #6
  %22 = bitcast i32* %old_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #6
  %23 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @fast_flows_packet_fss(%struct.dataplane_context* %ctx, %struct.network_buf_handle** %nbhs, i8** %fss, i16 zeroext %n) #0 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbhs.addr = alloca %struct.network_buf_handle**, align 8
  %fss.addr = alloca i8**, align 8
  %n.addr = alloca i16, align 2
  %saved_stack = alloca i8*, align 8
  %__vla_expr = alloca i64, align 8
  %h = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %eh = alloca i32, align 4
  %fid = alloca i32, align 4
  %ffid = alloca i32, align 4
  %i = alloca i16, align 2
  %p = alloca %struct.pkt_tcp*, align 8
  %key = alloca %struct.flow_key, align 1
  %e = alloca %struct.flextcp_pl_flowhte*, align 8
  %fs = alloca %struct.flextcp_pl_flowst*, align 8
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.network_buf_handle** %nbhs, %struct.network_buf_handle*** %nbhs.addr, align 8, !tbaa !5
  store i8** %fss, i8*** %fss.addr, align 8, !tbaa !5
  store i16 %n, i16* %n.addr, align 2, !tbaa !7
  %0 = load i16, i16* %n.addr, align 2, !tbaa !7
  %1 = zext i16 %0 to i64
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 8
  %vla = alloca i32, i64 %1, align 16
  store i64 %1, i64* %__vla_expr, align 8
  %3 = bitcast i32* %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %4 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #6
  %5 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #6
  %6 = bitcast i32* %eh to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #6
  %7 = bitcast i32* %fid to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #6
  %8 = bitcast i32* %ffid to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #6
  %9 = bitcast i16* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %9) #6
  %10 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #6
  %p1 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.var.annotation(i8* %p1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1018)
  %11 = bitcast %struct.flow_key* %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* %11) #6
  %12 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #6
  %e2 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.var.annotation(i8* %e2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1020)
  %13 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #6
  %fs3 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.var.annotation(i8* %fs3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i32 1021)
  store i16 0, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i16, i16* %i, align 2, !tbaa !7
  %conv = zext i16 %14 to i32
  %15 = load i16, i16* %n.addr, align 2, !tbaa !7
  %conv4 = zext i16 %15 to i32
  %cmp = icmp slt i32 %conv, %conv4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.network_buf_handle**, %struct.network_buf_handle*** %nbhs.addr, align 8, !tbaa !5
  %17 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom = zext i16 %17 to i64
  %arrayidx = getelementptr inbounds %struct.network_buf_handle*, %struct.network_buf_handle** %16, i64 %idxprom
  %18 = load %struct.network_buf_handle*, %struct.network_buf_handle** %arrayidx, align 8, !tbaa !5
  %call = call i8* @network_buf_bufoff(%struct.network_buf_handle* %18)
  %19 = bitcast i8* %call to %struct.pkt_tcp*
  store %struct.pkt_tcp* %19, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %20 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %21 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom6 = zext i16 %21 to i64
  %arrayidx7 = getelementptr inbounds i8*, i8** %20, i64 %idxprom6
  store i8* null, i8** %arrayidx7, align 8, !tbaa !5
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 0
  %22 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %22, i32 0, i32 1
  %dest = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 9
  %23 = bitcast %struct.beui32* %local_ip to i8*
  %24 = bitcast %struct.beui32* %dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 4, i1 false), !tbaa.struct !53
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 1
  %25 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip8 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %25, i32 0, i32 1
  %src = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip8, i32 0, i32 8
  %26 = bitcast %struct.beui32* %remote_ip to i8*
  %27 = bitcast %struct.beui32* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 4, i1 false), !tbaa.struct !53
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 2
  %28 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %28, i32 0, i32 2
  %dest9 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 1
  %29 = bitcast %struct.beui16* %local_port to i8*
  %30 = bitcast %struct.beui16* %dest9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %30, i64 2, i1 false), !tbaa.struct !43
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %key, i32 0, i32 3
  %31 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp10 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %31, i32 0, i32 2
  %src11 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp10, i32 0, i32 0
  %32 = bitcast %struct.beui16* %remote_port to i8*
  %33 = bitcast %struct.beui16* %src11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 2, i1 false), !tbaa.struct !43
  %call12 = call i32 @flow_hash(%struct.flow_key* %key)
  store i32 %call12, i32* %h, align 4, !tbaa !9
  %34 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowht = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %34, i32 0, i32 2
  %35 = load i32, i32* %h, align 4, !tbaa !9
  %idxprom13 = zext i32 %35 to i64
  %arrayidx14 = getelementptr inbounds [262144 x %struct.flextcp_pl_flowhte], [262144 x %struct.flextcp_pl_flowhte]* %flowht, i64 0, i64 %idxprom13
  store %struct.flextcp_pl_flowhte* %arrayidx14, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %36 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %flow_id = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %36, i32 0, i32 0
  %37 = load i32, i32* %flow_id, align 1, !tbaa !89
  store i32 %37, i32* %fid, align 4, !tbaa !9
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !91
  %38 = load %struct.flextcp_pl_flowhte*, %struct.flextcp_pl_flowhte** %e, align 8, !tbaa !5
  %flow_hash = getelementptr inbounds %struct.flextcp_pl_flowhte, %struct.flextcp_pl_flowhte* %38, i32 0, i32 1
  %39 = load i32, i32* %flow_hash, align 1, !tbaa !92
  store i32 %39, i32* %eh, align 4, !tbaa !9
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !93
  %40 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %40, i32 0, i32 1
  %41 = load i32, i32* %fid, align 4, !tbaa !9
  %idxprom15 = zext i32 %41 to i64
  %arrayidx16 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst, i64 0, i64 %idxprom15
  store %struct.flextcp_pl_flowst* %arrayidx16, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %42 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %local_ip17 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %42, i32 0, i32 5
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip17, i32 0, i32 0
  %43 = load i32, i32* %x, align 32, !tbaa !94
  %44 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip18 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %44, i32 0, i32 1
  %dest19 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip18, i32 0, i32 9
  %x20 = getelementptr inbounds %struct.beui32, %struct.beui32* %dest19, i32 0, i32 0
  %45 = load i32, i32* %x20, align 1, !tbaa !95
  %cmp21 = icmp eq i32 %43, %45
  %conv22 = zext i1 %cmp21 to i32
  %46 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %remote_ip23 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %46, i32 0, i32 6
  %x24 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip23, i32 0, i32 0
  %47 = load i32, i32* %x24, align 4, !tbaa !96
  %48 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %ip25 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %48, i32 0, i32 1
  %src26 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip25, i32 0, i32 8
  %x27 = getelementptr inbounds %struct.beui32, %struct.beui32* %src26, i32 0, i32 0
  %49 = load i32, i32* %x27, align 1, !tbaa !97
  %cmp28 = icmp eq i32 %47, %49
  %conv29 = zext i1 %cmp28 to i32
  %and = and i32 %conv22, %conv29
  %50 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %local_port30 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %50, i32 0, i32 7
  %x31 = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port30, i32 0, i32 0
  %51 = load i16, i16* %x31, align 8, !tbaa !98
  %conv32 = zext i16 %51 to i32
  %52 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp33 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %52, i32 0, i32 2
  %dest34 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp33, i32 0, i32 1
  %x35 = getelementptr inbounds %struct.beui16, %struct.beui16* %dest34, i32 0, i32 0
  %53 = load i16, i16* %x35, align 1, !tbaa !99
  %conv36 = zext i16 %53 to i32
  %cmp37 = icmp eq i32 %conv32, %conv36
  %conv38 = zext i1 %cmp37 to i32
  %and39 = and i32 %and, %conv38
  %54 = load %struct.flextcp_pl_flowst*, %struct.flextcp_pl_flowst** %fs, align 8, !tbaa !5
  %remote_port40 = getelementptr inbounds %struct.flextcp_pl_flowst, %struct.flextcp_pl_flowst* %54, i32 0, i32 8
  %x41 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port40, i32 0, i32 0
  %55 = load i16, i16* %x41, align 2, !tbaa !100
  %conv42 = zext i16 %55 to i32
  %56 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p, align 8, !tbaa !5
  %tcp43 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %56, i32 0, i32 2
  %src44 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp43, i32 0, i32 0
  %x45 = getelementptr inbounds %struct.beui16, %struct.beui16* %src44, i32 0, i32 0
  %57 = load i16, i16* %x45, align 1, !tbaa !101
  %conv46 = zext i16 %57 to i32
  %cmp47 = icmp eq i32 %conv42, %conv46
  %conv48 = zext i1 %cmp47 to i32
  %and49 = and i32 %and39, %conv48
  %tobool = icmp ne i32 %and49, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %58 = load %struct.flextcp_pl_mem*, %struct.flextcp_pl_mem** @fp_state, align 8, !tbaa !5
  %flowst50 = getelementptr inbounds %struct.flextcp_pl_mem, %struct.flextcp_pl_mem* %58, i32 0, i32 1
  %59 = load i32, i32* %fid, align 4, !tbaa !9
  %idxprom51 = zext i32 %59 to i64
  %arrayidx52 = getelementptr inbounds [131072 x %struct.flextcp_pl_flowst], [131072 x %struct.flextcp_pl_flowst]* %flowst50, i64 0, i64 %idxprom51
  %60 = bitcast %struct.flextcp_pl_flowst* %arrayidx52 to i8*
  %61 = load i8**, i8*** %fss.addr, align 8, !tbaa !5
  %62 = load i16, i16* %i, align 2, !tbaa !7
  %idxprom53 = zext i16 %62 to i64
  %arrayidx54 = getelementptr inbounds i8*, i8** %61, i64 %idxprom53
  store i8* %60, i8** %arrayidx54, align 8, !tbaa !5
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %63 = load i16, i16* %i, align 2, !tbaa !7
  %inc = add i16 %63, 1
  store i16 %inc, i16* %i, align 2, !tbaa !7
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %64 = bitcast %struct.flextcp_pl_flowst** %fs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #6
  %65 = bitcast %struct.flextcp_pl_flowhte** %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #6
  %66 = bitcast %struct.flow_key* %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 12, i8* %66) #6
  %67 = bitcast %struct.pkt_tcp** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #6
  %68 = bitcast i16* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %68) #6
  %69 = bitcast i32* %ffid to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %69) #6
  %70 = bitcast i32* %fid to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %70) #6
  %71 = bitcast i32* %eh to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %71) #6
  %72 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %72) #6
  %73 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %73) #6
  %74 = bitcast i32* %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %74) #6
  %75 = load i8*, i8** %saved_stack, align 8
  call void @llvm.stackrestore(i8* %75)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #6

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @flow_hash(%struct.flow_key* %k) #1 {
entry:
  %k.addr = alloca %struct.flow_key*, align 8
  store %struct.flow_key* %k, %struct.flow_key** %k.addr, align 8, !tbaa !5
  %0 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8, !tbaa !5
  %local_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %0, i32 0, i32 2
  %x = getelementptr inbounds %struct.beui16, %struct.beui16* %local_port, i32 0, i32 0
  %1 = load i16, i16* %x, align 1, !tbaa !102
  %conv = zext i16 %1 to i32
  %2 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8, !tbaa !5
  %remote_port = getelementptr inbounds %struct.flow_key, %struct.flow_key* %2, i32 0, i32 3
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %remote_port, i32 0, i32 0
  %3 = load i16, i16* %x1, align 1, !tbaa !104
  %conv2 = zext i16 %3 to i32
  %shl = shl i32 %conv2, 16
  %or = or i32 %conv, %shl
  %4 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8, !tbaa !5
  %local_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %4, i32 0, i32 0
  %x3 = getelementptr inbounds %struct.beui32, %struct.beui32* %local_ip, i32 0, i32 0
  %5 = load i32, i32* %x3, align 1, !tbaa !105
  %conv4 = zext i32 %5 to i64
  %6 = load %struct.flow_key*, %struct.flow_key** %k.addr, align 8, !tbaa !5
  %remote_ip = getelementptr inbounds %struct.flow_key, %struct.flow_key* %6, i32 0, i32 1
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %remote_ip, i32 0, i32 0
  %7 = load i32, i32* %x5, align 1, !tbaa !106
  %conv6 = zext i32 %7 to i64
  %shl7 = shl i64 %conv6, 32
  %or8 = or i64 %conv4, %shl7
  %call = call i32 @crc32c_sse42_u64(i64 %or8, i64 0)
  %call9 = call i32 @crc32c_sse42_u32(i32 %or, i32 %call)
  ret i32 %call9
}

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #6

declare dso_local i32 @rte_cpu_get_flag_enabled(i32) #4

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @rte_ring_enqueue_bulk(%struct.rte_ring* %r, i8** %obj_table, i32 %n, i32* %free_space) #3 {
entry:
  %r.addr = alloca %struct.rte_ring*, align 8
  %obj_table.addr = alloca i8**, align 8
  %n.addr = alloca i32, align 4
  %free_space.addr = alloca i32*, align 8
  store %struct.rte_ring* %r, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  store i8** %obj_table, i8*** %obj_table.addr, align 8, !tbaa !5
  store i32 %n, i32* %n.addr, align 4, !tbaa !9
  store i32* %free_space, i32** %free_space.addr, align 8, !tbaa !5
  %0 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %1 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %2 = load i32, i32* %n.addr, align 4, !tbaa !9
  %3 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %3, i32 0, i32 7
  %single = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod, i32 0, i32 2
  %4 = load i32, i32* %single, align 8, !tbaa !107
  %5 = load i32*, i32** %free_space.addr, align 8, !tbaa !5
  %call = call i32 @__rte_ring_do_enqueue(%struct.rte_ring* %0, i8** %1, i32 %2, i32 0, i32 %4, i32* %5)
  ret i32 %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @__rte_ring_do_enqueue(%struct.rte_ring* %r, i8** %obj_table, i32 %n, i32 %behavior, i32 %is_sp, i32* %free_space) #3 {
entry:
  %r.addr = alloca %struct.rte_ring*, align 8
  %obj_table.addr = alloca i8**, align 8
  %n.addr = alloca i32, align 4
  %behavior.addr = alloca i32, align 4
  %is_sp.addr = alloca i32, align 4
  %free_space.addr = alloca i32*, align 8
  %prod_head = alloca i32, align 4
  %prod_next = alloca i32, align 4
  %free_entries = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %idx = alloca i32, align 4
  %ring = alloca i8**, align 8
  store %struct.rte_ring* %r, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  store i8** %obj_table, i8*** %obj_table.addr, align 8, !tbaa !5
  store i32 %n, i32* %n.addr, align 4, !tbaa !9
  store i32 %behavior, i32* %behavior.addr, align 4, !tbaa !2
  store i32 %is_sp, i32* %is_sp.addr, align 4, !tbaa !9
  store i32* %free_space, i32** %free_space.addr, align 8, !tbaa !5
  %0 = bitcast i32* %prod_head to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %prod_next to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  %2 = bitcast i32* %free_entries to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %4 = load i32, i32* %is_sp.addr, align 4, !tbaa !9
  %5 = load i32, i32* %n.addr, align 4, !tbaa !9
  %6 = load i32, i32* %behavior.addr, align 4, !tbaa !2
  %call = call i32 @__rte_ring_move_prod_head(%struct.rte_ring* %3, i32 %4, i32 %5, i32 %6, i32* %prod_head, i32* %prod_next, i32* %free_entries)
  store i32 %call, i32* %n.addr, align 4, !tbaa !9
  %7 = load i32, i32* %n.addr, align 4, !tbaa !9
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %end

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #6
  %9 = bitcast i32* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #6
  %10 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %size1 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %10, i32 0, i32 3
  %11 = load i32, i32* %size1, align 16, !tbaa !110
  store i32 %11, i32* %size, align 4, !tbaa !9
  %12 = bitcast i32* %idx to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #6
  %13 = load i32, i32* %prod_head, align 4, !tbaa !9
  %14 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %mask = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %14, i32 0, i32 4
  %15 = load i32, i32* %mask, align 4, !tbaa !111
  %and = and i32 %13, %15
  store i32 %and, i32* %idx, align 4, !tbaa !9
  %16 = bitcast i8*** %ring to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #6
  %17 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %arrayidx = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %17, i64 1
  %18 = bitcast %struct.rte_ring* %arrayidx to i8**
  store i8** %18, i8*** %ring, align 8, !tbaa !5
  %19 = load i32, i32* %idx, align 4, !tbaa !9
  %20 = load i32, i32* %n.addr, align 4, !tbaa !9
  %add = add i32 %19, %20
  %21 = load i32, i32* %size, align 4, !tbaa !9
  %cmp2 = icmp ult i32 %add, %21
  %conv = zext i1 %cmp2 to i32
  %conv3 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv3, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %do.body
  store i32 0, i32* %i, align 4, !tbaa !9
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %22 = load i32, i32* %i, align 4, !tbaa !9
  %23 = load i32, i32* %n.addr, align 4, !tbaa !9
  %and5 = and i32 %23, -4
  %cmp6 = icmp ult i32 %22, %and5
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %25 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom = zext i32 %25 to i64
  %arrayidx8 = getelementptr inbounds i8*, i8** %24, i64 %idxprom
  %26 = load i8*, i8** %arrayidx8, align 8, !tbaa !5
  %27 = load i8**, i8*** %ring, align 8, !tbaa !5
  %28 = load i32, i32* %idx, align 4, !tbaa !9
  %idxprom9 = zext i32 %28 to i64
  %arrayidx10 = getelementptr inbounds i8*, i8** %27, i64 %idxprom9
  store i8* %26, i8** %arrayidx10, align 8, !tbaa !5
  %29 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %30 = load i32, i32* %i, align 4, !tbaa !9
  %add11 = add i32 %30, 1
  %idxprom12 = zext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i8*, i8** %29, i64 %idxprom12
  %31 = load i8*, i8** %arrayidx13, align 8, !tbaa !5
  %32 = load i8**, i8*** %ring, align 8, !tbaa !5
  %33 = load i32, i32* %idx, align 4, !tbaa !9
  %add14 = add i32 %33, 1
  %idxprom15 = zext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds i8*, i8** %32, i64 %idxprom15
  store i8* %31, i8** %arrayidx16, align 8, !tbaa !5
  %34 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %35 = load i32, i32* %i, align 4, !tbaa !9
  %add17 = add i32 %35, 2
  %idxprom18 = zext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds i8*, i8** %34, i64 %idxprom18
  %36 = load i8*, i8** %arrayidx19, align 8, !tbaa !5
  %37 = load i8**, i8*** %ring, align 8, !tbaa !5
  %38 = load i32, i32* %idx, align 4, !tbaa !9
  %add20 = add i32 %38, 2
  %idxprom21 = zext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i8*, i8** %37, i64 %idxprom21
  store i8* %36, i8** %arrayidx22, align 8, !tbaa !5
  %39 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %40 = load i32, i32* %i, align 4, !tbaa !9
  %add23 = add i32 %40, 3
  %idxprom24 = zext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds i8*, i8** %39, i64 %idxprom24
  %41 = load i8*, i8** %arrayidx25, align 8, !tbaa !5
  %42 = load i8**, i8*** %ring, align 8, !tbaa !5
  %43 = load i32, i32* %idx, align 4, !tbaa !9
  %add26 = add i32 %43, 3
  %idxprom27 = zext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8*, i8** %42, i64 %idxprom27
  store i8* %41, i8** %arrayidx28, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %44 = load i32, i32* %i, align 4, !tbaa !9
  %add29 = add i32 %44, 4
  store i32 %add29, i32* %i, align 4, !tbaa !9
  %45 = load i32, i32* %idx, align 4, !tbaa !9
  %add30 = add i32 %45, 4
  store i32 %add30, i32* %idx, align 4, !tbaa !9
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %n.addr, align 4, !tbaa !9
  %and31 = and i32 %46, 3
  switch i32 %and31, label %sw.epilog [
    i32 3, label %sw.bb
    i32 2, label %sw.bb37
    i32 1, label %sw.bb44
  ]

sw.bb:                                            ; preds = %for.end
  %47 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %48 = load i32, i32* %i, align 4, !tbaa !9
  %inc = add i32 %48, 1
  store i32 %inc, i32* %i, align 4, !tbaa !9
  %idxprom32 = zext i32 %48 to i64
  %arrayidx33 = getelementptr inbounds i8*, i8** %47, i64 %idxprom32
  %49 = load i8*, i8** %arrayidx33, align 8, !tbaa !5
  %50 = load i8**, i8*** %ring, align 8, !tbaa !5
  %51 = load i32, i32* %idx, align 4, !tbaa !9
  %inc34 = add i32 %51, 1
  store i32 %inc34, i32* %idx, align 4, !tbaa !9
  %idxprom35 = zext i32 %51 to i64
  %arrayidx36 = getelementptr inbounds i8*, i8** %50, i64 %idxprom35
  store i8* %49, i8** %arrayidx36, align 8, !tbaa !5
  br label %sw.bb37

sw.bb37:                                          ; preds = %for.end, %sw.bb
  %52 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %53 = load i32, i32* %i, align 4, !tbaa !9
  %inc38 = add i32 %53, 1
  store i32 %inc38, i32* %i, align 4, !tbaa !9
  %idxprom39 = zext i32 %53 to i64
  %arrayidx40 = getelementptr inbounds i8*, i8** %52, i64 %idxprom39
  %54 = load i8*, i8** %arrayidx40, align 8, !tbaa !5
  %55 = load i8**, i8*** %ring, align 8, !tbaa !5
  %56 = load i32, i32* %idx, align 4, !tbaa !9
  %inc41 = add i32 %56, 1
  store i32 %inc41, i32* %idx, align 4, !tbaa !9
  %idxprom42 = zext i32 %56 to i64
  %arrayidx43 = getelementptr inbounds i8*, i8** %55, i64 %idxprom42
  store i8* %54, i8** %arrayidx43, align 8, !tbaa !5
  br label %sw.bb44

sw.bb44:                                          ; preds = %for.end, %sw.bb37
  %57 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %58 = load i32, i32* %i, align 4, !tbaa !9
  %inc45 = add i32 %58, 1
  store i32 %inc45, i32* %i, align 4, !tbaa !9
  %idxprom46 = zext i32 %58 to i64
  %arrayidx47 = getelementptr inbounds i8*, i8** %57, i64 %idxprom46
  %59 = load i8*, i8** %arrayidx47, align 8, !tbaa !5
  %60 = load i8**, i8*** %ring, align 8, !tbaa !5
  %61 = load i32, i32* %idx, align 4, !tbaa !9
  %inc48 = add i32 %61, 1
  store i32 %inc48, i32* %idx, align 4, !tbaa !9
  %idxprom49 = zext i32 %61 to i64
  %arrayidx50 = getelementptr inbounds i8*, i8** %60, i64 %idxprom49
  store i8* %59, i8** %arrayidx50, align 8, !tbaa !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb44, %for.end
  br label %if.end75

if.else:                                          ; preds = %do.body
  store i32 0, i32* %i, align 4, !tbaa !9
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc59, %if.else
  %62 = load i32, i32* %idx, align 4, !tbaa !9
  %63 = load i32, i32* %size, align 4, !tbaa !9
  %cmp52 = icmp ult i32 %62, %63
  br i1 %cmp52, label %for.body54, label %for.end62

for.body54:                                       ; preds = %for.cond51
  %64 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %65 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom55 = zext i32 %65 to i64
  %arrayidx56 = getelementptr inbounds i8*, i8** %64, i64 %idxprom55
  %66 = load i8*, i8** %arrayidx56, align 8, !tbaa !5
  %67 = load i8**, i8*** %ring, align 8, !tbaa !5
  %68 = load i32, i32* %idx, align 4, !tbaa !9
  %idxprom57 = zext i32 %68 to i64
  %arrayidx58 = getelementptr inbounds i8*, i8** %67, i64 %idxprom57
  store i8* %66, i8** %arrayidx58, align 8, !tbaa !5
  br label %for.inc59

for.inc59:                                        ; preds = %for.body54
  %69 = load i32, i32* %i, align 4, !tbaa !9
  %inc60 = add i32 %69, 1
  store i32 %inc60, i32* %i, align 4, !tbaa !9
  %70 = load i32, i32* %idx, align 4, !tbaa !9
  %inc61 = add i32 %70, 1
  store i32 %inc61, i32* %idx, align 4, !tbaa !9
  br label %for.cond51

for.end62:                                        ; preds = %for.cond51
  store i32 0, i32* %idx, align 4, !tbaa !9
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc71, %for.end62
  %71 = load i32, i32* %i, align 4, !tbaa !9
  %72 = load i32, i32* %n.addr, align 4, !tbaa !9
  %cmp64 = icmp ult i32 %71, %72
  br i1 %cmp64, label %for.body66, label %for.end74

for.body66:                                       ; preds = %for.cond63
  %73 = load i8**, i8*** %obj_table.addr, align 8, !tbaa !5
  %74 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom67 = zext i32 %74 to i64
  %arrayidx68 = getelementptr inbounds i8*, i8** %73, i64 %idxprom67
  %75 = load i8*, i8** %arrayidx68, align 8, !tbaa !5
  %76 = load i8**, i8*** %ring, align 8, !tbaa !5
  %77 = load i32, i32* %idx, align 4, !tbaa !9
  %idxprom69 = zext i32 %77 to i64
  %arrayidx70 = getelementptr inbounds i8*, i8** %76, i64 %idxprom69
  store i8* %75, i8** %arrayidx70, align 8, !tbaa !5
  br label %for.inc71

for.inc71:                                        ; preds = %for.body66
  %78 = load i32, i32* %i, align 4, !tbaa !9
  %inc72 = add i32 %78, 1
  store i32 %inc72, i32* %i, align 4, !tbaa !9
  %79 = load i32, i32* %idx, align 4, !tbaa !9
  %inc73 = add i32 %79, 1
  store i32 %inc73, i32* %idx, align 4, !tbaa !9
  br label %for.cond63

for.end74:                                        ; preds = %for.cond63
  br label %if.end75

if.end75:                                         ; preds = %for.end74, %sw.epilog
  %80 = bitcast i8*** %ring to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #6
  %81 = bitcast i32* %idx to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %81) #6
  %82 = bitcast i32* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %82) #6
  %83 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %83) #6
  br label %do.cond

do.cond:                                          ; preds = %if.end75
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body76

do.body76:                                        ; preds = %do.end
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !112
  br label %do.cond77

do.cond77:                                        ; preds = %do.body76
  br label %do.end78

do.end78:                                         ; preds = %do.cond77
  %84 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %84, i32 0, i32 7
  %85 = load i32, i32* %prod_head, align 4, !tbaa !9
  %86 = load i32, i32* %prod_next, align 4, !tbaa !9
  %87 = load i32, i32* %is_sp.addr, align 4, !tbaa !9
  call void @update_tail(%struct.rte_ring_headtail* %prod, i32 %85, i32 %86, i32 %87)
  br label %end

end:                                              ; preds = %do.end78, %if.then
  %88 = load i32*, i32** %free_space.addr, align 8, !tbaa !5
  %cmp79 = icmp ne i32* %88, null
  br i1 %cmp79, label %if.then81, label %if.end82

if.then81:                                        ; preds = %end
  %89 = load i32, i32* %free_entries, align 4, !tbaa !9
  %90 = load i32, i32* %n.addr, align 4, !tbaa !9
  %sub = sub i32 %89, %90
  %91 = load i32*, i32** %free_space.addr, align 8, !tbaa !5
  store i32 %sub, i32* %91, align 4, !tbaa !9
  br label %if.end82

if.end82:                                         ; preds = %if.then81, %end
  %92 = load i32, i32* %n.addr, align 4, !tbaa !9
  %93 = bitcast i32* %free_entries to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %93) #6
  %94 = bitcast i32* %prod_next to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %94) #6
  %95 = bitcast i32* %prod_head to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %95) #6
  ret i32 %92
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @__rte_ring_move_prod_head(%struct.rte_ring* %r, i32 %is_sp, i32 %n, i32 %behavior, i32* %old_head, i32* %new_head, i32* %free_entries) #3 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.rte_ring*, align 8
  %is_sp.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %behavior.addr = alloca i32, align 4
  %old_head.addr = alloca i32*, align 8
  %new_head.addr = alloca i32*, align 8
  %free_entries.addr = alloca i32*, align 8
  %capacity = alloca i32, align 4
  %max = alloca i32, align 4
  %success = alloca i32, align 4
  %cons_tail = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.rte_ring* %r, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  store i32 %is_sp, i32* %is_sp.addr, align 4, !tbaa !9
  store i32 %n, i32* %n.addr, align 4, !tbaa !9
  store i32 %behavior, i32* %behavior.addr, align 4, !tbaa !2
  store i32* %old_head, i32** %old_head.addr, align 8, !tbaa !5
  store i32* %new_head, i32** %new_head.addr, align 8, !tbaa !5
  store i32* %free_entries, i32** %free_entries.addr, align 8, !tbaa !5
  %0 = bitcast i32* %capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %capacity1 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %1, i32 0, i32 5
  %2 = load i32, i32* %capacity1, align 8, !tbaa !113
  store i32 %2, i32* %capacity, align 4, !tbaa !9
  %3 = bitcast i32* %max to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %4 = load i32, i32* %n.addr, align 4, !tbaa !9
  store i32 %4, i32* %max, align 4, !tbaa !9
  %5 = bitcast i32* %success to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #6
  br label %do.body

do.body:                                          ; preds = %do.cond18, %entry
  %6 = load i32, i32* %max, align 4, !tbaa !9
  store i32 %6, i32* %n.addr, align 4, !tbaa !9
  %7 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %prod = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %7, i32 0, i32 7
  %head = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod, i32 0, i32 0
  %8 = load volatile i32, i32* %head, align 128, !tbaa !114
  %9 = load i32*, i32** %old_head.addr, align 8, !tbaa !5
  store i32 %8, i32* %9, align 4, !tbaa !9
  br label %do.body2

do.body2:                                         ; preds = %do.body
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !115
  br label %do.cond

do.cond:                                          ; preds = %do.body2
  br label %do.end

do.end:                                           ; preds = %do.cond
  %10 = bitcast i32* %cons_tail to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #6
  %11 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %cons = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %11, i32 0, i32 9
  %tail = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %cons, i32 0, i32 1
  %12 = load volatile i32, i32* %tail, align 4, !tbaa !116
  store i32 %12, i32* %cons_tail, align 4, !tbaa !9
  %13 = load i32, i32* %capacity, align 4, !tbaa !9
  %14 = load i32, i32* %cons_tail, align 4, !tbaa !9
  %add = add i32 %13, %14
  %15 = load i32*, i32** %old_head.addr, align 8, !tbaa !5
  %16 = load i32, i32* %15, align 4, !tbaa !9
  %sub = sub i32 %add, %16
  %17 = load i32*, i32** %free_entries.addr, align 8, !tbaa !5
  store i32 %sub, i32* %17, align 4, !tbaa !9
  %18 = load i32, i32* %n.addr, align 4, !tbaa !9
  %19 = load i32*, i32** %free_entries.addr, align 8, !tbaa !5
  %20 = load i32, i32* %19, align 4, !tbaa !9
  %cmp = icmp ugt i32 %18, %20
  %conv = zext i1 %cmp to i32
  %conv3 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv3, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %21 = load i32, i32* %behavior.addr, align 4, !tbaa !2
  %cmp4 = icmp eq i32 %21, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %22 = load i32*, i32** %free_entries.addr, align 8, !tbaa !5
  %23 = load i32, i32* %22, align 4, !tbaa !9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %23, %cond.false ]
  store i32 %cond, i32* %n.addr, align 4, !tbaa !9
  br label %if.end

if.end:                                           ; preds = %cond.end, %do.end
  %24 = load i32, i32* %n.addr, align 4, !tbaa !9
  %cmp6 = icmp eq i32 %24, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end
  %25 = load i32*, i32** %old_head.addr, align 8, !tbaa !5
  %26 = load i32, i32* %25, align 4, !tbaa !9
  %27 = load i32, i32* %n.addr, align 4, !tbaa !9
  %add10 = add i32 %26, %27
  %28 = load i32*, i32** %new_head.addr, align 8, !tbaa !5
  store i32 %add10, i32* %28, align 4, !tbaa !9
  %29 = load i32, i32* %is_sp.addr, align 4, !tbaa !9
  %tobool11 = icmp ne i32 %29, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  %30 = load i32*, i32** %new_head.addr, align 8, !tbaa !5
  %31 = load i32, i32* %30, align 4, !tbaa !9
  %32 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %prod13 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %32, i32 0, i32 7
  %head14 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod13, i32 0, i32 0
  store volatile i32 %31, i32* %head14, align 128, !tbaa !114
  store i32 1, i32* %success, align 4, !tbaa !9
  br label %if.end17

if.else:                                          ; preds = %if.end9
  %33 = load %struct.rte_ring*, %struct.rte_ring** %r.addr, align 8, !tbaa !5
  %prod15 = getelementptr inbounds %struct.rte_ring, %struct.rte_ring* %33, i32 0, i32 7
  %head16 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %prod15, i32 0, i32 0
  %34 = load i32*, i32** %old_head.addr, align 8, !tbaa !5
  %35 = load i32, i32* %34, align 4, !tbaa !9
  %36 = load i32*, i32** %new_head.addr, align 8, !tbaa !5
  %37 = load i32, i32* %36, align 4, !tbaa !9
  %call = call i32 @rte_atomic32_cmpset(i32* %head16, i32 %35, i32 %37)
  store i32 %call, i32* %success, align 4, !tbaa !9
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then8
  %38 = bitcast i32* %cons_tail to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #6
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup25 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond18

do.cond18:                                        ; preds = %cleanup.cont
  %39 = load i32, i32* %success, align 4, !tbaa !9
  %cmp19 = icmp eq i32 %39, 0
  %conv20 = zext i1 %cmp19 to i32
  %conv21 = sext i32 %conv20 to i64
  %expval22 = call i64 @llvm.expect.i64(i64 %conv21, i64 0)
  %tobool23 = icmp ne i64 %expval22, 0
  br i1 %tobool23, label %do.body, label %do.end24

do.end24:                                         ; preds = %do.cond18
  %40 = load i32, i32* %n.addr, align 4, !tbaa !9
  store i32 %40, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup25

cleanup25:                                        ; preds = %do.end24, %cleanup
  %41 = bitcast i32* %success to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #6
  %42 = bitcast i32* %max to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #6
  %43 = bitcast i32* %capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %43) #6
  %44 = load i32, i32* %retval, align 4
  ret i32 %44
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @update_tail(%struct.rte_ring_headtail* %ht, i32 %old_val, i32 %new_val, i32 %single) #3 {
entry:
  %ht.addr = alloca %struct.rte_ring_headtail*, align 8
  %old_val.addr = alloca i32, align 4
  %new_val.addr = alloca i32, align 4
  %single.addr = alloca i32, align 4
  store %struct.rte_ring_headtail* %ht, %struct.rte_ring_headtail** %ht.addr, align 8, !tbaa !5
  store i32 %old_val, i32* %old_val.addr, align 4, !tbaa !9
  store i32 %new_val, i32* %new_val.addr, align 4, !tbaa !9
  store i32 %single, i32* %single.addr, align 4, !tbaa !9
  %0 = load i32, i32* %single.addr, align 4, !tbaa !9
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %1 = load %struct.rte_ring_headtail*, %struct.rte_ring_headtail** %ht.addr, align 8, !tbaa !5
  %tail = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %1, i32 0, i32 1
  %2 = load volatile i32, i32* %tail, align 4, !tbaa !117
  %3 = load i32, i32* %old_val.addr, align 4, !tbaa !9
  %cmp = icmp ne i32 %2, %3
  %conv = zext i1 %cmp to i32
  %conv1 = sext i32 %conv to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 0)
  %tobool2 = icmp ne i64 %expval, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @rte_pause()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  %4 = load i32, i32* %new_val.addr, align 4, !tbaa !9
  %5 = load %struct.rte_ring_headtail*, %struct.rte_ring_headtail** %ht.addr, align 8, !tbaa !5
  %tail3 = getelementptr inbounds %struct.rte_ring_headtail, %struct.rte_ring_headtail* %5, i32 0, i32 1
  store volatile i32 %4, i32* %tail3, align 4, !tbaa !117
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_atomic32_cmpset(i32* %dst, i32 %exp, i32 %src) #1 {
entry:
  %dst.addr = alloca i32*, align 8
  %exp.addr = alloca i32, align 4
  %src.addr = alloca i32, align 4
  %res = alloca i8, align 1
  store i32* %dst, i32** %dst.addr, align 8, !tbaa !5
  store i32 %exp, i32* %exp.addr, align 4, !tbaa !9
  store i32 %src, i32* %src.addr, align 4, !tbaa !9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %res) #6
  %0 = load i32*, i32** %dst.addr, align 8, !tbaa !5
  %1 = load i32, i32* %src.addr, align 4, !tbaa !9
  %2 = load i32, i32* %exp.addr, align 4, !tbaa !9
  %3 = load i32*, i32** %dst.addr, align 8, !tbaa !5
  %4 = call i8 asm sideeffect "lock ; cmpxchgl $2, $1;sete $0;", "={ax},=*m,r,{ax},*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %0, i32 %1, i32 %2, i32* %3) #6, !srcloc !118
  store i8 %4, i8* %res, align 1, !tbaa !2
  %5 = load i8, i8* %res, align 1, !tbaa !2
  %conv = zext i8 %5 to i32
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %res) #6
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_pause() #1 {
entry:
  call void @llvm.x86.sse2.pause()
  ret void
}

; Function Attrs: nounwind
declare void @llvm.x86.sse2.pause() #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_8byte(i64 %data, i32 %init_val) #1 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i32, align 4
  store i64 %data, i64* %data.addr, align 8, !tbaa !19
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  %conv1 = zext i1 %cmp to i32
  %conv2 = sext i32 %conv1 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv2, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %data.addr, align 8, !tbaa !19
  %2 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %conv3 = zext i32 %2 to i64
  %call = call i32 @crc32c_sse42_u64(i64 %1, i64 %conv3)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv4 = zext i8 %3 to i32
  %and = and i32 %conv4, 2
  %conv5 = zext i32 %and to i64
  %expval6 = call i64 @llvm.expect.i64(i64 %conv5, i64 1)
  %tobool7 = icmp ne i64 %expval6, 0
  br i1 %tobool7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end
  %4 = load i64, i64* %data.addr, align 8, !tbaa !19
  %5 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %conv9 = zext i32 %5 to i64
  %call10 = call i32 @crc32c_sse42_u64_mimic(i64 %4, i64 %conv9)
  store i32 %call10, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end
  %6 = load i64, i64* %data.addr, align 8, !tbaa !19
  %7 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call12 = call i32 @crc32c_2words(i64 %6, i32 %7)
  store i32 %call12, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then8, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_4byte(i32 %data, i32 %init_val) #1 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4, !tbaa !9
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %data.addr, align 4, !tbaa !9
  %2 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call = call i32 @crc32c_sse42_u32(i32 %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %data.addr, align 4, !tbaa !9
  %4 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call2 = call i32 @crc32c_1word(i32 %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_2byte(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2, !tbaa !7
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i16, i16* %data.addr, align 2, !tbaa !7
  %2 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call = call i32 @crc32c_sse42_u16(i16 zeroext %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i16, i16* %data.addr, align 2, !tbaa !7
  %4 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call2 = call i32 @crc32c_2bytes(i16 zeroext %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rte_hash_crc_1byte(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1, !tbaa !2
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i8, i8* @crc32_alg, align 1, !tbaa !2
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 2
  %conv1 = zext i32 %and to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %data.addr, align 1, !tbaa !2
  %2 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call = call i32 @crc32c_sse42_u8(i8 zeroext %1, i32 %2)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8, i8* %data.addr, align 1, !tbaa !2
  %4 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %call2 = call i32 @crc32c_1byte(i8 zeroext %3, i32 %4)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u64(i64 %data, i64 %init_val) #1 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i64, align 8
  store i64 %data, i64* %data.addr, align 8, !tbaa !19
  store i64 %init_val, i64* %init_val.addr, align 8, !tbaa !19
  %0 = load i64, i64* %init_val.addr, align 8, !tbaa !19
  %1 = load i64, i64* %data.addr, align 8, !tbaa !19
  %2 = call i64 asm sideeffect "crc32q $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %1, i64 %0) #6, !srcloc !119
  store i64 %2, i64* %init_val.addr, align 8, !tbaa !19
  %3 = load i64, i64* %init_val.addr, align 8, !tbaa !19
  %conv = trunc i64 %3 to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u64_mimic(i64 %data, i64 %init_val) #1 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i64, align 8
  %d = alloca %union.anon.20, align 8
  store i64 %data, i64* %data.addr, align 8, !tbaa !19
  store i64 %init_val, i64* %init_val.addr, align 8, !tbaa !19
  %0 = bitcast %union.anon.20* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load i64, i64* %data.addr, align 8, !tbaa !19
  %u64 = bitcast %union.anon.20* %d to i64*
  store i64 %1, i64* %u64, align 8, !tbaa !2
  %u32 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %2 = load i32, i32* %arrayidx, align 8, !tbaa !2
  %3 = load i64, i64* %init_val.addr, align 8, !tbaa !19
  %conv = trunc i64 %3 to i32
  %call = call i32 @crc32c_sse42_u32(i32 %2, i32 %conv)
  %conv1 = zext i32 %call to i64
  store i64 %conv1, i64* %init_val.addr, align 8, !tbaa !19
  %u322 = bitcast %union.anon.20* %d to [2 x i32]*
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %u322, i64 0, i64 1
  %4 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  %5 = load i64, i64* %init_val.addr, align 8, !tbaa !19
  %conv4 = trunc i64 %5 to i32
  %call5 = call i32 @crc32c_sse42_u32(i32 %4, i32 %conv4)
  %conv6 = zext i32 %call5 to i64
  store i64 %conv6, i64* %init_val.addr, align 8, !tbaa !19
  %6 = load i64, i64* %init_val.addr, align 8, !tbaa !19
  %conv7 = trunc i64 %6 to i32
  %7 = bitcast %union.anon.20* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #6
  ret i32 %conv7
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_2words(i64 %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i64, align 8
  %init_val.addr = alloca i32, align 4
  %d = alloca %union.anon.21, align 8
  %crc = alloca i32, align 4
  %term1 = alloca i32, align 4
  %term2 = alloca i32, align 4
  store i64 %data, i64* %data.addr, align 8, !tbaa !19
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = bitcast %union.anon.21* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load i64, i64* %data.addr, align 8, !tbaa !19
  %u64 = bitcast %union.anon.21* %d to i64*
  store i64 %1, i64* %u64, align 8, !tbaa !2
  %2 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = bitcast i32* %term1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %4 = bitcast i32* %term2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #6
  %5 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  store i32 %5, i32* %crc, align 4, !tbaa !9
  %u32 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %u32, i64 0, i64 0
  %6 = load i32, i32* %arrayidx, align 8, !tbaa !2
  %7 = load i32, i32* %crc, align 4, !tbaa !9
  %xor = xor i32 %7, %6
  store i32 %xor, i32* %crc, align 4, !tbaa !9
  %8 = load i32, i32* %crc, align 4, !tbaa !9
  %and = and i32 %8, 255
  %idxprom = zext i32 %and to i64
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 7), i64 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx1, align 4, !tbaa !9
  %10 = load i32, i32* %crc, align 4, !tbaa !9
  %shr = lshr i32 %10, 8
  %and2 = and i32 %shr, 255
  %idxprom3 = zext i32 %and2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 6), i64 0, i64 %idxprom3
  %11 = load i32, i32* %arrayidx4, align 4, !tbaa !9
  %xor5 = xor i32 %9, %11
  store i32 %xor5, i32* %term1, align 4, !tbaa !9
  %12 = load i32, i32* %crc, align 4, !tbaa !9
  %shr6 = lshr i32 %12, 16
  store i32 %shr6, i32* %term2, align 4, !tbaa !9
  %13 = load i32, i32* %term1, align 4, !tbaa !9
  %14 = load i32, i32* %term2, align 4, !tbaa !9
  %and7 = and i32 %14, 255
  %idxprom8 = zext i32 %and7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 5), i64 0, i64 %idxprom8
  %15 = load i32, i32* %arrayidx9, align 4, !tbaa !9
  %16 = load i32, i32* %term2, align 4, !tbaa !9
  %shr10 = lshr i32 %16, 8
  %and11 = and i32 %shr10, 255
  %idxprom12 = zext i32 %and11 to i64
  %arrayidx13 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 4), i64 0, i64 %idxprom12
  %17 = load i32, i32* %arrayidx13, align 4, !tbaa !9
  %xor14 = xor i32 %15, %17
  %xor15 = xor i32 %13, %xor14
  store i32 %xor15, i32* %crc, align 4, !tbaa !9
  %u3216 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %u3216, i64 0, i64 1
  %18 = load i32, i32* %arrayidx17, align 4, !tbaa !2
  %and18 = and i32 %18, 255
  %idxprom19 = zext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom19
  %19 = load i32, i32* %arrayidx20, align 4, !tbaa !9
  %u3221 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %u3221, i64 0, i64 1
  %20 = load i32, i32* %arrayidx22, align 4, !tbaa !2
  %shr23 = lshr i32 %20, 8
  %and24 = and i32 %shr23, 255
  %idxprom25 = zext i32 %and24 to i64
  %arrayidx26 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom25
  %21 = load i32, i32* %arrayidx26, align 4, !tbaa !9
  %xor27 = xor i32 %19, %21
  store i32 %xor27, i32* %term1, align 4, !tbaa !9
  %u3228 = bitcast %union.anon.21* %d to [2 x i32]*
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %u3228, i64 0, i64 1
  %22 = load i32, i32* %arrayidx29, align 4, !tbaa !2
  %shr30 = lshr i32 %22, 16
  store i32 %shr30, i32* %term2, align 4, !tbaa !9
  %23 = load i32, i32* %term1, align 4, !tbaa !9
  %24 = load i32, i32* %term2, align 4, !tbaa !9
  %and31 = and i32 %24, 255
  %idxprom32 = zext i32 %and31 to i64
  %arrayidx33 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom32
  %25 = load i32, i32* %arrayidx33, align 4, !tbaa !9
  %26 = load i32, i32* %term2, align 4, !tbaa !9
  %shr34 = lshr i32 %26, 8
  %and35 = and i32 %shr34, 255
  %idxprom36 = zext i32 %and35 to i64
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom36
  %27 = load i32, i32* %arrayidx37, align 4, !tbaa !9
  %xor38 = xor i32 %25, %27
  %xor39 = xor i32 %23, %xor38
  %28 = load i32, i32* %crc, align 4, !tbaa !9
  %xor40 = xor i32 %28, %xor39
  store i32 %xor40, i32* %crc, align 4, !tbaa !9
  %29 = load i32, i32* %crc, align 4, !tbaa !9
  %30 = bitcast i32* %term2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #6
  %31 = bitcast i32* %term1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #6
  %32 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #6
  %33 = bitcast %union.anon.21* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #6
  ret i32 %29
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u32(i32 %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4, !tbaa !9
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %1 = load i32, i32* %data.addr, align 4, !tbaa !9
  %2 = call i32 asm sideeffect "crc32l $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %1, i32 %0) #6, !srcloc !120
  store i32 %2, i32* %init_val.addr, align 4, !tbaa !9
  %3 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  ret i32 %3
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_1word(i32 %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i32, align 4
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  %term1 = alloca i32, align 4
  %term2 = alloca i32, align 4
  store i32 %data, i32* %data.addr, align 4, !tbaa !9
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %term1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  %2 = bitcast i32* %term2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  store i32 %3, i32* %crc, align 4, !tbaa !9
  %4 = load i32, i32* %data.addr, align 4, !tbaa !9
  %5 = load i32, i32* %crc, align 4, !tbaa !9
  %xor = xor i32 %5, %4
  store i32 %xor, i32* %crc, align 4, !tbaa !9
  %6 = load i32, i32* %crc, align 4, !tbaa !9
  %and = and i32 %6, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 3), i64 0, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4, !tbaa !9
  %8 = load i32, i32* %crc, align 4, !tbaa !9
  %shr = lshr i32 %8, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 2), i64 0, i64 %idxprom2
  %9 = load i32, i32* %arrayidx3, align 4, !tbaa !9
  %xor4 = xor i32 %7, %9
  store i32 %xor4, i32* %term1, align 4, !tbaa !9
  %10 = load i32, i32* %crc, align 4, !tbaa !9
  %shr5 = lshr i32 %10, 16
  store i32 %shr5, i32* %term2, align 4, !tbaa !9
  %11 = load i32, i32* %term1, align 4, !tbaa !9
  %12 = load i32, i32* %term2, align 4, !tbaa !9
  %and6 = and i32 %12, 255
  %idxprom7 = zext i32 %and6 to i64
  %arrayidx8 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom7
  %13 = load i32, i32* %arrayidx8, align 4, !tbaa !9
  %14 = load i32, i32* %term2, align 4, !tbaa !9
  %shr9 = lshr i32 %14, 8
  %and10 = and i32 %shr9, 255
  %idxprom11 = zext i32 %and10 to i64
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom11
  %15 = load i32, i32* %arrayidx12, align 4, !tbaa !9
  %xor13 = xor i32 %13, %15
  %xor14 = xor i32 %11, %xor13
  store i32 %xor14, i32* %crc, align 4, !tbaa !9
  %16 = load i32, i32* %crc, align 4, !tbaa !9
  %17 = bitcast i32* %term2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #6
  %18 = bitcast i32* %term1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #6
  %19 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #6
  ret i32 %16
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u16(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2, !tbaa !7
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %1 = load i16, i16* %data.addr, align 2, !tbaa !7
  %2 = call i32 asm sideeffect "crc32w $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i16 %1, i32 %0) #6, !srcloc !121
  store i32 %2, i32* %init_val.addr, align 4, !tbaa !9
  %3 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  ret i32 %3
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_2bytes(i16 zeroext %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i16, align 2
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  store i16 %data, i16* %data.addr, align 2, !tbaa !7
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  store i32 %1, i32* %crc, align 4, !tbaa !9
  %2 = load i16, i16* %data.addr, align 2, !tbaa !7
  %conv = zext i16 %2 to i32
  %3 = load i32, i32* %crc, align 4, !tbaa !9
  %xor = xor i32 %3, %conv
  store i32 %xor, i32* %crc, align 4, !tbaa !9
  %4 = load i32, i32* %crc, align 4, !tbaa !9
  %and = and i32 %4, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 1), i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !9
  %6 = load i32, i32* %crc, align 4, !tbaa !9
  %shr = lshr i32 %6, 8
  %and1 = and i32 %shr, 255
  %idxprom2 = zext i32 %and1 to i64
  %arrayidx3 = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom2
  %7 = load i32, i32* %arrayidx3, align 4, !tbaa !9
  %xor4 = xor i32 %5, %7
  %8 = load i32, i32* %crc, align 4, !tbaa !9
  %shr5 = lshr i32 %8, 16
  %xor6 = xor i32 %xor4, %shr5
  store i32 %xor6, i32* %crc, align 4, !tbaa !9
  %9 = load i32, i32* %crc, align 4, !tbaa !9
  %10 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #6
  ret i32 %9
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_sse42_u8(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1, !tbaa !2
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  %1 = load i8, i8* %data.addr, align 1, !tbaa !2
  %2 = call i32 asm sideeffect "crc32b $1, $0;", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i8 %1, i32 %0) #6, !srcloc !122
  store i32 %2, i32* %init_val.addr, align 4, !tbaa !9
  %3 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  ret i32 %3
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @crc32c_1byte(i8 zeroext %data, i32 %init_val) #1 {
entry:
  %data.addr = alloca i8, align 1
  %init_val.addr = alloca i32, align 4
  %crc = alloca i32, align 4
  store i8 %data, i8* %data.addr, align 1, !tbaa !2
  store i32 %init_val, i32* %init_val.addr, align 4, !tbaa !9
  %0 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load i32, i32* %init_val.addr, align 4, !tbaa !9
  store i32 %1, i32* %crc, align 4, !tbaa !9
  %2 = load i8, i8* %data.addr, align 1, !tbaa !2
  %conv = zext i8 %2 to i32
  %3 = load i32, i32* %crc, align 4, !tbaa !9
  %xor = xor i32 %3, %conv
  store i32 %xor, i32* %crc, align 4, !tbaa !9
  %4 = load i32, i32* %crc, align 4, !tbaa !9
  %and = and i32 %4, 255
  %idxprom = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* getelementptr inbounds ([8 x [256 x i32]], [8 x [256 x i32]]* @crc32c_tables, i64 0, i64 0), i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !9
  %6 = load i32, i32* %crc, align 4, !tbaa !9
  %shr = lshr i32 %6, 8
  %xor1 = xor i32 %5, %shr
  %7 = bitcast i32* %crc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #6
  ret i32 %xor1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @dma_read(i64 %addr, i64 %len, i8* %buf) #1 {
entry:
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  store i64 %addr, i64* %addr.addr, align 8, !tbaa !19
  store i64 %len, i64* %len.addr, align 8, !tbaa !19
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !5
  %0 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %1 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %4 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 41, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.dma_read, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** %buf.addr, align 8, !tbaa !5
  %6 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %7 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i64, i64* %len.addr, align 8, !tbaa !19
  %call = call i8* @rte_memcpy(i8* %5, i8* %add.ptr, i64 %8)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @rte_memcpy(i8* %dst, i8* %src, i64 %n) #3 {
entry:
  %retval = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  store i64 %n, i64* %n.addr, align 8, !tbaa !19
  %0 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1 = ptrtoint i8* %0 to i64
  %2 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %3 = ptrtoint i8* %2 to i64
  %or = or i64 %1, %3
  %and = and i64 %or, 15
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %5 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %6 = load i64, i64* %n.addr, align 8, !tbaa !19
  %call = call i8* @rte_memcpy_aligned(i8* %4, i8* %5, i64 %6)
  store i8* %call, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %8 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %9 = load i64, i64* %n.addr, align 8, !tbaa !19
  %call1 = call i8* @rte_memcpy_generic(i8* %7, i8* %8, i64 %9)
  store i8* %call1, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load i8*, i8** %retval, align 8
  ret i8* %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @rte_memcpy_aligned(i8* %dst, i8* %src, i64 %n) #1 {
entry:
  %retval = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ret = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  store i64 %n, i64* %n.addr, align 8, !tbaa !19
  %0 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  store i8* %1, i8** %ret, align 8, !tbaa !5
  %2 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp = icmp ult i64 %2, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and = and i64 %3, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %4 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %5 = load i8, i8* %4, align 1, !tbaa !2
  %6 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  store i8 %5, i8* %6, align 1, !tbaa !2
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 1
  store i8* %add.ptr, i8** %src.addr, align 8, !tbaa !5
  %8 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr2 = getelementptr inbounds i8, i8* %8, i64 1
  store i8* %add.ptr2, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %9 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and3 = and i64 %9, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %10 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2, !tbaa !7
  %13 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %14 = bitcast i8* %13 to i16*
  store i16 %12, i16* %14, align 2, !tbaa !7
  %15 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %16 = bitcast i8* %15 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %16, i64 1
  %17 = bitcast i16* %add.ptr6 to i8*
  store i8* %17, i8** %src.addr, align 8, !tbaa !5
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %19 = bitcast i8* %18 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %19, i64 1
  %20 = bitcast i16* %add.ptr7 to i8*
  store i8* %20, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %21 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and9 = and i64 %21, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %22 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4, !tbaa !9
  %25 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 4, !tbaa !9
  %27 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %28 = bitcast i8* %27 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %28, i64 1
  %29 = bitcast i32* %add.ptr12 to i8*
  store i8* %29, i8** %src.addr, align 8, !tbaa !5
  %30 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %31 = bitcast i8* %30 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %31, i64 1
  %32 = bitcast i32* %add.ptr13 to i8*
  store i8* %32, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %33 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and15 = and i64 %33, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %34 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !19
  %37 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8, !tbaa !19
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  %39 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %39, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end19:                                         ; preds = %entry
  %40 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp20 = icmp ule i64 %40, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  %41 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %42 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov16(i8* %41, i8* %42)
  %43 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr22 = getelementptr inbounds i8, i8* %43, i64 -16
  %44 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %44
  %45 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr24 = getelementptr inbounds i8, i8* %45, i64 -16
  %46 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %46
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  %47 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %47, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end26:                                         ; preds = %if.end19
  %48 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp27 = icmp ule i64 %48, 64
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  %49 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %50 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov32(i8* %49, i8* %50)
  %51 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr29 = getelementptr inbounds i8, i8* %51, i64 -32
  %52 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %52
  %53 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr31 = getelementptr inbounds i8, i8* %53, i64 -32
  %54 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %54
  call void @rte_mov32(i8* %add.ptr30, i8* %add.ptr32)
  %55 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %55, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %if.end26
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end33
  %56 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp34 = icmp uge i64 %56, 64
  br i1 %cmp34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %57 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %58 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov64(i8* %57, i8* %58)
  %59 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr35 = getelementptr inbounds i8, i8* %59, i64 64
  store i8* %add.ptr35, i8** %dst.addr, align 8, !tbaa !5
  %60 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr36 = getelementptr inbounds i8, i8* %60, i64 64
  store i8* %add.ptr36, i8** %src.addr, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %61 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub = sub i64 %61, 64
  store i64 %sub, i64* %n.addr, align 8, !tbaa !19
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %62 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr37 = getelementptr inbounds i8, i8* %62, i64 -64
  %63 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr37, i64 %63
  %64 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr39 = getelementptr inbounds i8, i8* %64, i64 -64
  %65 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr39, i64 %65
  call void @rte_mov64(i8* %add.ptr38, i8* %add.ptr40)
  %66 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %66, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then28, %if.then21, %if.end18
  %67 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #6
  %68 = load i8*, i8** %retval, align 8
  ret i8* %68
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @rte_memcpy_generic(i8* %dst, i8* %src, i64 %n) #9 {
entry:
  %retval = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %xmm0 = alloca <2 x i64>, align 16
  %xmm1 = alloca <2 x i64>, align 16
  %xmm2 = alloca <2 x i64>, align 16
  %xmm3 = alloca <2 x i64>, align 16
  %xmm4 = alloca <2 x i64>, align 16
  %xmm5 = alloca <2 x i64>, align 16
  %xmm6 = alloca <2 x i64>, align 16
  %xmm7 = alloca <2 x i64>, align 16
  %xmm8 = alloca <2 x i64>, align 16
  %dstu = alloca i64, align 8
  %srcu = alloca i64, align 8
  %ret = alloca i8*, align 8
  %dstofss = alloca i64, align 8
  %srcofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp199 = alloca i32, align 4
  %tmp303 = alloca i32, align 4
  %tmp407 = alloca i32, align 4
  %tmp511 = alloca i32, align 4
  %tmp615 = alloca i32, align 4
  %tmp719 = alloca i32, align 4
  %tmp823 = alloca i32, align 4
  %tmp927 = alloca i32, align 4
  %tmp1031 = alloca i32, align 4
  %tmp1135 = alloca i32, align 4
  %tmp1239 = alloca i32, align 4
  %tmp1343 = alloca i32, align 4
  %tmp1447 = alloca i32, align 4
  %tmp1551 = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  store i64 %n, i64* %n.addr, align 8, !tbaa !19
  %0 = bitcast <2 x i64>* %xmm0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #6
  %1 = bitcast <2 x i64>* %xmm1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #6
  %2 = bitcast <2 x i64>* %xmm2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #6
  %3 = bitcast <2 x i64>* %xmm3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #6
  %4 = bitcast <2 x i64>* %xmm4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #6
  %5 = bitcast <2 x i64>* %xmm5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %5) #6
  %6 = bitcast <2 x i64>* %xmm6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #6
  %7 = bitcast <2 x i64>* %xmm7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #6
  %8 = bitcast <2 x i64>* %xmm8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8) #6
  %9 = bitcast i64* %dstu to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #6
  %10 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %11 = ptrtoint i8* %10 to i64
  store i64 %11, i64* %dstu, align 8, !tbaa !19
  %12 = bitcast i64* %srcu to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #6
  %13 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %14 = ptrtoint i8* %13 to i64
  store i64 %14, i64* %srcu, align 8, !tbaa !19
  %15 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #6
  %16 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  store i8* %16, i8** %ret, align 8, !tbaa !5
  %17 = bitcast i64* %dstofss to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #6
  %18 = bitcast i64* %srcofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #6
  %19 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp = icmp ult i64 %19, 16
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %20 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and = and i64 %20, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %21 = load i64, i64* %srcu, align 8, !tbaa !19
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22, align 1, !tbaa !2
  %24 = load i64, i64* %dstu, align 8, !tbaa !19
  %25 = inttoptr i64 %24 to i8*
  store i8 %23, i8* %25, align 1, !tbaa !2
  %26 = load i64, i64* %srcu, align 8, !tbaa !19
  %27 = inttoptr i64 %26 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 1
  %28 = ptrtoint i8* %add.ptr to i64
  store i64 %28, i64* %srcu, align 8, !tbaa !19
  %29 = load i64, i64* %dstu, align 8, !tbaa !19
  %30 = inttoptr i64 %29 to i8*
  %add.ptr2 = getelementptr inbounds i8, i8* %30, i64 1
  %31 = ptrtoint i8* %add.ptr2 to i64
  store i64 %31, i64* %dstu, align 8, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %32 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and3 = and i64 %32, 2
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %33 = load i64, i64* %srcu, align 8, !tbaa !19
  %34 = inttoptr i64 %33 to i16*
  %35 = load i16, i16* %34, align 2, !tbaa !7
  %36 = load i64, i64* %dstu, align 8, !tbaa !19
  %37 = inttoptr i64 %36 to i16*
  store i16 %35, i16* %37, align 2, !tbaa !7
  %38 = load i64, i64* %srcu, align 8, !tbaa !19
  %39 = inttoptr i64 %38 to i16*
  %add.ptr6 = getelementptr inbounds i16, i16* %39, i64 1
  %40 = ptrtoint i16* %add.ptr6 to i64
  store i64 %40, i64* %srcu, align 8, !tbaa !19
  %41 = load i64, i64* %dstu, align 8, !tbaa !19
  %42 = inttoptr i64 %41 to i16*
  %add.ptr7 = getelementptr inbounds i16, i16* %42, i64 1
  %43 = ptrtoint i16* %add.ptr7 to i64
  store i64 %43, i64* %dstu, align 8, !tbaa !19
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %44 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and9 = and i64 %44, 4
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end8
  %45 = load i64, i64* %srcu, align 8, !tbaa !19
  %46 = inttoptr i64 %45 to i32*
  %47 = load i32, i32* %46, align 4, !tbaa !9
  %48 = load i64, i64* %dstu, align 8, !tbaa !19
  %49 = inttoptr i64 %48 to i32*
  store i32 %47, i32* %49, align 4, !tbaa !9
  %50 = load i64, i64* %srcu, align 8, !tbaa !19
  %51 = inttoptr i64 %50 to i32*
  %add.ptr12 = getelementptr inbounds i32, i32* %51, i64 1
  %52 = ptrtoint i32* %add.ptr12 to i64
  store i64 %52, i64* %srcu, align 8, !tbaa !19
  %53 = load i64, i64* %dstu, align 8, !tbaa !19
  %54 = inttoptr i64 %53 to i32*
  %add.ptr13 = getelementptr inbounds i32, i32* %54, i64 1
  %55 = ptrtoint i32* %add.ptr13 to i64
  store i64 %55, i64* %dstu, align 8, !tbaa !19
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end8
  %56 = load i64, i64* %n.addr, align 8, !tbaa !19
  %and15 = and i64 %56, 8
  %tobool16 = icmp ne i64 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  %57 = load i64, i64* %srcu, align 8, !tbaa !19
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !19
  %60 = load i64, i64* %dstu, align 8, !tbaa !19
  %61 = inttoptr i64 %60 to i64*
  store i64 %59, i64* %61, align 8, !tbaa !19
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end14
  %62 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %62, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end19:                                         ; preds = %entry
  %63 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp20 = icmp ule i64 %63, 32
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.end19
  %64 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %65 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov16(i8* %64, i8* %65)
  %66 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr22 = getelementptr inbounds i8, i8* %66, i64 -16
  %67 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %67
  %68 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr24 = getelementptr inbounds i8, i8* %68, i64 -16
  %69 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 %69
  call void @rte_mov16(i8* %add.ptr23, i8* %add.ptr25)
  %70 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %70, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end26:                                         ; preds = %if.end19
  %71 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp27 = icmp ule i64 %71, 48
  br i1 %cmp27, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end26
  %72 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %73 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov32(i8* %72, i8* %73)
  %74 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr29 = getelementptr inbounds i8, i8* %74, i64 -16
  %75 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %75
  %76 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr31 = getelementptr inbounds i8, i8* %76, i64 -16
  %77 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 %77
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr32)
  %78 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %78, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %if.end26
  %79 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp34 = icmp ule i64 %79, 64
  br i1 %cmp34, label %if.then35, label %if.end42

if.then35:                                        ; preds = %if.end33
  %80 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %81 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov32(i8* %80, i8* %81)
  %82 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr36 = getelementptr inbounds i8, i8* %82, i64 32
  %83 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr37 = getelementptr inbounds i8, i8* %83, i64 32
  call void @rte_mov16(i8* %add.ptr36, i8* %add.ptr37)
  %84 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr38 = getelementptr inbounds i8, i8* %84, i64 -16
  %85 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 %85
  %86 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr40 = getelementptr inbounds i8, i8* %86, i64 -16
  %87 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 %87
  call void @rte_mov16(i8* %add.ptr39, i8* %add.ptr41)
  %88 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %88, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.end33
  %89 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp43 = icmp ule i64 %89, 128
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end42
  br label %COPY_BLOCK_128_BACK15

if.end45:                                         ; preds = %if.end42
  %90 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp46 = icmp ule i64 %90, 512
  br i1 %cmp46, label %if.then47, label %if.end87

if.then47:                                        ; preds = %if.end45
  %91 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp48 = icmp uge i64 %91, 256
  br i1 %cmp48, label %if.then49, label %if.end54

if.then49:                                        ; preds = %if.then47
  %92 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub = sub i64 %92, 256
  store i64 %sub, i64* %n.addr, align 8, !tbaa !19
  %93 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %94 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov128(i8* %93, i8* %94)
  %95 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr50 = getelementptr inbounds i8, i8* %95, i64 128
  %96 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr51 = getelementptr inbounds i8, i8* %96, i64 128
  call void @rte_mov128(i8* %add.ptr50, i8* %add.ptr51)
  %97 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr52 = getelementptr inbounds i8, i8* %97, i64 256
  store i8* %add.ptr52, i8** %src.addr, align 8, !tbaa !5
  %98 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr53 = getelementptr inbounds i8, i8* %98, i64 256
  store i8* %add.ptr53, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end54

if.end54:                                         ; preds = %if.then49, %if.then47
  br label %COPY_BLOCK_255_BACK15

COPY_BLOCK_255_BACK15:                            ; preds = %for.end, %if.end54
  %99 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp55 = icmp uge i64 %99, 128
  br i1 %cmp55, label %if.then56, label %if.end60

if.then56:                                        ; preds = %COPY_BLOCK_255_BACK15
  %100 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub57 = sub i64 %100, 128
  store i64 %sub57, i64* %n.addr, align 8, !tbaa !19
  %101 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %102 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov128(i8* %101, i8* %102)
  %103 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr58 = getelementptr inbounds i8, i8* %103, i64 128
  store i8* %add.ptr58, i8** %src.addr, align 8, !tbaa !5
  %104 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr59 = getelementptr inbounds i8, i8* %104, i64 128
  store i8* %add.ptr59, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end60

if.end60:                                         ; preds = %if.then56, %COPY_BLOCK_255_BACK15
  br label %COPY_BLOCK_128_BACK15

COPY_BLOCK_128_BACK15:                            ; preds = %if.end60, %if.then44
  %105 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp61 = icmp uge i64 %105, 64
  br i1 %cmp61, label %if.then62, label %if.end66

if.then62:                                        ; preds = %COPY_BLOCK_128_BACK15
  %106 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub63 = sub i64 %106, 64
  store i64 %sub63, i64* %n.addr, align 8, !tbaa !19
  %107 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %108 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov64(i8* %107, i8* %108)
  %109 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr64 = getelementptr inbounds i8, i8* %109, i64 64
  store i8* %add.ptr64, i8** %src.addr, align 8, !tbaa !5
  %110 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr65 = getelementptr inbounds i8, i8* %110, i64 64
  store i8* %add.ptr65, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %COPY_BLOCK_128_BACK15
  br label %COPY_BLOCK_64_BACK15

COPY_BLOCK_64_BACK15:                             ; preds = %sw.epilog, %if.end66
  %111 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp67 = icmp uge i64 %111, 32
  br i1 %cmp67, label %if.then68, label %if.end72

if.then68:                                        ; preds = %COPY_BLOCK_64_BACK15
  %112 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub69 = sub i64 %112, 32
  store i64 %sub69, i64* %n.addr, align 8, !tbaa !19
  %113 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %114 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov32(i8* %113, i8* %114)
  %115 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr70 = getelementptr inbounds i8, i8* %115, i64 32
  store i8* %add.ptr70, i8** %src.addr, align 8, !tbaa !5
  %116 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr71 = getelementptr inbounds i8, i8* %116, i64 32
  store i8* %add.ptr71, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end72

if.end72:                                         ; preds = %if.then68, %COPY_BLOCK_64_BACK15
  %117 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp73 = icmp ugt i64 %117, 16
  br i1 %cmp73, label %if.then74, label %if.end79

if.then74:                                        ; preds = %if.end72
  %118 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %119 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov16(i8* %118, i8* %119)
  %120 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr75 = getelementptr inbounds i8, i8* %120, i64 -16
  %121 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr76 = getelementptr inbounds i8, i8* %add.ptr75, i64 %121
  %122 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr77 = getelementptr inbounds i8, i8* %122, i64 -16
  %123 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 %123
  call void @rte_mov16(i8* %add.ptr76, i8* %add.ptr78)
  %124 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %124, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end79:                                         ; preds = %if.end72
  %125 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp80 = icmp ugt i64 %125, 0
  br i1 %cmp80, label %if.then81, label %if.end86

if.then81:                                        ; preds = %if.end79
  %126 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr82 = getelementptr inbounds i8, i8* %126, i64 -16
  %127 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr82, i64 %127
  %128 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr84 = getelementptr inbounds i8, i8* %128, i64 -16
  %129 = load i64, i64* %n.addr, align 8, !tbaa !19
  %add.ptr85 = getelementptr inbounds i8, i8* %add.ptr84, i64 %129
  call void @rte_mov16(i8* %add.ptr83, i8* %add.ptr85)
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %if.end79
  %130 = load i8*, i8** %ret, align 8, !tbaa !5
  store i8* %130, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end87:                                         ; preds = %if.end45
  %131 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %132 = ptrtoint i8* %131 to i64
  %and88 = and i64 %132, 15
  store i64 %and88, i64* %dstofss, align 8, !tbaa !19
  %133 = load i64, i64* %dstofss, align 8, !tbaa !19
  %cmp89 = icmp ugt i64 %133, 0
  br i1 %cmp89, label %if.then90, label %if.end95

if.then90:                                        ; preds = %if.end87
  %134 = load i64, i64* %dstofss, align 8, !tbaa !19
  %sub91 = sub i64 16, %134
  %add = add i64 %sub91, 16
  store i64 %add, i64* %dstofss, align 8, !tbaa !19
  %135 = load i64, i64* %dstofss, align 8, !tbaa !19
  %136 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub92 = sub i64 %136, %135
  store i64 %sub92, i64* %n.addr, align 8, !tbaa !19
  %137 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %138 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov32(i8* %137, i8* %138)
  %139 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %140 = load i64, i64* %dstofss, align 8, !tbaa !19
  %add.ptr93 = getelementptr inbounds i8, i8* %139, i64 %140
  store i8* %add.ptr93, i8** %src.addr, align 8, !tbaa !5
  %141 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %142 = load i64, i64* %dstofss, align 8, !tbaa !19
  %add.ptr94 = getelementptr inbounds i8, i8* %141, i64 %142
  store i8* %add.ptr94, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end95

if.end95:                                         ; preds = %if.then90, %if.end87
  %143 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %144 = ptrtoint i8* %143 to i64
  %and96 = and i64 %144, 15
  store i64 %and96, i64* %srcofs, align 8, !tbaa !19
  %145 = load i64, i64* %srcofs, align 8, !tbaa !19
  %cmp97 = icmp eq i64 %145, 0
  br i1 %cmp97, label %if.then98, label %if.end103

if.then98:                                        ; preds = %if.end95
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then98
  %146 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp99 = icmp uge i64 %146, 256
  br i1 %cmp99, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %147 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %148 = load i8*, i8** %src.addr, align 8, !tbaa !5
  call void @rte_mov256(i8* %147, i8* %148)
  %149 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr100 = getelementptr inbounds i8, i8* %149, i64 256
  store i8* %add.ptr100, i8** %dst.addr, align 8, !tbaa !5
  %150 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr101 = getelementptr inbounds i8, i8* %150, i64 256
  store i8* %add.ptr101, i8** %src.addr, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %151 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub102 = sub i64 %151, 256
  store i64 %sub102, i64* %n.addr, align 8, !tbaa !19
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %COPY_BLOCK_255_BACK15

if.end103:                                        ; preds = %if.end95
  %152 = load i64, i64* %srcofs, align 8, !tbaa !19
  switch i64 %152, label %sw.default [
    i64 1, label %sw.bb
    i64 2, label %sw.bb198
    i64 3, label %sw.bb302
    i64 4, label %sw.bb406
    i64 5, label %sw.bb510
    i64 6, label %sw.bb614
    i64 7, label %sw.bb718
    i64 8, label %sw.bb822
    i64 9, label %sw.bb926
    i64 10, label %sw.bb1030
    i64 11, label %sw.bb1134
    i64 12, label %sw.bb1238
    i64 13, label %sw.bb1342
    i64 14, label %sw.bb1446
    i64 15, label %sw.bb1550
  ]

sw.bb:                                            ; preds = %if.end103
  %153 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %153) #6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb
  %154 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp104 = icmp uge i64 %154, 143
  br i1 %cmp104, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %155 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr105 = getelementptr inbounds i8, i8* %155, i64 -1
  %add.ptr106 = getelementptr inbounds i8, i8* %add.ptr105, i64 0
  %156 = bitcast i8* %add.ptr106 to <2 x i64>*
  %call = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %156)
  store <2 x i64> %call, <2 x i64>* %xmm0, align 16, !tbaa !2
  %157 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub107 = sub i64 %157, 128
  store i64 %sub107, i64* %n.addr, align 8, !tbaa !19
  %158 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr108 = getelementptr inbounds i8, i8* %158, i64 -1
  %add.ptr109 = getelementptr inbounds i8, i8* %add.ptr108, i64 16
  %159 = bitcast i8* %add.ptr109 to <2 x i64>*
  %call110 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %159)
  store <2 x i64> %call110, <2 x i64>* %xmm1, align 16, !tbaa !2
  %160 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr111 = getelementptr inbounds i8, i8* %160, i64 -1
  %add.ptr112 = getelementptr inbounds i8, i8* %add.ptr111, i64 32
  %161 = bitcast i8* %add.ptr112 to <2 x i64>*
  %call113 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %161)
  store <2 x i64> %call113, <2 x i64>* %xmm2, align 16, !tbaa !2
  %162 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr114 = getelementptr inbounds i8, i8* %162, i64 -1
  %add.ptr115 = getelementptr inbounds i8, i8* %add.ptr114, i64 48
  %163 = bitcast i8* %add.ptr115 to <2 x i64>*
  %call116 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %163)
  store <2 x i64> %call116, <2 x i64>* %xmm3, align 16, !tbaa !2
  %164 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr117 = getelementptr inbounds i8, i8* %164, i64 -1
  %add.ptr118 = getelementptr inbounds i8, i8* %add.ptr117, i64 64
  %165 = bitcast i8* %add.ptr118 to <2 x i64>*
  %call119 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %165)
  store <2 x i64> %call119, <2 x i64>* %xmm4, align 16, !tbaa !2
  %166 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr120 = getelementptr inbounds i8, i8* %166, i64 -1
  %add.ptr121 = getelementptr inbounds i8, i8* %add.ptr120, i64 80
  %167 = bitcast i8* %add.ptr121 to <2 x i64>*
  %call122 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %167)
  store <2 x i64> %call122, <2 x i64>* %xmm5, align 16, !tbaa !2
  %168 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr123 = getelementptr inbounds i8, i8* %168, i64 -1
  %add.ptr124 = getelementptr inbounds i8, i8* %add.ptr123, i64 96
  %169 = bitcast i8* %add.ptr124 to <2 x i64>*
  %call125 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %169)
  store <2 x i64> %call125, <2 x i64>* %xmm6, align 16, !tbaa !2
  %170 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr126 = getelementptr inbounds i8, i8* %170, i64 -1
  %add.ptr127 = getelementptr inbounds i8, i8* %add.ptr126, i64 112
  %171 = bitcast i8* %add.ptr127 to <2 x i64>*
  %call128 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %171)
  store <2 x i64> %call128, <2 x i64>* %xmm7, align 16, !tbaa !2
  %172 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr129 = getelementptr inbounds i8, i8* %172, i64 -1
  %add.ptr130 = getelementptr inbounds i8, i8* %add.ptr129, i64 128
  %173 = bitcast i8* %add.ptr130 to <2 x i64>*
  %call131 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %173)
  store <2 x i64> %call131, <2 x i64>* %xmm8, align 16, !tbaa !2
  %174 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr132 = getelementptr inbounds i8, i8* %174, i64 128
  store i8* %add.ptr132, i8** %src.addr, align 8, !tbaa !5
  %175 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr133 = getelementptr inbounds i8, i8* %175, i64 0
  %176 = bitcast i8* %add.ptr133 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %178 = bitcast <2 x i64> %177 to <16 x i8>
  %179 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %180 = bitcast <2 x i64> %179 to <16 x i8>
  %palignr = shufflevector <16 x i8> %180, <16 x i8> %178, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %181 = bitcast <16 x i8> %palignr to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %176, <2 x i64> %181)
  %182 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr134 = getelementptr inbounds i8, i8* %182, i64 16
  %183 = bitcast i8* %add.ptr134 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %185 = bitcast <2 x i64> %184 to <16 x i8>
  %186 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %187 = bitcast <2 x i64> %186 to <16 x i8>
  %palignr135 = shufflevector <16 x i8> %187, <16 x i8> %185, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %188 = bitcast <16 x i8> %palignr135 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %183, <2 x i64> %188)
  %189 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr136 = getelementptr inbounds i8, i8* %189, i64 32
  %190 = bitcast i8* %add.ptr136 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %192 = bitcast <2 x i64> %191 to <16 x i8>
  %193 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %194 = bitcast <2 x i64> %193 to <16 x i8>
  %palignr137 = shufflevector <16 x i8> %194, <16 x i8> %192, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %195 = bitcast <16 x i8> %palignr137 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %190, <2 x i64> %195)
  %196 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr138 = getelementptr inbounds i8, i8* %196, i64 48
  %197 = bitcast i8* %add.ptr138 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %199 = bitcast <2 x i64> %198 to <16 x i8>
  %200 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %palignr139 = shufflevector <16 x i8> %201, <16 x i8> %199, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %202 = bitcast <16 x i8> %palignr139 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %197, <2 x i64> %202)
  %203 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr140 = getelementptr inbounds i8, i8* %203, i64 64
  %204 = bitcast i8* %add.ptr140 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %206 = bitcast <2 x i64> %205 to <16 x i8>
  %207 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %208 = bitcast <2 x i64> %207 to <16 x i8>
  %palignr141 = shufflevector <16 x i8> %208, <16 x i8> %206, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %209 = bitcast <16 x i8> %palignr141 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %204, <2 x i64> %209)
  %210 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr142 = getelementptr inbounds i8, i8* %210, i64 80
  %211 = bitcast i8* %add.ptr142 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %213 = bitcast <2 x i64> %212 to <16 x i8>
  %214 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %215 = bitcast <2 x i64> %214 to <16 x i8>
  %palignr143 = shufflevector <16 x i8> %215, <16 x i8> %213, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %216 = bitcast <16 x i8> %palignr143 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %211, <2 x i64> %216)
  %217 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr144 = getelementptr inbounds i8, i8* %217, i64 96
  %218 = bitcast i8* %add.ptr144 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %220 = bitcast <2 x i64> %219 to <16 x i8>
  %221 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %palignr145 = shufflevector <16 x i8> %222, <16 x i8> %220, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %223 = bitcast <16 x i8> %palignr145 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %218, <2 x i64> %223)
  %224 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr146 = getelementptr inbounds i8, i8* %224, i64 112
  %225 = bitcast i8* %add.ptr146 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %227 = bitcast <2 x i64> %226 to <16 x i8>
  %228 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %229 = bitcast <2 x i64> %228 to <16 x i8>
  %palignr147 = shufflevector <16 x i8> %229, <16 x i8> %227, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %230 = bitcast <16 x i8> %palignr147 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %225, <2 x i64> %230)
  %231 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr148 = getelementptr inbounds i8, i8* %231, i64 128
  store i8* %add.ptr148, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %232 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv = trunc i64 %232 to i32
  store i32 %conv, i32* %tmp, align 4, !tbaa !9
  %233 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub149 = sub i64 %233, 16
  %add150 = add i64 %sub149, 1
  %and151 = and i64 %add150, 127
  %add152 = add i64 %and151, 16
  %sub153 = sub i64 %add152, 1
  store i64 %sub153, i64* %n.addr, align 8, !tbaa !19
  %234 = load i64, i64* %n.addr, align 8, !tbaa !19
  %235 = load i32, i32* %tmp, align 4, !tbaa !9
  %conv154 = sext i32 %235 to i64
  %sub155 = sub i64 %conv154, %234
  %conv156 = trunc i64 %sub155 to i32
  store i32 %conv156, i32* %tmp, align 4, !tbaa !9
  %236 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %237 = load i32, i32* %tmp, align 4, !tbaa !9
  %idx.ext = sext i32 %237 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %236, i64 %idx.ext
  store i8* %add.ptr157, i8** %src.addr, align 8, !tbaa !5
  %238 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %239 = load i32, i32* %tmp, align 4, !tbaa !9
  %idx.ext158 = sext i32 %239 to i64
  %add.ptr159 = getelementptr inbounds i8, i8* %238, i64 %idx.ext158
  store i8* %add.ptr159, i8** %dst.addr, align 8, !tbaa !5
  %240 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp160 = icmp uge i64 %240, 47
  br i1 %cmp160, label %if.then162, label %if.end197

if.then162:                                       ; preds = %while.end
  br label %while.cond163

while.cond163:                                    ; preds = %while.body166, %if.then162
  %241 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp164 = icmp uge i64 %241, 47
  br i1 %cmp164, label %while.body166, label %while.end183

while.body166:                                    ; preds = %while.cond163
  %242 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr167 = getelementptr inbounds i8, i8* %242, i64 -1
  %add.ptr168 = getelementptr inbounds i8, i8* %add.ptr167, i64 0
  %243 = bitcast i8* %add.ptr168 to <2 x i64>*
  %call169 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %243)
  store <2 x i64> %call169, <2 x i64>* %xmm0, align 16, !tbaa !2
  %244 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub170 = sub i64 %244, 32
  store i64 %sub170, i64* %n.addr, align 8, !tbaa !19
  %245 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr171 = getelementptr inbounds i8, i8* %245, i64 -1
  %add.ptr172 = getelementptr inbounds i8, i8* %add.ptr171, i64 16
  %246 = bitcast i8* %add.ptr172 to <2 x i64>*
  %call173 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %246)
  store <2 x i64> %call173, <2 x i64>* %xmm1, align 16, !tbaa !2
  %247 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr174 = getelementptr inbounds i8, i8* %247, i64 -1
  %add.ptr175 = getelementptr inbounds i8, i8* %add.ptr174, i64 32
  %248 = bitcast i8* %add.ptr175 to <2 x i64>*
  %call176 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %248)
  store <2 x i64> %call176, <2 x i64>* %xmm2, align 16, !tbaa !2
  %249 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr177 = getelementptr inbounds i8, i8* %249, i64 32
  store i8* %add.ptr177, i8** %src.addr, align 8, !tbaa !5
  %250 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr178 = getelementptr inbounds i8, i8* %250, i64 0
  %251 = bitcast i8* %add.ptr178 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %253 = bitcast <2 x i64> %252 to <16 x i8>
  %254 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %255 = bitcast <2 x i64> %254 to <16 x i8>
  %palignr179 = shufflevector <16 x i8> %255, <16 x i8> %253, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %256 = bitcast <16 x i8> %palignr179 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %251, <2 x i64> %256)
  %257 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr180 = getelementptr inbounds i8, i8* %257, i64 16
  %258 = bitcast i8* %add.ptr180 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %260 = bitcast <2 x i64> %259 to <16 x i8>
  %261 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %262 = bitcast <2 x i64> %261 to <16 x i8>
  %palignr181 = shufflevector <16 x i8> %262, <16 x i8> %260, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %263 = bitcast <16 x i8> %palignr181 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %258, <2 x i64> %263)
  %264 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr182 = getelementptr inbounds i8, i8* %264, i64 32
  store i8* %add.ptr182, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond163

while.end183:                                     ; preds = %while.cond163
  %265 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv184 = trunc i64 %265 to i32
  store i32 %conv184, i32* %tmp, align 4, !tbaa !9
  %266 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub185 = sub i64 %266, 16
  %add186 = add i64 %sub185, 1
  %and187 = and i64 %add186, 31
  %add188 = add i64 %and187, 16
  %sub189 = sub i64 %add188, 1
  store i64 %sub189, i64* %n.addr, align 8, !tbaa !19
  %267 = load i64, i64* %n.addr, align 8, !tbaa !19
  %268 = load i32, i32* %tmp, align 4, !tbaa !9
  %conv190 = sext i32 %268 to i64
  %sub191 = sub i64 %conv190, %267
  %conv192 = trunc i64 %sub191 to i32
  store i32 %conv192, i32* %tmp, align 4, !tbaa !9
  %269 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %270 = load i32, i32* %tmp, align 4, !tbaa !9
  %idx.ext193 = sext i32 %270 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %269, i64 %idx.ext193
  store i8* %add.ptr194, i8** %src.addr, align 8, !tbaa !5
  %271 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %272 = load i32, i32* %tmp, align 4, !tbaa !9
  %idx.ext195 = sext i32 %272 to i64
  %add.ptr196 = getelementptr inbounds i8, i8* %271, i64 %idx.ext195
  store i8* %add.ptr196, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end197

if.end197:                                        ; preds = %while.end183, %while.end
  %273 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #6
  br label %sw.epilog

sw.bb198:                                         ; preds = %if.end103
  %274 = bitcast i32* %tmp199 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %274) #6
  br label %while.cond200

while.cond200:                                    ; preds = %while.body203, %sw.bb198
  %275 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp201 = icmp uge i64 %275, 142
  br i1 %cmp201, label %while.body203, label %while.end250

while.body203:                                    ; preds = %while.cond200
  %276 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr204 = getelementptr inbounds i8, i8* %276, i64 -2
  %add.ptr205 = getelementptr inbounds i8, i8* %add.ptr204, i64 0
  %277 = bitcast i8* %add.ptr205 to <2 x i64>*
  %call206 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %277)
  store <2 x i64> %call206, <2 x i64>* %xmm0, align 16, !tbaa !2
  %278 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub207 = sub i64 %278, 128
  store i64 %sub207, i64* %n.addr, align 8, !tbaa !19
  %279 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr208 = getelementptr inbounds i8, i8* %279, i64 -2
  %add.ptr209 = getelementptr inbounds i8, i8* %add.ptr208, i64 16
  %280 = bitcast i8* %add.ptr209 to <2 x i64>*
  %call210 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %280)
  store <2 x i64> %call210, <2 x i64>* %xmm1, align 16, !tbaa !2
  %281 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr211 = getelementptr inbounds i8, i8* %281, i64 -2
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr211, i64 32
  %282 = bitcast i8* %add.ptr212 to <2 x i64>*
  %call213 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %282)
  store <2 x i64> %call213, <2 x i64>* %xmm2, align 16, !tbaa !2
  %283 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr214 = getelementptr inbounds i8, i8* %283, i64 -2
  %add.ptr215 = getelementptr inbounds i8, i8* %add.ptr214, i64 48
  %284 = bitcast i8* %add.ptr215 to <2 x i64>*
  %call216 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %284)
  store <2 x i64> %call216, <2 x i64>* %xmm3, align 16, !tbaa !2
  %285 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr217 = getelementptr inbounds i8, i8* %285, i64 -2
  %add.ptr218 = getelementptr inbounds i8, i8* %add.ptr217, i64 64
  %286 = bitcast i8* %add.ptr218 to <2 x i64>*
  %call219 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %286)
  store <2 x i64> %call219, <2 x i64>* %xmm4, align 16, !tbaa !2
  %287 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr220 = getelementptr inbounds i8, i8* %287, i64 -2
  %add.ptr221 = getelementptr inbounds i8, i8* %add.ptr220, i64 80
  %288 = bitcast i8* %add.ptr221 to <2 x i64>*
  %call222 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %288)
  store <2 x i64> %call222, <2 x i64>* %xmm5, align 16, !tbaa !2
  %289 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr223 = getelementptr inbounds i8, i8* %289, i64 -2
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 96
  %290 = bitcast i8* %add.ptr224 to <2 x i64>*
  %call225 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %290)
  store <2 x i64> %call225, <2 x i64>* %xmm6, align 16, !tbaa !2
  %291 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr226 = getelementptr inbounds i8, i8* %291, i64 -2
  %add.ptr227 = getelementptr inbounds i8, i8* %add.ptr226, i64 112
  %292 = bitcast i8* %add.ptr227 to <2 x i64>*
  %call228 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %292)
  store <2 x i64> %call228, <2 x i64>* %xmm7, align 16, !tbaa !2
  %293 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr229 = getelementptr inbounds i8, i8* %293, i64 -2
  %add.ptr230 = getelementptr inbounds i8, i8* %add.ptr229, i64 128
  %294 = bitcast i8* %add.ptr230 to <2 x i64>*
  %call231 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %294)
  store <2 x i64> %call231, <2 x i64>* %xmm8, align 16, !tbaa !2
  %295 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr232 = getelementptr inbounds i8, i8* %295, i64 128
  store i8* %add.ptr232, i8** %src.addr, align 8, !tbaa !5
  %296 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr233 = getelementptr inbounds i8, i8* %296, i64 0
  %297 = bitcast i8* %add.ptr233 to <2 x i64>*
  %298 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %299 = bitcast <2 x i64> %298 to <16 x i8>
  %300 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %301 = bitcast <2 x i64> %300 to <16 x i8>
  %palignr234 = shufflevector <16 x i8> %301, <16 x i8> %299, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %302 = bitcast <16 x i8> %palignr234 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %297, <2 x i64> %302)
  %303 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr235 = getelementptr inbounds i8, i8* %303, i64 16
  %304 = bitcast i8* %add.ptr235 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %306 = bitcast <2 x i64> %305 to <16 x i8>
  %307 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %308 = bitcast <2 x i64> %307 to <16 x i8>
  %palignr236 = shufflevector <16 x i8> %308, <16 x i8> %306, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %309 = bitcast <16 x i8> %palignr236 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %304, <2 x i64> %309)
  %310 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr237 = getelementptr inbounds i8, i8* %310, i64 32
  %311 = bitcast i8* %add.ptr237 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %313 = bitcast <2 x i64> %312 to <16 x i8>
  %314 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %315 = bitcast <2 x i64> %314 to <16 x i8>
  %palignr238 = shufflevector <16 x i8> %315, <16 x i8> %313, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %316 = bitcast <16 x i8> %palignr238 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %311, <2 x i64> %316)
  %317 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr239 = getelementptr inbounds i8, i8* %317, i64 48
  %318 = bitcast i8* %add.ptr239 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %320 = bitcast <2 x i64> %319 to <16 x i8>
  %321 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %322 = bitcast <2 x i64> %321 to <16 x i8>
  %palignr240 = shufflevector <16 x i8> %322, <16 x i8> %320, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %323 = bitcast <16 x i8> %palignr240 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %318, <2 x i64> %323)
  %324 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr241 = getelementptr inbounds i8, i8* %324, i64 64
  %325 = bitcast i8* %add.ptr241 to <2 x i64>*
  %326 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %327 = bitcast <2 x i64> %326 to <16 x i8>
  %328 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %329 = bitcast <2 x i64> %328 to <16 x i8>
  %palignr242 = shufflevector <16 x i8> %329, <16 x i8> %327, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %330 = bitcast <16 x i8> %palignr242 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %325, <2 x i64> %330)
  %331 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr243 = getelementptr inbounds i8, i8* %331, i64 80
  %332 = bitcast i8* %add.ptr243 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %334 = bitcast <2 x i64> %333 to <16 x i8>
  %335 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %336 = bitcast <2 x i64> %335 to <16 x i8>
  %palignr244 = shufflevector <16 x i8> %336, <16 x i8> %334, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %337 = bitcast <16 x i8> %palignr244 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %332, <2 x i64> %337)
  %338 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr245 = getelementptr inbounds i8, i8* %338, i64 96
  %339 = bitcast i8* %add.ptr245 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %341 = bitcast <2 x i64> %340 to <16 x i8>
  %342 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %343 = bitcast <2 x i64> %342 to <16 x i8>
  %palignr246 = shufflevector <16 x i8> %343, <16 x i8> %341, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %344 = bitcast <16 x i8> %palignr246 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %339, <2 x i64> %344)
  %345 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr247 = getelementptr inbounds i8, i8* %345, i64 112
  %346 = bitcast i8* %add.ptr247 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %348 = bitcast <2 x i64> %347 to <16 x i8>
  %349 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %350 = bitcast <2 x i64> %349 to <16 x i8>
  %palignr248 = shufflevector <16 x i8> %350, <16 x i8> %348, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %351 = bitcast <16 x i8> %palignr248 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %346, <2 x i64> %351)
  %352 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr249 = getelementptr inbounds i8, i8* %352, i64 128
  store i8* %add.ptr249, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond200

while.end250:                                     ; preds = %while.cond200
  %353 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv251 = trunc i64 %353 to i32
  store i32 %conv251, i32* %tmp199, align 4, !tbaa !9
  %354 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub252 = sub i64 %354, 16
  %add253 = add i64 %sub252, 2
  %and254 = and i64 %add253, 127
  %add255 = add i64 %and254, 16
  %sub256 = sub i64 %add255, 2
  store i64 %sub256, i64* %n.addr, align 8, !tbaa !19
  %355 = load i64, i64* %n.addr, align 8, !tbaa !19
  %356 = load i32, i32* %tmp199, align 4, !tbaa !9
  %conv257 = sext i32 %356 to i64
  %sub258 = sub i64 %conv257, %355
  %conv259 = trunc i64 %sub258 to i32
  store i32 %conv259, i32* %tmp199, align 4, !tbaa !9
  %357 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %358 = load i32, i32* %tmp199, align 4, !tbaa !9
  %idx.ext260 = sext i32 %358 to i64
  %add.ptr261 = getelementptr inbounds i8, i8* %357, i64 %idx.ext260
  store i8* %add.ptr261, i8** %src.addr, align 8, !tbaa !5
  %359 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %360 = load i32, i32* %tmp199, align 4, !tbaa !9
  %idx.ext262 = sext i32 %360 to i64
  %add.ptr263 = getelementptr inbounds i8, i8* %359, i64 %idx.ext262
  store i8* %add.ptr263, i8** %dst.addr, align 8, !tbaa !5
  %361 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp264 = icmp uge i64 %361, 46
  br i1 %cmp264, label %if.then266, label %if.end301

if.then266:                                       ; preds = %while.end250
  br label %while.cond267

while.cond267:                                    ; preds = %while.body270, %if.then266
  %362 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp268 = icmp uge i64 %362, 46
  br i1 %cmp268, label %while.body270, label %while.end287

while.body270:                                    ; preds = %while.cond267
  %363 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr271 = getelementptr inbounds i8, i8* %363, i64 -2
  %add.ptr272 = getelementptr inbounds i8, i8* %add.ptr271, i64 0
  %364 = bitcast i8* %add.ptr272 to <2 x i64>*
  %call273 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %364)
  store <2 x i64> %call273, <2 x i64>* %xmm0, align 16, !tbaa !2
  %365 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub274 = sub i64 %365, 32
  store i64 %sub274, i64* %n.addr, align 8, !tbaa !19
  %366 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr275 = getelementptr inbounds i8, i8* %366, i64 -2
  %add.ptr276 = getelementptr inbounds i8, i8* %add.ptr275, i64 16
  %367 = bitcast i8* %add.ptr276 to <2 x i64>*
  %call277 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %367)
  store <2 x i64> %call277, <2 x i64>* %xmm1, align 16, !tbaa !2
  %368 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr278 = getelementptr inbounds i8, i8* %368, i64 -2
  %add.ptr279 = getelementptr inbounds i8, i8* %add.ptr278, i64 32
  %369 = bitcast i8* %add.ptr279 to <2 x i64>*
  %call280 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %369)
  store <2 x i64> %call280, <2 x i64>* %xmm2, align 16, !tbaa !2
  %370 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr281 = getelementptr inbounds i8, i8* %370, i64 32
  store i8* %add.ptr281, i8** %src.addr, align 8, !tbaa !5
  %371 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr282 = getelementptr inbounds i8, i8* %371, i64 0
  %372 = bitcast i8* %add.ptr282 to <2 x i64>*
  %373 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %376 = bitcast <2 x i64> %375 to <16 x i8>
  %palignr283 = shufflevector <16 x i8> %376, <16 x i8> %374, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %377 = bitcast <16 x i8> %palignr283 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %372, <2 x i64> %377)
  %378 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr284 = getelementptr inbounds i8, i8* %378, i64 16
  %379 = bitcast i8* %add.ptr284 to <2 x i64>*
  %380 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %381 = bitcast <2 x i64> %380 to <16 x i8>
  %382 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %383 = bitcast <2 x i64> %382 to <16 x i8>
  %palignr285 = shufflevector <16 x i8> %383, <16 x i8> %381, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %384 = bitcast <16 x i8> %palignr285 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %379, <2 x i64> %384)
  %385 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr286 = getelementptr inbounds i8, i8* %385, i64 32
  store i8* %add.ptr286, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond267

while.end287:                                     ; preds = %while.cond267
  %386 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv288 = trunc i64 %386 to i32
  store i32 %conv288, i32* %tmp199, align 4, !tbaa !9
  %387 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub289 = sub i64 %387, 16
  %add290 = add i64 %sub289, 2
  %and291 = and i64 %add290, 31
  %add292 = add i64 %and291, 16
  %sub293 = sub i64 %add292, 2
  store i64 %sub293, i64* %n.addr, align 8, !tbaa !19
  %388 = load i64, i64* %n.addr, align 8, !tbaa !19
  %389 = load i32, i32* %tmp199, align 4, !tbaa !9
  %conv294 = sext i32 %389 to i64
  %sub295 = sub i64 %conv294, %388
  %conv296 = trunc i64 %sub295 to i32
  store i32 %conv296, i32* %tmp199, align 4, !tbaa !9
  %390 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %391 = load i32, i32* %tmp199, align 4, !tbaa !9
  %idx.ext297 = sext i32 %391 to i64
  %add.ptr298 = getelementptr inbounds i8, i8* %390, i64 %idx.ext297
  store i8* %add.ptr298, i8** %src.addr, align 8, !tbaa !5
  %392 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %393 = load i32, i32* %tmp199, align 4, !tbaa !9
  %idx.ext299 = sext i32 %393 to i64
  %add.ptr300 = getelementptr inbounds i8, i8* %392, i64 %idx.ext299
  store i8* %add.ptr300, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end301

if.end301:                                        ; preds = %while.end287, %while.end250
  %394 = bitcast i32* %tmp199 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %394) #6
  br label %sw.epilog

sw.bb302:                                         ; preds = %if.end103
  %395 = bitcast i32* %tmp303 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %395) #6
  br label %while.cond304

while.cond304:                                    ; preds = %while.body307, %sw.bb302
  %396 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp305 = icmp uge i64 %396, 141
  br i1 %cmp305, label %while.body307, label %while.end354

while.body307:                                    ; preds = %while.cond304
  %397 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr308 = getelementptr inbounds i8, i8* %397, i64 -3
  %add.ptr309 = getelementptr inbounds i8, i8* %add.ptr308, i64 0
  %398 = bitcast i8* %add.ptr309 to <2 x i64>*
  %call310 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %398)
  store <2 x i64> %call310, <2 x i64>* %xmm0, align 16, !tbaa !2
  %399 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub311 = sub i64 %399, 128
  store i64 %sub311, i64* %n.addr, align 8, !tbaa !19
  %400 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr312 = getelementptr inbounds i8, i8* %400, i64 -3
  %add.ptr313 = getelementptr inbounds i8, i8* %add.ptr312, i64 16
  %401 = bitcast i8* %add.ptr313 to <2 x i64>*
  %call314 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %401)
  store <2 x i64> %call314, <2 x i64>* %xmm1, align 16, !tbaa !2
  %402 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr315 = getelementptr inbounds i8, i8* %402, i64 -3
  %add.ptr316 = getelementptr inbounds i8, i8* %add.ptr315, i64 32
  %403 = bitcast i8* %add.ptr316 to <2 x i64>*
  %call317 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %403)
  store <2 x i64> %call317, <2 x i64>* %xmm2, align 16, !tbaa !2
  %404 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr318 = getelementptr inbounds i8, i8* %404, i64 -3
  %add.ptr319 = getelementptr inbounds i8, i8* %add.ptr318, i64 48
  %405 = bitcast i8* %add.ptr319 to <2 x i64>*
  %call320 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %405)
  store <2 x i64> %call320, <2 x i64>* %xmm3, align 16, !tbaa !2
  %406 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr321 = getelementptr inbounds i8, i8* %406, i64 -3
  %add.ptr322 = getelementptr inbounds i8, i8* %add.ptr321, i64 64
  %407 = bitcast i8* %add.ptr322 to <2 x i64>*
  %call323 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %407)
  store <2 x i64> %call323, <2 x i64>* %xmm4, align 16, !tbaa !2
  %408 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr324 = getelementptr inbounds i8, i8* %408, i64 -3
  %add.ptr325 = getelementptr inbounds i8, i8* %add.ptr324, i64 80
  %409 = bitcast i8* %add.ptr325 to <2 x i64>*
  %call326 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %409)
  store <2 x i64> %call326, <2 x i64>* %xmm5, align 16, !tbaa !2
  %410 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr327 = getelementptr inbounds i8, i8* %410, i64 -3
  %add.ptr328 = getelementptr inbounds i8, i8* %add.ptr327, i64 96
  %411 = bitcast i8* %add.ptr328 to <2 x i64>*
  %call329 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %411)
  store <2 x i64> %call329, <2 x i64>* %xmm6, align 16, !tbaa !2
  %412 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr330 = getelementptr inbounds i8, i8* %412, i64 -3
  %add.ptr331 = getelementptr inbounds i8, i8* %add.ptr330, i64 112
  %413 = bitcast i8* %add.ptr331 to <2 x i64>*
  %call332 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %413)
  store <2 x i64> %call332, <2 x i64>* %xmm7, align 16, !tbaa !2
  %414 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr333 = getelementptr inbounds i8, i8* %414, i64 -3
  %add.ptr334 = getelementptr inbounds i8, i8* %add.ptr333, i64 128
  %415 = bitcast i8* %add.ptr334 to <2 x i64>*
  %call335 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %415)
  store <2 x i64> %call335, <2 x i64>* %xmm8, align 16, !tbaa !2
  %416 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr336 = getelementptr inbounds i8, i8* %416, i64 128
  store i8* %add.ptr336, i8** %src.addr, align 8, !tbaa !5
  %417 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr337 = getelementptr inbounds i8, i8* %417, i64 0
  %418 = bitcast i8* %add.ptr337 to <2 x i64>*
  %419 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %420 = bitcast <2 x i64> %419 to <16 x i8>
  %421 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %422 = bitcast <2 x i64> %421 to <16 x i8>
  %palignr338 = shufflevector <16 x i8> %422, <16 x i8> %420, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %423 = bitcast <16 x i8> %palignr338 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %418, <2 x i64> %423)
  %424 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr339 = getelementptr inbounds i8, i8* %424, i64 16
  %425 = bitcast i8* %add.ptr339 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %427 = bitcast <2 x i64> %426 to <16 x i8>
  %428 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %429 = bitcast <2 x i64> %428 to <16 x i8>
  %palignr340 = shufflevector <16 x i8> %429, <16 x i8> %427, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %430 = bitcast <16 x i8> %palignr340 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %425, <2 x i64> %430)
  %431 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr341 = getelementptr inbounds i8, i8* %431, i64 32
  %432 = bitcast i8* %add.ptr341 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %434 = bitcast <2 x i64> %433 to <16 x i8>
  %435 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %436 = bitcast <2 x i64> %435 to <16 x i8>
  %palignr342 = shufflevector <16 x i8> %436, <16 x i8> %434, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %437 = bitcast <16 x i8> %palignr342 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %432, <2 x i64> %437)
  %438 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr343 = getelementptr inbounds i8, i8* %438, i64 48
  %439 = bitcast i8* %add.ptr343 to <2 x i64>*
  %440 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %441 = bitcast <2 x i64> %440 to <16 x i8>
  %442 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %443 = bitcast <2 x i64> %442 to <16 x i8>
  %palignr344 = shufflevector <16 x i8> %443, <16 x i8> %441, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %444 = bitcast <16 x i8> %palignr344 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %439, <2 x i64> %444)
  %445 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr345 = getelementptr inbounds i8, i8* %445, i64 64
  %446 = bitcast i8* %add.ptr345 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %448 = bitcast <2 x i64> %447 to <16 x i8>
  %449 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %450 = bitcast <2 x i64> %449 to <16 x i8>
  %palignr346 = shufflevector <16 x i8> %450, <16 x i8> %448, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %451 = bitcast <16 x i8> %palignr346 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %446, <2 x i64> %451)
  %452 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr347 = getelementptr inbounds i8, i8* %452, i64 80
  %453 = bitcast i8* %add.ptr347 to <2 x i64>*
  %454 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %455 = bitcast <2 x i64> %454 to <16 x i8>
  %456 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %457 = bitcast <2 x i64> %456 to <16 x i8>
  %palignr348 = shufflevector <16 x i8> %457, <16 x i8> %455, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %458 = bitcast <16 x i8> %palignr348 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %453, <2 x i64> %458)
  %459 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr349 = getelementptr inbounds i8, i8* %459, i64 96
  %460 = bitcast i8* %add.ptr349 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %462 = bitcast <2 x i64> %461 to <16 x i8>
  %463 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %464 = bitcast <2 x i64> %463 to <16 x i8>
  %palignr350 = shufflevector <16 x i8> %464, <16 x i8> %462, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %465 = bitcast <16 x i8> %palignr350 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %460, <2 x i64> %465)
  %466 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr351 = getelementptr inbounds i8, i8* %466, i64 112
  %467 = bitcast i8* %add.ptr351 to <2 x i64>*
  %468 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %469 = bitcast <2 x i64> %468 to <16 x i8>
  %470 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %471 = bitcast <2 x i64> %470 to <16 x i8>
  %palignr352 = shufflevector <16 x i8> %471, <16 x i8> %469, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %472 = bitcast <16 x i8> %palignr352 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %467, <2 x i64> %472)
  %473 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr353 = getelementptr inbounds i8, i8* %473, i64 128
  store i8* %add.ptr353, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond304

while.end354:                                     ; preds = %while.cond304
  %474 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv355 = trunc i64 %474 to i32
  store i32 %conv355, i32* %tmp303, align 4, !tbaa !9
  %475 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub356 = sub i64 %475, 16
  %add357 = add i64 %sub356, 3
  %and358 = and i64 %add357, 127
  %add359 = add i64 %and358, 16
  %sub360 = sub i64 %add359, 3
  store i64 %sub360, i64* %n.addr, align 8, !tbaa !19
  %476 = load i64, i64* %n.addr, align 8, !tbaa !19
  %477 = load i32, i32* %tmp303, align 4, !tbaa !9
  %conv361 = sext i32 %477 to i64
  %sub362 = sub i64 %conv361, %476
  %conv363 = trunc i64 %sub362 to i32
  store i32 %conv363, i32* %tmp303, align 4, !tbaa !9
  %478 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %479 = load i32, i32* %tmp303, align 4, !tbaa !9
  %idx.ext364 = sext i32 %479 to i64
  %add.ptr365 = getelementptr inbounds i8, i8* %478, i64 %idx.ext364
  store i8* %add.ptr365, i8** %src.addr, align 8, !tbaa !5
  %480 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %481 = load i32, i32* %tmp303, align 4, !tbaa !9
  %idx.ext366 = sext i32 %481 to i64
  %add.ptr367 = getelementptr inbounds i8, i8* %480, i64 %idx.ext366
  store i8* %add.ptr367, i8** %dst.addr, align 8, !tbaa !5
  %482 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp368 = icmp uge i64 %482, 45
  br i1 %cmp368, label %if.then370, label %if.end405

if.then370:                                       ; preds = %while.end354
  br label %while.cond371

while.cond371:                                    ; preds = %while.body374, %if.then370
  %483 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp372 = icmp uge i64 %483, 45
  br i1 %cmp372, label %while.body374, label %while.end391

while.body374:                                    ; preds = %while.cond371
  %484 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr375 = getelementptr inbounds i8, i8* %484, i64 -3
  %add.ptr376 = getelementptr inbounds i8, i8* %add.ptr375, i64 0
  %485 = bitcast i8* %add.ptr376 to <2 x i64>*
  %call377 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %485)
  store <2 x i64> %call377, <2 x i64>* %xmm0, align 16, !tbaa !2
  %486 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub378 = sub i64 %486, 32
  store i64 %sub378, i64* %n.addr, align 8, !tbaa !19
  %487 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr379 = getelementptr inbounds i8, i8* %487, i64 -3
  %add.ptr380 = getelementptr inbounds i8, i8* %add.ptr379, i64 16
  %488 = bitcast i8* %add.ptr380 to <2 x i64>*
  %call381 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %488)
  store <2 x i64> %call381, <2 x i64>* %xmm1, align 16, !tbaa !2
  %489 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr382 = getelementptr inbounds i8, i8* %489, i64 -3
  %add.ptr383 = getelementptr inbounds i8, i8* %add.ptr382, i64 32
  %490 = bitcast i8* %add.ptr383 to <2 x i64>*
  %call384 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %490)
  store <2 x i64> %call384, <2 x i64>* %xmm2, align 16, !tbaa !2
  %491 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr385 = getelementptr inbounds i8, i8* %491, i64 32
  store i8* %add.ptr385, i8** %src.addr, align 8, !tbaa !5
  %492 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr386 = getelementptr inbounds i8, i8* %492, i64 0
  %493 = bitcast i8* %add.ptr386 to <2 x i64>*
  %494 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %495 = bitcast <2 x i64> %494 to <16 x i8>
  %496 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %497 = bitcast <2 x i64> %496 to <16 x i8>
  %palignr387 = shufflevector <16 x i8> %497, <16 x i8> %495, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %498 = bitcast <16 x i8> %palignr387 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %493, <2 x i64> %498)
  %499 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr388 = getelementptr inbounds i8, i8* %499, i64 16
  %500 = bitcast i8* %add.ptr388 to <2 x i64>*
  %501 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %502 = bitcast <2 x i64> %501 to <16 x i8>
  %503 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %504 = bitcast <2 x i64> %503 to <16 x i8>
  %palignr389 = shufflevector <16 x i8> %504, <16 x i8> %502, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %505 = bitcast <16 x i8> %palignr389 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %500, <2 x i64> %505)
  %506 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr390 = getelementptr inbounds i8, i8* %506, i64 32
  store i8* %add.ptr390, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond371

while.end391:                                     ; preds = %while.cond371
  %507 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv392 = trunc i64 %507 to i32
  store i32 %conv392, i32* %tmp303, align 4, !tbaa !9
  %508 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub393 = sub i64 %508, 16
  %add394 = add i64 %sub393, 3
  %and395 = and i64 %add394, 31
  %add396 = add i64 %and395, 16
  %sub397 = sub i64 %add396, 3
  store i64 %sub397, i64* %n.addr, align 8, !tbaa !19
  %509 = load i64, i64* %n.addr, align 8, !tbaa !19
  %510 = load i32, i32* %tmp303, align 4, !tbaa !9
  %conv398 = sext i32 %510 to i64
  %sub399 = sub i64 %conv398, %509
  %conv400 = trunc i64 %sub399 to i32
  store i32 %conv400, i32* %tmp303, align 4, !tbaa !9
  %511 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %512 = load i32, i32* %tmp303, align 4, !tbaa !9
  %idx.ext401 = sext i32 %512 to i64
  %add.ptr402 = getelementptr inbounds i8, i8* %511, i64 %idx.ext401
  store i8* %add.ptr402, i8** %src.addr, align 8, !tbaa !5
  %513 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %514 = load i32, i32* %tmp303, align 4, !tbaa !9
  %idx.ext403 = sext i32 %514 to i64
  %add.ptr404 = getelementptr inbounds i8, i8* %513, i64 %idx.ext403
  store i8* %add.ptr404, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end405

if.end405:                                        ; preds = %while.end391, %while.end354
  %515 = bitcast i32* %tmp303 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %515) #6
  br label %sw.epilog

sw.bb406:                                         ; preds = %if.end103
  %516 = bitcast i32* %tmp407 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %516) #6
  br label %while.cond408

while.cond408:                                    ; preds = %while.body411, %sw.bb406
  %517 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp409 = icmp uge i64 %517, 140
  br i1 %cmp409, label %while.body411, label %while.end458

while.body411:                                    ; preds = %while.cond408
  %518 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr412 = getelementptr inbounds i8, i8* %518, i64 -4
  %add.ptr413 = getelementptr inbounds i8, i8* %add.ptr412, i64 0
  %519 = bitcast i8* %add.ptr413 to <2 x i64>*
  %call414 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %519)
  store <2 x i64> %call414, <2 x i64>* %xmm0, align 16, !tbaa !2
  %520 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub415 = sub i64 %520, 128
  store i64 %sub415, i64* %n.addr, align 8, !tbaa !19
  %521 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr416 = getelementptr inbounds i8, i8* %521, i64 -4
  %add.ptr417 = getelementptr inbounds i8, i8* %add.ptr416, i64 16
  %522 = bitcast i8* %add.ptr417 to <2 x i64>*
  %call418 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %522)
  store <2 x i64> %call418, <2 x i64>* %xmm1, align 16, !tbaa !2
  %523 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr419 = getelementptr inbounds i8, i8* %523, i64 -4
  %add.ptr420 = getelementptr inbounds i8, i8* %add.ptr419, i64 32
  %524 = bitcast i8* %add.ptr420 to <2 x i64>*
  %call421 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %524)
  store <2 x i64> %call421, <2 x i64>* %xmm2, align 16, !tbaa !2
  %525 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr422 = getelementptr inbounds i8, i8* %525, i64 -4
  %add.ptr423 = getelementptr inbounds i8, i8* %add.ptr422, i64 48
  %526 = bitcast i8* %add.ptr423 to <2 x i64>*
  %call424 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %526)
  store <2 x i64> %call424, <2 x i64>* %xmm3, align 16, !tbaa !2
  %527 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr425 = getelementptr inbounds i8, i8* %527, i64 -4
  %add.ptr426 = getelementptr inbounds i8, i8* %add.ptr425, i64 64
  %528 = bitcast i8* %add.ptr426 to <2 x i64>*
  %call427 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %528)
  store <2 x i64> %call427, <2 x i64>* %xmm4, align 16, !tbaa !2
  %529 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr428 = getelementptr inbounds i8, i8* %529, i64 -4
  %add.ptr429 = getelementptr inbounds i8, i8* %add.ptr428, i64 80
  %530 = bitcast i8* %add.ptr429 to <2 x i64>*
  %call430 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %530)
  store <2 x i64> %call430, <2 x i64>* %xmm5, align 16, !tbaa !2
  %531 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr431 = getelementptr inbounds i8, i8* %531, i64 -4
  %add.ptr432 = getelementptr inbounds i8, i8* %add.ptr431, i64 96
  %532 = bitcast i8* %add.ptr432 to <2 x i64>*
  %call433 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %532)
  store <2 x i64> %call433, <2 x i64>* %xmm6, align 16, !tbaa !2
  %533 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr434 = getelementptr inbounds i8, i8* %533, i64 -4
  %add.ptr435 = getelementptr inbounds i8, i8* %add.ptr434, i64 112
  %534 = bitcast i8* %add.ptr435 to <2 x i64>*
  %call436 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %534)
  store <2 x i64> %call436, <2 x i64>* %xmm7, align 16, !tbaa !2
  %535 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr437 = getelementptr inbounds i8, i8* %535, i64 -4
  %add.ptr438 = getelementptr inbounds i8, i8* %add.ptr437, i64 128
  %536 = bitcast i8* %add.ptr438 to <2 x i64>*
  %call439 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %536)
  store <2 x i64> %call439, <2 x i64>* %xmm8, align 16, !tbaa !2
  %537 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr440 = getelementptr inbounds i8, i8* %537, i64 128
  store i8* %add.ptr440, i8** %src.addr, align 8, !tbaa !5
  %538 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr441 = getelementptr inbounds i8, i8* %538, i64 0
  %539 = bitcast i8* %add.ptr441 to <2 x i64>*
  %540 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %541 = bitcast <2 x i64> %540 to <16 x i8>
  %542 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %543 = bitcast <2 x i64> %542 to <16 x i8>
  %palignr442 = shufflevector <16 x i8> %543, <16 x i8> %541, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %544 = bitcast <16 x i8> %palignr442 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %539, <2 x i64> %544)
  %545 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr443 = getelementptr inbounds i8, i8* %545, i64 16
  %546 = bitcast i8* %add.ptr443 to <2 x i64>*
  %547 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %548 = bitcast <2 x i64> %547 to <16 x i8>
  %549 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %550 = bitcast <2 x i64> %549 to <16 x i8>
  %palignr444 = shufflevector <16 x i8> %550, <16 x i8> %548, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %551 = bitcast <16 x i8> %palignr444 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %546, <2 x i64> %551)
  %552 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr445 = getelementptr inbounds i8, i8* %552, i64 32
  %553 = bitcast i8* %add.ptr445 to <2 x i64>*
  %554 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %555 = bitcast <2 x i64> %554 to <16 x i8>
  %556 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %557 = bitcast <2 x i64> %556 to <16 x i8>
  %palignr446 = shufflevector <16 x i8> %557, <16 x i8> %555, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %558 = bitcast <16 x i8> %palignr446 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %553, <2 x i64> %558)
  %559 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr447 = getelementptr inbounds i8, i8* %559, i64 48
  %560 = bitcast i8* %add.ptr447 to <2 x i64>*
  %561 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %562 = bitcast <2 x i64> %561 to <16 x i8>
  %563 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %564 = bitcast <2 x i64> %563 to <16 x i8>
  %palignr448 = shufflevector <16 x i8> %564, <16 x i8> %562, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %565 = bitcast <16 x i8> %palignr448 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %560, <2 x i64> %565)
  %566 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr449 = getelementptr inbounds i8, i8* %566, i64 64
  %567 = bitcast i8* %add.ptr449 to <2 x i64>*
  %568 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %569 = bitcast <2 x i64> %568 to <16 x i8>
  %570 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %571 = bitcast <2 x i64> %570 to <16 x i8>
  %palignr450 = shufflevector <16 x i8> %571, <16 x i8> %569, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %572 = bitcast <16 x i8> %palignr450 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %567, <2 x i64> %572)
  %573 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr451 = getelementptr inbounds i8, i8* %573, i64 80
  %574 = bitcast i8* %add.ptr451 to <2 x i64>*
  %575 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %576 = bitcast <2 x i64> %575 to <16 x i8>
  %577 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %578 = bitcast <2 x i64> %577 to <16 x i8>
  %palignr452 = shufflevector <16 x i8> %578, <16 x i8> %576, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %579 = bitcast <16 x i8> %palignr452 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %574, <2 x i64> %579)
  %580 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr453 = getelementptr inbounds i8, i8* %580, i64 96
  %581 = bitcast i8* %add.ptr453 to <2 x i64>*
  %582 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %583 = bitcast <2 x i64> %582 to <16 x i8>
  %584 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %585 = bitcast <2 x i64> %584 to <16 x i8>
  %palignr454 = shufflevector <16 x i8> %585, <16 x i8> %583, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %586 = bitcast <16 x i8> %palignr454 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %581, <2 x i64> %586)
  %587 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr455 = getelementptr inbounds i8, i8* %587, i64 112
  %588 = bitcast i8* %add.ptr455 to <2 x i64>*
  %589 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %590 = bitcast <2 x i64> %589 to <16 x i8>
  %591 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %592 = bitcast <2 x i64> %591 to <16 x i8>
  %palignr456 = shufflevector <16 x i8> %592, <16 x i8> %590, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %593 = bitcast <16 x i8> %palignr456 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %588, <2 x i64> %593)
  %594 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr457 = getelementptr inbounds i8, i8* %594, i64 128
  store i8* %add.ptr457, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond408

while.end458:                                     ; preds = %while.cond408
  %595 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv459 = trunc i64 %595 to i32
  store i32 %conv459, i32* %tmp407, align 4, !tbaa !9
  %596 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub460 = sub i64 %596, 16
  %add461 = add i64 %sub460, 4
  %and462 = and i64 %add461, 127
  %add463 = add i64 %and462, 16
  %sub464 = sub i64 %add463, 4
  store i64 %sub464, i64* %n.addr, align 8, !tbaa !19
  %597 = load i64, i64* %n.addr, align 8, !tbaa !19
  %598 = load i32, i32* %tmp407, align 4, !tbaa !9
  %conv465 = sext i32 %598 to i64
  %sub466 = sub i64 %conv465, %597
  %conv467 = trunc i64 %sub466 to i32
  store i32 %conv467, i32* %tmp407, align 4, !tbaa !9
  %599 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %600 = load i32, i32* %tmp407, align 4, !tbaa !9
  %idx.ext468 = sext i32 %600 to i64
  %add.ptr469 = getelementptr inbounds i8, i8* %599, i64 %idx.ext468
  store i8* %add.ptr469, i8** %src.addr, align 8, !tbaa !5
  %601 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %602 = load i32, i32* %tmp407, align 4, !tbaa !9
  %idx.ext470 = sext i32 %602 to i64
  %add.ptr471 = getelementptr inbounds i8, i8* %601, i64 %idx.ext470
  store i8* %add.ptr471, i8** %dst.addr, align 8, !tbaa !5
  %603 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp472 = icmp uge i64 %603, 44
  br i1 %cmp472, label %if.then474, label %if.end509

if.then474:                                       ; preds = %while.end458
  br label %while.cond475

while.cond475:                                    ; preds = %while.body478, %if.then474
  %604 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp476 = icmp uge i64 %604, 44
  br i1 %cmp476, label %while.body478, label %while.end495

while.body478:                                    ; preds = %while.cond475
  %605 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr479 = getelementptr inbounds i8, i8* %605, i64 -4
  %add.ptr480 = getelementptr inbounds i8, i8* %add.ptr479, i64 0
  %606 = bitcast i8* %add.ptr480 to <2 x i64>*
  %call481 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %606)
  store <2 x i64> %call481, <2 x i64>* %xmm0, align 16, !tbaa !2
  %607 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub482 = sub i64 %607, 32
  store i64 %sub482, i64* %n.addr, align 8, !tbaa !19
  %608 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr483 = getelementptr inbounds i8, i8* %608, i64 -4
  %add.ptr484 = getelementptr inbounds i8, i8* %add.ptr483, i64 16
  %609 = bitcast i8* %add.ptr484 to <2 x i64>*
  %call485 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %609)
  store <2 x i64> %call485, <2 x i64>* %xmm1, align 16, !tbaa !2
  %610 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr486 = getelementptr inbounds i8, i8* %610, i64 -4
  %add.ptr487 = getelementptr inbounds i8, i8* %add.ptr486, i64 32
  %611 = bitcast i8* %add.ptr487 to <2 x i64>*
  %call488 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %611)
  store <2 x i64> %call488, <2 x i64>* %xmm2, align 16, !tbaa !2
  %612 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr489 = getelementptr inbounds i8, i8* %612, i64 32
  store i8* %add.ptr489, i8** %src.addr, align 8, !tbaa !5
  %613 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr490 = getelementptr inbounds i8, i8* %613, i64 0
  %614 = bitcast i8* %add.ptr490 to <2 x i64>*
  %615 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %616 = bitcast <2 x i64> %615 to <16 x i8>
  %617 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %618 = bitcast <2 x i64> %617 to <16 x i8>
  %palignr491 = shufflevector <16 x i8> %618, <16 x i8> %616, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %619 = bitcast <16 x i8> %palignr491 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %614, <2 x i64> %619)
  %620 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr492 = getelementptr inbounds i8, i8* %620, i64 16
  %621 = bitcast i8* %add.ptr492 to <2 x i64>*
  %622 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %623 = bitcast <2 x i64> %622 to <16 x i8>
  %624 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %625 = bitcast <2 x i64> %624 to <16 x i8>
  %palignr493 = shufflevector <16 x i8> %625, <16 x i8> %623, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %626 = bitcast <16 x i8> %palignr493 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %621, <2 x i64> %626)
  %627 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr494 = getelementptr inbounds i8, i8* %627, i64 32
  store i8* %add.ptr494, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond475

while.end495:                                     ; preds = %while.cond475
  %628 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv496 = trunc i64 %628 to i32
  store i32 %conv496, i32* %tmp407, align 4, !tbaa !9
  %629 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub497 = sub i64 %629, 16
  %add498 = add i64 %sub497, 4
  %and499 = and i64 %add498, 31
  %add500 = add i64 %and499, 16
  %sub501 = sub i64 %add500, 4
  store i64 %sub501, i64* %n.addr, align 8, !tbaa !19
  %630 = load i64, i64* %n.addr, align 8, !tbaa !19
  %631 = load i32, i32* %tmp407, align 4, !tbaa !9
  %conv502 = sext i32 %631 to i64
  %sub503 = sub i64 %conv502, %630
  %conv504 = trunc i64 %sub503 to i32
  store i32 %conv504, i32* %tmp407, align 4, !tbaa !9
  %632 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %633 = load i32, i32* %tmp407, align 4, !tbaa !9
  %idx.ext505 = sext i32 %633 to i64
  %add.ptr506 = getelementptr inbounds i8, i8* %632, i64 %idx.ext505
  store i8* %add.ptr506, i8** %src.addr, align 8, !tbaa !5
  %634 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %635 = load i32, i32* %tmp407, align 4, !tbaa !9
  %idx.ext507 = sext i32 %635 to i64
  %add.ptr508 = getelementptr inbounds i8, i8* %634, i64 %idx.ext507
  store i8* %add.ptr508, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end509

if.end509:                                        ; preds = %while.end495, %while.end458
  %636 = bitcast i32* %tmp407 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %636) #6
  br label %sw.epilog

sw.bb510:                                         ; preds = %if.end103
  %637 = bitcast i32* %tmp511 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %637) #6
  br label %while.cond512

while.cond512:                                    ; preds = %while.body515, %sw.bb510
  %638 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp513 = icmp uge i64 %638, 139
  br i1 %cmp513, label %while.body515, label %while.end562

while.body515:                                    ; preds = %while.cond512
  %639 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr516 = getelementptr inbounds i8, i8* %639, i64 -5
  %add.ptr517 = getelementptr inbounds i8, i8* %add.ptr516, i64 0
  %640 = bitcast i8* %add.ptr517 to <2 x i64>*
  %call518 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %640)
  store <2 x i64> %call518, <2 x i64>* %xmm0, align 16, !tbaa !2
  %641 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub519 = sub i64 %641, 128
  store i64 %sub519, i64* %n.addr, align 8, !tbaa !19
  %642 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr520 = getelementptr inbounds i8, i8* %642, i64 -5
  %add.ptr521 = getelementptr inbounds i8, i8* %add.ptr520, i64 16
  %643 = bitcast i8* %add.ptr521 to <2 x i64>*
  %call522 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %643)
  store <2 x i64> %call522, <2 x i64>* %xmm1, align 16, !tbaa !2
  %644 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr523 = getelementptr inbounds i8, i8* %644, i64 -5
  %add.ptr524 = getelementptr inbounds i8, i8* %add.ptr523, i64 32
  %645 = bitcast i8* %add.ptr524 to <2 x i64>*
  %call525 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %645)
  store <2 x i64> %call525, <2 x i64>* %xmm2, align 16, !tbaa !2
  %646 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr526 = getelementptr inbounds i8, i8* %646, i64 -5
  %add.ptr527 = getelementptr inbounds i8, i8* %add.ptr526, i64 48
  %647 = bitcast i8* %add.ptr527 to <2 x i64>*
  %call528 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %647)
  store <2 x i64> %call528, <2 x i64>* %xmm3, align 16, !tbaa !2
  %648 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr529 = getelementptr inbounds i8, i8* %648, i64 -5
  %add.ptr530 = getelementptr inbounds i8, i8* %add.ptr529, i64 64
  %649 = bitcast i8* %add.ptr530 to <2 x i64>*
  %call531 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %649)
  store <2 x i64> %call531, <2 x i64>* %xmm4, align 16, !tbaa !2
  %650 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr532 = getelementptr inbounds i8, i8* %650, i64 -5
  %add.ptr533 = getelementptr inbounds i8, i8* %add.ptr532, i64 80
  %651 = bitcast i8* %add.ptr533 to <2 x i64>*
  %call534 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %651)
  store <2 x i64> %call534, <2 x i64>* %xmm5, align 16, !tbaa !2
  %652 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr535 = getelementptr inbounds i8, i8* %652, i64 -5
  %add.ptr536 = getelementptr inbounds i8, i8* %add.ptr535, i64 96
  %653 = bitcast i8* %add.ptr536 to <2 x i64>*
  %call537 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %653)
  store <2 x i64> %call537, <2 x i64>* %xmm6, align 16, !tbaa !2
  %654 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr538 = getelementptr inbounds i8, i8* %654, i64 -5
  %add.ptr539 = getelementptr inbounds i8, i8* %add.ptr538, i64 112
  %655 = bitcast i8* %add.ptr539 to <2 x i64>*
  %call540 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %655)
  store <2 x i64> %call540, <2 x i64>* %xmm7, align 16, !tbaa !2
  %656 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr541 = getelementptr inbounds i8, i8* %656, i64 -5
  %add.ptr542 = getelementptr inbounds i8, i8* %add.ptr541, i64 128
  %657 = bitcast i8* %add.ptr542 to <2 x i64>*
  %call543 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %657)
  store <2 x i64> %call543, <2 x i64>* %xmm8, align 16, !tbaa !2
  %658 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr544 = getelementptr inbounds i8, i8* %658, i64 128
  store i8* %add.ptr544, i8** %src.addr, align 8, !tbaa !5
  %659 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr545 = getelementptr inbounds i8, i8* %659, i64 0
  %660 = bitcast i8* %add.ptr545 to <2 x i64>*
  %661 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %662 = bitcast <2 x i64> %661 to <16 x i8>
  %663 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %664 = bitcast <2 x i64> %663 to <16 x i8>
  %palignr546 = shufflevector <16 x i8> %664, <16 x i8> %662, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %665 = bitcast <16 x i8> %palignr546 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %660, <2 x i64> %665)
  %666 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr547 = getelementptr inbounds i8, i8* %666, i64 16
  %667 = bitcast i8* %add.ptr547 to <2 x i64>*
  %668 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %669 = bitcast <2 x i64> %668 to <16 x i8>
  %670 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %671 = bitcast <2 x i64> %670 to <16 x i8>
  %palignr548 = shufflevector <16 x i8> %671, <16 x i8> %669, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %672 = bitcast <16 x i8> %palignr548 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %667, <2 x i64> %672)
  %673 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr549 = getelementptr inbounds i8, i8* %673, i64 32
  %674 = bitcast i8* %add.ptr549 to <2 x i64>*
  %675 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %676 = bitcast <2 x i64> %675 to <16 x i8>
  %677 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %678 = bitcast <2 x i64> %677 to <16 x i8>
  %palignr550 = shufflevector <16 x i8> %678, <16 x i8> %676, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %679 = bitcast <16 x i8> %palignr550 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %674, <2 x i64> %679)
  %680 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr551 = getelementptr inbounds i8, i8* %680, i64 48
  %681 = bitcast i8* %add.ptr551 to <2 x i64>*
  %682 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %683 = bitcast <2 x i64> %682 to <16 x i8>
  %684 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %685 = bitcast <2 x i64> %684 to <16 x i8>
  %palignr552 = shufflevector <16 x i8> %685, <16 x i8> %683, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %686 = bitcast <16 x i8> %palignr552 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %681, <2 x i64> %686)
  %687 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr553 = getelementptr inbounds i8, i8* %687, i64 64
  %688 = bitcast i8* %add.ptr553 to <2 x i64>*
  %689 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %690 = bitcast <2 x i64> %689 to <16 x i8>
  %691 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %692 = bitcast <2 x i64> %691 to <16 x i8>
  %palignr554 = shufflevector <16 x i8> %692, <16 x i8> %690, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %693 = bitcast <16 x i8> %palignr554 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %688, <2 x i64> %693)
  %694 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr555 = getelementptr inbounds i8, i8* %694, i64 80
  %695 = bitcast i8* %add.ptr555 to <2 x i64>*
  %696 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %697 = bitcast <2 x i64> %696 to <16 x i8>
  %698 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %699 = bitcast <2 x i64> %698 to <16 x i8>
  %palignr556 = shufflevector <16 x i8> %699, <16 x i8> %697, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %700 = bitcast <16 x i8> %palignr556 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %695, <2 x i64> %700)
  %701 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr557 = getelementptr inbounds i8, i8* %701, i64 96
  %702 = bitcast i8* %add.ptr557 to <2 x i64>*
  %703 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %704 = bitcast <2 x i64> %703 to <16 x i8>
  %705 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %706 = bitcast <2 x i64> %705 to <16 x i8>
  %palignr558 = shufflevector <16 x i8> %706, <16 x i8> %704, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %707 = bitcast <16 x i8> %palignr558 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %702, <2 x i64> %707)
  %708 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr559 = getelementptr inbounds i8, i8* %708, i64 112
  %709 = bitcast i8* %add.ptr559 to <2 x i64>*
  %710 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %711 = bitcast <2 x i64> %710 to <16 x i8>
  %712 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %713 = bitcast <2 x i64> %712 to <16 x i8>
  %palignr560 = shufflevector <16 x i8> %713, <16 x i8> %711, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %714 = bitcast <16 x i8> %palignr560 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %709, <2 x i64> %714)
  %715 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr561 = getelementptr inbounds i8, i8* %715, i64 128
  store i8* %add.ptr561, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond512

while.end562:                                     ; preds = %while.cond512
  %716 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv563 = trunc i64 %716 to i32
  store i32 %conv563, i32* %tmp511, align 4, !tbaa !9
  %717 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub564 = sub i64 %717, 16
  %add565 = add i64 %sub564, 5
  %and566 = and i64 %add565, 127
  %add567 = add i64 %and566, 16
  %sub568 = sub i64 %add567, 5
  store i64 %sub568, i64* %n.addr, align 8, !tbaa !19
  %718 = load i64, i64* %n.addr, align 8, !tbaa !19
  %719 = load i32, i32* %tmp511, align 4, !tbaa !9
  %conv569 = sext i32 %719 to i64
  %sub570 = sub i64 %conv569, %718
  %conv571 = trunc i64 %sub570 to i32
  store i32 %conv571, i32* %tmp511, align 4, !tbaa !9
  %720 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %721 = load i32, i32* %tmp511, align 4, !tbaa !9
  %idx.ext572 = sext i32 %721 to i64
  %add.ptr573 = getelementptr inbounds i8, i8* %720, i64 %idx.ext572
  store i8* %add.ptr573, i8** %src.addr, align 8, !tbaa !5
  %722 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %723 = load i32, i32* %tmp511, align 4, !tbaa !9
  %idx.ext574 = sext i32 %723 to i64
  %add.ptr575 = getelementptr inbounds i8, i8* %722, i64 %idx.ext574
  store i8* %add.ptr575, i8** %dst.addr, align 8, !tbaa !5
  %724 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp576 = icmp uge i64 %724, 43
  br i1 %cmp576, label %if.then578, label %if.end613

if.then578:                                       ; preds = %while.end562
  br label %while.cond579

while.cond579:                                    ; preds = %while.body582, %if.then578
  %725 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp580 = icmp uge i64 %725, 43
  br i1 %cmp580, label %while.body582, label %while.end599

while.body582:                                    ; preds = %while.cond579
  %726 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr583 = getelementptr inbounds i8, i8* %726, i64 -5
  %add.ptr584 = getelementptr inbounds i8, i8* %add.ptr583, i64 0
  %727 = bitcast i8* %add.ptr584 to <2 x i64>*
  %call585 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %727)
  store <2 x i64> %call585, <2 x i64>* %xmm0, align 16, !tbaa !2
  %728 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub586 = sub i64 %728, 32
  store i64 %sub586, i64* %n.addr, align 8, !tbaa !19
  %729 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr587 = getelementptr inbounds i8, i8* %729, i64 -5
  %add.ptr588 = getelementptr inbounds i8, i8* %add.ptr587, i64 16
  %730 = bitcast i8* %add.ptr588 to <2 x i64>*
  %call589 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %730)
  store <2 x i64> %call589, <2 x i64>* %xmm1, align 16, !tbaa !2
  %731 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr590 = getelementptr inbounds i8, i8* %731, i64 -5
  %add.ptr591 = getelementptr inbounds i8, i8* %add.ptr590, i64 32
  %732 = bitcast i8* %add.ptr591 to <2 x i64>*
  %call592 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %732)
  store <2 x i64> %call592, <2 x i64>* %xmm2, align 16, !tbaa !2
  %733 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr593 = getelementptr inbounds i8, i8* %733, i64 32
  store i8* %add.ptr593, i8** %src.addr, align 8, !tbaa !5
  %734 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr594 = getelementptr inbounds i8, i8* %734, i64 0
  %735 = bitcast i8* %add.ptr594 to <2 x i64>*
  %736 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %737 = bitcast <2 x i64> %736 to <16 x i8>
  %738 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %739 = bitcast <2 x i64> %738 to <16 x i8>
  %palignr595 = shufflevector <16 x i8> %739, <16 x i8> %737, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %740 = bitcast <16 x i8> %palignr595 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %735, <2 x i64> %740)
  %741 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr596 = getelementptr inbounds i8, i8* %741, i64 16
  %742 = bitcast i8* %add.ptr596 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %744 = bitcast <2 x i64> %743 to <16 x i8>
  %745 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %746 = bitcast <2 x i64> %745 to <16 x i8>
  %palignr597 = shufflevector <16 x i8> %746, <16 x i8> %744, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %747 = bitcast <16 x i8> %palignr597 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %742, <2 x i64> %747)
  %748 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr598 = getelementptr inbounds i8, i8* %748, i64 32
  store i8* %add.ptr598, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond579

while.end599:                                     ; preds = %while.cond579
  %749 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv600 = trunc i64 %749 to i32
  store i32 %conv600, i32* %tmp511, align 4, !tbaa !9
  %750 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub601 = sub i64 %750, 16
  %add602 = add i64 %sub601, 5
  %and603 = and i64 %add602, 31
  %add604 = add i64 %and603, 16
  %sub605 = sub i64 %add604, 5
  store i64 %sub605, i64* %n.addr, align 8, !tbaa !19
  %751 = load i64, i64* %n.addr, align 8, !tbaa !19
  %752 = load i32, i32* %tmp511, align 4, !tbaa !9
  %conv606 = sext i32 %752 to i64
  %sub607 = sub i64 %conv606, %751
  %conv608 = trunc i64 %sub607 to i32
  store i32 %conv608, i32* %tmp511, align 4, !tbaa !9
  %753 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %754 = load i32, i32* %tmp511, align 4, !tbaa !9
  %idx.ext609 = sext i32 %754 to i64
  %add.ptr610 = getelementptr inbounds i8, i8* %753, i64 %idx.ext609
  store i8* %add.ptr610, i8** %src.addr, align 8, !tbaa !5
  %755 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %756 = load i32, i32* %tmp511, align 4, !tbaa !9
  %idx.ext611 = sext i32 %756 to i64
  %add.ptr612 = getelementptr inbounds i8, i8* %755, i64 %idx.ext611
  store i8* %add.ptr612, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end613

if.end613:                                        ; preds = %while.end599, %while.end562
  %757 = bitcast i32* %tmp511 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %757) #6
  br label %sw.epilog

sw.bb614:                                         ; preds = %if.end103
  %758 = bitcast i32* %tmp615 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %758) #6
  br label %while.cond616

while.cond616:                                    ; preds = %while.body619, %sw.bb614
  %759 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp617 = icmp uge i64 %759, 138
  br i1 %cmp617, label %while.body619, label %while.end666

while.body619:                                    ; preds = %while.cond616
  %760 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr620 = getelementptr inbounds i8, i8* %760, i64 -6
  %add.ptr621 = getelementptr inbounds i8, i8* %add.ptr620, i64 0
  %761 = bitcast i8* %add.ptr621 to <2 x i64>*
  %call622 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %761)
  store <2 x i64> %call622, <2 x i64>* %xmm0, align 16, !tbaa !2
  %762 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub623 = sub i64 %762, 128
  store i64 %sub623, i64* %n.addr, align 8, !tbaa !19
  %763 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr624 = getelementptr inbounds i8, i8* %763, i64 -6
  %add.ptr625 = getelementptr inbounds i8, i8* %add.ptr624, i64 16
  %764 = bitcast i8* %add.ptr625 to <2 x i64>*
  %call626 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %764)
  store <2 x i64> %call626, <2 x i64>* %xmm1, align 16, !tbaa !2
  %765 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr627 = getelementptr inbounds i8, i8* %765, i64 -6
  %add.ptr628 = getelementptr inbounds i8, i8* %add.ptr627, i64 32
  %766 = bitcast i8* %add.ptr628 to <2 x i64>*
  %call629 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %766)
  store <2 x i64> %call629, <2 x i64>* %xmm2, align 16, !tbaa !2
  %767 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr630 = getelementptr inbounds i8, i8* %767, i64 -6
  %add.ptr631 = getelementptr inbounds i8, i8* %add.ptr630, i64 48
  %768 = bitcast i8* %add.ptr631 to <2 x i64>*
  %call632 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %768)
  store <2 x i64> %call632, <2 x i64>* %xmm3, align 16, !tbaa !2
  %769 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr633 = getelementptr inbounds i8, i8* %769, i64 -6
  %add.ptr634 = getelementptr inbounds i8, i8* %add.ptr633, i64 64
  %770 = bitcast i8* %add.ptr634 to <2 x i64>*
  %call635 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %770)
  store <2 x i64> %call635, <2 x i64>* %xmm4, align 16, !tbaa !2
  %771 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr636 = getelementptr inbounds i8, i8* %771, i64 -6
  %add.ptr637 = getelementptr inbounds i8, i8* %add.ptr636, i64 80
  %772 = bitcast i8* %add.ptr637 to <2 x i64>*
  %call638 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %772)
  store <2 x i64> %call638, <2 x i64>* %xmm5, align 16, !tbaa !2
  %773 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr639 = getelementptr inbounds i8, i8* %773, i64 -6
  %add.ptr640 = getelementptr inbounds i8, i8* %add.ptr639, i64 96
  %774 = bitcast i8* %add.ptr640 to <2 x i64>*
  %call641 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %774)
  store <2 x i64> %call641, <2 x i64>* %xmm6, align 16, !tbaa !2
  %775 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr642 = getelementptr inbounds i8, i8* %775, i64 -6
  %add.ptr643 = getelementptr inbounds i8, i8* %add.ptr642, i64 112
  %776 = bitcast i8* %add.ptr643 to <2 x i64>*
  %call644 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %776)
  store <2 x i64> %call644, <2 x i64>* %xmm7, align 16, !tbaa !2
  %777 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr645 = getelementptr inbounds i8, i8* %777, i64 -6
  %add.ptr646 = getelementptr inbounds i8, i8* %add.ptr645, i64 128
  %778 = bitcast i8* %add.ptr646 to <2 x i64>*
  %call647 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %778)
  store <2 x i64> %call647, <2 x i64>* %xmm8, align 16, !tbaa !2
  %779 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr648 = getelementptr inbounds i8, i8* %779, i64 128
  store i8* %add.ptr648, i8** %src.addr, align 8, !tbaa !5
  %780 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr649 = getelementptr inbounds i8, i8* %780, i64 0
  %781 = bitcast i8* %add.ptr649 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %783 = bitcast <2 x i64> %782 to <16 x i8>
  %784 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %785 = bitcast <2 x i64> %784 to <16 x i8>
  %palignr650 = shufflevector <16 x i8> %785, <16 x i8> %783, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %786 = bitcast <16 x i8> %palignr650 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %781, <2 x i64> %786)
  %787 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr651 = getelementptr inbounds i8, i8* %787, i64 16
  %788 = bitcast i8* %add.ptr651 to <2 x i64>*
  %789 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %790 = bitcast <2 x i64> %789 to <16 x i8>
  %791 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %792 = bitcast <2 x i64> %791 to <16 x i8>
  %palignr652 = shufflevector <16 x i8> %792, <16 x i8> %790, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %793 = bitcast <16 x i8> %palignr652 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %788, <2 x i64> %793)
  %794 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr653 = getelementptr inbounds i8, i8* %794, i64 32
  %795 = bitcast i8* %add.ptr653 to <2 x i64>*
  %796 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %797 = bitcast <2 x i64> %796 to <16 x i8>
  %798 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %799 = bitcast <2 x i64> %798 to <16 x i8>
  %palignr654 = shufflevector <16 x i8> %799, <16 x i8> %797, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %800 = bitcast <16 x i8> %palignr654 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %795, <2 x i64> %800)
  %801 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr655 = getelementptr inbounds i8, i8* %801, i64 48
  %802 = bitcast i8* %add.ptr655 to <2 x i64>*
  %803 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %804 = bitcast <2 x i64> %803 to <16 x i8>
  %805 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %806 = bitcast <2 x i64> %805 to <16 x i8>
  %palignr656 = shufflevector <16 x i8> %806, <16 x i8> %804, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %807 = bitcast <16 x i8> %palignr656 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %802, <2 x i64> %807)
  %808 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr657 = getelementptr inbounds i8, i8* %808, i64 64
  %809 = bitcast i8* %add.ptr657 to <2 x i64>*
  %810 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %811 = bitcast <2 x i64> %810 to <16 x i8>
  %812 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %813 = bitcast <2 x i64> %812 to <16 x i8>
  %palignr658 = shufflevector <16 x i8> %813, <16 x i8> %811, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %814 = bitcast <16 x i8> %palignr658 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %809, <2 x i64> %814)
  %815 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr659 = getelementptr inbounds i8, i8* %815, i64 80
  %816 = bitcast i8* %add.ptr659 to <2 x i64>*
  %817 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %818 = bitcast <2 x i64> %817 to <16 x i8>
  %819 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %820 = bitcast <2 x i64> %819 to <16 x i8>
  %palignr660 = shufflevector <16 x i8> %820, <16 x i8> %818, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %821 = bitcast <16 x i8> %palignr660 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %816, <2 x i64> %821)
  %822 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr661 = getelementptr inbounds i8, i8* %822, i64 96
  %823 = bitcast i8* %add.ptr661 to <2 x i64>*
  %824 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %825 = bitcast <2 x i64> %824 to <16 x i8>
  %826 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %827 = bitcast <2 x i64> %826 to <16 x i8>
  %palignr662 = shufflevector <16 x i8> %827, <16 x i8> %825, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %828 = bitcast <16 x i8> %palignr662 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %823, <2 x i64> %828)
  %829 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr663 = getelementptr inbounds i8, i8* %829, i64 112
  %830 = bitcast i8* %add.ptr663 to <2 x i64>*
  %831 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %832 = bitcast <2 x i64> %831 to <16 x i8>
  %833 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %834 = bitcast <2 x i64> %833 to <16 x i8>
  %palignr664 = shufflevector <16 x i8> %834, <16 x i8> %832, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %835 = bitcast <16 x i8> %palignr664 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %830, <2 x i64> %835)
  %836 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr665 = getelementptr inbounds i8, i8* %836, i64 128
  store i8* %add.ptr665, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond616

while.end666:                                     ; preds = %while.cond616
  %837 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv667 = trunc i64 %837 to i32
  store i32 %conv667, i32* %tmp615, align 4, !tbaa !9
  %838 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub668 = sub i64 %838, 16
  %add669 = add i64 %sub668, 6
  %and670 = and i64 %add669, 127
  %add671 = add i64 %and670, 16
  %sub672 = sub i64 %add671, 6
  store i64 %sub672, i64* %n.addr, align 8, !tbaa !19
  %839 = load i64, i64* %n.addr, align 8, !tbaa !19
  %840 = load i32, i32* %tmp615, align 4, !tbaa !9
  %conv673 = sext i32 %840 to i64
  %sub674 = sub i64 %conv673, %839
  %conv675 = trunc i64 %sub674 to i32
  store i32 %conv675, i32* %tmp615, align 4, !tbaa !9
  %841 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %842 = load i32, i32* %tmp615, align 4, !tbaa !9
  %idx.ext676 = sext i32 %842 to i64
  %add.ptr677 = getelementptr inbounds i8, i8* %841, i64 %idx.ext676
  store i8* %add.ptr677, i8** %src.addr, align 8, !tbaa !5
  %843 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %844 = load i32, i32* %tmp615, align 4, !tbaa !9
  %idx.ext678 = sext i32 %844 to i64
  %add.ptr679 = getelementptr inbounds i8, i8* %843, i64 %idx.ext678
  store i8* %add.ptr679, i8** %dst.addr, align 8, !tbaa !5
  %845 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp680 = icmp uge i64 %845, 42
  br i1 %cmp680, label %if.then682, label %if.end717

if.then682:                                       ; preds = %while.end666
  br label %while.cond683

while.cond683:                                    ; preds = %while.body686, %if.then682
  %846 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp684 = icmp uge i64 %846, 42
  br i1 %cmp684, label %while.body686, label %while.end703

while.body686:                                    ; preds = %while.cond683
  %847 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr687 = getelementptr inbounds i8, i8* %847, i64 -6
  %add.ptr688 = getelementptr inbounds i8, i8* %add.ptr687, i64 0
  %848 = bitcast i8* %add.ptr688 to <2 x i64>*
  %call689 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %848)
  store <2 x i64> %call689, <2 x i64>* %xmm0, align 16, !tbaa !2
  %849 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub690 = sub i64 %849, 32
  store i64 %sub690, i64* %n.addr, align 8, !tbaa !19
  %850 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr691 = getelementptr inbounds i8, i8* %850, i64 -6
  %add.ptr692 = getelementptr inbounds i8, i8* %add.ptr691, i64 16
  %851 = bitcast i8* %add.ptr692 to <2 x i64>*
  %call693 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %851)
  store <2 x i64> %call693, <2 x i64>* %xmm1, align 16, !tbaa !2
  %852 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr694 = getelementptr inbounds i8, i8* %852, i64 -6
  %add.ptr695 = getelementptr inbounds i8, i8* %add.ptr694, i64 32
  %853 = bitcast i8* %add.ptr695 to <2 x i64>*
  %call696 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %853)
  store <2 x i64> %call696, <2 x i64>* %xmm2, align 16, !tbaa !2
  %854 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr697 = getelementptr inbounds i8, i8* %854, i64 32
  store i8* %add.ptr697, i8** %src.addr, align 8, !tbaa !5
  %855 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr698 = getelementptr inbounds i8, i8* %855, i64 0
  %856 = bitcast i8* %add.ptr698 to <2 x i64>*
  %857 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %858 = bitcast <2 x i64> %857 to <16 x i8>
  %859 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %860 = bitcast <2 x i64> %859 to <16 x i8>
  %palignr699 = shufflevector <16 x i8> %860, <16 x i8> %858, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %861 = bitcast <16 x i8> %palignr699 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %856, <2 x i64> %861)
  %862 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr700 = getelementptr inbounds i8, i8* %862, i64 16
  %863 = bitcast i8* %add.ptr700 to <2 x i64>*
  %864 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %865 = bitcast <2 x i64> %864 to <16 x i8>
  %866 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %867 = bitcast <2 x i64> %866 to <16 x i8>
  %palignr701 = shufflevector <16 x i8> %867, <16 x i8> %865, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %868 = bitcast <16 x i8> %palignr701 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %863, <2 x i64> %868)
  %869 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr702 = getelementptr inbounds i8, i8* %869, i64 32
  store i8* %add.ptr702, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond683

while.end703:                                     ; preds = %while.cond683
  %870 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv704 = trunc i64 %870 to i32
  store i32 %conv704, i32* %tmp615, align 4, !tbaa !9
  %871 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub705 = sub i64 %871, 16
  %add706 = add i64 %sub705, 6
  %and707 = and i64 %add706, 31
  %add708 = add i64 %and707, 16
  %sub709 = sub i64 %add708, 6
  store i64 %sub709, i64* %n.addr, align 8, !tbaa !19
  %872 = load i64, i64* %n.addr, align 8, !tbaa !19
  %873 = load i32, i32* %tmp615, align 4, !tbaa !9
  %conv710 = sext i32 %873 to i64
  %sub711 = sub i64 %conv710, %872
  %conv712 = trunc i64 %sub711 to i32
  store i32 %conv712, i32* %tmp615, align 4, !tbaa !9
  %874 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %875 = load i32, i32* %tmp615, align 4, !tbaa !9
  %idx.ext713 = sext i32 %875 to i64
  %add.ptr714 = getelementptr inbounds i8, i8* %874, i64 %idx.ext713
  store i8* %add.ptr714, i8** %src.addr, align 8, !tbaa !5
  %876 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %877 = load i32, i32* %tmp615, align 4, !tbaa !9
  %idx.ext715 = sext i32 %877 to i64
  %add.ptr716 = getelementptr inbounds i8, i8* %876, i64 %idx.ext715
  store i8* %add.ptr716, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end717

if.end717:                                        ; preds = %while.end703, %while.end666
  %878 = bitcast i32* %tmp615 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %878) #6
  br label %sw.epilog

sw.bb718:                                         ; preds = %if.end103
  %879 = bitcast i32* %tmp719 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %879) #6
  br label %while.cond720

while.cond720:                                    ; preds = %while.body723, %sw.bb718
  %880 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp721 = icmp uge i64 %880, 137
  br i1 %cmp721, label %while.body723, label %while.end770

while.body723:                                    ; preds = %while.cond720
  %881 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr724 = getelementptr inbounds i8, i8* %881, i64 -7
  %add.ptr725 = getelementptr inbounds i8, i8* %add.ptr724, i64 0
  %882 = bitcast i8* %add.ptr725 to <2 x i64>*
  %call726 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %882)
  store <2 x i64> %call726, <2 x i64>* %xmm0, align 16, !tbaa !2
  %883 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub727 = sub i64 %883, 128
  store i64 %sub727, i64* %n.addr, align 8, !tbaa !19
  %884 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr728 = getelementptr inbounds i8, i8* %884, i64 -7
  %add.ptr729 = getelementptr inbounds i8, i8* %add.ptr728, i64 16
  %885 = bitcast i8* %add.ptr729 to <2 x i64>*
  %call730 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %885)
  store <2 x i64> %call730, <2 x i64>* %xmm1, align 16, !tbaa !2
  %886 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr731 = getelementptr inbounds i8, i8* %886, i64 -7
  %add.ptr732 = getelementptr inbounds i8, i8* %add.ptr731, i64 32
  %887 = bitcast i8* %add.ptr732 to <2 x i64>*
  %call733 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %887)
  store <2 x i64> %call733, <2 x i64>* %xmm2, align 16, !tbaa !2
  %888 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr734 = getelementptr inbounds i8, i8* %888, i64 -7
  %add.ptr735 = getelementptr inbounds i8, i8* %add.ptr734, i64 48
  %889 = bitcast i8* %add.ptr735 to <2 x i64>*
  %call736 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %889)
  store <2 x i64> %call736, <2 x i64>* %xmm3, align 16, !tbaa !2
  %890 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr737 = getelementptr inbounds i8, i8* %890, i64 -7
  %add.ptr738 = getelementptr inbounds i8, i8* %add.ptr737, i64 64
  %891 = bitcast i8* %add.ptr738 to <2 x i64>*
  %call739 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %891)
  store <2 x i64> %call739, <2 x i64>* %xmm4, align 16, !tbaa !2
  %892 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr740 = getelementptr inbounds i8, i8* %892, i64 -7
  %add.ptr741 = getelementptr inbounds i8, i8* %add.ptr740, i64 80
  %893 = bitcast i8* %add.ptr741 to <2 x i64>*
  %call742 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %893)
  store <2 x i64> %call742, <2 x i64>* %xmm5, align 16, !tbaa !2
  %894 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr743 = getelementptr inbounds i8, i8* %894, i64 -7
  %add.ptr744 = getelementptr inbounds i8, i8* %add.ptr743, i64 96
  %895 = bitcast i8* %add.ptr744 to <2 x i64>*
  %call745 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %895)
  store <2 x i64> %call745, <2 x i64>* %xmm6, align 16, !tbaa !2
  %896 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr746 = getelementptr inbounds i8, i8* %896, i64 -7
  %add.ptr747 = getelementptr inbounds i8, i8* %add.ptr746, i64 112
  %897 = bitcast i8* %add.ptr747 to <2 x i64>*
  %call748 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %897)
  store <2 x i64> %call748, <2 x i64>* %xmm7, align 16, !tbaa !2
  %898 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr749 = getelementptr inbounds i8, i8* %898, i64 -7
  %add.ptr750 = getelementptr inbounds i8, i8* %add.ptr749, i64 128
  %899 = bitcast i8* %add.ptr750 to <2 x i64>*
  %call751 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %899)
  store <2 x i64> %call751, <2 x i64>* %xmm8, align 16, !tbaa !2
  %900 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr752 = getelementptr inbounds i8, i8* %900, i64 128
  store i8* %add.ptr752, i8** %src.addr, align 8, !tbaa !5
  %901 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr753 = getelementptr inbounds i8, i8* %901, i64 0
  %902 = bitcast i8* %add.ptr753 to <2 x i64>*
  %903 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %904 = bitcast <2 x i64> %903 to <16 x i8>
  %905 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %906 = bitcast <2 x i64> %905 to <16 x i8>
  %palignr754 = shufflevector <16 x i8> %906, <16 x i8> %904, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %907 = bitcast <16 x i8> %palignr754 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %902, <2 x i64> %907)
  %908 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr755 = getelementptr inbounds i8, i8* %908, i64 16
  %909 = bitcast i8* %add.ptr755 to <2 x i64>*
  %910 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %911 = bitcast <2 x i64> %910 to <16 x i8>
  %912 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %913 = bitcast <2 x i64> %912 to <16 x i8>
  %palignr756 = shufflevector <16 x i8> %913, <16 x i8> %911, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %914 = bitcast <16 x i8> %palignr756 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %909, <2 x i64> %914)
  %915 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr757 = getelementptr inbounds i8, i8* %915, i64 32
  %916 = bitcast i8* %add.ptr757 to <2 x i64>*
  %917 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %918 = bitcast <2 x i64> %917 to <16 x i8>
  %919 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %920 = bitcast <2 x i64> %919 to <16 x i8>
  %palignr758 = shufflevector <16 x i8> %920, <16 x i8> %918, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %921 = bitcast <16 x i8> %palignr758 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %916, <2 x i64> %921)
  %922 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr759 = getelementptr inbounds i8, i8* %922, i64 48
  %923 = bitcast i8* %add.ptr759 to <2 x i64>*
  %924 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %925 = bitcast <2 x i64> %924 to <16 x i8>
  %926 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %927 = bitcast <2 x i64> %926 to <16 x i8>
  %palignr760 = shufflevector <16 x i8> %927, <16 x i8> %925, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %928 = bitcast <16 x i8> %palignr760 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %923, <2 x i64> %928)
  %929 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr761 = getelementptr inbounds i8, i8* %929, i64 64
  %930 = bitcast i8* %add.ptr761 to <2 x i64>*
  %931 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %932 = bitcast <2 x i64> %931 to <16 x i8>
  %933 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %934 = bitcast <2 x i64> %933 to <16 x i8>
  %palignr762 = shufflevector <16 x i8> %934, <16 x i8> %932, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %935 = bitcast <16 x i8> %palignr762 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %930, <2 x i64> %935)
  %936 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr763 = getelementptr inbounds i8, i8* %936, i64 80
  %937 = bitcast i8* %add.ptr763 to <2 x i64>*
  %938 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %939 = bitcast <2 x i64> %938 to <16 x i8>
  %940 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %941 = bitcast <2 x i64> %940 to <16 x i8>
  %palignr764 = shufflevector <16 x i8> %941, <16 x i8> %939, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %942 = bitcast <16 x i8> %palignr764 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %937, <2 x i64> %942)
  %943 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr765 = getelementptr inbounds i8, i8* %943, i64 96
  %944 = bitcast i8* %add.ptr765 to <2 x i64>*
  %945 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %946 = bitcast <2 x i64> %945 to <16 x i8>
  %947 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %948 = bitcast <2 x i64> %947 to <16 x i8>
  %palignr766 = shufflevector <16 x i8> %948, <16 x i8> %946, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %949 = bitcast <16 x i8> %palignr766 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %944, <2 x i64> %949)
  %950 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr767 = getelementptr inbounds i8, i8* %950, i64 112
  %951 = bitcast i8* %add.ptr767 to <2 x i64>*
  %952 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %953 = bitcast <2 x i64> %952 to <16 x i8>
  %954 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %955 = bitcast <2 x i64> %954 to <16 x i8>
  %palignr768 = shufflevector <16 x i8> %955, <16 x i8> %953, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %956 = bitcast <16 x i8> %palignr768 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %951, <2 x i64> %956)
  %957 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr769 = getelementptr inbounds i8, i8* %957, i64 128
  store i8* %add.ptr769, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond720

while.end770:                                     ; preds = %while.cond720
  %958 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv771 = trunc i64 %958 to i32
  store i32 %conv771, i32* %tmp719, align 4, !tbaa !9
  %959 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub772 = sub i64 %959, 16
  %add773 = add i64 %sub772, 7
  %and774 = and i64 %add773, 127
  %add775 = add i64 %and774, 16
  %sub776 = sub i64 %add775, 7
  store i64 %sub776, i64* %n.addr, align 8, !tbaa !19
  %960 = load i64, i64* %n.addr, align 8, !tbaa !19
  %961 = load i32, i32* %tmp719, align 4, !tbaa !9
  %conv777 = sext i32 %961 to i64
  %sub778 = sub i64 %conv777, %960
  %conv779 = trunc i64 %sub778 to i32
  store i32 %conv779, i32* %tmp719, align 4, !tbaa !9
  %962 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %963 = load i32, i32* %tmp719, align 4, !tbaa !9
  %idx.ext780 = sext i32 %963 to i64
  %add.ptr781 = getelementptr inbounds i8, i8* %962, i64 %idx.ext780
  store i8* %add.ptr781, i8** %src.addr, align 8, !tbaa !5
  %964 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %965 = load i32, i32* %tmp719, align 4, !tbaa !9
  %idx.ext782 = sext i32 %965 to i64
  %add.ptr783 = getelementptr inbounds i8, i8* %964, i64 %idx.ext782
  store i8* %add.ptr783, i8** %dst.addr, align 8, !tbaa !5
  %966 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp784 = icmp uge i64 %966, 41
  br i1 %cmp784, label %if.then786, label %if.end821

if.then786:                                       ; preds = %while.end770
  br label %while.cond787

while.cond787:                                    ; preds = %while.body790, %if.then786
  %967 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp788 = icmp uge i64 %967, 41
  br i1 %cmp788, label %while.body790, label %while.end807

while.body790:                                    ; preds = %while.cond787
  %968 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr791 = getelementptr inbounds i8, i8* %968, i64 -7
  %add.ptr792 = getelementptr inbounds i8, i8* %add.ptr791, i64 0
  %969 = bitcast i8* %add.ptr792 to <2 x i64>*
  %call793 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %969)
  store <2 x i64> %call793, <2 x i64>* %xmm0, align 16, !tbaa !2
  %970 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub794 = sub i64 %970, 32
  store i64 %sub794, i64* %n.addr, align 8, !tbaa !19
  %971 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr795 = getelementptr inbounds i8, i8* %971, i64 -7
  %add.ptr796 = getelementptr inbounds i8, i8* %add.ptr795, i64 16
  %972 = bitcast i8* %add.ptr796 to <2 x i64>*
  %call797 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %972)
  store <2 x i64> %call797, <2 x i64>* %xmm1, align 16, !tbaa !2
  %973 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr798 = getelementptr inbounds i8, i8* %973, i64 -7
  %add.ptr799 = getelementptr inbounds i8, i8* %add.ptr798, i64 32
  %974 = bitcast i8* %add.ptr799 to <2 x i64>*
  %call800 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %974)
  store <2 x i64> %call800, <2 x i64>* %xmm2, align 16, !tbaa !2
  %975 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr801 = getelementptr inbounds i8, i8* %975, i64 32
  store i8* %add.ptr801, i8** %src.addr, align 8, !tbaa !5
  %976 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr802 = getelementptr inbounds i8, i8* %976, i64 0
  %977 = bitcast i8* %add.ptr802 to <2 x i64>*
  %978 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %979 = bitcast <2 x i64> %978 to <16 x i8>
  %980 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %981 = bitcast <2 x i64> %980 to <16 x i8>
  %palignr803 = shufflevector <16 x i8> %981, <16 x i8> %979, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %982 = bitcast <16 x i8> %palignr803 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %977, <2 x i64> %982)
  %983 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr804 = getelementptr inbounds i8, i8* %983, i64 16
  %984 = bitcast i8* %add.ptr804 to <2 x i64>*
  %985 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %986 = bitcast <2 x i64> %985 to <16 x i8>
  %987 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %988 = bitcast <2 x i64> %987 to <16 x i8>
  %palignr805 = shufflevector <16 x i8> %988, <16 x i8> %986, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %989 = bitcast <16 x i8> %palignr805 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %984, <2 x i64> %989)
  %990 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr806 = getelementptr inbounds i8, i8* %990, i64 32
  store i8* %add.ptr806, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond787

while.end807:                                     ; preds = %while.cond787
  %991 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv808 = trunc i64 %991 to i32
  store i32 %conv808, i32* %tmp719, align 4, !tbaa !9
  %992 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub809 = sub i64 %992, 16
  %add810 = add i64 %sub809, 7
  %and811 = and i64 %add810, 31
  %add812 = add i64 %and811, 16
  %sub813 = sub i64 %add812, 7
  store i64 %sub813, i64* %n.addr, align 8, !tbaa !19
  %993 = load i64, i64* %n.addr, align 8, !tbaa !19
  %994 = load i32, i32* %tmp719, align 4, !tbaa !9
  %conv814 = sext i32 %994 to i64
  %sub815 = sub i64 %conv814, %993
  %conv816 = trunc i64 %sub815 to i32
  store i32 %conv816, i32* %tmp719, align 4, !tbaa !9
  %995 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %996 = load i32, i32* %tmp719, align 4, !tbaa !9
  %idx.ext817 = sext i32 %996 to i64
  %add.ptr818 = getelementptr inbounds i8, i8* %995, i64 %idx.ext817
  store i8* %add.ptr818, i8** %src.addr, align 8, !tbaa !5
  %997 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %998 = load i32, i32* %tmp719, align 4, !tbaa !9
  %idx.ext819 = sext i32 %998 to i64
  %add.ptr820 = getelementptr inbounds i8, i8* %997, i64 %idx.ext819
  store i8* %add.ptr820, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end821

if.end821:                                        ; preds = %while.end807, %while.end770
  %999 = bitcast i32* %tmp719 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %999) #6
  br label %sw.epilog

sw.bb822:                                         ; preds = %if.end103
  %1000 = bitcast i32* %tmp823 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1000) #6
  br label %while.cond824

while.cond824:                                    ; preds = %while.body827, %sw.bb822
  %1001 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp825 = icmp uge i64 %1001, 136
  br i1 %cmp825, label %while.body827, label %while.end874

while.body827:                                    ; preds = %while.cond824
  %1002 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr828 = getelementptr inbounds i8, i8* %1002, i64 -8
  %add.ptr829 = getelementptr inbounds i8, i8* %add.ptr828, i64 0
  %1003 = bitcast i8* %add.ptr829 to <2 x i64>*
  %call830 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1003)
  store <2 x i64> %call830, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1004 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub831 = sub i64 %1004, 128
  store i64 %sub831, i64* %n.addr, align 8, !tbaa !19
  %1005 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr832 = getelementptr inbounds i8, i8* %1005, i64 -8
  %add.ptr833 = getelementptr inbounds i8, i8* %add.ptr832, i64 16
  %1006 = bitcast i8* %add.ptr833 to <2 x i64>*
  %call834 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1006)
  store <2 x i64> %call834, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1007 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr835 = getelementptr inbounds i8, i8* %1007, i64 -8
  %add.ptr836 = getelementptr inbounds i8, i8* %add.ptr835, i64 32
  %1008 = bitcast i8* %add.ptr836 to <2 x i64>*
  %call837 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1008)
  store <2 x i64> %call837, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1009 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr838 = getelementptr inbounds i8, i8* %1009, i64 -8
  %add.ptr839 = getelementptr inbounds i8, i8* %add.ptr838, i64 48
  %1010 = bitcast i8* %add.ptr839 to <2 x i64>*
  %call840 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1010)
  store <2 x i64> %call840, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1011 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr841 = getelementptr inbounds i8, i8* %1011, i64 -8
  %add.ptr842 = getelementptr inbounds i8, i8* %add.ptr841, i64 64
  %1012 = bitcast i8* %add.ptr842 to <2 x i64>*
  %call843 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1012)
  store <2 x i64> %call843, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1013 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr844 = getelementptr inbounds i8, i8* %1013, i64 -8
  %add.ptr845 = getelementptr inbounds i8, i8* %add.ptr844, i64 80
  %1014 = bitcast i8* %add.ptr845 to <2 x i64>*
  %call846 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1014)
  store <2 x i64> %call846, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1015 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr847 = getelementptr inbounds i8, i8* %1015, i64 -8
  %add.ptr848 = getelementptr inbounds i8, i8* %add.ptr847, i64 96
  %1016 = bitcast i8* %add.ptr848 to <2 x i64>*
  %call849 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1016)
  store <2 x i64> %call849, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1017 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr850 = getelementptr inbounds i8, i8* %1017, i64 -8
  %add.ptr851 = getelementptr inbounds i8, i8* %add.ptr850, i64 112
  %1018 = bitcast i8* %add.ptr851 to <2 x i64>*
  %call852 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1018)
  store <2 x i64> %call852, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1019 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr853 = getelementptr inbounds i8, i8* %1019, i64 -8
  %add.ptr854 = getelementptr inbounds i8, i8* %add.ptr853, i64 128
  %1020 = bitcast i8* %add.ptr854 to <2 x i64>*
  %call855 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1020)
  store <2 x i64> %call855, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1021 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr856 = getelementptr inbounds i8, i8* %1021, i64 128
  store i8* %add.ptr856, i8** %src.addr, align 8, !tbaa !5
  %1022 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr857 = getelementptr inbounds i8, i8* %1022, i64 0
  %1023 = bitcast i8* %add.ptr857 to <2 x i64>*
  %1024 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1025 = bitcast <2 x i64> %1024 to <16 x i8>
  %1026 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1027 = bitcast <2 x i64> %1026 to <16 x i8>
  %palignr858 = shufflevector <16 x i8> %1027, <16 x i8> %1025, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1028 = bitcast <16 x i8> %palignr858 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1023, <2 x i64> %1028)
  %1029 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr859 = getelementptr inbounds i8, i8* %1029, i64 16
  %1030 = bitcast i8* %add.ptr859 to <2 x i64>*
  %1031 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1032 = bitcast <2 x i64> %1031 to <16 x i8>
  %1033 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1034 = bitcast <2 x i64> %1033 to <16 x i8>
  %palignr860 = shufflevector <16 x i8> %1034, <16 x i8> %1032, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1035 = bitcast <16 x i8> %palignr860 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1030, <2 x i64> %1035)
  %1036 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr861 = getelementptr inbounds i8, i8* %1036, i64 32
  %1037 = bitcast i8* %add.ptr861 to <2 x i64>*
  %1038 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1039 = bitcast <2 x i64> %1038 to <16 x i8>
  %1040 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1041 = bitcast <2 x i64> %1040 to <16 x i8>
  %palignr862 = shufflevector <16 x i8> %1041, <16 x i8> %1039, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1042 = bitcast <16 x i8> %palignr862 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1037, <2 x i64> %1042)
  %1043 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr863 = getelementptr inbounds i8, i8* %1043, i64 48
  %1044 = bitcast i8* %add.ptr863 to <2 x i64>*
  %1045 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1046 = bitcast <2 x i64> %1045 to <16 x i8>
  %1047 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1048 = bitcast <2 x i64> %1047 to <16 x i8>
  %palignr864 = shufflevector <16 x i8> %1048, <16 x i8> %1046, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1049 = bitcast <16 x i8> %palignr864 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1044, <2 x i64> %1049)
  %1050 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr865 = getelementptr inbounds i8, i8* %1050, i64 64
  %1051 = bitcast i8* %add.ptr865 to <2 x i64>*
  %1052 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1053 = bitcast <2 x i64> %1052 to <16 x i8>
  %1054 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1055 = bitcast <2 x i64> %1054 to <16 x i8>
  %palignr866 = shufflevector <16 x i8> %1055, <16 x i8> %1053, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1056 = bitcast <16 x i8> %palignr866 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1051, <2 x i64> %1056)
  %1057 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr867 = getelementptr inbounds i8, i8* %1057, i64 80
  %1058 = bitcast i8* %add.ptr867 to <2 x i64>*
  %1059 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1060 = bitcast <2 x i64> %1059 to <16 x i8>
  %1061 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1062 = bitcast <2 x i64> %1061 to <16 x i8>
  %palignr868 = shufflevector <16 x i8> %1062, <16 x i8> %1060, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1063 = bitcast <16 x i8> %palignr868 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1058, <2 x i64> %1063)
  %1064 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr869 = getelementptr inbounds i8, i8* %1064, i64 96
  %1065 = bitcast i8* %add.ptr869 to <2 x i64>*
  %1066 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1067 = bitcast <2 x i64> %1066 to <16 x i8>
  %1068 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1069 = bitcast <2 x i64> %1068 to <16 x i8>
  %palignr870 = shufflevector <16 x i8> %1069, <16 x i8> %1067, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1070 = bitcast <16 x i8> %palignr870 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1065, <2 x i64> %1070)
  %1071 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr871 = getelementptr inbounds i8, i8* %1071, i64 112
  %1072 = bitcast i8* %add.ptr871 to <2 x i64>*
  %1073 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1074 = bitcast <2 x i64> %1073 to <16 x i8>
  %1075 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1076 = bitcast <2 x i64> %1075 to <16 x i8>
  %palignr872 = shufflevector <16 x i8> %1076, <16 x i8> %1074, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1077 = bitcast <16 x i8> %palignr872 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1072, <2 x i64> %1077)
  %1078 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr873 = getelementptr inbounds i8, i8* %1078, i64 128
  store i8* %add.ptr873, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond824

while.end874:                                     ; preds = %while.cond824
  %1079 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv875 = trunc i64 %1079 to i32
  store i32 %conv875, i32* %tmp823, align 4, !tbaa !9
  %1080 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub876 = sub i64 %1080, 16
  %add877 = add i64 %sub876, 8
  %and878 = and i64 %add877, 127
  %add879 = add i64 %and878, 16
  %sub880 = sub i64 %add879, 8
  store i64 %sub880, i64* %n.addr, align 8, !tbaa !19
  %1081 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1082 = load i32, i32* %tmp823, align 4, !tbaa !9
  %conv881 = sext i32 %1082 to i64
  %sub882 = sub i64 %conv881, %1081
  %conv883 = trunc i64 %sub882 to i32
  store i32 %conv883, i32* %tmp823, align 4, !tbaa !9
  %1083 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1084 = load i32, i32* %tmp823, align 4, !tbaa !9
  %idx.ext884 = sext i32 %1084 to i64
  %add.ptr885 = getelementptr inbounds i8, i8* %1083, i64 %idx.ext884
  store i8* %add.ptr885, i8** %src.addr, align 8, !tbaa !5
  %1085 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1086 = load i32, i32* %tmp823, align 4, !tbaa !9
  %idx.ext886 = sext i32 %1086 to i64
  %add.ptr887 = getelementptr inbounds i8, i8* %1085, i64 %idx.ext886
  store i8* %add.ptr887, i8** %dst.addr, align 8, !tbaa !5
  %1087 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp888 = icmp uge i64 %1087, 40
  br i1 %cmp888, label %if.then890, label %if.end925

if.then890:                                       ; preds = %while.end874
  br label %while.cond891

while.cond891:                                    ; preds = %while.body894, %if.then890
  %1088 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp892 = icmp uge i64 %1088, 40
  br i1 %cmp892, label %while.body894, label %while.end911

while.body894:                                    ; preds = %while.cond891
  %1089 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr895 = getelementptr inbounds i8, i8* %1089, i64 -8
  %add.ptr896 = getelementptr inbounds i8, i8* %add.ptr895, i64 0
  %1090 = bitcast i8* %add.ptr896 to <2 x i64>*
  %call897 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1090)
  store <2 x i64> %call897, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1091 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub898 = sub i64 %1091, 32
  store i64 %sub898, i64* %n.addr, align 8, !tbaa !19
  %1092 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr899 = getelementptr inbounds i8, i8* %1092, i64 -8
  %add.ptr900 = getelementptr inbounds i8, i8* %add.ptr899, i64 16
  %1093 = bitcast i8* %add.ptr900 to <2 x i64>*
  %call901 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1093)
  store <2 x i64> %call901, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1094 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr902 = getelementptr inbounds i8, i8* %1094, i64 -8
  %add.ptr903 = getelementptr inbounds i8, i8* %add.ptr902, i64 32
  %1095 = bitcast i8* %add.ptr903 to <2 x i64>*
  %call904 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1095)
  store <2 x i64> %call904, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1096 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr905 = getelementptr inbounds i8, i8* %1096, i64 32
  store i8* %add.ptr905, i8** %src.addr, align 8, !tbaa !5
  %1097 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr906 = getelementptr inbounds i8, i8* %1097, i64 0
  %1098 = bitcast i8* %add.ptr906 to <2 x i64>*
  %1099 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1100 = bitcast <2 x i64> %1099 to <16 x i8>
  %1101 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1102 = bitcast <2 x i64> %1101 to <16 x i8>
  %palignr907 = shufflevector <16 x i8> %1102, <16 x i8> %1100, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1103 = bitcast <16 x i8> %palignr907 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1098, <2 x i64> %1103)
  %1104 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr908 = getelementptr inbounds i8, i8* %1104, i64 16
  %1105 = bitcast i8* %add.ptr908 to <2 x i64>*
  %1106 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1107 = bitcast <2 x i64> %1106 to <16 x i8>
  %1108 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1109 = bitcast <2 x i64> %1108 to <16 x i8>
  %palignr909 = shufflevector <16 x i8> %1109, <16 x i8> %1107, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1110 = bitcast <16 x i8> %palignr909 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1105, <2 x i64> %1110)
  %1111 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr910 = getelementptr inbounds i8, i8* %1111, i64 32
  store i8* %add.ptr910, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond891

while.end911:                                     ; preds = %while.cond891
  %1112 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv912 = trunc i64 %1112 to i32
  store i32 %conv912, i32* %tmp823, align 4, !tbaa !9
  %1113 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub913 = sub i64 %1113, 16
  %add914 = add i64 %sub913, 8
  %and915 = and i64 %add914, 31
  %add916 = add i64 %and915, 16
  %sub917 = sub i64 %add916, 8
  store i64 %sub917, i64* %n.addr, align 8, !tbaa !19
  %1114 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1115 = load i32, i32* %tmp823, align 4, !tbaa !9
  %conv918 = sext i32 %1115 to i64
  %sub919 = sub i64 %conv918, %1114
  %conv920 = trunc i64 %sub919 to i32
  store i32 %conv920, i32* %tmp823, align 4, !tbaa !9
  %1116 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1117 = load i32, i32* %tmp823, align 4, !tbaa !9
  %idx.ext921 = sext i32 %1117 to i64
  %add.ptr922 = getelementptr inbounds i8, i8* %1116, i64 %idx.ext921
  store i8* %add.ptr922, i8** %src.addr, align 8, !tbaa !5
  %1118 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1119 = load i32, i32* %tmp823, align 4, !tbaa !9
  %idx.ext923 = sext i32 %1119 to i64
  %add.ptr924 = getelementptr inbounds i8, i8* %1118, i64 %idx.ext923
  store i8* %add.ptr924, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end925

if.end925:                                        ; preds = %while.end911, %while.end874
  %1120 = bitcast i32* %tmp823 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1120) #6
  br label %sw.epilog

sw.bb926:                                         ; preds = %if.end103
  %1121 = bitcast i32* %tmp927 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1121) #6
  br label %while.cond928

while.cond928:                                    ; preds = %while.body931, %sw.bb926
  %1122 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp929 = icmp uge i64 %1122, 135
  br i1 %cmp929, label %while.body931, label %while.end978

while.body931:                                    ; preds = %while.cond928
  %1123 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr932 = getelementptr inbounds i8, i8* %1123, i64 -9
  %add.ptr933 = getelementptr inbounds i8, i8* %add.ptr932, i64 0
  %1124 = bitcast i8* %add.ptr933 to <2 x i64>*
  %call934 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1124)
  store <2 x i64> %call934, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1125 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub935 = sub i64 %1125, 128
  store i64 %sub935, i64* %n.addr, align 8, !tbaa !19
  %1126 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr936 = getelementptr inbounds i8, i8* %1126, i64 -9
  %add.ptr937 = getelementptr inbounds i8, i8* %add.ptr936, i64 16
  %1127 = bitcast i8* %add.ptr937 to <2 x i64>*
  %call938 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1127)
  store <2 x i64> %call938, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1128 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr939 = getelementptr inbounds i8, i8* %1128, i64 -9
  %add.ptr940 = getelementptr inbounds i8, i8* %add.ptr939, i64 32
  %1129 = bitcast i8* %add.ptr940 to <2 x i64>*
  %call941 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1129)
  store <2 x i64> %call941, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1130 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr942 = getelementptr inbounds i8, i8* %1130, i64 -9
  %add.ptr943 = getelementptr inbounds i8, i8* %add.ptr942, i64 48
  %1131 = bitcast i8* %add.ptr943 to <2 x i64>*
  %call944 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1131)
  store <2 x i64> %call944, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1132 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr945 = getelementptr inbounds i8, i8* %1132, i64 -9
  %add.ptr946 = getelementptr inbounds i8, i8* %add.ptr945, i64 64
  %1133 = bitcast i8* %add.ptr946 to <2 x i64>*
  %call947 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1133)
  store <2 x i64> %call947, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1134 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr948 = getelementptr inbounds i8, i8* %1134, i64 -9
  %add.ptr949 = getelementptr inbounds i8, i8* %add.ptr948, i64 80
  %1135 = bitcast i8* %add.ptr949 to <2 x i64>*
  %call950 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1135)
  store <2 x i64> %call950, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1136 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr951 = getelementptr inbounds i8, i8* %1136, i64 -9
  %add.ptr952 = getelementptr inbounds i8, i8* %add.ptr951, i64 96
  %1137 = bitcast i8* %add.ptr952 to <2 x i64>*
  %call953 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1137)
  store <2 x i64> %call953, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1138 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr954 = getelementptr inbounds i8, i8* %1138, i64 -9
  %add.ptr955 = getelementptr inbounds i8, i8* %add.ptr954, i64 112
  %1139 = bitcast i8* %add.ptr955 to <2 x i64>*
  %call956 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1139)
  store <2 x i64> %call956, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1140 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr957 = getelementptr inbounds i8, i8* %1140, i64 -9
  %add.ptr958 = getelementptr inbounds i8, i8* %add.ptr957, i64 128
  %1141 = bitcast i8* %add.ptr958 to <2 x i64>*
  %call959 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1141)
  store <2 x i64> %call959, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1142 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr960 = getelementptr inbounds i8, i8* %1142, i64 128
  store i8* %add.ptr960, i8** %src.addr, align 8, !tbaa !5
  %1143 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr961 = getelementptr inbounds i8, i8* %1143, i64 0
  %1144 = bitcast i8* %add.ptr961 to <2 x i64>*
  %1145 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1146 = bitcast <2 x i64> %1145 to <16 x i8>
  %1147 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1148 = bitcast <2 x i64> %1147 to <16 x i8>
  %palignr962 = shufflevector <16 x i8> %1148, <16 x i8> %1146, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1149 = bitcast <16 x i8> %palignr962 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1144, <2 x i64> %1149)
  %1150 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr963 = getelementptr inbounds i8, i8* %1150, i64 16
  %1151 = bitcast i8* %add.ptr963 to <2 x i64>*
  %1152 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1153 = bitcast <2 x i64> %1152 to <16 x i8>
  %1154 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1155 = bitcast <2 x i64> %1154 to <16 x i8>
  %palignr964 = shufflevector <16 x i8> %1155, <16 x i8> %1153, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1156 = bitcast <16 x i8> %palignr964 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1151, <2 x i64> %1156)
  %1157 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr965 = getelementptr inbounds i8, i8* %1157, i64 32
  %1158 = bitcast i8* %add.ptr965 to <2 x i64>*
  %1159 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1160 = bitcast <2 x i64> %1159 to <16 x i8>
  %1161 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1162 = bitcast <2 x i64> %1161 to <16 x i8>
  %palignr966 = shufflevector <16 x i8> %1162, <16 x i8> %1160, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1163 = bitcast <16 x i8> %palignr966 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1158, <2 x i64> %1163)
  %1164 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr967 = getelementptr inbounds i8, i8* %1164, i64 48
  %1165 = bitcast i8* %add.ptr967 to <2 x i64>*
  %1166 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1167 = bitcast <2 x i64> %1166 to <16 x i8>
  %1168 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1169 = bitcast <2 x i64> %1168 to <16 x i8>
  %palignr968 = shufflevector <16 x i8> %1169, <16 x i8> %1167, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1170 = bitcast <16 x i8> %palignr968 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1165, <2 x i64> %1170)
  %1171 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr969 = getelementptr inbounds i8, i8* %1171, i64 64
  %1172 = bitcast i8* %add.ptr969 to <2 x i64>*
  %1173 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1174 = bitcast <2 x i64> %1173 to <16 x i8>
  %1175 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1176 = bitcast <2 x i64> %1175 to <16 x i8>
  %palignr970 = shufflevector <16 x i8> %1176, <16 x i8> %1174, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1177 = bitcast <16 x i8> %palignr970 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1172, <2 x i64> %1177)
  %1178 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr971 = getelementptr inbounds i8, i8* %1178, i64 80
  %1179 = bitcast i8* %add.ptr971 to <2 x i64>*
  %1180 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1181 = bitcast <2 x i64> %1180 to <16 x i8>
  %1182 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1183 = bitcast <2 x i64> %1182 to <16 x i8>
  %palignr972 = shufflevector <16 x i8> %1183, <16 x i8> %1181, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1184 = bitcast <16 x i8> %palignr972 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1179, <2 x i64> %1184)
  %1185 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr973 = getelementptr inbounds i8, i8* %1185, i64 96
  %1186 = bitcast i8* %add.ptr973 to <2 x i64>*
  %1187 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1188 = bitcast <2 x i64> %1187 to <16 x i8>
  %1189 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1190 = bitcast <2 x i64> %1189 to <16 x i8>
  %palignr974 = shufflevector <16 x i8> %1190, <16 x i8> %1188, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1191 = bitcast <16 x i8> %palignr974 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1186, <2 x i64> %1191)
  %1192 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr975 = getelementptr inbounds i8, i8* %1192, i64 112
  %1193 = bitcast i8* %add.ptr975 to <2 x i64>*
  %1194 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1195 = bitcast <2 x i64> %1194 to <16 x i8>
  %1196 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1197 = bitcast <2 x i64> %1196 to <16 x i8>
  %palignr976 = shufflevector <16 x i8> %1197, <16 x i8> %1195, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1198 = bitcast <16 x i8> %palignr976 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1193, <2 x i64> %1198)
  %1199 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr977 = getelementptr inbounds i8, i8* %1199, i64 128
  store i8* %add.ptr977, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond928

while.end978:                                     ; preds = %while.cond928
  %1200 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv979 = trunc i64 %1200 to i32
  store i32 %conv979, i32* %tmp927, align 4, !tbaa !9
  %1201 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub980 = sub i64 %1201, 16
  %add981 = add i64 %sub980, 9
  %and982 = and i64 %add981, 127
  %add983 = add i64 %and982, 16
  %sub984 = sub i64 %add983, 9
  store i64 %sub984, i64* %n.addr, align 8, !tbaa !19
  %1202 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1203 = load i32, i32* %tmp927, align 4, !tbaa !9
  %conv985 = sext i32 %1203 to i64
  %sub986 = sub i64 %conv985, %1202
  %conv987 = trunc i64 %sub986 to i32
  store i32 %conv987, i32* %tmp927, align 4, !tbaa !9
  %1204 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1205 = load i32, i32* %tmp927, align 4, !tbaa !9
  %idx.ext988 = sext i32 %1205 to i64
  %add.ptr989 = getelementptr inbounds i8, i8* %1204, i64 %idx.ext988
  store i8* %add.ptr989, i8** %src.addr, align 8, !tbaa !5
  %1206 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1207 = load i32, i32* %tmp927, align 4, !tbaa !9
  %idx.ext990 = sext i32 %1207 to i64
  %add.ptr991 = getelementptr inbounds i8, i8* %1206, i64 %idx.ext990
  store i8* %add.ptr991, i8** %dst.addr, align 8, !tbaa !5
  %1208 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp992 = icmp uge i64 %1208, 39
  br i1 %cmp992, label %if.then994, label %if.end1029

if.then994:                                       ; preds = %while.end978
  br label %while.cond995

while.cond995:                                    ; preds = %while.body998, %if.then994
  %1209 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp996 = icmp uge i64 %1209, 39
  br i1 %cmp996, label %while.body998, label %while.end1015

while.body998:                                    ; preds = %while.cond995
  %1210 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr999 = getelementptr inbounds i8, i8* %1210, i64 -9
  %add.ptr1000 = getelementptr inbounds i8, i8* %add.ptr999, i64 0
  %1211 = bitcast i8* %add.ptr1000 to <2 x i64>*
  %call1001 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1211)
  store <2 x i64> %call1001, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1212 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1002 = sub i64 %1212, 32
  store i64 %sub1002, i64* %n.addr, align 8, !tbaa !19
  %1213 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1003 = getelementptr inbounds i8, i8* %1213, i64 -9
  %add.ptr1004 = getelementptr inbounds i8, i8* %add.ptr1003, i64 16
  %1214 = bitcast i8* %add.ptr1004 to <2 x i64>*
  %call1005 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1214)
  store <2 x i64> %call1005, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1215 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1006 = getelementptr inbounds i8, i8* %1215, i64 -9
  %add.ptr1007 = getelementptr inbounds i8, i8* %add.ptr1006, i64 32
  %1216 = bitcast i8* %add.ptr1007 to <2 x i64>*
  %call1008 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1216)
  store <2 x i64> %call1008, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1217 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1009 = getelementptr inbounds i8, i8* %1217, i64 32
  store i8* %add.ptr1009, i8** %src.addr, align 8, !tbaa !5
  %1218 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1010 = getelementptr inbounds i8, i8* %1218, i64 0
  %1219 = bitcast i8* %add.ptr1010 to <2 x i64>*
  %1220 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1221 = bitcast <2 x i64> %1220 to <16 x i8>
  %1222 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1223 = bitcast <2 x i64> %1222 to <16 x i8>
  %palignr1011 = shufflevector <16 x i8> %1223, <16 x i8> %1221, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1224 = bitcast <16 x i8> %palignr1011 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1219, <2 x i64> %1224)
  %1225 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1012 = getelementptr inbounds i8, i8* %1225, i64 16
  %1226 = bitcast i8* %add.ptr1012 to <2 x i64>*
  %1227 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1228 = bitcast <2 x i64> %1227 to <16 x i8>
  %1229 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1230 = bitcast <2 x i64> %1229 to <16 x i8>
  %palignr1013 = shufflevector <16 x i8> %1230, <16 x i8> %1228, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %1231 = bitcast <16 x i8> %palignr1013 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1226, <2 x i64> %1231)
  %1232 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1014 = getelementptr inbounds i8, i8* %1232, i64 32
  store i8* %add.ptr1014, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond995

while.end1015:                                    ; preds = %while.cond995
  %1233 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1016 = trunc i64 %1233 to i32
  store i32 %conv1016, i32* %tmp927, align 4, !tbaa !9
  %1234 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1017 = sub i64 %1234, 16
  %add1018 = add i64 %sub1017, 9
  %and1019 = and i64 %add1018, 31
  %add1020 = add i64 %and1019, 16
  %sub1021 = sub i64 %add1020, 9
  store i64 %sub1021, i64* %n.addr, align 8, !tbaa !19
  %1235 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1236 = load i32, i32* %tmp927, align 4, !tbaa !9
  %conv1022 = sext i32 %1236 to i64
  %sub1023 = sub i64 %conv1022, %1235
  %conv1024 = trunc i64 %sub1023 to i32
  store i32 %conv1024, i32* %tmp927, align 4, !tbaa !9
  %1237 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1238 = load i32, i32* %tmp927, align 4, !tbaa !9
  %idx.ext1025 = sext i32 %1238 to i64
  %add.ptr1026 = getelementptr inbounds i8, i8* %1237, i64 %idx.ext1025
  store i8* %add.ptr1026, i8** %src.addr, align 8, !tbaa !5
  %1239 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1240 = load i32, i32* %tmp927, align 4, !tbaa !9
  %idx.ext1027 = sext i32 %1240 to i64
  %add.ptr1028 = getelementptr inbounds i8, i8* %1239, i64 %idx.ext1027
  store i8* %add.ptr1028, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1029

if.end1029:                                       ; preds = %while.end1015, %while.end978
  %1241 = bitcast i32* %tmp927 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1241) #6
  br label %sw.epilog

sw.bb1030:                                        ; preds = %if.end103
  %1242 = bitcast i32* %tmp1031 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1242) #6
  br label %while.cond1032

while.cond1032:                                   ; preds = %while.body1035, %sw.bb1030
  %1243 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1033 = icmp uge i64 %1243, 134
  br i1 %cmp1033, label %while.body1035, label %while.end1082

while.body1035:                                   ; preds = %while.cond1032
  %1244 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1036 = getelementptr inbounds i8, i8* %1244, i64 -10
  %add.ptr1037 = getelementptr inbounds i8, i8* %add.ptr1036, i64 0
  %1245 = bitcast i8* %add.ptr1037 to <2 x i64>*
  %call1038 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1245)
  store <2 x i64> %call1038, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1246 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1039 = sub i64 %1246, 128
  store i64 %sub1039, i64* %n.addr, align 8, !tbaa !19
  %1247 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1040 = getelementptr inbounds i8, i8* %1247, i64 -10
  %add.ptr1041 = getelementptr inbounds i8, i8* %add.ptr1040, i64 16
  %1248 = bitcast i8* %add.ptr1041 to <2 x i64>*
  %call1042 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1248)
  store <2 x i64> %call1042, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1249 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1043 = getelementptr inbounds i8, i8* %1249, i64 -10
  %add.ptr1044 = getelementptr inbounds i8, i8* %add.ptr1043, i64 32
  %1250 = bitcast i8* %add.ptr1044 to <2 x i64>*
  %call1045 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1250)
  store <2 x i64> %call1045, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1251 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1046 = getelementptr inbounds i8, i8* %1251, i64 -10
  %add.ptr1047 = getelementptr inbounds i8, i8* %add.ptr1046, i64 48
  %1252 = bitcast i8* %add.ptr1047 to <2 x i64>*
  %call1048 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1252)
  store <2 x i64> %call1048, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1253 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1049 = getelementptr inbounds i8, i8* %1253, i64 -10
  %add.ptr1050 = getelementptr inbounds i8, i8* %add.ptr1049, i64 64
  %1254 = bitcast i8* %add.ptr1050 to <2 x i64>*
  %call1051 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1254)
  store <2 x i64> %call1051, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1255 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1052 = getelementptr inbounds i8, i8* %1255, i64 -10
  %add.ptr1053 = getelementptr inbounds i8, i8* %add.ptr1052, i64 80
  %1256 = bitcast i8* %add.ptr1053 to <2 x i64>*
  %call1054 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1256)
  store <2 x i64> %call1054, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1257 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1055 = getelementptr inbounds i8, i8* %1257, i64 -10
  %add.ptr1056 = getelementptr inbounds i8, i8* %add.ptr1055, i64 96
  %1258 = bitcast i8* %add.ptr1056 to <2 x i64>*
  %call1057 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1258)
  store <2 x i64> %call1057, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1259 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1058 = getelementptr inbounds i8, i8* %1259, i64 -10
  %add.ptr1059 = getelementptr inbounds i8, i8* %add.ptr1058, i64 112
  %1260 = bitcast i8* %add.ptr1059 to <2 x i64>*
  %call1060 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1260)
  store <2 x i64> %call1060, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1261 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1061 = getelementptr inbounds i8, i8* %1261, i64 -10
  %add.ptr1062 = getelementptr inbounds i8, i8* %add.ptr1061, i64 128
  %1262 = bitcast i8* %add.ptr1062 to <2 x i64>*
  %call1063 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1262)
  store <2 x i64> %call1063, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1263 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1064 = getelementptr inbounds i8, i8* %1263, i64 128
  store i8* %add.ptr1064, i8** %src.addr, align 8, !tbaa !5
  %1264 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1065 = getelementptr inbounds i8, i8* %1264, i64 0
  %1265 = bitcast i8* %add.ptr1065 to <2 x i64>*
  %1266 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1267 = bitcast <2 x i64> %1266 to <16 x i8>
  %1268 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1269 = bitcast <2 x i64> %1268 to <16 x i8>
  %palignr1066 = shufflevector <16 x i8> %1269, <16 x i8> %1267, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1270 = bitcast <16 x i8> %palignr1066 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1265, <2 x i64> %1270)
  %1271 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1067 = getelementptr inbounds i8, i8* %1271, i64 16
  %1272 = bitcast i8* %add.ptr1067 to <2 x i64>*
  %1273 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1274 = bitcast <2 x i64> %1273 to <16 x i8>
  %1275 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1276 = bitcast <2 x i64> %1275 to <16 x i8>
  %palignr1068 = shufflevector <16 x i8> %1276, <16 x i8> %1274, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1277 = bitcast <16 x i8> %palignr1068 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1272, <2 x i64> %1277)
  %1278 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1069 = getelementptr inbounds i8, i8* %1278, i64 32
  %1279 = bitcast i8* %add.ptr1069 to <2 x i64>*
  %1280 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1281 = bitcast <2 x i64> %1280 to <16 x i8>
  %1282 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1283 = bitcast <2 x i64> %1282 to <16 x i8>
  %palignr1070 = shufflevector <16 x i8> %1283, <16 x i8> %1281, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1284 = bitcast <16 x i8> %palignr1070 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1279, <2 x i64> %1284)
  %1285 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1071 = getelementptr inbounds i8, i8* %1285, i64 48
  %1286 = bitcast i8* %add.ptr1071 to <2 x i64>*
  %1287 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1288 = bitcast <2 x i64> %1287 to <16 x i8>
  %1289 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1290 = bitcast <2 x i64> %1289 to <16 x i8>
  %palignr1072 = shufflevector <16 x i8> %1290, <16 x i8> %1288, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1291 = bitcast <16 x i8> %palignr1072 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1286, <2 x i64> %1291)
  %1292 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1073 = getelementptr inbounds i8, i8* %1292, i64 64
  %1293 = bitcast i8* %add.ptr1073 to <2 x i64>*
  %1294 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1295 = bitcast <2 x i64> %1294 to <16 x i8>
  %1296 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1297 = bitcast <2 x i64> %1296 to <16 x i8>
  %palignr1074 = shufflevector <16 x i8> %1297, <16 x i8> %1295, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1298 = bitcast <16 x i8> %palignr1074 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1293, <2 x i64> %1298)
  %1299 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1075 = getelementptr inbounds i8, i8* %1299, i64 80
  %1300 = bitcast i8* %add.ptr1075 to <2 x i64>*
  %1301 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1302 = bitcast <2 x i64> %1301 to <16 x i8>
  %1303 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1304 = bitcast <2 x i64> %1303 to <16 x i8>
  %palignr1076 = shufflevector <16 x i8> %1304, <16 x i8> %1302, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1305 = bitcast <16 x i8> %palignr1076 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1300, <2 x i64> %1305)
  %1306 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1077 = getelementptr inbounds i8, i8* %1306, i64 96
  %1307 = bitcast i8* %add.ptr1077 to <2 x i64>*
  %1308 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1309 = bitcast <2 x i64> %1308 to <16 x i8>
  %1310 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1311 = bitcast <2 x i64> %1310 to <16 x i8>
  %palignr1078 = shufflevector <16 x i8> %1311, <16 x i8> %1309, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1312 = bitcast <16 x i8> %palignr1078 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1307, <2 x i64> %1312)
  %1313 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1079 = getelementptr inbounds i8, i8* %1313, i64 112
  %1314 = bitcast i8* %add.ptr1079 to <2 x i64>*
  %1315 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1316 = bitcast <2 x i64> %1315 to <16 x i8>
  %1317 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1318 = bitcast <2 x i64> %1317 to <16 x i8>
  %palignr1080 = shufflevector <16 x i8> %1318, <16 x i8> %1316, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1319 = bitcast <16 x i8> %palignr1080 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1314, <2 x i64> %1319)
  %1320 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1081 = getelementptr inbounds i8, i8* %1320, i64 128
  store i8* %add.ptr1081, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1032

while.end1082:                                    ; preds = %while.cond1032
  %1321 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1083 = trunc i64 %1321 to i32
  store i32 %conv1083, i32* %tmp1031, align 4, !tbaa !9
  %1322 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1084 = sub i64 %1322, 16
  %add1085 = add i64 %sub1084, 10
  %and1086 = and i64 %add1085, 127
  %add1087 = add i64 %and1086, 16
  %sub1088 = sub i64 %add1087, 10
  store i64 %sub1088, i64* %n.addr, align 8, !tbaa !19
  %1323 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1324 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %conv1089 = sext i32 %1324 to i64
  %sub1090 = sub i64 %conv1089, %1323
  %conv1091 = trunc i64 %sub1090 to i32
  store i32 %conv1091, i32* %tmp1031, align 4, !tbaa !9
  %1325 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1326 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %idx.ext1092 = sext i32 %1326 to i64
  %add.ptr1093 = getelementptr inbounds i8, i8* %1325, i64 %idx.ext1092
  store i8* %add.ptr1093, i8** %src.addr, align 8, !tbaa !5
  %1327 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1328 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %idx.ext1094 = sext i32 %1328 to i64
  %add.ptr1095 = getelementptr inbounds i8, i8* %1327, i64 %idx.ext1094
  store i8* %add.ptr1095, i8** %dst.addr, align 8, !tbaa !5
  %1329 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1096 = icmp uge i64 %1329, 38
  br i1 %cmp1096, label %if.then1098, label %if.end1133

if.then1098:                                      ; preds = %while.end1082
  br label %while.cond1099

while.cond1099:                                   ; preds = %while.body1102, %if.then1098
  %1330 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1100 = icmp uge i64 %1330, 38
  br i1 %cmp1100, label %while.body1102, label %while.end1119

while.body1102:                                   ; preds = %while.cond1099
  %1331 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1103 = getelementptr inbounds i8, i8* %1331, i64 -10
  %add.ptr1104 = getelementptr inbounds i8, i8* %add.ptr1103, i64 0
  %1332 = bitcast i8* %add.ptr1104 to <2 x i64>*
  %call1105 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1332)
  store <2 x i64> %call1105, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1333 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1106 = sub i64 %1333, 32
  store i64 %sub1106, i64* %n.addr, align 8, !tbaa !19
  %1334 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1107 = getelementptr inbounds i8, i8* %1334, i64 -10
  %add.ptr1108 = getelementptr inbounds i8, i8* %add.ptr1107, i64 16
  %1335 = bitcast i8* %add.ptr1108 to <2 x i64>*
  %call1109 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1335)
  store <2 x i64> %call1109, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1336 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1110 = getelementptr inbounds i8, i8* %1336, i64 -10
  %add.ptr1111 = getelementptr inbounds i8, i8* %add.ptr1110, i64 32
  %1337 = bitcast i8* %add.ptr1111 to <2 x i64>*
  %call1112 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1337)
  store <2 x i64> %call1112, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1338 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1113 = getelementptr inbounds i8, i8* %1338, i64 32
  store i8* %add.ptr1113, i8** %src.addr, align 8, !tbaa !5
  %1339 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1114 = getelementptr inbounds i8, i8* %1339, i64 0
  %1340 = bitcast i8* %add.ptr1114 to <2 x i64>*
  %1341 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1342 = bitcast <2 x i64> %1341 to <16 x i8>
  %1343 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1344 = bitcast <2 x i64> %1343 to <16 x i8>
  %palignr1115 = shufflevector <16 x i8> %1344, <16 x i8> %1342, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1345 = bitcast <16 x i8> %palignr1115 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1340, <2 x i64> %1345)
  %1346 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1116 = getelementptr inbounds i8, i8* %1346, i64 16
  %1347 = bitcast i8* %add.ptr1116 to <2 x i64>*
  %1348 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1349 = bitcast <2 x i64> %1348 to <16 x i8>
  %1350 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1351 = bitcast <2 x i64> %1350 to <16 x i8>
  %palignr1117 = shufflevector <16 x i8> %1351, <16 x i8> %1349, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %1352 = bitcast <16 x i8> %palignr1117 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1347, <2 x i64> %1352)
  %1353 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1118 = getelementptr inbounds i8, i8* %1353, i64 32
  store i8* %add.ptr1118, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1099

while.end1119:                                    ; preds = %while.cond1099
  %1354 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1120 = trunc i64 %1354 to i32
  store i32 %conv1120, i32* %tmp1031, align 4, !tbaa !9
  %1355 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1121 = sub i64 %1355, 16
  %add1122 = add i64 %sub1121, 10
  %and1123 = and i64 %add1122, 31
  %add1124 = add i64 %and1123, 16
  %sub1125 = sub i64 %add1124, 10
  store i64 %sub1125, i64* %n.addr, align 8, !tbaa !19
  %1356 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1357 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %conv1126 = sext i32 %1357 to i64
  %sub1127 = sub i64 %conv1126, %1356
  %conv1128 = trunc i64 %sub1127 to i32
  store i32 %conv1128, i32* %tmp1031, align 4, !tbaa !9
  %1358 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1359 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %idx.ext1129 = sext i32 %1359 to i64
  %add.ptr1130 = getelementptr inbounds i8, i8* %1358, i64 %idx.ext1129
  store i8* %add.ptr1130, i8** %src.addr, align 8, !tbaa !5
  %1360 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1361 = load i32, i32* %tmp1031, align 4, !tbaa !9
  %idx.ext1131 = sext i32 %1361 to i64
  %add.ptr1132 = getelementptr inbounds i8, i8* %1360, i64 %idx.ext1131
  store i8* %add.ptr1132, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1133

if.end1133:                                       ; preds = %while.end1119, %while.end1082
  %1362 = bitcast i32* %tmp1031 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1362) #6
  br label %sw.epilog

sw.bb1134:                                        ; preds = %if.end103
  %1363 = bitcast i32* %tmp1135 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1363) #6
  br label %while.cond1136

while.cond1136:                                   ; preds = %while.body1139, %sw.bb1134
  %1364 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1137 = icmp uge i64 %1364, 133
  br i1 %cmp1137, label %while.body1139, label %while.end1186

while.body1139:                                   ; preds = %while.cond1136
  %1365 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1140 = getelementptr inbounds i8, i8* %1365, i64 -11
  %add.ptr1141 = getelementptr inbounds i8, i8* %add.ptr1140, i64 0
  %1366 = bitcast i8* %add.ptr1141 to <2 x i64>*
  %call1142 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1366)
  store <2 x i64> %call1142, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1367 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1143 = sub i64 %1367, 128
  store i64 %sub1143, i64* %n.addr, align 8, !tbaa !19
  %1368 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1144 = getelementptr inbounds i8, i8* %1368, i64 -11
  %add.ptr1145 = getelementptr inbounds i8, i8* %add.ptr1144, i64 16
  %1369 = bitcast i8* %add.ptr1145 to <2 x i64>*
  %call1146 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1369)
  store <2 x i64> %call1146, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1370 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1147 = getelementptr inbounds i8, i8* %1370, i64 -11
  %add.ptr1148 = getelementptr inbounds i8, i8* %add.ptr1147, i64 32
  %1371 = bitcast i8* %add.ptr1148 to <2 x i64>*
  %call1149 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1371)
  store <2 x i64> %call1149, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1372 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1150 = getelementptr inbounds i8, i8* %1372, i64 -11
  %add.ptr1151 = getelementptr inbounds i8, i8* %add.ptr1150, i64 48
  %1373 = bitcast i8* %add.ptr1151 to <2 x i64>*
  %call1152 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1373)
  store <2 x i64> %call1152, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1374 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1153 = getelementptr inbounds i8, i8* %1374, i64 -11
  %add.ptr1154 = getelementptr inbounds i8, i8* %add.ptr1153, i64 64
  %1375 = bitcast i8* %add.ptr1154 to <2 x i64>*
  %call1155 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1375)
  store <2 x i64> %call1155, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1376 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1156 = getelementptr inbounds i8, i8* %1376, i64 -11
  %add.ptr1157 = getelementptr inbounds i8, i8* %add.ptr1156, i64 80
  %1377 = bitcast i8* %add.ptr1157 to <2 x i64>*
  %call1158 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1377)
  store <2 x i64> %call1158, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1378 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1159 = getelementptr inbounds i8, i8* %1378, i64 -11
  %add.ptr1160 = getelementptr inbounds i8, i8* %add.ptr1159, i64 96
  %1379 = bitcast i8* %add.ptr1160 to <2 x i64>*
  %call1161 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1379)
  store <2 x i64> %call1161, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1380 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1162 = getelementptr inbounds i8, i8* %1380, i64 -11
  %add.ptr1163 = getelementptr inbounds i8, i8* %add.ptr1162, i64 112
  %1381 = bitcast i8* %add.ptr1163 to <2 x i64>*
  %call1164 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1381)
  store <2 x i64> %call1164, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1382 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1165 = getelementptr inbounds i8, i8* %1382, i64 -11
  %add.ptr1166 = getelementptr inbounds i8, i8* %add.ptr1165, i64 128
  %1383 = bitcast i8* %add.ptr1166 to <2 x i64>*
  %call1167 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1383)
  store <2 x i64> %call1167, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1384 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1168 = getelementptr inbounds i8, i8* %1384, i64 128
  store i8* %add.ptr1168, i8** %src.addr, align 8, !tbaa !5
  %1385 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1169 = getelementptr inbounds i8, i8* %1385, i64 0
  %1386 = bitcast i8* %add.ptr1169 to <2 x i64>*
  %1387 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1388 = bitcast <2 x i64> %1387 to <16 x i8>
  %1389 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1390 = bitcast <2 x i64> %1389 to <16 x i8>
  %palignr1170 = shufflevector <16 x i8> %1390, <16 x i8> %1388, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1391 = bitcast <16 x i8> %palignr1170 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1386, <2 x i64> %1391)
  %1392 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1171 = getelementptr inbounds i8, i8* %1392, i64 16
  %1393 = bitcast i8* %add.ptr1171 to <2 x i64>*
  %1394 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1395 = bitcast <2 x i64> %1394 to <16 x i8>
  %1396 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1397 = bitcast <2 x i64> %1396 to <16 x i8>
  %palignr1172 = shufflevector <16 x i8> %1397, <16 x i8> %1395, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1398 = bitcast <16 x i8> %palignr1172 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1393, <2 x i64> %1398)
  %1399 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1173 = getelementptr inbounds i8, i8* %1399, i64 32
  %1400 = bitcast i8* %add.ptr1173 to <2 x i64>*
  %1401 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1402 = bitcast <2 x i64> %1401 to <16 x i8>
  %1403 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1404 = bitcast <2 x i64> %1403 to <16 x i8>
  %palignr1174 = shufflevector <16 x i8> %1404, <16 x i8> %1402, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1405 = bitcast <16 x i8> %palignr1174 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1400, <2 x i64> %1405)
  %1406 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1175 = getelementptr inbounds i8, i8* %1406, i64 48
  %1407 = bitcast i8* %add.ptr1175 to <2 x i64>*
  %1408 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1409 = bitcast <2 x i64> %1408 to <16 x i8>
  %1410 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1411 = bitcast <2 x i64> %1410 to <16 x i8>
  %palignr1176 = shufflevector <16 x i8> %1411, <16 x i8> %1409, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1412 = bitcast <16 x i8> %palignr1176 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1407, <2 x i64> %1412)
  %1413 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1177 = getelementptr inbounds i8, i8* %1413, i64 64
  %1414 = bitcast i8* %add.ptr1177 to <2 x i64>*
  %1415 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1416 = bitcast <2 x i64> %1415 to <16 x i8>
  %1417 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1418 = bitcast <2 x i64> %1417 to <16 x i8>
  %palignr1178 = shufflevector <16 x i8> %1418, <16 x i8> %1416, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1419 = bitcast <16 x i8> %palignr1178 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1414, <2 x i64> %1419)
  %1420 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1179 = getelementptr inbounds i8, i8* %1420, i64 80
  %1421 = bitcast i8* %add.ptr1179 to <2 x i64>*
  %1422 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1423 = bitcast <2 x i64> %1422 to <16 x i8>
  %1424 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1425 = bitcast <2 x i64> %1424 to <16 x i8>
  %palignr1180 = shufflevector <16 x i8> %1425, <16 x i8> %1423, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1426 = bitcast <16 x i8> %palignr1180 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1421, <2 x i64> %1426)
  %1427 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1181 = getelementptr inbounds i8, i8* %1427, i64 96
  %1428 = bitcast i8* %add.ptr1181 to <2 x i64>*
  %1429 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1430 = bitcast <2 x i64> %1429 to <16 x i8>
  %1431 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1432 = bitcast <2 x i64> %1431 to <16 x i8>
  %palignr1182 = shufflevector <16 x i8> %1432, <16 x i8> %1430, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1433 = bitcast <16 x i8> %palignr1182 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1428, <2 x i64> %1433)
  %1434 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1183 = getelementptr inbounds i8, i8* %1434, i64 112
  %1435 = bitcast i8* %add.ptr1183 to <2 x i64>*
  %1436 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1437 = bitcast <2 x i64> %1436 to <16 x i8>
  %1438 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1439 = bitcast <2 x i64> %1438 to <16 x i8>
  %palignr1184 = shufflevector <16 x i8> %1439, <16 x i8> %1437, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1440 = bitcast <16 x i8> %palignr1184 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1435, <2 x i64> %1440)
  %1441 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1185 = getelementptr inbounds i8, i8* %1441, i64 128
  store i8* %add.ptr1185, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1136

while.end1186:                                    ; preds = %while.cond1136
  %1442 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1187 = trunc i64 %1442 to i32
  store i32 %conv1187, i32* %tmp1135, align 4, !tbaa !9
  %1443 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1188 = sub i64 %1443, 16
  %add1189 = add i64 %sub1188, 11
  %and1190 = and i64 %add1189, 127
  %add1191 = add i64 %and1190, 16
  %sub1192 = sub i64 %add1191, 11
  store i64 %sub1192, i64* %n.addr, align 8, !tbaa !19
  %1444 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1445 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %conv1193 = sext i32 %1445 to i64
  %sub1194 = sub i64 %conv1193, %1444
  %conv1195 = trunc i64 %sub1194 to i32
  store i32 %conv1195, i32* %tmp1135, align 4, !tbaa !9
  %1446 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1447 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %idx.ext1196 = sext i32 %1447 to i64
  %add.ptr1197 = getelementptr inbounds i8, i8* %1446, i64 %idx.ext1196
  store i8* %add.ptr1197, i8** %src.addr, align 8, !tbaa !5
  %1448 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1449 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %idx.ext1198 = sext i32 %1449 to i64
  %add.ptr1199 = getelementptr inbounds i8, i8* %1448, i64 %idx.ext1198
  store i8* %add.ptr1199, i8** %dst.addr, align 8, !tbaa !5
  %1450 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1200 = icmp uge i64 %1450, 37
  br i1 %cmp1200, label %if.then1202, label %if.end1237

if.then1202:                                      ; preds = %while.end1186
  br label %while.cond1203

while.cond1203:                                   ; preds = %while.body1206, %if.then1202
  %1451 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1204 = icmp uge i64 %1451, 37
  br i1 %cmp1204, label %while.body1206, label %while.end1223

while.body1206:                                   ; preds = %while.cond1203
  %1452 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1207 = getelementptr inbounds i8, i8* %1452, i64 -11
  %add.ptr1208 = getelementptr inbounds i8, i8* %add.ptr1207, i64 0
  %1453 = bitcast i8* %add.ptr1208 to <2 x i64>*
  %call1209 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1453)
  store <2 x i64> %call1209, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1454 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1210 = sub i64 %1454, 32
  store i64 %sub1210, i64* %n.addr, align 8, !tbaa !19
  %1455 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1211 = getelementptr inbounds i8, i8* %1455, i64 -11
  %add.ptr1212 = getelementptr inbounds i8, i8* %add.ptr1211, i64 16
  %1456 = bitcast i8* %add.ptr1212 to <2 x i64>*
  %call1213 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1456)
  store <2 x i64> %call1213, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1457 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1214 = getelementptr inbounds i8, i8* %1457, i64 -11
  %add.ptr1215 = getelementptr inbounds i8, i8* %add.ptr1214, i64 32
  %1458 = bitcast i8* %add.ptr1215 to <2 x i64>*
  %call1216 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1458)
  store <2 x i64> %call1216, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1459 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1217 = getelementptr inbounds i8, i8* %1459, i64 32
  store i8* %add.ptr1217, i8** %src.addr, align 8, !tbaa !5
  %1460 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1218 = getelementptr inbounds i8, i8* %1460, i64 0
  %1461 = bitcast i8* %add.ptr1218 to <2 x i64>*
  %1462 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1463 = bitcast <2 x i64> %1462 to <16 x i8>
  %1464 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1465 = bitcast <2 x i64> %1464 to <16 x i8>
  %palignr1219 = shufflevector <16 x i8> %1465, <16 x i8> %1463, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1466 = bitcast <16 x i8> %palignr1219 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1461, <2 x i64> %1466)
  %1467 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1220 = getelementptr inbounds i8, i8* %1467, i64 16
  %1468 = bitcast i8* %add.ptr1220 to <2 x i64>*
  %1469 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1470 = bitcast <2 x i64> %1469 to <16 x i8>
  %1471 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1472 = bitcast <2 x i64> %1471 to <16 x i8>
  %palignr1221 = shufflevector <16 x i8> %1472, <16 x i8> %1470, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %1473 = bitcast <16 x i8> %palignr1221 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1468, <2 x i64> %1473)
  %1474 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1222 = getelementptr inbounds i8, i8* %1474, i64 32
  store i8* %add.ptr1222, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1203

while.end1223:                                    ; preds = %while.cond1203
  %1475 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1224 = trunc i64 %1475 to i32
  store i32 %conv1224, i32* %tmp1135, align 4, !tbaa !9
  %1476 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1225 = sub i64 %1476, 16
  %add1226 = add i64 %sub1225, 11
  %and1227 = and i64 %add1226, 31
  %add1228 = add i64 %and1227, 16
  %sub1229 = sub i64 %add1228, 11
  store i64 %sub1229, i64* %n.addr, align 8, !tbaa !19
  %1477 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1478 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %conv1230 = sext i32 %1478 to i64
  %sub1231 = sub i64 %conv1230, %1477
  %conv1232 = trunc i64 %sub1231 to i32
  store i32 %conv1232, i32* %tmp1135, align 4, !tbaa !9
  %1479 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1480 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %idx.ext1233 = sext i32 %1480 to i64
  %add.ptr1234 = getelementptr inbounds i8, i8* %1479, i64 %idx.ext1233
  store i8* %add.ptr1234, i8** %src.addr, align 8, !tbaa !5
  %1481 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1482 = load i32, i32* %tmp1135, align 4, !tbaa !9
  %idx.ext1235 = sext i32 %1482 to i64
  %add.ptr1236 = getelementptr inbounds i8, i8* %1481, i64 %idx.ext1235
  store i8* %add.ptr1236, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1237

if.end1237:                                       ; preds = %while.end1223, %while.end1186
  %1483 = bitcast i32* %tmp1135 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1483) #6
  br label %sw.epilog

sw.bb1238:                                        ; preds = %if.end103
  %1484 = bitcast i32* %tmp1239 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1484) #6
  br label %while.cond1240

while.cond1240:                                   ; preds = %while.body1243, %sw.bb1238
  %1485 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1241 = icmp uge i64 %1485, 132
  br i1 %cmp1241, label %while.body1243, label %while.end1290

while.body1243:                                   ; preds = %while.cond1240
  %1486 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1244 = getelementptr inbounds i8, i8* %1486, i64 -12
  %add.ptr1245 = getelementptr inbounds i8, i8* %add.ptr1244, i64 0
  %1487 = bitcast i8* %add.ptr1245 to <2 x i64>*
  %call1246 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1487)
  store <2 x i64> %call1246, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1488 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1247 = sub i64 %1488, 128
  store i64 %sub1247, i64* %n.addr, align 8, !tbaa !19
  %1489 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1248 = getelementptr inbounds i8, i8* %1489, i64 -12
  %add.ptr1249 = getelementptr inbounds i8, i8* %add.ptr1248, i64 16
  %1490 = bitcast i8* %add.ptr1249 to <2 x i64>*
  %call1250 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1490)
  store <2 x i64> %call1250, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1491 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1251 = getelementptr inbounds i8, i8* %1491, i64 -12
  %add.ptr1252 = getelementptr inbounds i8, i8* %add.ptr1251, i64 32
  %1492 = bitcast i8* %add.ptr1252 to <2 x i64>*
  %call1253 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1492)
  store <2 x i64> %call1253, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1493 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1254 = getelementptr inbounds i8, i8* %1493, i64 -12
  %add.ptr1255 = getelementptr inbounds i8, i8* %add.ptr1254, i64 48
  %1494 = bitcast i8* %add.ptr1255 to <2 x i64>*
  %call1256 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1494)
  store <2 x i64> %call1256, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1495 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1257 = getelementptr inbounds i8, i8* %1495, i64 -12
  %add.ptr1258 = getelementptr inbounds i8, i8* %add.ptr1257, i64 64
  %1496 = bitcast i8* %add.ptr1258 to <2 x i64>*
  %call1259 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1496)
  store <2 x i64> %call1259, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1497 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1260 = getelementptr inbounds i8, i8* %1497, i64 -12
  %add.ptr1261 = getelementptr inbounds i8, i8* %add.ptr1260, i64 80
  %1498 = bitcast i8* %add.ptr1261 to <2 x i64>*
  %call1262 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1498)
  store <2 x i64> %call1262, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1499 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1263 = getelementptr inbounds i8, i8* %1499, i64 -12
  %add.ptr1264 = getelementptr inbounds i8, i8* %add.ptr1263, i64 96
  %1500 = bitcast i8* %add.ptr1264 to <2 x i64>*
  %call1265 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1500)
  store <2 x i64> %call1265, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1501 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1266 = getelementptr inbounds i8, i8* %1501, i64 -12
  %add.ptr1267 = getelementptr inbounds i8, i8* %add.ptr1266, i64 112
  %1502 = bitcast i8* %add.ptr1267 to <2 x i64>*
  %call1268 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1502)
  store <2 x i64> %call1268, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1503 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1269 = getelementptr inbounds i8, i8* %1503, i64 -12
  %add.ptr1270 = getelementptr inbounds i8, i8* %add.ptr1269, i64 128
  %1504 = bitcast i8* %add.ptr1270 to <2 x i64>*
  %call1271 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1504)
  store <2 x i64> %call1271, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1505 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1272 = getelementptr inbounds i8, i8* %1505, i64 128
  store i8* %add.ptr1272, i8** %src.addr, align 8, !tbaa !5
  %1506 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1273 = getelementptr inbounds i8, i8* %1506, i64 0
  %1507 = bitcast i8* %add.ptr1273 to <2 x i64>*
  %1508 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1509 = bitcast <2 x i64> %1508 to <16 x i8>
  %1510 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1511 = bitcast <2 x i64> %1510 to <16 x i8>
  %palignr1274 = shufflevector <16 x i8> %1511, <16 x i8> %1509, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1512 = bitcast <16 x i8> %palignr1274 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1507, <2 x i64> %1512)
  %1513 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1275 = getelementptr inbounds i8, i8* %1513, i64 16
  %1514 = bitcast i8* %add.ptr1275 to <2 x i64>*
  %1515 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1516 = bitcast <2 x i64> %1515 to <16 x i8>
  %1517 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1518 = bitcast <2 x i64> %1517 to <16 x i8>
  %palignr1276 = shufflevector <16 x i8> %1518, <16 x i8> %1516, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1519 = bitcast <16 x i8> %palignr1276 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1514, <2 x i64> %1519)
  %1520 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1277 = getelementptr inbounds i8, i8* %1520, i64 32
  %1521 = bitcast i8* %add.ptr1277 to <2 x i64>*
  %1522 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1523 = bitcast <2 x i64> %1522 to <16 x i8>
  %1524 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1525 = bitcast <2 x i64> %1524 to <16 x i8>
  %palignr1278 = shufflevector <16 x i8> %1525, <16 x i8> %1523, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1526 = bitcast <16 x i8> %palignr1278 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1521, <2 x i64> %1526)
  %1527 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1279 = getelementptr inbounds i8, i8* %1527, i64 48
  %1528 = bitcast i8* %add.ptr1279 to <2 x i64>*
  %1529 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1530 = bitcast <2 x i64> %1529 to <16 x i8>
  %1531 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1532 = bitcast <2 x i64> %1531 to <16 x i8>
  %palignr1280 = shufflevector <16 x i8> %1532, <16 x i8> %1530, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1533 = bitcast <16 x i8> %palignr1280 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1528, <2 x i64> %1533)
  %1534 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1281 = getelementptr inbounds i8, i8* %1534, i64 64
  %1535 = bitcast i8* %add.ptr1281 to <2 x i64>*
  %1536 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1537 = bitcast <2 x i64> %1536 to <16 x i8>
  %1538 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1539 = bitcast <2 x i64> %1538 to <16 x i8>
  %palignr1282 = shufflevector <16 x i8> %1539, <16 x i8> %1537, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1540 = bitcast <16 x i8> %palignr1282 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1535, <2 x i64> %1540)
  %1541 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1283 = getelementptr inbounds i8, i8* %1541, i64 80
  %1542 = bitcast i8* %add.ptr1283 to <2 x i64>*
  %1543 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1544 = bitcast <2 x i64> %1543 to <16 x i8>
  %1545 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1546 = bitcast <2 x i64> %1545 to <16 x i8>
  %palignr1284 = shufflevector <16 x i8> %1546, <16 x i8> %1544, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1547 = bitcast <16 x i8> %palignr1284 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1542, <2 x i64> %1547)
  %1548 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1285 = getelementptr inbounds i8, i8* %1548, i64 96
  %1549 = bitcast i8* %add.ptr1285 to <2 x i64>*
  %1550 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1551 = bitcast <2 x i64> %1550 to <16 x i8>
  %1552 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1553 = bitcast <2 x i64> %1552 to <16 x i8>
  %palignr1286 = shufflevector <16 x i8> %1553, <16 x i8> %1551, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1554 = bitcast <16 x i8> %palignr1286 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1549, <2 x i64> %1554)
  %1555 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1287 = getelementptr inbounds i8, i8* %1555, i64 112
  %1556 = bitcast i8* %add.ptr1287 to <2 x i64>*
  %1557 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1558 = bitcast <2 x i64> %1557 to <16 x i8>
  %1559 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1560 = bitcast <2 x i64> %1559 to <16 x i8>
  %palignr1288 = shufflevector <16 x i8> %1560, <16 x i8> %1558, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1561 = bitcast <16 x i8> %palignr1288 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1556, <2 x i64> %1561)
  %1562 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1289 = getelementptr inbounds i8, i8* %1562, i64 128
  store i8* %add.ptr1289, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1240

while.end1290:                                    ; preds = %while.cond1240
  %1563 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1291 = trunc i64 %1563 to i32
  store i32 %conv1291, i32* %tmp1239, align 4, !tbaa !9
  %1564 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1292 = sub i64 %1564, 16
  %add1293 = add i64 %sub1292, 12
  %and1294 = and i64 %add1293, 127
  %add1295 = add i64 %and1294, 16
  %sub1296 = sub i64 %add1295, 12
  store i64 %sub1296, i64* %n.addr, align 8, !tbaa !19
  %1565 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1566 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %conv1297 = sext i32 %1566 to i64
  %sub1298 = sub i64 %conv1297, %1565
  %conv1299 = trunc i64 %sub1298 to i32
  store i32 %conv1299, i32* %tmp1239, align 4, !tbaa !9
  %1567 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1568 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %idx.ext1300 = sext i32 %1568 to i64
  %add.ptr1301 = getelementptr inbounds i8, i8* %1567, i64 %idx.ext1300
  store i8* %add.ptr1301, i8** %src.addr, align 8, !tbaa !5
  %1569 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1570 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %idx.ext1302 = sext i32 %1570 to i64
  %add.ptr1303 = getelementptr inbounds i8, i8* %1569, i64 %idx.ext1302
  store i8* %add.ptr1303, i8** %dst.addr, align 8, !tbaa !5
  %1571 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1304 = icmp uge i64 %1571, 36
  br i1 %cmp1304, label %if.then1306, label %if.end1341

if.then1306:                                      ; preds = %while.end1290
  br label %while.cond1307

while.cond1307:                                   ; preds = %while.body1310, %if.then1306
  %1572 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1308 = icmp uge i64 %1572, 36
  br i1 %cmp1308, label %while.body1310, label %while.end1327

while.body1310:                                   ; preds = %while.cond1307
  %1573 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1311 = getelementptr inbounds i8, i8* %1573, i64 -12
  %add.ptr1312 = getelementptr inbounds i8, i8* %add.ptr1311, i64 0
  %1574 = bitcast i8* %add.ptr1312 to <2 x i64>*
  %call1313 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1574)
  store <2 x i64> %call1313, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1575 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1314 = sub i64 %1575, 32
  store i64 %sub1314, i64* %n.addr, align 8, !tbaa !19
  %1576 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1315 = getelementptr inbounds i8, i8* %1576, i64 -12
  %add.ptr1316 = getelementptr inbounds i8, i8* %add.ptr1315, i64 16
  %1577 = bitcast i8* %add.ptr1316 to <2 x i64>*
  %call1317 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1577)
  store <2 x i64> %call1317, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1578 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1318 = getelementptr inbounds i8, i8* %1578, i64 -12
  %add.ptr1319 = getelementptr inbounds i8, i8* %add.ptr1318, i64 32
  %1579 = bitcast i8* %add.ptr1319 to <2 x i64>*
  %call1320 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1579)
  store <2 x i64> %call1320, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1580 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1321 = getelementptr inbounds i8, i8* %1580, i64 32
  store i8* %add.ptr1321, i8** %src.addr, align 8, !tbaa !5
  %1581 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1322 = getelementptr inbounds i8, i8* %1581, i64 0
  %1582 = bitcast i8* %add.ptr1322 to <2 x i64>*
  %1583 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1584 = bitcast <2 x i64> %1583 to <16 x i8>
  %1585 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1586 = bitcast <2 x i64> %1585 to <16 x i8>
  %palignr1323 = shufflevector <16 x i8> %1586, <16 x i8> %1584, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1587 = bitcast <16 x i8> %palignr1323 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1582, <2 x i64> %1587)
  %1588 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1324 = getelementptr inbounds i8, i8* %1588, i64 16
  %1589 = bitcast i8* %add.ptr1324 to <2 x i64>*
  %1590 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1591 = bitcast <2 x i64> %1590 to <16 x i8>
  %1592 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1593 = bitcast <2 x i64> %1592 to <16 x i8>
  %palignr1325 = shufflevector <16 x i8> %1593, <16 x i8> %1591, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1594 = bitcast <16 x i8> %palignr1325 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1589, <2 x i64> %1594)
  %1595 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1326 = getelementptr inbounds i8, i8* %1595, i64 32
  store i8* %add.ptr1326, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1307

while.end1327:                                    ; preds = %while.cond1307
  %1596 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1328 = trunc i64 %1596 to i32
  store i32 %conv1328, i32* %tmp1239, align 4, !tbaa !9
  %1597 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1329 = sub i64 %1597, 16
  %add1330 = add i64 %sub1329, 12
  %and1331 = and i64 %add1330, 31
  %add1332 = add i64 %and1331, 16
  %sub1333 = sub i64 %add1332, 12
  store i64 %sub1333, i64* %n.addr, align 8, !tbaa !19
  %1598 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1599 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %conv1334 = sext i32 %1599 to i64
  %sub1335 = sub i64 %conv1334, %1598
  %conv1336 = trunc i64 %sub1335 to i32
  store i32 %conv1336, i32* %tmp1239, align 4, !tbaa !9
  %1600 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1601 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %idx.ext1337 = sext i32 %1601 to i64
  %add.ptr1338 = getelementptr inbounds i8, i8* %1600, i64 %idx.ext1337
  store i8* %add.ptr1338, i8** %src.addr, align 8, !tbaa !5
  %1602 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1603 = load i32, i32* %tmp1239, align 4, !tbaa !9
  %idx.ext1339 = sext i32 %1603 to i64
  %add.ptr1340 = getelementptr inbounds i8, i8* %1602, i64 %idx.ext1339
  store i8* %add.ptr1340, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1341

if.end1341:                                       ; preds = %while.end1327, %while.end1290
  %1604 = bitcast i32* %tmp1239 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1604) #6
  br label %sw.epilog

sw.bb1342:                                        ; preds = %if.end103
  %1605 = bitcast i32* %tmp1343 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1605) #6
  br label %while.cond1344

while.cond1344:                                   ; preds = %while.body1347, %sw.bb1342
  %1606 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1345 = icmp uge i64 %1606, 131
  br i1 %cmp1345, label %while.body1347, label %while.end1394

while.body1347:                                   ; preds = %while.cond1344
  %1607 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1348 = getelementptr inbounds i8, i8* %1607, i64 -13
  %add.ptr1349 = getelementptr inbounds i8, i8* %add.ptr1348, i64 0
  %1608 = bitcast i8* %add.ptr1349 to <2 x i64>*
  %call1350 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1608)
  store <2 x i64> %call1350, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1609 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1351 = sub i64 %1609, 128
  store i64 %sub1351, i64* %n.addr, align 8, !tbaa !19
  %1610 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1352 = getelementptr inbounds i8, i8* %1610, i64 -13
  %add.ptr1353 = getelementptr inbounds i8, i8* %add.ptr1352, i64 16
  %1611 = bitcast i8* %add.ptr1353 to <2 x i64>*
  %call1354 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1611)
  store <2 x i64> %call1354, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1612 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1355 = getelementptr inbounds i8, i8* %1612, i64 -13
  %add.ptr1356 = getelementptr inbounds i8, i8* %add.ptr1355, i64 32
  %1613 = bitcast i8* %add.ptr1356 to <2 x i64>*
  %call1357 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1613)
  store <2 x i64> %call1357, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1614 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1358 = getelementptr inbounds i8, i8* %1614, i64 -13
  %add.ptr1359 = getelementptr inbounds i8, i8* %add.ptr1358, i64 48
  %1615 = bitcast i8* %add.ptr1359 to <2 x i64>*
  %call1360 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1615)
  store <2 x i64> %call1360, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1616 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1361 = getelementptr inbounds i8, i8* %1616, i64 -13
  %add.ptr1362 = getelementptr inbounds i8, i8* %add.ptr1361, i64 64
  %1617 = bitcast i8* %add.ptr1362 to <2 x i64>*
  %call1363 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1617)
  store <2 x i64> %call1363, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1618 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1364 = getelementptr inbounds i8, i8* %1618, i64 -13
  %add.ptr1365 = getelementptr inbounds i8, i8* %add.ptr1364, i64 80
  %1619 = bitcast i8* %add.ptr1365 to <2 x i64>*
  %call1366 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1619)
  store <2 x i64> %call1366, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1620 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1367 = getelementptr inbounds i8, i8* %1620, i64 -13
  %add.ptr1368 = getelementptr inbounds i8, i8* %add.ptr1367, i64 96
  %1621 = bitcast i8* %add.ptr1368 to <2 x i64>*
  %call1369 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1621)
  store <2 x i64> %call1369, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1622 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1370 = getelementptr inbounds i8, i8* %1622, i64 -13
  %add.ptr1371 = getelementptr inbounds i8, i8* %add.ptr1370, i64 112
  %1623 = bitcast i8* %add.ptr1371 to <2 x i64>*
  %call1372 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1623)
  store <2 x i64> %call1372, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1624 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1373 = getelementptr inbounds i8, i8* %1624, i64 -13
  %add.ptr1374 = getelementptr inbounds i8, i8* %add.ptr1373, i64 128
  %1625 = bitcast i8* %add.ptr1374 to <2 x i64>*
  %call1375 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1625)
  store <2 x i64> %call1375, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1626 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1376 = getelementptr inbounds i8, i8* %1626, i64 128
  store i8* %add.ptr1376, i8** %src.addr, align 8, !tbaa !5
  %1627 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1377 = getelementptr inbounds i8, i8* %1627, i64 0
  %1628 = bitcast i8* %add.ptr1377 to <2 x i64>*
  %1629 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1630 = bitcast <2 x i64> %1629 to <16 x i8>
  %1631 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1632 = bitcast <2 x i64> %1631 to <16 x i8>
  %palignr1378 = shufflevector <16 x i8> %1632, <16 x i8> %1630, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1633 = bitcast <16 x i8> %palignr1378 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1628, <2 x i64> %1633)
  %1634 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1379 = getelementptr inbounds i8, i8* %1634, i64 16
  %1635 = bitcast i8* %add.ptr1379 to <2 x i64>*
  %1636 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1637 = bitcast <2 x i64> %1636 to <16 x i8>
  %1638 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1639 = bitcast <2 x i64> %1638 to <16 x i8>
  %palignr1380 = shufflevector <16 x i8> %1639, <16 x i8> %1637, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1640 = bitcast <16 x i8> %palignr1380 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1635, <2 x i64> %1640)
  %1641 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1381 = getelementptr inbounds i8, i8* %1641, i64 32
  %1642 = bitcast i8* %add.ptr1381 to <2 x i64>*
  %1643 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1644 = bitcast <2 x i64> %1643 to <16 x i8>
  %1645 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1646 = bitcast <2 x i64> %1645 to <16 x i8>
  %palignr1382 = shufflevector <16 x i8> %1646, <16 x i8> %1644, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1647 = bitcast <16 x i8> %palignr1382 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1642, <2 x i64> %1647)
  %1648 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1383 = getelementptr inbounds i8, i8* %1648, i64 48
  %1649 = bitcast i8* %add.ptr1383 to <2 x i64>*
  %1650 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1651 = bitcast <2 x i64> %1650 to <16 x i8>
  %1652 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1653 = bitcast <2 x i64> %1652 to <16 x i8>
  %palignr1384 = shufflevector <16 x i8> %1653, <16 x i8> %1651, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1654 = bitcast <16 x i8> %palignr1384 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1649, <2 x i64> %1654)
  %1655 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1385 = getelementptr inbounds i8, i8* %1655, i64 64
  %1656 = bitcast i8* %add.ptr1385 to <2 x i64>*
  %1657 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1658 = bitcast <2 x i64> %1657 to <16 x i8>
  %1659 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1660 = bitcast <2 x i64> %1659 to <16 x i8>
  %palignr1386 = shufflevector <16 x i8> %1660, <16 x i8> %1658, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1661 = bitcast <16 x i8> %palignr1386 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1656, <2 x i64> %1661)
  %1662 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1387 = getelementptr inbounds i8, i8* %1662, i64 80
  %1663 = bitcast i8* %add.ptr1387 to <2 x i64>*
  %1664 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1665 = bitcast <2 x i64> %1664 to <16 x i8>
  %1666 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1667 = bitcast <2 x i64> %1666 to <16 x i8>
  %palignr1388 = shufflevector <16 x i8> %1667, <16 x i8> %1665, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1668 = bitcast <16 x i8> %palignr1388 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1663, <2 x i64> %1668)
  %1669 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1389 = getelementptr inbounds i8, i8* %1669, i64 96
  %1670 = bitcast i8* %add.ptr1389 to <2 x i64>*
  %1671 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1672 = bitcast <2 x i64> %1671 to <16 x i8>
  %1673 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1674 = bitcast <2 x i64> %1673 to <16 x i8>
  %palignr1390 = shufflevector <16 x i8> %1674, <16 x i8> %1672, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1675 = bitcast <16 x i8> %palignr1390 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1670, <2 x i64> %1675)
  %1676 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1391 = getelementptr inbounds i8, i8* %1676, i64 112
  %1677 = bitcast i8* %add.ptr1391 to <2 x i64>*
  %1678 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1679 = bitcast <2 x i64> %1678 to <16 x i8>
  %1680 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1681 = bitcast <2 x i64> %1680 to <16 x i8>
  %palignr1392 = shufflevector <16 x i8> %1681, <16 x i8> %1679, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1682 = bitcast <16 x i8> %palignr1392 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1677, <2 x i64> %1682)
  %1683 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1393 = getelementptr inbounds i8, i8* %1683, i64 128
  store i8* %add.ptr1393, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1344

while.end1394:                                    ; preds = %while.cond1344
  %1684 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1395 = trunc i64 %1684 to i32
  store i32 %conv1395, i32* %tmp1343, align 4, !tbaa !9
  %1685 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1396 = sub i64 %1685, 16
  %add1397 = add i64 %sub1396, 13
  %and1398 = and i64 %add1397, 127
  %add1399 = add i64 %and1398, 16
  %sub1400 = sub i64 %add1399, 13
  store i64 %sub1400, i64* %n.addr, align 8, !tbaa !19
  %1686 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1687 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %conv1401 = sext i32 %1687 to i64
  %sub1402 = sub i64 %conv1401, %1686
  %conv1403 = trunc i64 %sub1402 to i32
  store i32 %conv1403, i32* %tmp1343, align 4, !tbaa !9
  %1688 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1689 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %idx.ext1404 = sext i32 %1689 to i64
  %add.ptr1405 = getelementptr inbounds i8, i8* %1688, i64 %idx.ext1404
  store i8* %add.ptr1405, i8** %src.addr, align 8, !tbaa !5
  %1690 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1691 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %idx.ext1406 = sext i32 %1691 to i64
  %add.ptr1407 = getelementptr inbounds i8, i8* %1690, i64 %idx.ext1406
  store i8* %add.ptr1407, i8** %dst.addr, align 8, !tbaa !5
  %1692 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1408 = icmp uge i64 %1692, 35
  br i1 %cmp1408, label %if.then1410, label %if.end1445

if.then1410:                                      ; preds = %while.end1394
  br label %while.cond1411

while.cond1411:                                   ; preds = %while.body1414, %if.then1410
  %1693 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1412 = icmp uge i64 %1693, 35
  br i1 %cmp1412, label %while.body1414, label %while.end1431

while.body1414:                                   ; preds = %while.cond1411
  %1694 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1415 = getelementptr inbounds i8, i8* %1694, i64 -13
  %add.ptr1416 = getelementptr inbounds i8, i8* %add.ptr1415, i64 0
  %1695 = bitcast i8* %add.ptr1416 to <2 x i64>*
  %call1417 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1695)
  store <2 x i64> %call1417, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1696 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1418 = sub i64 %1696, 32
  store i64 %sub1418, i64* %n.addr, align 8, !tbaa !19
  %1697 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1419 = getelementptr inbounds i8, i8* %1697, i64 -13
  %add.ptr1420 = getelementptr inbounds i8, i8* %add.ptr1419, i64 16
  %1698 = bitcast i8* %add.ptr1420 to <2 x i64>*
  %call1421 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1698)
  store <2 x i64> %call1421, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1699 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1422 = getelementptr inbounds i8, i8* %1699, i64 -13
  %add.ptr1423 = getelementptr inbounds i8, i8* %add.ptr1422, i64 32
  %1700 = bitcast i8* %add.ptr1423 to <2 x i64>*
  %call1424 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1700)
  store <2 x i64> %call1424, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1701 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1425 = getelementptr inbounds i8, i8* %1701, i64 32
  store i8* %add.ptr1425, i8** %src.addr, align 8, !tbaa !5
  %1702 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1426 = getelementptr inbounds i8, i8* %1702, i64 0
  %1703 = bitcast i8* %add.ptr1426 to <2 x i64>*
  %1704 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1705 = bitcast <2 x i64> %1704 to <16 x i8>
  %1706 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1707 = bitcast <2 x i64> %1706 to <16 x i8>
  %palignr1427 = shufflevector <16 x i8> %1707, <16 x i8> %1705, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1708 = bitcast <16 x i8> %palignr1427 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1703, <2 x i64> %1708)
  %1709 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1428 = getelementptr inbounds i8, i8* %1709, i64 16
  %1710 = bitcast i8* %add.ptr1428 to <2 x i64>*
  %1711 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1712 = bitcast <2 x i64> %1711 to <16 x i8>
  %1713 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1714 = bitcast <2 x i64> %1713 to <16 x i8>
  %palignr1429 = shufflevector <16 x i8> %1714, <16 x i8> %1712, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %1715 = bitcast <16 x i8> %palignr1429 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1710, <2 x i64> %1715)
  %1716 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1430 = getelementptr inbounds i8, i8* %1716, i64 32
  store i8* %add.ptr1430, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1411

while.end1431:                                    ; preds = %while.cond1411
  %1717 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1432 = trunc i64 %1717 to i32
  store i32 %conv1432, i32* %tmp1343, align 4, !tbaa !9
  %1718 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1433 = sub i64 %1718, 16
  %add1434 = add i64 %sub1433, 13
  %and1435 = and i64 %add1434, 31
  %add1436 = add i64 %and1435, 16
  %sub1437 = sub i64 %add1436, 13
  store i64 %sub1437, i64* %n.addr, align 8, !tbaa !19
  %1719 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1720 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %conv1438 = sext i32 %1720 to i64
  %sub1439 = sub i64 %conv1438, %1719
  %conv1440 = trunc i64 %sub1439 to i32
  store i32 %conv1440, i32* %tmp1343, align 4, !tbaa !9
  %1721 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1722 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %idx.ext1441 = sext i32 %1722 to i64
  %add.ptr1442 = getelementptr inbounds i8, i8* %1721, i64 %idx.ext1441
  store i8* %add.ptr1442, i8** %src.addr, align 8, !tbaa !5
  %1723 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1724 = load i32, i32* %tmp1343, align 4, !tbaa !9
  %idx.ext1443 = sext i32 %1724 to i64
  %add.ptr1444 = getelementptr inbounds i8, i8* %1723, i64 %idx.ext1443
  store i8* %add.ptr1444, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1445

if.end1445:                                       ; preds = %while.end1431, %while.end1394
  %1725 = bitcast i32* %tmp1343 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1725) #6
  br label %sw.epilog

sw.bb1446:                                        ; preds = %if.end103
  %1726 = bitcast i32* %tmp1447 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1726) #6
  br label %while.cond1448

while.cond1448:                                   ; preds = %while.body1451, %sw.bb1446
  %1727 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1449 = icmp uge i64 %1727, 130
  br i1 %cmp1449, label %while.body1451, label %while.end1498

while.body1451:                                   ; preds = %while.cond1448
  %1728 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1452 = getelementptr inbounds i8, i8* %1728, i64 -14
  %add.ptr1453 = getelementptr inbounds i8, i8* %add.ptr1452, i64 0
  %1729 = bitcast i8* %add.ptr1453 to <2 x i64>*
  %call1454 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1729)
  store <2 x i64> %call1454, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1730 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1455 = sub i64 %1730, 128
  store i64 %sub1455, i64* %n.addr, align 8, !tbaa !19
  %1731 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1456 = getelementptr inbounds i8, i8* %1731, i64 -14
  %add.ptr1457 = getelementptr inbounds i8, i8* %add.ptr1456, i64 16
  %1732 = bitcast i8* %add.ptr1457 to <2 x i64>*
  %call1458 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1732)
  store <2 x i64> %call1458, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1733 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1459 = getelementptr inbounds i8, i8* %1733, i64 -14
  %add.ptr1460 = getelementptr inbounds i8, i8* %add.ptr1459, i64 32
  %1734 = bitcast i8* %add.ptr1460 to <2 x i64>*
  %call1461 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1734)
  store <2 x i64> %call1461, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1735 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1462 = getelementptr inbounds i8, i8* %1735, i64 -14
  %add.ptr1463 = getelementptr inbounds i8, i8* %add.ptr1462, i64 48
  %1736 = bitcast i8* %add.ptr1463 to <2 x i64>*
  %call1464 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1736)
  store <2 x i64> %call1464, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1737 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1465 = getelementptr inbounds i8, i8* %1737, i64 -14
  %add.ptr1466 = getelementptr inbounds i8, i8* %add.ptr1465, i64 64
  %1738 = bitcast i8* %add.ptr1466 to <2 x i64>*
  %call1467 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1738)
  store <2 x i64> %call1467, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1739 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1468 = getelementptr inbounds i8, i8* %1739, i64 -14
  %add.ptr1469 = getelementptr inbounds i8, i8* %add.ptr1468, i64 80
  %1740 = bitcast i8* %add.ptr1469 to <2 x i64>*
  %call1470 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1740)
  store <2 x i64> %call1470, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1741 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1471 = getelementptr inbounds i8, i8* %1741, i64 -14
  %add.ptr1472 = getelementptr inbounds i8, i8* %add.ptr1471, i64 96
  %1742 = bitcast i8* %add.ptr1472 to <2 x i64>*
  %call1473 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1742)
  store <2 x i64> %call1473, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1743 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1474 = getelementptr inbounds i8, i8* %1743, i64 -14
  %add.ptr1475 = getelementptr inbounds i8, i8* %add.ptr1474, i64 112
  %1744 = bitcast i8* %add.ptr1475 to <2 x i64>*
  %call1476 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1744)
  store <2 x i64> %call1476, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1745 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1477 = getelementptr inbounds i8, i8* %1745, i64 -14
  %add.ptr1478 = getelementptr inbounds i8, i8* %add.ptr1477, i64 128
  %1746 = bitcast i8* %add.ptr1478 to <2 x i64>*
  %call1479 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1746)
  store <2 x i64> %call1479, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1747 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1480 = getelementptr inbounds i8, i8* %1747, i64 128
  store i8* %add.ptr1480, i8** %src.addr, align 8, !tbaa !5
  %1748 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1481 = getelementptr inbounds i8, i8* %1748, i64 0
  %1749 = bitcast i8* %add.ptr1481 to <2 x i64>*
  %1750 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1751 = bitcast <2 x i64> %1750 to <16 x i8>
  %1752 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1753 = bitcast <2 x i64> %1752 to <16 x i8>
  %palignr1482 = shufflevector <16 x i8> %1753, <16 x i8> %1751, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1754 = bitcast <16 x i8> %palignr1482 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1749, <2 x i64> %1754)
  %1755 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1483 = getelementptr inbounds i8, i8* %1755, i64 16
  %1756 = bitcast i8* %add.ptr1483 to <2 x i64>*
  %1757 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1758 = bitcast <2 x i64> %1757 to <16 x i8>
  %1759 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1760 = bitcast <2 x i64> %1759 to <16 x i8>
  %palignr1484 = shufflevector <16 x i8> %1760, <16 x i8> %1758, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1761 = bitcast <16 x i8> %palignr1484 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1756, <2 x i64> %1761)
  %1762 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1485 = getelementptr inbounds i8, i8* %1762, i64 32
  %1763 = bitcast i8* %add.ptr1485 to <2 x i64>*
  %1764 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1765 = bitcast <2 x i64> %1764 to <16 x i8>
  %1766 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1767 = bitcast <2 x i64> %1766 to <16 x i8>
  %palignr1486 = shufflevector <16 x i8> %1767, <16 x i8> %1765, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1768 = bitcast <16 x i8> %palignr1486 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1763, <2 x i64> %1768)
  %1769 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1487 = getelementptr inbounds i8, i8* %1769, i64 48
  %1770 = bitcast i8* %add.ptr1487 to <2 x i64>*
  %1771 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1772 = bitcast <2 x i64> %1771 to <16 x i8>
  %1773 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1774 = bitcast <2 x i64> %1773 to <16 x i8>
  %palignr1488 = shufflevector <16 x i8> %1774, <16 x i8> %1772, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1775 = bitcast <16 x i8> %palignr1488 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1770, <2 x i64> %1775)
  %1776 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1489 = getelementptr inbounds i8, i8* %1776, i64 64
  %1777 = bitcast i8* %add.ptr1489 to <2 x i64>*
  %1778 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1779 = bitcast <2 x i64> %1778 to <16 x i8>
  %1780 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1781 = bitcast <2 x i64> %1780 to <16 x i8>
  %palignr1490 = shufflevector <16 x i8> %1781, <16 x i8> %1779, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1782 = bitcast <16 x i8> %palignr1490 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1777, <2 x i64> %1782)
  %1783 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1491 = getelementptr inbounds i8, i8* %1783, i64 80
  %1784 = bitcast i8* %add.ptr1491 to <2 x i64>*
  %1785 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1786 = bitcast <2 x i64> %1785 to <16 x i8>
  %1787 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1788 = bitcast <2 x i64> %1787 to <16 x i8>
  %palignr1492 = shufflevector <16 x i8> %1788, <16 x i8> %1786, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1789 = bitcast <16 x i8> %palignr1492 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1784, <2 x i64> %1789)
  %1790 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1493 = getelementptr inbounds i8, i8* %1790, i64 96
  %1791 = bitcast i8* %add.ptr1493 to <2 x i64>*
  %1792 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1793 = bitcast <2 x i64> %1792 to <16 x i8>
  %1794 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1795 = bitcast <2 x i64> %1794 to <16 x i8>
  %palignr1494 = shufflevector <16 x i8> %1795, <16 x i8> %1793, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1796 = bitcast <16 x i8> %palignr1494 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1791, <2 x i64> %1796)
  %1797 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1495 = getelementptr inbounds i8, i8* %1797, i64 112
  %1798 = bitcast i8* %add.ptr1495 to <2 x i64>*
  %1799 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1800 = bitcast <2 x i64> %1799 to <16 x i8>
  %1801 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1802 = bitcast <2 x i64> %1801 to <16 x i8>
  %palignr1496 = shufflevector <16 x i8> %1802, <16 x i8> %1800, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1803 = bitcast <16 x i8> %palignr1496 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1798, <2 x i64> %1803)
  %1804 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1497 = getelementptr inbounds i8, i8* %1804, i64 128
  store i8* %add.ptr1497, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1448

while.end1498:                                    ; preds = %while.cond1448
  %1805 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1499 = trunc i64 %1805 to i32
  store i32 %conv1499, i32* %tmp1447, align 4, !tbaa !9
  %1806 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1500 = sub i64 %1806, 16
  %add1501 = add i64 %sub1500, 14
  %and1502 = and i64 %add1501, 127
  %add1503 = add i64 %and1502, 16
  %sub1504 = sub i64 %add1503, 14
  store i64 %sub1504, i64* %n.addr, align 8, !tbaa !19
  %1807 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1808 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %conv1505 = sext i32 %1808 to i64
  %sub1506 = sub i64 %conv1505, %1807
  %conv1507 = trunc i64 %sub1506 to i32
  store i32 %conv1507, i32* %tmp1447, align 4, !tbaa !9
  %1809 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1810 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %idx.ext1508 = sext i32 %1810 to i64
  %add.ptr1509 = getelementptr inbounds i8, i8* %1809, i64 %idx.ext1508
  store i8* %add.ptr1509, i8** %src.addr, align 8, !tbaa !5
  %1811 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1812 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %idx.ext1510 = sext i32 %1812 to i64
  %add.ptr1511 = getelementptr inbounds i8, i8* %1811, i64 %idx.ext1510
  store i8* %add.ptr1511, i8** %dst.addr, align 8, !tbaa !5
  %1813 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1512 = icmp uge i64 %1813, 34
  br i1 %cmp1512, label %if.then1514, label %if.end1549

if.then1514:                                      ; preds = %while.end1498
  br label %while.cond1515

while.cond1515:                                   ; preds = %while.body1518, %if.then1514
  %1814 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1516 = icmp uge i64 %1814, 34
  br i1 %cmp1516, label %while.body1518, label %while.end1535

while.body1518:                                   ; preds = %while.cond1515
  %1815 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1519 = getelementptr inbounds i8, i8* %1815, i64 -14
  %add.ptr1520 = getelementptr inbounds i8, i8* %add.ptr1519, i64 0
  %1816 = bitcast i8* %add.ptr1520 to <2 x i64>*
  %call1521 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1816)
  store <2 x i64> %call1521, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1817 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1522 = sub i64 %1817, 32
  store i64 %sub1522, i64* %n.addr, align 8, !tbaa !19
  %1818 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1523 = getelementptr inbounds i8, i8* %1818, i64 -14
  %add.ptr1524 = getelementptr inbounds i8, i8* %add.ptr1523, i64 16
  %1819 = bitcast i8* %add.ptr1524 to <2 x i64>*
  %call1525 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1819)
  store <2 x i64> %call1525, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1820 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1526 = getelementptr inbounds i8, i8* %1820, i64 -14
  %add.ptr1527 = getelementptr inbounds i8, i8* %add.ptr1526, i64 32
  %1821 = bitcast i8* %add.ptr1527 to <2 x i64>*
  %call1528 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1821)
  store <2 x i64> %call1528, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1822 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1529 = getelementptr inbounds i8, i8* %1822, i64 32
  store i8* %add.ptr1529, i8** %src.addr, align 8, !tbaa !5
  %1823 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1530 = getelementptr inbounds i8, i8* %1823, i64 0
  %1824 = bitcast i8* %add.ptr1530 to <2 x i64>*
  %1825 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1826 = bitcast <2 x i64> %1825 to <16 x i8>
  %1827 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1828 = bitcast <2 x i64> %1827 to <16 x i8>
  %palignr1531 = shufflevector <16 x i8> %1828, <16 x i8> %1826, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1829 = bitcast <16 x i8> %palignr1531 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1824, <2 x i64> %1829)
  %1830 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1532 = getelementptr inbounds i8, i8* %1830, i64 16
  %1831 = bitcast i8* %add.ptr1532 to <2 x i64>*
  %1832 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1833 = bitcast <2 x i64> %1832 to <16 x i8>
  %1834 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1835 = bitcast <2 x i64> %1834 to <16 x i8>
  %palignr1533 = shufflevector <16 x i8> %1835, <16 x i8> %1833, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %1836 = bitcast <16 x i8> %palignr1533 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1831, <2 x i64> %1836)
  %1837 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1534 = getelementptr inbounds i8, i8* %1837, i64 32
  store i8* %add.ptr1534, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1515

while.end1535:                                    ; preds = %while.cond1515
  %1838 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1536 = trunc i64 %1838 to i32
  store i32 %conv1536, i32* %tmp1447, align 4, !tbaa !9
  %1839 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1537 = sub i64 %1839, 16
  %add1538 = add i64 %sub1537, 14
  %and1539 = and i64 %add1538, 31
  %add1540 = add i64 %and1539, 16
  %sub1541 = sub i64 %add1540, 14
  store i64 %sub1541, i64* %n.addr, align 8, !tbaa !19
  %1840 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1841 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %conv1542 = sext i32 %1841 to i64
  %sub1543 = sub i64 %conv1542, %1840
  %conv1544 = trunc i64 %sub1543 to i32
  store i32 %conv1544, i32* %tmp1447, align 4, !tbaa !9
  %1842 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1843 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %idx.ext1545 = sext i32 %1843 to i64
  %add.ptr1546 = getelementptr inbounds i8, i8* %1842, i64 %idx.ext1545
  store i8* %add.ptr1546, i8** %src.addr, align 8, !tbaa !5
  %1844 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1845 = load i32, i32* %tmp1447, align 4, !tbaa !9
  %idx.ext1547 = sext i32 %1845 to i64
  %add.ptr1548 = getelementptr inbounds i8, i8* %1844, i64 %idx.ext1547
  store i8* %add.ptr1548, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1549

if.end1549:                                       ; preds = %while.end1535, %while.end1498
  %1846 = bitcast i32* %tmp1447 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1846) #6
  br label %sw.epilog

sw.bb1550:                                        ; preds = %if.end103
  %1847 = bitcast i32* %tmp1551 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1847) #6
  br label %while.cond1552

while.cond1552:                                   ; preds = %while.body1555, %sw.bb1550
  %1848 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1553 = icmp uge i64 %1848, 129
  br i1 %cmp1553, label %while.body1555, label %while.end1602

while.body1555:                                   ; preds = %while.cond1552
  %1849 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1556 = getelementptr inbounds i8, i8* %1849, i64 -15
  %add.ptr1557 = getelementptr inbounds i8, i8* %add.ptr1556, i64 0
  %1850 = bitcast i8* %add.ptr1557 to <2 x i64>*
  %call1558 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1850)
  store <2 x i64> %call1558, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1851 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1559 = sub i64 %1851, 128
  store i64 %sub1559, i64* %n.addr, align 8, !tbaa !19
  %1852 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1560 = getelementptr inbounds i8, i8* %1852, i64 -15
  %add.ptr1561 = getelementptr inbounds i8, i8* %add.ptr1560, i64 16
  %1853 = bitcast i8* %add.ptr1561 to <2 x i64>*
  %call1562 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1853)
  store <2 x i64> %call1562, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1854 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1563 = getelementptr inbounds i8, i8* %1854, i64 -15
  %add.ptr1564 = getelementptr inbounds i8, i8* %add.ptr1563, i64 32
  %1855 = bitcast i8* %add.ptr1564 to <2 x i64>*
  %call1565 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1855)
  store <2 x i64> %call1565, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1856 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1566 = getelementptr inbounds i8, i8* %1856, i64 -15
  %add.ptr1567 = getelementptr inbounds i8, i8* %add.ptr1566, i64 48
  %1857 = bitcast i8* %add.ptr1567 to <2 x i64>*
  %call1568 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1857)
  store <2 x i64> %call1568, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1858 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1569 = getelementptr inbounds i8, i8* %1858, i64 -15
  %add.ptr1570 = getelementptr inbounds i8, i8* %add.ptr1569, i64 64
  %1859 = bitcast i8* %add.ptr1570 to <2 x i64>*
  %call1571 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1859)
  store <2 x i64> %call1571, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1860 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1572 = getelementptr inbounds i8, i8* %1860, i64 -15
  %add.ptr1573 = getelementptr inbounds i8, i8* %add.ptr1572, i64 80
  %1861 = bitcast i8* %add.ptr1573 to <2 x i64>*
  %call1574 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1861)
  store <2 x i64> %call1574, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1862 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1575 = getelementptr inbounds i8, i8* %1862, i64 -15
  %add.ptr1576 = getelementptr inbounds i8, i8* %add.ptr1575, i64 96
  %1863 = bitcast i8* %add.ptr1576 to <2 x i64>*
  %call1577 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1863)
  store <2 x i64> %call1577, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1864 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1578 = getelementptr inbounds i8, i8* %1864, i64 -15
  %add.ptr1579 = getelementptr inbounds i8, i8* %add.ptr1578, i64 112
  %1865 = bitcast i8* %add.ptr1579 to <2 x i64>*
  %call1580 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1865)
  store <2 x i64> %call1580, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1866 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1581 = getelementptr inbounds i8, i8* %1866, i64 -15
  %add.ptr1582 = getelementptr inbounds i8, i8* %add.ptr1581, i64 128
  %1867 = bitcast i8* %add.ptr1582 to <2 x i64>*
  %call1583 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1867)
  store <2 x i64> %call1583, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1868 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1584 = getelementptr inbounds i8, i8* %1868, i64 128
  store i8* %add.ptr1584, i8** %src.addr, align 8, !tbaa !5
  %1869 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1585 = getelementptr inbounds i8, i8* %1869, i64 0
  %1870 = bitcast i8* %add.ptr1585 to <2 x i64>*
  %1871 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1872 = bitcast <2 x i64> %1871 to <16 x i8>
  %1873 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1874 = bitcast <2 x i64> %1873 to <16 x i8>
  %palignr1586 = shufflevector <16 x i8> %1874, <16 x i8> %1872, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1875 = bitcast <16 x i8> %palignr1586 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1870, <2 x i64> %1875)
  %1876 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1587 = getelementptr inbounds i8, i8* %1876, i64 16
  %1877 = bitcast i8* %add.ptr1587 to <2 x i64>*
  %1878 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1879 = bitcast <2 x i64> %1878 to <16 x i8>
  %1880 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1881 = bitcast <2 x i64> %1880 to <16 x i8>
  %palignr1588 = shufflevector <16 x i8> %1881, <16 x i8> %1879, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1882 = bitcast <16 x i8> %palignr1588 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1877, <2 x i64> %1882)
  %1883 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1589 = getelementptr inbounds i8, i8* %1883, i64 32
  %1884 = bitcast i8* %add.ptr1589 to <2 x i64>*
  %1885 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1886 = bitcast <2 x i64> %1885 to <16 x i8>
  %1887 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1888 = bitcast <2 x i64> %1887 to <16 x i8>
  %palignr1590 = shufflevector <16 x i8> %1888, <16 x i8> %1886, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1889 = bitcast <16 x i8> %palignr1590 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1884, <2 x i64> %1889)
  %1890 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1591 = getelementptr inbounds i8, i8* %1890, i64 48
  %1891 = bitcast i8* %add.ptr1591 to <2 x i64>*
  %1892 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1893 = bitcast <2 x i64> %1892 to <16 x i8>
  %1894 = load <2 x i64>, <2 x i64>* %xmm3, align 16, !tbaa !2
  %1895 = bitcast <2 x i64> %1894 to <16 x i8>
  %palignr1592 = shufflevector <16 x i8> %1895, <16 x i8> %1893, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1896 = bitcast <16 x i8> %palignr1592 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1891, <2 x i64> %1896)
  %1897 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1593 = getelementptr inbounds i8, i8* %1897, i64 64
  %1898 = bitcast i8* %add.ptr1593 to <2 x i64>*
  %1899 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1900 = bitcast <2 x i64> %1899 to <16 x i8>
  %1901 = load <2 x i64>, <2 x i64>* %xmm4, align 16, !tbaa !2
  %1902 = bitcast <2 x i64> %1901 to <16 x i8>
  %palignr1594 = shufflevector <16 x i8> %1902, <16 x i8> %1900, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1903 = bitcast <16 x i8> %palignr1594 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1898, <2 x i64> %1903)
  %1904 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1595 = getelementptr inbounds i8, i8* %1904, i64 80
  %1905 = bitcast i8* %add.ptr1595 to <2 x i64>*
  %1906 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1907 = bitcast <2 x i64> %1906 to <16 x i8>
  %1908 = load <2 x i64>, <2 x i64>* %xmm5, align 16, !tbaa !2
  %1909 = bitcast <2 x i64> %1908 to <16 x i8>
  %palignr1596 = shufflevector <16 x i8> %1909, <16 x i8> %1907, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1910 = bitcast <16 x i8> %palignr1596 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1905, <2 x i64> %1910)
  %1911 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1597 = getelementptr inbounds i8, i8* %1911, i64 96
  %1912 = bitcast i8* %add.ptr1597 to <2 x i64>*
  %1913 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1914 = bitcast <2 x i64> %1913 to <16 x i8>
  %1915 = load <2 x i64>, <2 x i64>* %xmm6, align 16, !tbaa !2
  %1916 = bitcast <2 x i64> %1915 to <16 x i8>
  %palignr1598 = shufflevector <16 x i8> %1916, <16 x i8> %1914, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1917 = bitcast <16 x i8> %palignr1598 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1912, <2 x i64> %1917)
  %1918 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1599 = getelementptr inbounds i8, i8* %1918, i64 112
  %1919 = bitcast i8* %add.ptr1599 to <2 x i64>*
  %1920 = load <2 x i64>, <2 x i64>* %xmm8, align 16, !tbaa !2
  %1921 = bitcast <2 x i64> %1920 to <16 x i8>
  %1922 = load <2 x i64>, <2 x i64>* %xmm7, align 16, !tbaa !2
  %1923 = bitcast <2 x i64> %1922 to <16 x i8>
  %palignr1600 = shufflevector <16 x i8> %1923, <16 x i8> %1921, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1924 = bitcast <16 x i8> %palignr1600 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1919, <2 x i64> %1924)
  %1925 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1601 = getelementptr inbounds i8, i8* %1925, i64 128
  store i8* %add.ptr1601, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1552

while.end1602:                                    ; preds = %while.cond1552
  %1926 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1603 = trunc i64 %1926 to i32
  store i32 %conv1603, i32* %tmp1551, align 4, !tbaa !9
  %1927 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1604 = sub i64 %1927, 16
  %add1605 = add i64 %sub1604, 15
  %and1606 = and i64 %add1605, 127
  %add1607 = add i64 %and1606, 16
  %sub1608 = sub i64 %add1607, 15
  store i64 %sub1608, i64* %n.addr, align 8, !tbaa !19
  %1928 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1929 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %conv1609 = sext i32 %1929 to i64
  %sub1610 = sub i64 %conv1609, %1928
  %conv1611 = trunc i64 %sub1610 to i32
  store i32 %conv1611, i32* %tmp1551, align 4, !tbaa !9
  %1930 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1931 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %idx.ext1612 = sext i32 %1931 to i64
  %add.ptr1613 = getelementptr inbounds i8, i8* %1930, i64 %idx.ext1612
  store i8* %add.ptr1613, i8** %src.addr, align 8, !tbaa !5
  %1932 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1933 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %idx.ext1614 = sext i32 %1933 to i64
  %add.ptr1615 = getelementptr inbounds i8, i8* %1932, i64 %idx.ext1614
  store i8* %add.ptr1615, i8** %dst.addr, align 8, !tbaa !5
  %1934 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1616 = icmp uge i64 %1934, 33
  br i1 %cmp1616, label %if.then1618, label %if.end1653

if.then1618:                                      ; preds = %while.end1602
  br label %while.cond1619

while.cond1619:                                   ; preds = %while.body1622, %if.then1618
  %1935 = load i64, i64* %n.addr, align 8, !tbaa !19
  %cmp1620 = icmp uge i64 %1935, 33
  br i1 %cmp1620, label %while.body1622, label %while.end1639

while.body1622:                                   ; preds = %while.cond1619
  %1936 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1623 = getelementptr inbounds i8, i8* %1936, i64 -15
  %add.ptr1624 = getelementptr inbounds i8, i8* %add.ptr1623, i64 0
  %1937 = bitcast i8* %add.ptr1624 to <2 x i64>*
  %call1625 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1937)
  store <2 x i64> %call1625, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1938 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1626 = sub i64 %1938, 32
  store i64 %sub1626, i64* %n.addr, align 8, !tbaa !19
  %1939 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1627 = getelementptr inbounds i8, i8* %1939, i64 -15
  %add.ptr1628 = getelementptr inbounds i8, i8* %add.ptr1627, i64 16
  %1940 = bitcast i8* %add.ptr1628 to <2 x i64>*
  %call1629 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1940)
  store <2 x i64> %call1629, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1941 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1630 = getelementptr inbounds i8, i8* %1941, i64 -15
  %add.ptr1631 = getelementptr inbounds i8, i8* %add.ptr1630, i64 32
  %1942 = bitcast i8* %add.ptr1631 to <2 x i64>*
  %call1632 = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %1942)
  store <2 x i64> %call1632, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1943 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1633 = getelementptr inbounds i8, i8* %1943, i64 32
  store i8* %add.ptr1633, i8** %src.addr, align 8, !tbaa !5
  %1944 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1634 = getelementptr inbounds i8, i8* %1944, i64 0
  %1945 = bitcast i8* %add.ptr1634 to <2 x i64>*
  %1946 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1947 = bitcast <2 x i64> %1946 to <16 x i8>
  %1948 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  %1949 = bitcast <2 x i64> %1948 to <16 x i8>
  %palignr1635 = shufflevector <16 x i8> %1949, <16 x i8> %1947, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1950 = bitcast <16 x i8> %palignr1635 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1945, <2 x i64> %1950)
  %1951 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1636 = getelementptr inbounds i8, i8* %1951, i64 16
  %1952 = bitcast i8* %add.ptr1636 to <2 x i64>*
  %1953 = load <2 x i64>, <2 x i64>* %xmm2, align 16, !tbaa !2
  %1954 = bitcast <2 x i64> %1953 to <16 x i8>
  %1955 = load <2 x i64>, <2 x i64>* %xmm1, align 16, !tbaa !2
  %1956 = bitcast <2 x i64> %1955 to <16 x i8>
  %palignr1637 = shufflevector <16 x i8> %1956, <16 x i8> %1954, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1957 = bitcast <16 x i8> %palignr1637 to <2 x i64>
  call void @_mm_storeu_si128(<2 x i64>* %1952, <2 x i64> %1957)
  %1958 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr1638 = getelementptr inbounds i8, i8* %1958, i64 32
  store i8* %add.ptr1638, i8** %dst.addr, align 8, !tbaa !5
  br label %while.cond1619

while.end1639:                                    ; preds = %while.cond1619
  %1959 = load i64, i64* %n.addr, align 8, !tbaa !19
  %conv1640 = trunc i64 %1959 to i32
  store i32 %conv1640, i32* %tmp1551, align 4, !tbaa !9
  %1960 = load i64, i64* %n.addr, align 8, !tbaa !19
  %sub1641 = sub i64 %1960, 16
  %add1642 = add i64 %sub1641, 15
  %and1643 = and i64 %add1642, 31
  %add1644 = add i64 %and1643, 16
  %sub1645 = sub i64 %add1644, 15
  store i64 %sub1645, i64* %n.addr, align 8, !tbaa !19
  %1961 = load i64, i64* %n.addr, align 8, !tbaa !19
  %1962 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %conv1646 = sext i32 %1962 to i64
  %sub1647 = sub i64 %conv1646, %1961
  %conv1648 = trunc i64 %sub1647 to i32
  store i32 %conv1648, i32* %tmp1551, align 4, !tbaa !9
  %1963 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %1964 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %idx.ext1649 = sext i32 %1964 to i64
  %add.ptr1650 = getelementptr inbounds i8, i8* %1963, i64 %idx.ext1649
  store i8* %add.ptr1650, i8** %src.addr, align 8, !tbaa !5
  %1965 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %1966 = load i32, i32* %tmp1551, align 4, !tbaa !9
  %idx.ext1651 = sext i32 %1966 to i64
  %add.ptr1652 = getelementptr inbounds i8, i8* %1965, i64 %idx.ext1651
  store i8* %add.ptr1652, i8** %dst.addr, align 8, !tbaa !5
  br label %if.end1653

if.end1653:                                       ; preds = %while.end1639, %while.end1602
  %1967 = bitcast i32* %tmp1551 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1967) #6
  br label %sw.epilog

sw.default:                                       ; preds = %if.end103
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end1653, %if.end1549, %if.end1445, %if.end1341, %if.end1237, %if.end1133, %if.end1029, %if.end925, %if.end821, %if.end717, %if.end613, %if.end509, %if.end405, %if.end301, %if.end197
  br label %COPY_BLOCK_64_BACK15

cleanup:                                          ; preds = %if.end86, %if.then74, %if.then35, %if.then28, %if.then21, %if.end18
  %1968 = bitcast i64* %srcofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1968) #6
  %1969 = bitcast i64* %dstofss to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1969) #6
  %1970 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1970) #6
  %1971 = bitcast i64* %srcu to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1971) #6
  %1972 = bitcast i64* %dstu to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1972) #6
  %1973 = bitcast <2 x i64>* %xmm8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1973) #6
  %1974 = bitcast <2 x i64>* %xmm7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1974) #6
  %1975 = bitcast <2 x i64>* %xmm6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1975) #6
  %1976 = bitcast <2 x i64>* %xmm5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1976) #6
  %1977 = bitcast <2 x i64>* %xmm4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1977) #6
  %1978 = bitcast <2 x i64>* %xmm3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1978) #6
  %1979 = bitcast <2 x i64>* %xmm2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1979) #6
  %1980 = bitcast <2 x i64>* %xmm1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1980) #6
  %1981 = bitcast <2 x i64>* %xmm0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1981) #6
  %1982 = load i8*, i8** %retval, align 8
  ret i8* %1982
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov16(i8* %dst, i8* %src) #1 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %xmm0 = alloca <2 x i64>, align 16
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = bitcast <2 x i64>* %xmm0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #6
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %2 = bitcast i8* %1 to <2 x i64>*
  %call = call <2 x i64> @_mm_loadu_si128(<2 x i64>* %2)
  store <2 x i64> %call, <2 x i64>* %xmm0, align 16, !tbaa !2
  %3 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %4 = bitcast i8* %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %xmm0, align 16, !tbaa !2
  call void @_mm_storeu_si128(<2 x i64>* %4, <2 x i64> %5)
  %6 = bitcast <2 x i64>* %xmm0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov32(i8* %dst, i8* %src) #1 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov64(i8* %dst, i8* %src) #1 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal <2 x i64> @_mm_loadu_si128(<2 x i64>* %__p) #10 {
entry:
  %__p.addr = alloca <2 x i64>*, align 8
  store <2 x i64>* %__p, <2 x i64>** %__p.addr, align 8, !tbaa !5
  %0 = load <2 x i64>*, <2 x i64>** %__p.addr, align 8, !tbaa !5
  %1 = bitcast <2 x i64>* %0 to %struct.__loadu_si128*
  %__v = getelementptr inbounds %struct.__loadu_si128, %struct.__loadu_si128* %1, i32 0, i32 0
  %2 = load <2 x i64>, <2 x i64>* %__v, align 1, !tbaa !2
  ret <2 x i64> %2
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @_mm_storeu_si128(<2 x i64>* %__p, <2 x i64> %__b) #10 {
entry:
  %__p.addr = alloca <2 x i64>*, align 8
  %__b.addr = alloca <2 x i64>, align 16
  store <2 x i64>* %__p, <2 x i64>** %__p.addr, align 8, !tbaa !5
  store <2 x i64> %__b, <2 x i64>* %__b.addr, align 16, !tbaa !2
  %0 = load <2 x i64>, <2 x i64>* %__b.addr, align 16, !tbaa !2
  %1 = load <2 x i64>*, <2 x i64>** %__p.addr, align 8, !tbaa !5
  %2 = bitcast <2 x i64>* %1 to %struct.__storeu_si128*
  %__v = getelementptr inbounds %struct.__storeu_si128, %struct.__storeu_si128* %2, i32 0, i32 0
  store <2 x i64> %0, <2 x i64>* %__v, align 1, !tbaa !2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov128(i8* %dst, i8* %src) #1 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %8 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr8 = getelementptr inbounds i8, i8* %8, i64 64
  %9 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr9 = getelementptr inbounds i8, i8* %9, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %10 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr10 = getelementptr inbounds i8, i8* %10, i64 80
  %11 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %12 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr12 = getelementptr inbounds i8, i8* %12, i64 96
  %13 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr13 = getelementptr inbounds i8, i8* %13, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %14 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr14 = getelementptr inbounds i8, i8* %14, i64 112
  %15 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr15 = getelementptr inbounds i8, i8* %15, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rte_mov256(i8* %dst, i8* %src) #1 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !5
  store i8* %src, i8** %src.addr, align 8, !tbaa !5
  %0 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 0
  call void @rte_mov16(i8* %add.ptr, i8* %add.ptr1)
  %2 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr2 = getelementptr inbounds i8, i8* %2, i64 16
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr3 = getelementptr inbounds i8, i8* %3, i64 16
  call void @rte_mov16(i8* %add.ptr2, i8* %add.ptr3)
  %4 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr4 = getelementptr inbounds i8, i8* %4, i64 32
  %5 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 32
  call void @rte_mov16(i8* %add.ptr4, i8* %add.ptr5)
  %6 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr6 = getelementptr inbounds i8, i8* %6, i64 48
  %7 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 48
  call void @rte_mov16(i8* %add.ptr6, i8* %add.ptr7)
  %8 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr8 = getelementptr inbounds i8, i8* %8, i64 64
  %9 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr9 = getelementptr inbounds i8, i8* %9, i64 64
  call void @rte_mov16(i8* %add.ptr8, i8* %add.ptr9)
  %10 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr10 = getelementptr inbounds i8, i8* %10, i64 80
  %11 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 80
  call void @rte_mov16(i8* %add.ptr10, i8* %add.ptr11)
  %12 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr12 = getelementptr inbounds i8, i8* %12, i64 96
  %13 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr13 = getelementptr inbounds i8, i8* %13, i64 96
  call void @rte_mov16(i8* %add.ptr12, i8* %add.ptr13)
  %14 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr14 = getelementptr inbounds i8, i8* %14, i64 112
  %15 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr15 = getelementptr inbounds i8, i8* %15, i64 112
  call void @rte_mov16(i8* %add.ptr14, i8* %add.ptr15)
  %16 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr16 = getelementptr inbounds i8, i8* %16, i64 128
  %17 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr17 = getelementptr inbounds i8, i8* %17, i64 128
  call void @rte_mov16(i8* %add.ptr16, i8* %add.ptr17)
  %18 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr18 = getelementptr inbounds i8, i8* %18, i64 144
  %19 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr19 = getelementptr inbounds i8, i8* %19, i64 144
  call void @rte_mov16(i8* %add.ptr18, i8* %add.ptr19)
  %20 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr20 = getelementptr inbounds i8, i8* %20, i64 160
  %21 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr21 = getelementptr inbounds i8, i8* %21, i64 160
  call void @rte_mov16(i8* %add.ptr20, i8* %add.ptr21)
  %22 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr22 = getelementptr inbounds i8, i8* %22, i64 176
  %23 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr23 = getelementptr inbounds i8, i8* %23, i64 176
  call void @rte_mov16(i8* %add.ptr22, i8* %add.ptr23)
  %24 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr24 = getelementptr inbounds i8, i8* %24, i64 192
  %25 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr25 = getelementptr inbounds i8, i8* %25, i64 192
  call void @rte_mov16(i8* %add.ptr24, i8* %add.ptr25)
  %26 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr26 = getelementptr inbounds i8, i8* %26, i64 208
  %27 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr27 = getelementptr inbounds i8, i8* %27, i64 208
  call void @rte_mov16(i8* %add.ptr26, i8* %add.ptr27)
  %28 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr28 = getelementptr inbounds i8, i8* %28, i64 224
  %29 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr29 = getelementptr inbounds i8, i8* %29, i64 224
  call void @rte_mov16(i8* %add.ptr28, i8* %add.ptr29)
  %30 = load i8*, i8** %dst.addr, align 8, !tbaa !5
  %add.ptr30 = getelementptr inbounds i8, i8* %30, i64 240
  %31 = load i8*, i8** %src.addr, align 8, !tbaa !5
  %add.ptr31 = getelementptr inbounds i8, i8* %31, i64 240
  call void @rte_mov16(i8* %add.ptr30, i8* %add.ptr31)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @dma_write(i64 %addr, i64 %len, i8* %buf) #1 {
entry:
  %addr.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  store i64 %addr, i64* %addr.addr, align 8, !tbaa !19
  store i64 %len, i64* %len.addr, align 8, !tbaa !19
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !5
  %0 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %1 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add = add i64 %0, %1
  %2 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %cmp = icmp uge i64 %add, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %4 = load i64, i64* %len.addr, align 8, !tbaa !19
  %add1 = add i64 %3, %4
  %cmp2 = icmp ule i64 %add1, 1073741824
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 57, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.dma_write, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load i8*, i8** @tas_shm, align 8, !tbaa !5
  %6 = load i64, i64* %addr.addr, align 8, !tbaa !19
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8*, i8** %buf.addr, align 8, !tbaa !5
  %8 = load i64, i64* %len.addr, align 8, !tbaa !19
  %call = call i8* @rte_memcpy(i8* %add.ptr, i8* %7, i64 %8)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @network_buf_buf(%struct.network_buf_handle* %bh) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %buf_addr = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 1
  %2 = load i8*, i8** %buf_addr, align 64, !tbaa !63
  ret i8* %2
}

; Function Attrs: inlinehint nounwind uwtable
define internal i16 @t_beui16(i16 zeroext %x) #1 {
entry:
  %retval = alloca %struct.beui16, align 1
  %x.addr = alloca i16, align 2
  store i16 %x, i16* %x.addr, align 2, !tbaa !7
  %0 = load i16, i16* %x.addr, align 2, !tbaa !7
  %1 = call i16 @llvm.bswap.i16(i16 %0)
  %x1 = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  store i16 %1, i16* %x1, align 1, !tbaa !67
  %coerce.dive = getelementptr inbounds %struct.beui16, %struct.beui16* %retval, i32 0, i32 0
  %2 = load i16, i16* %coerce.dive, align 1
  ret i16 %2
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @t_beui32(i32 %x) #1 {
entry:
  %retval = alloca %struct.beui32, align 1
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4, !tbaa !9
  %0 = load i32, i32* %x.addr, align 4, !tbaa !9
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  %x1 = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  store i32 %1, i32* %x1, align 1, !tbaa !41
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %retval, i32 0, i32 0
  %2 = load i32, i32* %coerce.dive, align 1
  ret i32 %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @tcp_checksums(%struct.network_buf_handle* %nbh, %struct.pkt_tcp* %p, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %p.addr = alloca %struct.pkt_tcp*, align 8
  %l3_paylen.addr = alloca i16, align 2
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store %struct.pkt_tcp* %p, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2, !tbaa !7
  %0 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %ip = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %0, i32 0, i32 1
  %chksum = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %ip, i32 0, i32 7
  store i16 0, i16* %chksum, align 1, !tbaa !52
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %2 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %ip2 = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %2, i32 0, i32 1
  %3 = load i16, i16* %l3_paylen.addr, align 2, !tbaa !7
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive3, align 1
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive4, align 1
  %call = call zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %1, %struct.ip_hdr* %ip2, i32 %4, i32 %5, i16 zeroext %3)
  %6 = load %struct.pkt_tcp*, %struct.pkt_tcp** %p.addr, align 8, !tbaa !5
  %tcp = getelementptr inbounds %struct.pkt_tcp, %struct.pkt_tcp* %6, i32 0, i32 2
  %chksum5 = getelementptr inbounds %struct.tcp_hdr, %struct.tcp_hdr* %tcp, i32 0, i32 6
  store i16 %call, i16* %chksum5, align 1, !tbaa !55
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @tx_send(%struct.dataplane_context* %ctx, %struct.network_buf_handle* %nbh, i16 zeroext %off, i16 zeroext %len) #1 {
entry:
  %ctx.addr = alloca %struct.dataplane_context*, align 8
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %off.addr = alloca i16, align 2
  %len.addr = alloca i16, align 2
  %i = alloca i32, align 4
  store %struct.dataplane_context* %ctx, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store i16 %off, i16* %off.addr, align 2, !tbaa !7
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %tx_num = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %1, i32 0, i32 10
  %2 = load i16, i16* %tx_num, align 8, !tbaa !123
  %conv = zext i16 %2 to i32
  store i32 %conv, i32* %i, align 4, !tbaa !9
  %3 = load i32, i32* %i, align 4, !tbaa !9
  %cmp = icmp uge i32 %3, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.26, i32 0, i32 0))
  call void @abort() #11
  unreachable

if.end:                                           ; preds = %entry
  %5 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %6 = load i16, i16* %off.addr, align 2, !tbaa !7
  call void @network_buf_setoff(%struct.network_buf_handle* %5, i16 zeroext %6)
  %7 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %8 = load i16, i16* %len.addr, align 2, !tbaa !7
  call void @network_buf_setlen(%struct.network_buf_handle* %7, i16 zeroext %8)
  %9 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %10 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %tx_handles = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %10, i32 0, i32 9
  %11 = load i32, i32* %i, align 4, !tbaa !9
  %idxprom = zext i32 %11 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.network_buf_handle*], [32 x %struct.network_buf_handle*]* %tx_handles, i64 0, i64 %idxprom
  store %struct.network_buf_handle* %9, %struct.network_buf_handle** %arrayidx, align 8, !tbaa !5
  %12 = load i32, i32* %i, align 4, !tbaa !9
  %add = add i32 %12, 1
  %conv2 = trunc i32 %add to i16
  %13 = load %struct.dataplane_context*, %struct.dataplane_context** %ctx.addr, align 8, !tbaa !5
  %tx_num3 = getelementptr inbounds %struct.dataplane_context, %struct.dataplane_context* %13, i32 0, i32 10
  store i16 %conv2, i16* %tx_num3, align 8, !tbaa !123
  %14 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @tx_xsum_enable(%struct.network_buf_handle* %nbh, %struct.ip_hdr* %iph, i32 %ip_s.coerce, i32 %ip_d.coerce, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %nbh.addr = alloca %struct.network_buf_handle*, align 8
  %iph.addr = alloca %struct.ip_hdr*, align 8
  %l3_paylen.addr = alloca i16, align 2
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %nbh, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  store %struct.ip_hdr* %iph, %struct.ip_hdr** %iph.addr, align 8, !tbaa !5
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2, !tbaa !7
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %nbh.addr, align 8, !tbaa !5
  %1 = load %struct.ip_hdr*, %struct.ip_hdr** %iph.addr, align 8, !tbaa !5
  %2 = bitcast %struct.ip_hdr* %1 to i8*
  %3 = load i16, i16* %l3_paylen.addr, align 2, !tbaa !7
  %coerce.dive2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive2, align 1
  %coerce.dive3 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %5 = load i32, i32* %coerce.dive3, align 1
  %call = call zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %0, i8 zeroext 14, i8 zeroext 20, i8* %2, i32 %4, i32 %5, i8 zeroext 6, i16 zeroext %3)
  ret i16 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_tcpxsums(%struct.network_buf_handle* %bh, i8 zeroext %l2l, i8 zeroext %l3l, i8* %ip_hdr, i32 %ip_s.coerce, i32 %ip_d.coerce, i8 zeroext %ip_proto, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_s = alloca %struct.beui32, align 1
  %ip_d = alloca %struct.beui32, align 1
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %l2l.addr = alloca i8, align 1
  %l3l.addr = alloca i8, align 1
  %ip_hdr.addr = alloca i8*, align 8
  %ip_proto.addr = alloca i8, align 1
  %l3_paylen.addr = alloca i16, align 2
  %mb = alloca %struct.rte_mbuf*, align 8
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  store i32 %ip_s.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  store i32 %ip_d.coerce, i32* %coerce.dive1, align 1
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  store i8 %l2l, i8* %l2l.addr, align 1, !tbaa !2
  store i8 %l3l, i8* %l3l.addr, align 1, !tbaa !2
  store i8* %ip_hdr, i8** %ip_hdr.addr, align 8, !tbaa !5
  store i8 %ip_proto, i8* %ip_proto.addr, align 1, !tbaa !2
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2, !tbaa !7
  %0 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %2 = bitcast %struct.network_buf_handle* %1 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %2, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %3 = load i8, i8* %l2l.addr, align 1, !tbaa !2
  %conv = zext i8 %3 to i32
  %4 = load i8, i8* %l3l.addr, align 1, !tbaa !2
  %conv2 = zext i8 %4 to i32
  %shl = shl i32 %conv2, 7
  %or = or i32 %conv, %shl
  %conv3 = zext i32 %or to i64
  %5 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %5, i32 0, i32 22
  %tx_offload = bitcast %union.anon.18* %6 to i64*
  store i64 %conv3, i64* %tx_offload, align 8, !tbaa !2
  %7 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %ol_flags = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %7, i32 0, i32 8
  store i64 58546795155816448, i64* %ol_flags, align 8, !tbaa !124
  %8 = load i8, i8* %ip_proto.addr, align 1, !tbaa !2
  %9 = load i16, i16* %l3_paylen.addr, align 2, !tbaa !7
  %coerce.dive4 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_s, i32 0, i32 0
  %10 = load i32, i32* %coerce.dive4, align 1
  %coerce.dive5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_d, i32 0, i32 0
  %11 = load i32, i32* %coerce.dive5, align 1
  %call = call zeroext i16 @network_ip_phdr_xsum(i32 %10, i32 %11, i8 zeroext %8, i16 zeroext %9)
  %12 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #6
  ret i16 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_ip_phdr_xsum(i32 %ip_src.coerce, i32 %ip_dst.coerce, i8 zeroext %proto, i16 zeroext %l3_paylen) #1 {
entry:
  %ip_src = alloca %struct.beui32, align 1
  %ip_dst = alloca %struct.beui32, align 1
  %proto.addr = alloca i8, align 1
  %l3_paylen.addr = alloca i16, align 2
  %sum = alloca i32, align 4
  %coerce = alloca %struct.beui16, align 1
  %coerce.dive = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  store i32 %ip_src.coerce, i32* %coerce.dive, align 1
  %coerce.dive1 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  store i32 %ip_dst.coerce, i32* %coerce.dive1, align 1
  store i8 %proto, i8* %proto.addr, align 1, !tbaa !2
  store i16 %l3_paylen, i16* %l3_paylen.addr, align 2, !tbaa !7
  %0 = bitcast i32* %sum to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  store i32 0, i32* %sum, align 4, !tbaa !9
  %x = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %1 = load i32, i32* %x, align 1, !tbaa !41
  %and = and i32 %1, 65535
  %2 = load i32, i32* %sum, align 4, !tbaa !9
  %add = add i32 %2, %and
  store i32 %add, i32* %sum, align 4, !tbaa !9
  %x2 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_src, i32 0, i32 0
  %3 = load i32, i32* %x2, align 1, !tbaa !41
  %shr = lshr i32 %3, 16
  %and3 = and i32 %shr, 65535
  %4 = load i32, i32* %sum, align 4, !tbaa !9
  %add4 = add i32 %4, %and3
  store i32 %add4, i32* %sum, align 4, !tbaa !9
  %x5 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %5 = load i32, i32* %x5, align 1, !tbaa !41
  %and6 = and i32 %5, 65535
  %6 = load i32, i32* %sum, align 4, !tbaa !9
  %add7 = add i32 %6, %and6
  store i32 %add7, i32* %sum, align 4, !tbaa !9
  %x8 = getelementptr inbounds %struct.beui32, %struct.beui32* %ip_dst, i32 0, i32 0
  %7 = load i32, i32* %x8, align 1, !tbaa !41
  %shr9 = lshr i32 %7, 16
  %and10 = and i32 %shr9, 65535
  %8 = load i32, i32* %sum, align 4, !tbaa !9
  %add11 = add i32 %8, %and10
  store i32 %add11, i32* %sum, align 4, !tbaa !9
  %9 = load i8, i8* %proto.addr, align 1, !tbaa !2
  %conv = zext i8 %9 to i16
  %conv12 = zext i16 %conv to i32
  %shl = shl i32 %conv12, 8
  %10 = load i32, i32* %sum, align 4, !tbaa !9
  %add13 = add i32 %10, %shl
  store i32 %add13, i32* %sum, align 4, !tbaa !9
  %11 = load i16, i16* %l3_paylen.addr, align 2, !tbaa !7
  %call = call i16 @t_beui16(i16 zeroext %11)
  %coerce.dive14 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  store i16 %call, i16* %coerce.dive14, align 1
  %x15 = getelementptr inbounds %struct.beui16, %struct.beui16* %coerce, i32 0, i32 0
  %12 = load i16, i16* %x15, align 1, !tbaa !67
  %conv16 = zext i16 %12 to i32
  %13 = load i32, i32* %sum, align 4, !tbaa !9
  %add17 = add i32 %13, %conv16
  store i32 %add17, i32* %sum, align 4, !tbaa !9
  %14 = load i32, i32* %sum, align 4, !tbaa !9
  %and18 = and i32 %14, -65536
  %shr19 = lshr i32 %and18, 16
  %15 = load i32, i32* %sum, align 4, !tbaa !9
  %and20 = and i32 %15, 65535
  %add21 = add i32 %shr19, %and20
  store i32 %add21, i32* %sum, align 4, !tbaa !9
  %16 = load i32, i32* %sum, align 4, !tbaa !9
  %and22 = and i32 %16, -65536
  %shr23 = lshr i32 %and22, 16
  %17 = load i32, i32* %sum, align 4, !tbaa !9
  %and24 = and i32 %17, 65535
  %add25 = add i32 %shr23, %and24
  store i32 %add25, i32* %sum, align 4, !tbaa !9
  %18 = load i32, i32* %sum, align 4, !tbaa !9
  %conv26 = trunc i32 %18 to i16
  %19 = bitcast i32* %sum to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #6
  ret i16 %conv26
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @network_buf_setoff(%struct.network_buf_handle* %bh, i16 zeroext %off) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %off.addr = alloca i16, align 2
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  store i16 %off, i16* %off.addr, align 2, !tbaa !7
  %0 = load i16, i16* %off.addr, align 2, !tbaa !7
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %2 = bitcast %struct.network_buf_handle* %1 to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %2, i32 0, i32 4
  store i16 %0, i16* %data_off, align 16, !tbaa !65
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @network_buf_setlen(%struct.network_buf_handle* %bh, i16 zeroext %len) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  %len.addr = alloca i16, align 2
  %mb = alloca %struct.rte_mbuf*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  store i16 %len, i16* %len.addr, align 2, !tbaa !7
  %0 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %2 = bitcast %struct.network_buf_handle* %1 to %struct.rte_mbuf*
  store %struct.rte_mbuf* %2, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %3 = load i16, i16* %len.addr, align 2, !tbaa !7
  %4 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %data_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %4, i32 0, i32 12
  store i16 %3, i16* %data_len, align 8, !tbaa !66
  %conv = zext i16 %3 to i32
  %5 = load %struct.rte_mbuf*, %struct.rte_mbuf** %mb, align 8, !tbaa !5
  %pkt_len = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %5, i32 0, i32 11
  store i32 %conv, i32* %pkt_len, align 4, !tbaa !125
  %6 = bitcast %struct.rte_mbuf** %mb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @network_buf_off(%struct.network_buf_handle* %bh) #1 {
entry:
  %bh.addr = alloca %struct.network_buf_handle*, align 8
  store %struct.network_buf_handle* %bh, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %0 = load %struct.network_buf_handle*, %struct.network_buf_handle** %bh.addr, align 8, !tbaa !5
  %1 = bitcast %struct.network_buf_handle* %0 to %struct.rte_mbuf*
  %data_off = getelementptr inbounds %struct.rte_mbuf, %struct.rte_mbuf* %1, i32 0, i32 4
  %2 = load i16, i16* %data_off, align 16, !tbaa !65
  ret i16 %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-cldemote,-clwb,-clzero,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0 (trunk 341799)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !3, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"short", !3, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !3, i64 0}
!11 = !{i32 3752906}
!12 = !{!13, !14, i64 16}
!13 = !{!"flextcp_pl_flowst", !14, i64 0, !14, i64 8, !14, i64 16, !10, i64 24, !10, i64 28, !15, i64 32, !15, i64 36, !16, i64 40, !16, i64 42, !17, i64 44, !8, i64 50, !8, i64 52, !8, i64 54, !10, i64 56, !10, i64 60, !10, i64 64, !10, i64 68, !10, i64 72, !10, i64 76, !10, i64 80, !10, i64 84, !10, i64 88, !10, i64 92, !10, i64 96, !10, i64 100, !10, i64 104, !10, i64 108, !8, i64 112, !8, i64 114, !10, i64 116, !10, i64 120, !10, i64 124, !10, i64 128, !10, i64 132}
!14 = !{!"long", !3, i64 0}
!15 = !{!"beui32", !10, i64 0}
!16 = !{!"beui16", !8, i64 0}
!17 = !{!"eth_addr", !3, i64 0}
!18 = !{!13, !10, i64 92}
!19 = !{!14, !14, i64 0}
!20 = !{!13, !8, i64 52}
!21 = !{!22, !8, i64 80}
!22 = !{!"dataplane_context", !23, i64 0, !24, i64 16, !6, i64 72, !8, i64 80, !10, i64 84, !27, i64 88, !3, i64 136, !3, i64 648, !8, i64 680, !3, i64 688, !8, i64 944, !10, i64 948, !3, i64 952, !8, i64 1976, !8, i64 1978, !14, i64 1984, !14, i64 1992}
!23 = !{!"network_thread", !6, i64 0, !8, i64 8}
!24 = !{!"qman_thread", !6, i64 0, !3, i64 8, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !25, i64 40, !26, i64 48}
!25 = !{!"utils_rng", !14, i64 0}
!26 = !{!"_Bool", !3, i64 0}
!27 = !{!"rte_epoll_event", !10, i64 0, !10, i64 4, !10, i64 8, !28, i64 16}
!28 = !{!"rte_epoll_data", !10, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!29 = !{!22, !6, i64 72}
!30 = !{!13, !14, i64 8}
!31 = !{!13, !10, i64 128}
!32 = !{!13, !10, i64 96}
!33 = !{!13, !10, i64 60}
!34 = !{!13, !10, i64 68}
!35 = !{!13, !10, i64 28}
!36 = !{!13, !10, i64 88}
!37 = !{!13, !10, i64 100}
!38 = !{!13, !10, i64 104}
!39 = !{i32 3849058, i32 3849072, i32 3849104, i32 3849132, i32 3849148, i32 3849161, i32 3849177, i32 3849206, i32 3849223, i32 3849240}
!40 = !{!13, !10, i64 72}
!41 = !{!15, !10, i64 0}
!42 = !{i64 0, i64 6, !2}
!43 = !{i64 0, i64 2, !7}
!44 = !{!45, !3, i64 14}
!45 = !{!"pkt_tcp", !46, i64 0, !47, i64 14, !48, i64 34}
!46 = !{!"eth_hdr", !17, i64 0, !17, i64 6, !16, i64 12}
!47 = !{!"ip_hdr", !3, i64 0, !3, i64 1, !16, i64 2, !16, i64 4, !16, i64 6, !3, i64 8, !3, i64 9, !8, i64 10, !15, i64 12, !15, i64 16}
!48 = !{!"tcp_hdr", !16, i64 0, !16, i64 2, !15, i64 4, !15, i64 8, !8, i64 12, !16, i64 14, !8, i64 16, !16, i64 18}
!49 = !{!45, !3, i64 15}
!50 = !{!45, !3, i64 22}
!51 = !{!45, !3, i64 23}
!52 = !{!45, !8, i64 24}
!53 = !{i64 0, i64 4, !9}
!54 = !{!45, !8, i64 46}
!55 = !{!45, !8, i64 50}
!56 = !{!57, !3, i64 0}
!57 = !{!"tcp_timestamp_opt", !3, i64 0, !3, i64 1, !15, i64 2, !15, i64 6}
!58 = !{!57, !3, i64 1}
!59 = !{i32 3849456}
!60 = !{!13, !10, i64 108}
!61 = !{!62, !6, i64 0}
!62 = !{!"tcp_opts", !6, i64 0}
!63 = !{!64, !6, i64 0}
!64 = !{!"rte_mbuf", !3, i64 0, !6, i64 0, !3, i64 8, !3, i64 16, !8, i64 16, !3, i64 18, !8, i64 20, !8, i64 22, !14, i64 24, !3, i64 32, !3, i64 32, !10, i64 36, !8, i64 40, !8, i64 42, !3, i64 44, !8, i64 52, !8, i64 54, !14, i64 56, !3, i64 64, !3, i64 64, !6, i64 72, !6, i64 80, !3, i64 88, !8, i64 96, !8, i64 98, !10, i64 100}
!65 = !{!64, !8, i64 16}
!66 = !{!64, !8, i64 40}
!67 = !{!16, !8, i64 0}
!68 = !{!13, !10, i64 64}
!69 = !{!13, !8, i64 114}
!70 = !{!13, !10, i64 116}
!71 = !{!13, !10, i64 120}
!72 = !{!13, !10, i64 76}
!73 = !{!13, !10, i64 84}
!74 = !{!13, !10, i64 80}
!75 = !{!13, !10, i64 124}
!76 = !{!13, !10, i64 132}
!77 = !{!13, !8, i64 50}
!78 = !{!79, !10, i64 24}
!79 = !{!"flextcp_pl_appctx", !14, i64 0, !14, i64 8, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44}
!80 = !{!81, !8, i64 0}
!81 = !{!"flextcp_pl_appst", !8, i64 0, !3, i64 2}
!82 = !{!13, !10, i64 24}
!83 = !{!13, !14, i64 0}
!84 = !{!13, !8, i64 112}
!85 = !{!22, !8, i64 680}
!86 = !{!87, !3, i64 31}
!87 = !{!"flextcp_pl_arx", !3, i64 0, !3, i64 31}
!88 = !{!13, !8, i64 54}
!89 = !{!90, !10, i64 0}
!90 = !{!"flextcp_pl_flowhte", !10, i64 0, !10, i64 4}
!91 = !{i32 -2143328954}
!92 = !{!90, !10, i64 4}
!93 = !{i32 -2143328920}
!94 = !{!13, !10, i64 32}
!95 = !{!45, !10, i64 30}
!96 = !{!13, !10, i64 36}
!97 = !{!45, !10, i64 26}
!98 = !{!13, !8, i64 40}
!99 = !{!45, !8, i64 36}
!100 = !{!13, !8, i64 42}
!101 = !{!45, !8, i64 34}
!102 = !{!103, !8, i64 8}
!103 = !{!"flow_key", !15, i64 0, !15, i64 4, !16, i64 8, !16, i64 10}
!104 = !{!103, !8, i64 10}
!105 = !{!103, !10, i64 0}
!106 = !{!103, !10, i64 4}
!107 = !{!108, !10, i64 136}
!108 = !{!"rte_ring", !3, i64 0, !10, i64 32, !6, i64 40, !10, i64 48, !10, i64 52, !10, i64 56, !109, i64 128, !109, i64 256}
!109 = !{!"rte_ring_headtail", !10, i64 0, !10, i64 4, !10, i64 8}
!110 = !{!108, !10, i64 48}
!111 = !{!108, !10, i64 52}
!112 = !{i32 -2145957072}
!113 = !{!108, !10, i64 56}
!114 = !{!108, !10, i64 128}
!115 = !{i32 -2145958204}
!116 = !{!108, !10, i64 260}
!117 = !{!109, !10, i64 4}
!118 = !{i32 -2145981376}
!119 = !{i32 3817552}
!120 = !{i32 3817045}
!121 = !{i32 3816837}
!122 = !{i32 3816629}
!123 = !{!22, !8, i64 944}
!124 = !{!64, !14, i64 24}
!125 = !{!64, !10, i64 36}
